<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AseaBlog</title>
  <icon>https://www.gravatar.com/avatar/2ab32513ce6dc86cc9542de0cb40ddbe</icon>
  <subtitle>我的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://asea.fun/"/>
  <updated>2021-05-26T13:46:31.000Z</updated>
  <id>https://asea.fun/</id>
  
  <author>
    <name>Asea</name>
    <email>gyvip001@126.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于高考的一些思考（文素课小作业）</title>
    <link href="https://asea.fun/post/29ec6806.html"/>
    <id>https://asea.fun/post/29ec6806.html</id>
    <published>2021-05-26T13:43:53.000Z</published>
    <updated>2021-05-26T13:46:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于高考的一些思考"><a href="#关于高考的一些思考" class="headerlink" title="关于高考的一些思考"></a>关于高考的一些思考</h1><p>大二了已经，距离我的高考已经过去几近两年了。前段时间偶然翻到我在19年6月8号晚上写的小文章，方才想起当时的我俨然是一个喜欢去写东西记录感受的人。看了那篇文章什么感受呢，里面一些细节我还历历在目，但是宏观的情愫我已经体味不到了，这种感觉就像是你长大后就忘记怎么长大似的，仿佛本来是这么大。<br>那节诗歌与人生，莫名其妙地变成了一节讨论高考的课，老师以及同学都举出了不少的例子，这让我想起来我高三那段时间发生的公交坠江事件，以及各地发生的跳楼等等事件。这类事件很多，而且无一例外让我对生死感到敬畏。高中在学校能接受的信息十分有限，仅仅能从各家杂志和老师口中甚至是试卷上获取时事信息，我记得当时喜欢看《作文素材》和《看天下》之类的杂志，其实本质是什么呢，我对这个世界了解的太少了，就像信息时代还未发展起来的时候人们大都去看报和听收音机一样。我想说的是，到现在，近来的一年中，当然也发生了很多事情，我也通过各方渠道了解过很多，但无一例外，我都提不起兴趣来，我很少去深入了解那些新闻，不知道这起事故的来龙去脉，更不用提各种反转。我厌恶极了当今的各种报道，他们像一群狗一样争先恐后疯抢食物（新闻头条便是他们的粮食），不要说什么价值观导向，且看各家官方媒体都不辨是非把各种错误消息信手拈来，让舆论里面的人们经历心情的大起大落，多让人心躁。写下这些的时候，很不幸，袁隆平老先生走了，走之前却还闹了场造谣的风波，让我痛心疾首。</p><p>总而言之，现在的我，对各种新闻已经没有任何兴趣了，我不想再花费心思在它上面。</p><p>说这些是干什么的呢，因为那节课不少同学举的例子我都闻所未闻或是只是道听途说了些皮毛。我完全不敢相信他们的报道是否真实，这使我对他们的言语存疑。</p><p>说回高考，无非就是“公平！公平！还是TMD公平！”。<br>公平这件事情很容易上升到哲学层次，或者简单来说很容易成为辩题，大多都是各执己见、众说纷纭、难分伯仲最后莫衷一是。大多数人不都是自私的吗，口中的公平虚伪极了，这些人想问题只考虑到于己有利的方面。我记得有同学说到四川怎么样怎么样，我大河南每年百万考生都还没说话。居然还有人在这里提到内卷，其实我深知这些词语代表的意思。但是我觉的应该从另一种角度来考虑：大家所说的内卷不过就是所有人都做了多余的劳动，而最后得到的收益却没有增加，所有人都站起来看电影，所有人都玩命学习，最后能看见电影的还是那么多人，能考上大学的还是那么多人。于是他们开始呼吁反内卷、内卷革命。这让我哭笑不得，再本质一点，当你考虑内卷的收益的时候，你就已经狭隘了，因为你没有考虑到整体的收益，内卷得到是什么？是所有人对知识的理解都加固了，整个社会的人才知识水平提高了。换做公司，整个公司的生产力也提高了不是吗？也就是说，内卷最终造成的是上层收益增加。<br>今天还看到一个有意思的话题，说是审美是个复杂的东西，它包括了很多权力结构因素在里面，简单举个例子就是你有什么资格认为你的审美更高级？由于各家说法很多，这里不赘述。其实用这种想法去思考内卷，不也正是如此，有太多结构化的东西在里面。然而在当今社会，这种结构是必要的，所以这种现象是无法根除的，它渗透在任何地方。往大了说，也正是无处不在的内卷才推动着人类社会发展。</p><p>试想，所有人都能不用劳动，靠着大自然的恩赐过上幸福的生活，这不守恒了吧！</p><p>说到这里肯定还有人要说了，不是说我们不应该努力，而是应该最大效率的去让每个人的劳动收益最大化，我们应该去寻找更好的解决方式，而不是一味的内卷。我只想说，只要有资源就有竞争，只要竞争存在，内卷就不会缺席。<br>再说回高考，我认为急需改善的一点是，让同学们学什么、怎么学，或者更好是去考虑如何让这活生生的年轻人健健康康长大，而不是去考虑如何改变他们的竞争结构。前者比后者重要一万倍，然而又有多少人在思考前者。</p><p>以上。</p><p>另外最近看杨宁文学理论课上瘾，强推！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于高考的一些思考&quot;&gt;&lt;a href=&quot;#关于高考的一些思考&quot; class=&quot;headerlink&quot; title=&quot;关于高考的一些思考&quot;&gt;&lt;/a&gt;关于高考的一些思考&lt;/h1&gt;&lt;p&gt;大二了已经，距离我的高考已经过去几近两年了。前段时间偶然翻到我在19年6月8号晚上写的小文章，方才想起当时的我俨然是一个喜欢去写东西记录感受的人。看了那篇文章什么感受呢，里面一些细节我还历历在目，但是宏观的情愫我已经体味不到了，这种感觉就像是你长大后就忘记怎么长大似的，仿佛本来是这么大。&lt;br&gt;那节诗歌与人生，莫名其妙地变成了一节讨论高考的课，老师以及同学都举出了不少的例子，这让我想起来我高三那段时间发生的公交坠江事件，以及各地发生的跳楼等等事件。这类事件很多，而且无一例外让我对生死感到敬畏。高中在学校能接受的信息十分有限，仅仅能从各家杂志和老师口中甚至是试卷上获取时事信息，我记得当时喜欢看《作文素材》和《看天下》之类的杂志，其实本质是什么呢，我对这个世界了解的太少了，就像信息时代还未发展起来的时候人们大都去看报和听收音机一样。我想说的是，到现在，近来的一年中，当然也发生了很多事情，我也通过各方渠道了解过很多，但无一例外，我都提不起兴趣来，我很少去深入了解那些新闻，不知道这起事故的来龙去脉，更不用提各种反转。我厌恶极了当今的各种报道，他们像一群狗一样争先恐后疯抢食物（新闻头条便是他们的粮食），不要说什么价值观导向，且看各家官方媒体都不辨是非把各种错误消息信手拈来，让舆论里面的人们经历心情的大起大落，多让人心躁。写下这些的时候，很不幸，袁隆平老先生走了，走之前却还闹了场造谣的风波，让我痛心疾首。&lt;/p&gt;
&lt;p&gt;总而言之，现在的我，对各种新闻已经没有任何兴趣了，我不想再花费心思在它上面。&lt;/p&gt;
&lt;p&gt;说这些是干什么的呢，因为那节课不少同学举的例子我都闻所未闻或是只是道听途说了些皮毛。我完全不敢相信他们的报道是否真实，这使我对他们的言语存疑。&lt;/p&gt;
&lt;p&gt;说回高考，无非就是“公平！公平！还是TMD公平！”。&lt;br&gt;公平这件事情很容易上升到哲学层次，或者简单来说很容易成为辩题，大多都是各执己见、众说纷纭、难分伯仲最后莫衷一是。大多数人不都是自私的吗，口中的公平虚伪极了，这些人想问题只考虑到于己有利的方面。我记得有同学说到四川怎么样怎么样，我大河南每年百万考生都还没说话。居然还有人在这里提到内卷，其实我深知这些词语代表的意思。但是我觉的应该从另一种角度来考虑：大家所说的内卷不过就是所有人都做了多余的劳动，而最后得到的收益却没有增加，所有人都站起来看电影，所有人都玩命学习，最后能看见电影的还是那么多人，能考上大学的还是那么多人。于是他们开始呼吁反内卷、内卷革命。这让我哭笑不得，再本质一点，当你考虑内卷的收益的时候，你就已经狭隘了，因为你没有考虑到整体的收益，内卷得到是什么？是所有人对知识的理解都加固了，整个社会的人才知识水平提高了。换做公司，整个公司的生产力也提高了不是吗？也就是说，内卷最终造成的是上层收益增加。&lt;br&gt;今天还看到一个有意思的话题，说是审美是个复杂的东西，它包括了很多权力结构因素在里面，简单举个例子就是你有什么资格认为你的审美更高级？由于各家说法很多，这里不赘述。其实用这种想法去思考内卷，不也正是如此，有太多结构化的东西在里面。然而在当今社会，这种结构是必要的，所以这种现象是无法根除的，它渗透在任何地方。往大了说，也正是无处不在的内卷才推动着人类社会发展。&lt;/p&gt;
&lt;p&gt;试想，所有人都能不用劳动，靠着大自然的恩赐过上幸福的生活，这不守恒了吧！&lt;/p&gt;
&lt;p&gt;说到这里肯定还有人要说了，不是说我们不应该努力，而是应该最大效率的去让每个人的劳动收益最大化，我们应该去寻找更好的解决方式，而不是一味的内卷。我只想说，只要有资源就有竞争，只要竞争存在，内卷就不会缺席。&lt;br&gt;再说回高考，我认为急需改善的一点是，让同学们学什么、怎么学，或者更好是去考虑如何让这活生生的年轻人健健康康长大，而不是去考虑如何改变他们的竞争结构。前者比后者重要一万倍，然而又有多少人在思考前者。&lt;/p&gt;
&lt;p&gt;以上。&lt;/p&gt;
&lt;p&gt;另外最近看杨宁文学理论课上瘾，强推！&lt;/p&gt;

    
    </summary>
    
    
      <category term="文学" scheme="https://asea.fun/categories/%E6%96%87%E5%AD%A6/"/>
    
    
      <category term="literature" scheme="https://asea.fun/tags/literature/"/>
    
  </entry>
  
  <entry>
    <title>转专业面试小结</title>
    <link href="https://asea.fun/post/4d5a8c9b.html"/>
    <id>https://asea.fun/post/4d5a8c9b.html</id>
    <published>2021-05-18T05:47:26.000Z</published>
    <updated>2021-05-18T06:07:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="今天经历了第一次转专业面试"><a href="#今天经历了第一次转专业面试" class="headerlink" title="今天经历了第一次转专业面试"></a>今天经历了第一次转专业面试</h1><p>我提前一个小时到了地点，最近紧张的不行，生怕我说话太多了又条理不清晰。在机房等待叫号，很快就到我了。<br>进门不小心还绊了一跤（太憨了。。。）<br>随后我开始滔滔不绝，我还是没控制住，说完才觉得说的实在太多了！！而且又乱又紧张！<br>绩点排名只在卓越班排实在太难了，大佬都在卓班:(<br>C语言当时真的是挺好玩的，然而实在是大一懵懂没有好好学<br>其实不只C语言，大多数课程都没深入好好学，可能兴趣真的不在那吧…<br>大二做了这么多东西花了不少时间，但在面前的大佬们眼里恐怕啥也不是吧（毕竟都是些小东西）<br>老师提到solidworks还真的提醒了我，关于这个软件我想到的什么，当时说的好像啥也不是<br>但其实很简单，我觉得实现这个软件真的需要一个很庞大的体系…<br>不管是团队组织、代码之间的耦合还是什么都很艰难</p><p>完了完了，我考了二级证书我还没说，总共我就没什么证书，哭了<br>虽然这证书也没啥含金量<br>算了，自己表现…只能给个勉强及格<br>希望各位大佬高抬贵手！！<br>表现欠佳实属抱歉！！！</p><p>祈祷…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;今天经历了第一次转专业面试&quot;&gt;&lt;a href=&quot;#今天经历了第一次转专业面试&quot; class=&quot;headerlink&quot; title=&quot;今天经历了第一次转专业面试&quot;&gt;&lt;/a&gt;今天经历了第一次转专业面试&lt;/h1&gt;&lt;p&gt;我提前一个小时到了地点，最近紧张的不行，生怕我说话太多了又条理不清晰。在机房等待叫号，很快就到我了。&lt;br&gt;进门不小心还绊了一跤（太憨了。。。）&lt;br&gt;随后我开始滔滔不绝，我还是没控制住，说完才觉得说的实在太多了！！而且又乱又紧张！&lt;br&gt;绩点排名只在卓越班排实在太难了，大佬都在卓班:(&lt;br&gt;C语言当时真的是挺好玩的，然而实在是大一懵懂没有好好学&lt;br&gt;其实不只C语言，大多数课程都没深入好好学，可能兴趣真的不在那吧…&lt;br&gt;大二做了这么多东西花了不少时间，但在面前的大佬们眼里恐怕啥也不是吧（毕竟都是些小东西）&lt;br&gt;老师提到solidworks还真的提醒了我，关于这个软件我想到的什么，当时说的好像啥也不是&lt;br&gt;但其实很简单，我觉得实现这个软件真的需要一个很庞大的体系…&lt;br&gt;不管是团队组织、代码之间的耦合还是什么都很艰难&lt;/p&gt;
&lt;p&gt;完了完了，我考了二级证书我还没说，总共我就没什么证书，哭了&lt;br&gt;虽然这证书也没啥含金量&lt;br&gt;算了，自己表现…只能给个勉强及格&lt;br&gt;希望各位大佬高抬贵手！！&lt;br&gt;表现欠佳实属抱歉！！！&lt;/p&gt;
&lt;p&gt;祈祷…&lt;/p&gt;

    
    </summary>
    
    
      <category term="日常" scheme="https://asea.fun/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="life" scheme="https://asea.fun/tags/life/"/>
    
      <category term="interview" scheme="https://asea.fun/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>关于vercel私有域名无法访问</title>
    <link href="https://asea.fun/post/3548e590.html"/>
    <id>https://asea.fun/post/3548e590.html</id>
    <published>2021-05-17T14:21:28.000Z</published>
    <updated>2021-05-17T14:56:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录一下deploy在vercel上的项目忽然无法访问的问题"><a href="#记录一下deploy在vercel上的项目忽然无法访问的问题" class="headerlink" title="记录一下deploy在vercel上的项目忽然无法访问的问题"></a>记录一下deploy在vercel上的项目忽然无法访问的问题</h1><p>这几天没打开，今天偶然打开发现我的个人主页无法访问了（只是私有域名无法访问，但是vercel提供的域名毫无问题，怪哉！），看了半天控制台的域名解析没问题，又到vercel后台查了半天，实在是不行。<br>最后想起来会不会是被墙了，于是科学上网尝试了一下，居然真的成功了。<br>然而我还是不知道该怎么解决，四处询问未果。<br>最后我想会不会是因为github的这个仓库挺久没更新了，于是稍稍修改了一下html文件push上去，嘿嘿，然后就可以访问了，具体原因不清楚，至少可以进去了！！<br>由于问题来的莫名其妙，解决的也莫名其妙，不用再多说什么了。<br>另外，明天加油！（紧张ingngg)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;记录一下deploy在vercel上的项目忽然无法访问的问题&quot;&gt;&lt;a href=&quot;#记录一下deploy在vercel上的项目忽然无法访问的问题&quot; class=&quot;headerlink&quot; title=&quot;记录一下deploy在vercel上的项目忽然无法访问的问题&quot;&gt;&lt;/a&gt;记录一下deploy在vercel上的项目忽然无法访问的问题&lt;/h1&gt;&lt;p&gt;这几天没打开，今天偶然打开发现我的个人主页无法访问了（只是私有域名无法访问，但是vercel提供的域名毫无问题，怪哉！），看了半天控制台的域名解析没问题，又到vercel后台查了半天，实在是不行。&lt;br&gt;最后想起来会不会是被墙了，于是科学上网尝试了一下，居然真的成功了。&lt;br&gt;然而我还是不知道该怎么解决，四处询问未果。&lt;br&gt;最后我想会不会是因为github的这个仓库挺久没更新了，于是稍稍修改了一下html文件push上去，嘿嘿，然后就可以访问了，具体原因不清楚，至少可以进去了！！&lt;br&gt;由于问题来的莫名其妙，解决的也莫名其妙，不用再多说什么了。&lt;br&gt;另外，明天加油！（紧张ingngg)&lt;/p&gt;

    
    </summary>
    
    
      <category term="技术" scheme="https://asea.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="github" scheme="https://asea.fun/tags/github/"/>
    
      <category term="vercel" scheme="https://asea.fun/tags/vercel/"/>
    
      <category term="domain" scheme="https://asea.fun/tags/domain/"/>
    
  </entry>
  
  <entry>
    <title>关于部署机器人到linux的一些记录</title>
    <link href="https://asea.fun/post/b3542778.html"/>
    <id>https://asea.fun/post/b3542778.html</id>
    <published>2021-05-11T07:45:01.000Z</published>
    <updated>2021-05-11T08:02:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一下是我踩的坑（不完全记录）"><a href="#一下是我踩的坑（不完全记录）" class="headerlink" title="一下是我踩的坑（不完全记录）"></a>一下是我踩的坑（不完全记录）</h1><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><ol><li>从阿里云控制台直接登录（更换系统的时候可以直接选择设置好root和pw）</li><li>putty登录（我没怎么用，阿里云的网页登录居然很不错！待会再说）<h2 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h2></li><li>利用软件<code>winscp</code>，此处感谢zjy的帮助！！</li><li>不过用貌似有时候winscp和putty会断掉，可以自行百度一下怎么长时间保持连接…<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install openjdk-8-jre-headless</span><br></pre></td></tr></table></figure>安装完之后<code>java -version</code>可以查看版本<h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><blockquote><p>应该是有预装python的，输入<code>python</code>可以检测，<code>exit()</code>退出<br>更新版本</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sudo apt-get update</span><br><span class="line">$sudo apt-get install python3.8</span><br></pre></td></tr></table></figure></li></ol><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><blockquote><p>由于需要同时运行多个程序，具体可以参考<a href="https://www.jb51.net/article/165417.htm">在Linux中查看及终止正在运行的后台程序方法</a><br>但是，我看了一会觉得好麻烦！这时，我发现了阿里云远程连接的网页端居然可以多开terminal，还有各种布局，太奈斯了！<br>于是直接两个terminal搭好环境，运行<code>bot.py</code>哈哈哈，不行！缺少module（意料之中）…</p></blockquote><h3 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h3><p>我发现居然没有<code>pip</code>，那就装<br><code>sudo apt install python3-pip</code><br>重新运行<code>bot.py</code>，然后看着报错一个一个模块装，最后成功！<br>下面我要去搞我的<code>selenium</code>了，这又是个大坑…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一下是我踩的坑（不完全记录）&quot;&gt;&lt;a href=&quot;#一下是我踩的坑（不完全记录）&quot; class=&quot;headerlink&quot; title=&quot;一下是我踩的坑（不完全记录）&quot;&gt;&lt;/a&gt;一下是我踩的坑（不完全记录）&lt;/h1&gt;&lt;h2 id=&quot;登录&quot;&gt;&lt;a href=&quot;#登录&quot; class=&quot;headerlink&quot; title=&quot;登录&quot;&gt;&lt;/a&gt;登录&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;从阿里云控制台直接登录（更换系统的时候可以直接选择设置好root和pw）&lt;/li&gt;
&lt;li&gt;putty登录（我没怎么用，阿里云的网页登录居然很不错！待会再说）&lt;h2 id=&quot;文件传输&quot;&gt;&lt;a href=&quot;#文件传输&quot; class=&quot;headerlink&quot; title=&quot;文件传输&quot;&gt;&lt;/a&gt;文件传输&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;利用软件&lt;code&gt;winscp&lt;/code&gt;，此处感谢zjy的帮助！！&lt;/li&gt;
&lt;li&gt;不过用貌似有时候winscp和putty会断掉，可以自行百度一下怎么长时间保持连接…&lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h2&gt;&lt;h3 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt install openjdk-8-jre-headless&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
安装完之后&lt;code&gt;java -version&lt;/code&gt;可以查看版本&lt;h3 id=&quot;python&quot;&gt;&lt;a href=&quot;#python&quot; class=&quot;headerlink&quot; title=&quot;python&quot;&gt;&lt;/a&gt;python&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;应该是有预装python的，输入&lt;code&gt;python&lt;/code&gt;可以检测，&lt;code&gt;exit()&lt;/code&gt;退出&lt;br&gt;更新版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$sudo apt-get update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$sudo apt-get install python3.8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;运行&quot;&gt;&lt;a href=&quot;#运行&quot; class=&quot;headerlink&quot; title=&quot;运行&quot;&gt;&lt;/a&gt;运行&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;由于需要同时运行多个程序，具体可以参考&lt;a href=&quot;https://www.jb51.net/article/165417.htm&quot;&gt;在Linux中查看及终止正在运行的后台程序方法&lt;/a&gt;&lt;br&gt;但是，我看了一会觉得好麻烦！这时，我发现了阿里云远程连接的网页端居然可以多开terminal，还有各种布局，太奈斯了！&lt;br&gt;于是直接两个terminal搭好环境，运行&lt;code&gt;bot.py&lt;/code&gt;哈哈哈，不行！缺少module（意料之中）…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装库&quot;&gt;&lt;a href=&quot;#安装库&quot; class=&quot;headerlink&quot; title=&quot;安装库&quot;&gt;&lt;/a&gt;安装库&lt;/h3&gt;&lt;p&gt;我发现居然没有&lt;code&gt;pip&lt;/code&gt;，那就装&lt;br&gt;&lt;code&gt;sudo apt install python3-pip&lt;/code&gt;&lt;br&gt;重新运行&lt;code&gt;bot.py&lt;/code&gt;，然后看着报错一个一个模块装，最后成功！&lt;br&gt;下面我要去搞我的&lt;code&gt;selenium&lt;/code&gt;了，这又是个大坑…&lt;/p&gt;

    
    </summary>
    
    
      <category term="技术" scheme="https://asea.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux" scheme="https://asea.fun/tags/linux/"/>
    
      <category term="robot" scheme="https://asea.fun/tags/robot/"/>
    
  </entry>
  
  <entry>
    <title>部署robot+selenium的坑</title>
    <link href="https://asea.fun/post/90946297.html"/>
    <id>https://asea.fun/post/90946297.html</id>
    <published>2021-05-08T12:46:25.000Z</published>
    <updated>2021-05-09T16:27:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录一下部署robot-selenium的坑"><a href="#记录一下部署robot-selenium的坑" class="headerlink" title="记录一下部署robot+selenium的坑"></a>记录一下部署robot+selenium的坑</h1><ol><li><code>no module ... cv2.cv2</code><br><strong>SOLUTION</strong>: <code>pip uninstall opencv-python``pip install opencv-python</code></li><li><code>...tensorflow</code><br><strong>SOLUTION</strong>: <code>pip uninstall tensorflow``pip install tensorflow</code><blockquote><p>其余相关问题例如<code>numpy</code>等都可以通过重装模块解决。</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;记录一下部署robot-selenium的坑&quot;&gt;&lt;a href=&quot;#记录一下部署robot-selenium的坑&quot; class=&quot;headerlink&quot; title=&quot;记录一下部署robot+selenium的坑&quot;&gt;&lt;/a&gt;记录一下部署robot+selenium的坑&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;no module ... cv2.cv2&lt;/code&gt;&lt;br&gt;&lt;strong&gt;SOLUTION&lt;/strong&gt;: &lt;code&gt;pip uninstall opencv-python``pip install opencv-python&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;...tensorflow&lt;/code&gt;&lt;br&gt;&lt;strong&gt;SOLUTION&lt;/strong&gt;: &lt;code&gt;pip uninstall tensorflow``pip install tensorflow&lt;/code&gt;&lt;blockquote&gt;
&lt;p&gt;其余相关问题例如&lt;code&gt;numpy&lt;/code&gt;等都可以通过重装模块解决。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;

    
    </summary>
    
    
      <category term="技术" scheme="https://asea.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="robot" scheme="https://asea.fun/tags/robot/"/>
    
      <category term="selenium" scheme="https://asea.fun/tags/selenium/"/>
    
      <category term="muggle_ocr" scheme="https://asea.fun/tags/muggle-ocr/"/>
    
      <category term="cv2" scheme="https://asea.fun/tags/cv2/"/>
    
  </entry>
  
  <entry>
    <title>mirai+Graia编写聊天机器人</title>
    <link href="https://asea.fun/post/a5130995.html"/>
    <id>https://asea.fun/post/a5130995.html</id>
    <published>2021-05-07T13:55:05.000Z</published>
    <updated>2021-05-07T14:09:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文作者： YOOZIKI<br> 本文链接： <a href="https://yooziki.github.io/2020/08/297095/">https://yooziki.github.io/2020/08/297095/</a></p></blockquote><h2 id="Python版本：py37"><a href="#Python版本：py37" class="headerlink" title="Python版本：py37"></a>Python版本：py37</h2><p>安装相关模块，<a href="https://github.com/GraiaProject/Application">源码在这里</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install graia-application-mirai</span><br><span class="line">pip install graia-broadcast --upgrade</span><br><span class="line">pip install singledispatchmethod</span><br></pre></td></tr></table></figure><p>添加选择器子模块</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install graia-component-selector</span><br></pre></td></tr></table></figure><h2 id="mirai环境配置"><a href="#mirai环境配置" class="headerlink" title="mirai环境配置"></a>mirai环境配置</h2><h3 id="自定义方式-推荐"><a href="#自定义方式-推荐" class="headerlink" title="自定义方式(推荐)"></a>自定义方式(推荐)</h3><p>在<a href="https://github.com/project-mirai/mirai-repo">mirai仓库中</a>的<code>shadow</code>下找到对应的包体并下载</p><blockquote><p>如果出现无法下载的情况下载文件时将<a href="https://github.com替换成http://github-proxy.yobot.win即可">https://github.com替换成http://github-proxy.yobot.win即可</a></p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;tmp</span><br><span class="line">wget -N -O shadowsocks.tar.gz http:&#x2F;&#x2F;github-proxy.yobot.win&#x2F;heweiye&#x2F;Merlin_Shadowsocks&#x2F;master&#x2F;shadowsocks_3.8.0.tar.gz</span><br><span class="line">tar -zxvf &#x2F;tmp&#x2F;shadowsocks.tar.gz</span><br><span class="line">chmod +x &#x2F;tmp&#x2F;shadowsocks&#x2F;install.sh</span><br><span class="line">sh &#x2F;tmp&#x2F;shadowsocks&#x2F;install.sh</span><br></pre></td></tr></table></figure><p>经测试的可用版本:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console &#x3D; &quot;mirai-console-1.0-M4-dev-3.jar&quot;</span><br><span class="line">pure &#x3D; &quot;mirai-console-pure-1.0-M4-dev-3.jar&quot;</span><br><span class="line">qqandroid &#x3D; &quot;mirai-core-qqandroid-1.2.3.jar&quot;</span><br><span class="line">mirai-api-http &#x3D; &quot;mirai-api-http-v1.8.2.jar&quot;</span><br><span class="line">java &#x3D; &quot;jdk8u265-b01&quot;</span><br></pre></td></tr></table></figure><p>使用简易的python启动器即可启动，首次启动后会创建一系列文件夹，使用<code>stop</code>命令正常停止，将<code>mirai-api-http</code>放到<code>plugins</code>下，再次启动plugins会自动生成配置文件存放在<code>config\MiraiAPIHTTP</code>下，使用文本方式打开后可以修改其中的一些配置，完成后再次用<code>stop</code>命令正常停止，之后使用：<code>login user passwd</code>登录即可</p><p>强行停止mirai会造成<code>mirai-api-http</code>没有结束的问题，如果出现请在任务管理器中关闭<code>OpenJDK Platform binary</code>进程</p><blockquote><p>建议只修改autuKey增加安全性，其它改动可能会造成Graia无法连接</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">#-*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from os import system, path, makedirs, listdir</span><br><span class="line"></span><br><span class="line">content &#x3D; &quot;.&#x2F;content&quot;</span><br><span class="line"></span><br><span class="line">console &#x3D; &quot;mirai-console-1.0-M4-dev-3.jar&quot;</span><br><span class="line">pure &#x3D; &quot;mirai-console-pure-1.0-M4-dev-3.jar&quot;</span><br><span class="line">qqandroid &#x3D; &quot;mirai-core-qqandroid-1.2.3.jar&quot;</span><br><span class="line">jar_name &#x3D; &#123;console, pure, qqandroid&#125;</span><br><span class="line"></span><br><span class="line">def init(content, jar_name):</span><br><span class="line">    print(&quot;初始化中...&quot;)</span><br><span class="line">    if not path.exists(content):</span><br><span class="line">        makedirs(content)</span><br><span class="line">        raise ValueError(f&quot;请在 &#123;content&#125; 文件夹中放入 &#123;console&#125;, &#123;pure&#125;, &#123;qqandroid&#125; 可在 &#39;https:&#x2F;&#x2F;github.com&#x2F;project-mirai&#x2F;mirai-repo&#39; 处下载&quot;)</span><br><span class="line"></span><br><span class="line">    c &#x3D; set()</span><br><span class="line">    for i in listdir(content):</span><br><span class="line">        if i in (console, pure, qqandroid):</span><br><span class="line">            c.add(i)</span><br><span class="line"></span><br><span class="line">    if len(c) &lt; 3:</span><br><span class="line">        raise ValueError(&quot;目录 &#123;content&#125; 中缺少↓ \n&#123;data&#125;\n可在 &#39;https:&#x2F;&#x2F;github.com&#x2F;project-mirai&#x2F;mirai-repo&#39; 处下载&quot;.format(</span><br><span class="line">            content&#x3D;content,</span><br><span class="line">            data&#x3D;&#39;, &#39;.join(jar_name - c)</span><br><span class="line">        ))</span><br><span class="line">    print(&quot;开始启动 mirai-console ...&quot;)</span><br><span class="line"></span><br><span class="line">def run(content, JClass):</span><br><span class="line">    try:</span><br><span class="line">        system(f&quot;java -cp &#123;content&#125;&#x2F;* &#123;JClass&#125;&quot;)</span><br><span class="line">    except KeyboardInterrupt:</span><br><span class="line">        print(&quot;手动关闭 mirai...&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    init(content, jar_name)</span><br><span class="line">    run(content, &#39;&quot;net.mamoe.mirai.console.pure.MiraiConsolePureLoader&quot;&#39;)</span><br></pre></td></tr></table></figure><h3 id="mirua方式（一键懒人包）"><a href="#mirua方式（一键懒人包）" class="headerlink" title="mirua方式（一键懒人包）"></a>mirua方式（一键懒人包）</h3><p>可以在<a href="https://github.com/ieew/mirua">这里获得</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git colne https:&#x2F;&#x2F;github.com&#x2F;ieew&#x2F;mirua</span><br></pre></td></tr></table></figure><h3 id="miraiOK方式"><a href="#miraiOK方式" class="headerlink" title="miraiOK方式"></a>miraiOK方式</h3><p>首先找到<a href="https://github.com/LXY1226/MiraiOK">miraiOK仓库</a>或者使用<a href="https://github.com/yooziki/MiraiOK">我的fork仓库</a>并且根据说明文件下载可执行程序到miraoOK目录下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;LXY1226&#x2F;MiraiOK</span><br></pre></td></tr></table></figure><p>执行对应的可执行文件，等待第一次执行结束</p><blockquote><p>为了保证程序的正确性，第一次执行结束后，请创建一个<strong>.nonupdate</strong>文件禁用更新功能，或者可以试试更新一次会不会出问题</p></blockquote><p>对应的mirai相关jar包可以在<a href="https://github.com/project-mirai/mirai-repo">这里查看</a></p><p>执行第一次之后，在miraiOK的目录下会有一个<code>plugins</code>文件夹，将<code>mirai-api-http-version.jar</code>包放到这里，插件<a href="https://github.com/project-mirai/mirai-api-http">源码</a></p><blockquote><p>如果miraiOK给到的./content/中mirai-core版本为1.0一下，则只能使用1.7版本的mirai-api-http</p></blockquote><p>为了保证py程序的正确运行，再次运行可执行文件</p><p>然后回到<code>plugins</code>文件夹下，新生成了一个文件夹，里面有一个yml配置文件，使用txt方式打开即可。(如果没有生成文件夹，则手动创建<code>./MiraiAPIHTTP/setting.yml</code>)</p><p>写入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##该配置为分段配置，对所有会话有效</span><br><span class="line"></span><br><span class="line">#Graia只能是0.0.0.0</span><br><span class="line">主机: “ 0.0.0.0 ”</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">端口: 8080</span><br><span class="line"></span><br><span class="line">#Graia需要手动指定，并且和py中保持一致</span><br><span class="line">authKey: 123456780</span><br><span class="line"></span><br><span class="line">#任选，缓存大小，预设4096.缓存过小会导致引用回复和撤回消息失败</span><br><span class="line">cacheSize: 4096</span><br><span class="line"></span><br><span class="line">#任选，是否开启websocket，更改关闭，建议通过会话范围的配置设置</span><br><span class="line">enableWebsocket: true</span><br><span class="line"></span><br><span class="line">#任选，配置CORS跨域，交替为*，即允许所有，可以不做更改</span><br><span class="line">域名cors:</span><br><span class="line">  - &#39; * &#39;</span><br></pre></td></tr></table></figure><p>如果希望每次都自动登录，可以在miraiOK更目录下的<code>config.txt</code>中根据模板提示写入内容</p><h1 id="程序框架"><a href="#程序框架" class="headerlink" title="程序框架"></a>程序框架</h1><p>可以从<a href="https://graiaproject.github.io/Application/#/README">这里查看</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 所有事件监听都在entry中可以找到</span><br><span class="line">from graia.application.entry import (</span><br><span class="line">    GraiaMiraiApplication, Session,</span><br><span class="line">    MessageChain,Group,Friend,Member,MemberInfo,</span><br><span class="line">    Plain,Image,AtAll,At,Face</span><br><span class="line">)</span><br><span class="line">from graia.application.entry import (</span><br><span class="line">    BotMuteEvent,BotGroupPermissionChangeEvent</span><br><span class="line">)</span><br><span class="line">from graia.broadcast import Broadcast</span><br><span class="line">#from graia.template import Template     # 模板功能</span><br><span class="line">#from graia.component import Components  # 检索器</span><br><span class="line"></span><br><span class="line">import asyncio</span><br><span class="line">from pathlib import Path</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 监听</span><br><span class="line">loop &#x3D; asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line">bcc &#x3D; Broadcast(loop&#x3D;loop)</span><br><span class="line">app &#x3D; GraiaMiraiApplication(</span><br><span class="line">    broadcast&#x3D;bcc,</span><br><span class="line">    connect_info&#x3D;Session(</span><br><span class="line">        host&#x3D;&quot;http:&#x2F;&#x2F;localhost:8080&quot;,  # 填入 httpapi 服务运行的地址，如果根据我的配置的话可以不做修改</span><br><span class="line">        authKey&#x3D;&quot;1234567890&quot;,  # 填入 authKey</span><br><span class="line">        account&#x3D;1111111,  # 你的机器人的 qq 号</span><br><span class="line">        websocket&#x3D;True  # Graia 已经可以根据所配置的消息接收的方式来保证消息接收部分的正常运作.</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>其中的<code>bcc</code>是一个广播，会将从miraiOK获得的信息在程序内广播传递。</p><p><code>app</code>是一个像mirai框架传递信息的通道</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 写入监听事件handler</span><br><span class="line">@bcc.receiver(&quot;FriendMessage&quot;)</span><br><span class="line">async def friend_message_listener(app: GraiaMiraiApplication, friend: Friend):</span><br><span class="line">    await app.sendFriendMessage(friend, MessageChain.create([</span><br><span class="line">        Plain(&quot;谢谢, 非常感谢你对我们服务的满意.&quot;)</span><br><span class="line">    ]))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 程序固定尾</span><br><span class="line">app.launch_blocking()</span><br></pre></td></tr></table></figure><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="MessageChain"><a href="#MessageChain" class="headerlink" title="MessageChain"></a>MessageChain</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from graia.application.message.chain import MessageChain</span><br></pre></td></tr></table></figure><p>用于处理消息的数据结构，包含一个有序列表</p><ul><li>MessageChain.asDisplay()<br>得到字符串形式的消息表示，返回字符串</li><li>MessageChain.<strong>root</strong><br>返回消息链列表</li><li>MessageChain.<strong>doc</strong><br>返回消息链的API文档说明</li><li>MessageChain.<strong>module</strong><br>返回消息链的模块绝对引用</li><li>MessageChain.create(&lt;list/tuple&gt;)<br>创建一个消息链结构，其中list/tuple可以包含能够获取的类型元素，返回创建的消息链</li><li>MessageChain.isImmutable()<br>判断消息链是否为可变，可变返回<code>True</code>，不可变返回<code>False</code>，默认接受的消息为不可变</li><li>MessageChain.asMutable()<br>将消息链转换为可变的，返回可变的消息链</li><li>MessageChain.isSendable()<br>检查消息链是否可以被正确发送，可发送返回<code>True</code>，不可发送返回<code>False</code></li><li>MessageChain.asSendable()<br>将消息链转换为可以发送的新消息链，返回可能可以正确发送的消息链</li><li>MessageChain.has(T)<br>消息链中是否存在某种消息元素，亦可使用<strong>T in MessageChain</strong><br>如果有则返回<code>True</code>否则返回<code>False</code></li><li>MessageChain.get(T)<br>取出消息链中某种消息元素，以列表方式返回<br>亦可以使用<strong>MessageChain[T]</strong></li><li>MessageChain.join(*MessageChains)<br>将多个MessageChain按顺序拼合“<br>返回拼合后的消息链</li><li>MessageChain.plusWith(*MessageChain)<br>方法将在现有的基础上将另一消息链拼接到原来实例的尾部, 并生成, 返回新的实例; 该方法不改变原有和传入的实例.</li><li>MessageChain.plus(*MessageChain)<br>方法将在现有的基础上将另一消息链拼接到原来实例的尾部; 该方法更改了原有的实例, 并要求 <code>isMutable</code> 方法返回 <code>True</code> 才可以执行.</li><li>MessageChain.asSerializationString()<br>将消息链对象转为以 “Mirai 码” 表示特殊对象的字符串<br>返回字符串</li><li>MessageChain.fromSerializationString(string)<br>将以 “Mirai 码” 表示特殊对象的字符串解析为消息链, 不过可能不完整<br>返回消息链，不可变</li><li>MessageChain.asMerged()<br>把相邻的Plain元素合并为一个Plain元素</li><li>MessageChain.subchain(slice)<br>切片操作<br>类似list切片方式<br>返回切片后的MessageChain</li><li>MessageChain.exclude(T)<br>将消息链中某种元素排除<br>返回新的消息链</li><li>MessageChain.include(T)<br>只保留消息链中某种元素<br>返回新消息链</li></ul><h2 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import graia.application.message.elements.internal as Elements</span><br></pre></td></tr></table></figure><ul><li><p>Elements.Plain(string)<br>实例化一个Plain元素，用于承载消息中的文字</p></li><li><p>Elements.Source<br>表示消息在一个特定聊天区域内的唯一标识，收到的消息链中存在，只能够获取</p></li><li><p>Elements.Quote(id,groupID,senderID,targetID,origin)<br>表示消息中回复功能，<br>id:回复的消息在群内的唯一标识，通过Elements.Source得到<br>groupID:群号<br>senderID:原消息发送人<br>targetID:群号<br>oringin:发送的消息链</p><blockquote><p>消息链中应该有：原消息链的<strong><strong>root</strong>列表, At(type=‘At’,target=qq号,display=’@谁谁谁(群内id)’), Plain(’ ‘),Plain(“内容”)</strong></p></blockquote></li><li><p><a href="http://elements.at/">Elements.At</a>(id)<br>表示@某人</p></li><li><p>Elements.AtAll()<br>管理员有效，@全体成员</p></li><li><p>Elements.Face(id)<br>表示一个表现，QQ内置的表情，id是表情的id</p></li><li><p>Elements.ImageType(Enum)<br>Friend = “Friend”<br>Group = “Group”<br>Temp = “Temp”<br>Unknown = “Unknow”<br>是一个类型的定义，不需要直接调用</p></li><li><p>Elements.Image()<br>imageID:是一个16进制字符串<br>url:链接位置<br>path<br>type:图片属于哪里(ImageType定义)<br>[关于Image的方法](# Image)</p></li><li><p>Elements.FlashImage(Image)<br>发送闪照，需要先通过Image方法创建一个Image对象<br>亦可以直接<code>Image.asFlash()</code></p></li><li><p>Elements.Xml(str)<br>xml消息</p></li><li><p>Elements.Json(str)</p></li><li><p>Elements.App(str)<br>app消息</p></li><li><p>Elements.PokeMethods(Enum)<br>是一个类型定义，不需要直接调用<br>Poke = “Poke”<br>ShowLove = “ShowLove”<br>Like =“Like”<br>Heartbroken=“Heartbroken”<br>SixSixSix=“SixSixSix”<br>FangDaZhao = “FangDaZhao”</p></li><li><p>Elements.Poke(PokeMethods)</p></li></ul><h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from graia.application.message.elements.internal import Image</span><br></pre></td></tr></table></figure><p>[返回到Elements](# Elements)</p><ul><li>Image.fromLoacalFile(filepath)<br>从本地获取一张图片<br>返回ShadowElement，包含了一个asFlash方法，可以作为闪照发送<code>Image.fromLocalFile(path).asFlash()</code></li><li>Image.fromUnsafePath(filepath)<br>不检查路径安全性，让上层协议(mirai-api-http)处理图片文件</li><li>Image.fromUnsafeBytes()<br>从不保证有效性的bytes中创建一个ShadowElement，并且上传，同样包含一个asFlash方法<br>不推荐，安全性低</li><li>Image.fromNetworkAddress(url)<br>从不保证有效性的网络位置中创建一个ShadowElement，在发送的时候从url获得图片并且上传<br>可能抛出任何形式的网络错误<br>可以使用asFlash方法</li><li>Image.fromUnsafeAddress(url)<br>让上层协议(mirai-apii-http)处理图片文件</li><li>Image.asDisplay()<br>返回字符串”[图片]”</li><li>Image.http_to_bytes(url)<br>从远端服务器获取图片的 bytes, 注意, 你无法获取并不包含 url 属性的本元素的 bytes</li><li>Image.asFlash()<br>设为闪照发送</li><li>Image.asSerializationString()<br>将消息链对象转为以 “Mirai 码” 表示特殊对象的字符串</li></ul><h2 id="Massages"><a href="#Massages" class="headerlink" title="Massages"></a>Massages</h2><p>定义了几种消息的类型</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import graia.application.event.messages as Messages</span><br></pre></td></tr></table></figure><ul><li>FriendMessage<br>好友对话事件</li><li>GroupMessage<br>群对话事件</li><li>TempMessage<br>临时对话事件</li></ul><h2 id="Friend模块"><a href="#Friend模块" class="headerlink" title="Friend模块"></a>Friend模块</h2><p>定义了friend的几种属性,需要在监听中声明</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from graia.application.friend import Friend</span><br></pre></td></tr></table></figure><ul><li>id:qq号</li><li>nickname:昵称</li><li><code>remark:好像访问不到？？</code></li></ul><h2 id="Group模块"><a href="#Group模块" class="headerlink" title="Group模块"></a>Group模块</h2><p>定义了group的一些属性,需要在监听中声明，例如：<code>async def group_message_handler(app: GraiaMiraiApplication, message: MessageChain, group: Group,member: Member):</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import graia.application.group as Group</span><br></pre></td></tr></table></figure><h3 id="Group-Group"><a href="#Group-Group" class="headerlink" title="Group.Group"></a>Group.Group</h3><ul><li><a href="http://group.group.id/">Group.Group.id</a>:群id</li><li><a href="http://group.group.name/">Group.Group.name</a>:群名称</li><li>Group.Group.accountPerm:账号在群中的权限</li></ul><h3 id="Group-MemberPerm"><a href="#Group-MemberPerm" class="headerlink" title="Group.MemberPerm"></a>Group.MemberPerm</h3><p>作为字典枚举，并不需要主动调用</p><ul><li>.Member # 普通成员</li><li>.Administrator # 管理员</li><li>.Owner # 群主</li></ul><h3 id="Group-Member"><a href="#Group-Member" class="headerlink" title="Group.Member"></a>Group.Member</h3><p>描述用户在群组中所具备的有关状态，包括所在群组，群中昵称，所具备的权限，唯一的ID</p><ul><li>.id:说话人的QQ号</li><li>.name:说话人的群昵称</li><li>.permission:说话人的权限等级</li><li>.group:上面的Group.Group所有内容</li></ul><h3 id="Group-GroupConfig"><a href="#Group-GroupConfig" class="headerlink" title="Group.GroupConfig"></a>Group.GroupConfig</h3><p>描述群内各项功能的设置(使用方法不明)</p><ul><li>name</li><li>announcement</li><li>confessTalk</li><li>allowMemberInvite</li><li>autoApprove</li><li>anonymousChat</li></ul><h3 id="Group-MemberInfo"><a href="#Group-MemberInfo" class="headerlink" title="Group.MemberInfo"></a>Group.MemberInfo</h3><p>描述群组成员的可修改状态，修改需要权限(使用方法不明)</p><ul><li>name</li><li>specialTitle</li></ul><h2 id="GraiaMiraiApplication类"><a href="#GraiaMiraiApplication类" class="headerlink" title="GraiaMiraiApplication类"></a>GraiaMiraiApplication类</h2><p>大多数的功能都被存在这个类中</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from graia.application import GraiaMiraiApplication</span><br></pre></td></tr></table></figure><h3 id="getVersion"><a href="#getVersion" class="headerlink" title=".getVersion()"></a>.getVersion()</h3><p>返回<code>mirai-api-http</code>的版本</p><h3 id="getGroup-int"><a href="#getGroup-int" class="headerlink" title=".getGroup(int)"></a>.getGroup(int)</h3><p>返回对应群号的群组信息(为空则None)<br>id,name,accountPerm<code>print(app.getGroup(&lt;Id&gt;))</code></p><h3 id="groupList"><a href="#groupList" class="headerlink" title=".groupList()"></a>.groupList()</h3><p><code>print(await app.groupList())</code></p><h3 id="getMember-Group-int-member-int"><a href="#getMember-Group-int-member-int" class="headerlink" title=".getMember(Group int,member int)"></a>.getMember(Group int,member int)</h3><p>从已知群组和已知成员的id获得成员的信息</p><p><code>print(await app.getMember(&lt;ID&gt;,&lt;ID&gt;))</code></p><h3 id="memberList-Group-int"><a href="#memberList-Group-int" class="headerlink" title=".memberList(Group int)"></a>.memberList(Group int)</h3><p>从已知群组中获取群内所有成员的信息列表</p><h3 id="friendList"><a href="#friendList" class="headerlink" title=".friendList()"></a>.friendList()</h3><p>获取所有好友的信息列表</p><p><code>print(await app.friendList())</code></p><h3 id="getFriend-int"><a href="#getFriend-int" class="headerlink" title=".getFriend(int)"></a>.getFriend(int)</h3><p>根据好友的id获取Friend实例</p><h3 id="sendFriendMessage-Friend-MessageChain-quote"><a href="#sendFriendMessage-Friend-MessageChain-quote" class="headerlink" title=".sendFriendMessage(Friend,MessageChain[,quote])"></a>.sendFriendMessage(Friend,MessageChain[,quote])</h3><p>向好友发送消息,quote为回复信息断，可以选择</p><h3 id="sendGroupMessage-Group-MessageChain-quote"><a href="#sendGroupMessage-Group-MessageChain-quote" class="headerlink" title=".sendGroupMessage(Group,MessageChain[,quote])"></a>.sendGroupMessage(Group,MessageChain[,quote])</h3><p>向群组发送消息</p><h3 id="sendTempMessage-Group-ID-Member-ID-messageChain-quote"><a href="#sendTempMessage-Group-ID-Member-ID-messageChain-quote" class="headerlink" title=".sendTempMessage(Group/ID,Member/ID,messageChain[,quote])"></a>.sendTempMessage(Group/ID,Member/ID,messageChain[,quote])</h3><p>向群内成员发起临时会话</p><h3 id="revokeMessage-target"><a href="#revokeMessage-target" class="headerlink" title=".revokeMessage(target)"></a>.revokeMessage(target)</h3><p>撤回消息(2min以内)</p><p>target (Union[Source, BotMessage, int]): 特定信息的 <code>messageId</code>, 可以是 <code>Source</code> 实例, <code>BotMessage</code> 实例或者是单纯的 int 整数.</p><h3 id="messageFromId-source-Source-int"><a href="#messageFromId-source-Source-int" class="headerlink" title=".messageFromId(source[Source, int])"></a>.messageFromId(source[Source, int])</h3><p>尝试从已知的 <code>messageId</code> 获取缓存中的消息</p><h3 id="muteAll-group-amp-unmuteAll-group"><a href="#muteAll-group-amp-unmuteAll-group" class="headerlink" title=".muteAll(group)&amp;.unmuteAll(group)"></a>.muteAll(group)&amp;.unmuteAll(group)</h3><p>全员禁言</p><h3 id="mute-group-member-time-、unmute-group-membder"><a href="#mute-group-member-time-、unmute-group-membder" class="headerlink" title=".mute(group,member,time)、unmute(group,membder)"></a>.mute(group,member,time)、unmute(group,membder)</h3><p>禁言指定群友</p><p>time指禁言时长</p><h3 id="kick-group-membder"><a href="#kick-group-membder" class="headerlink" title=".kick(group,membder)"></a>.kick(group,membder)</h3><p>群内踢掉某人</p><h3 id="quit-group"><a href="#quit-group" class="headerlink" title=".quit(group)"></a>.quit(group)</h3><p>退群</p><h2 id="Event模块"><a href="#Event模块" class="headerlink" title="Event模块"></a>Event模块</h2><p>通过Graia.application.entry可以导入MiraiApiHttp支持的所有事件类型</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from graia.application.entry import (</span><br><span class="line">   *</span><br><span class="line">)</span><br><span class="line">@bcc.receiver(&quot;xxxEvent&quot;)</span><br><span class="line">async def function(event:xxxEvent):</span><br><span class="line">    print(&quot;EventHappened&quot;)</span><br><span class="line">    event.&lt;可选获得参数&#x2F;方法&gt;</span><br></pre></td></tr></table></figure><h3 id="BotOnlineEvent"><a href="#BotOnlineEvent" class="headerlink" title="BotOnlineEvent"></a>BotOnlineEvent</h3><p>当该事件发生时, 应用实例所辖账号登录成功<br>qq: int</p><h3 id="BotOfflineEventActive"><a href="#BotOfflineEventActive" class="headerlink" title="BotOfflineEventActive"></a>BotOfflineEventActive</h3><p>当该事件发生时, 应用实例所辖账号主动离线<br>qq: int</p><h3 id="BotOfflineEventForce"><a href="#BotOfflineEventForce" class="headerlink" title="BotOfflineEventForce"></a>BotOfflineEventForce</h3><p>当该事件发生时, 应用实例所辖账号被迫离线<br>qq: int</p><h3 id="BotOfflineEventDropped"><a href="#BotOfflineEventDropped" class="headerlink" title="BotOfflineEventDropped"></a>BotOfflineEventDropped</h3><p>当该事件发生时, 应用实例所辖账号与服务器的连接被服务器主动断开, 或因网络原因离线<br>qq: int</p><h3 id="BotReloginEvent"><a href="#BotReloginEvent" class="headerlink" title="BotReloginEvent"></a>BotReloginEvent</h3><p>当该事件发生时, 应用实例所辖账号正尝试重新登录<br>qq: int</p><h3 id="BotGroupPermissionChangeEvent"><a href="#BotGroupPermissionChangeEvent" class="headerlink" title="BotGroupPermissionChangeEvent"></a>BotGroupPermissionChangeEvent</h3><p>当该事件发生时, 应用实例所辖账号在一特定群组内所具有的权限发生变化<br>origin: MemberPerm<br>current: MemberPerm<br>group: Group</p><h3 id="BotMuteEvent"><a href="#BotMuteEvent" class="headerlink" title="BotMuteEvent"></a>BotMuteEvent</h3><p>当该事件发生时, 应用实例所辖账号在一特定群组内被管理员/群主禁言</p><blockquote><p>Allowed Extra Parameters(提供的额外注解支持):<br>GraiaMiraiApplication (annotation): 发布事件的应用实例<br>Member (annotation, optional = None): 执行解除禁言操作的管理员/群主, 若为 None 则为应用实例所辖账号操作<br>Group (annotation, optional = None): 发生该事件的群组</p></blockquote><p>durationSeconds: int<br>operator: Optional[Member]</p><h3 id="BotUnmuteEvent"><a href="#BotUnmuteEvent" class="headerlink" title="BotUnmuteEvent"></a>BotUnmuteEvent</h3><p>当该事件发生时, 应用实例所辖账号在一特定群组内被管理员/群主解除禁言<br>operator: Optional[Member]</p><h3 id="BotJoinGroupEvent"><a href="#BotJoinGroupEvent" class="headerlink" title="BotJoinGroupEvent"></a>BotJoinGroupEvent</h3><p>当该事件发生时, 应用实例所辖账号加入指定群组<br>group: Group</p><h3 id="BotLeaveEventActive"><a href="#BotLeaveEventActive" class="headerlink" title="BotLeaveEventActive"></a>BotLeaveEventActive</h3><p>当该事件发生时, 应用实例所辖账号主动退出了某群组.<br>group: Group</p><h3 id="BotLeaveEventKick"><a href="#BotLeaveEventKick" class="headerlink" title="BotLeaveEventKick"></a>BotLeaveEventKick</h3><p>当该事件发生时, 应用实例所辖账号被某群组的管理员/群主从该群组中删除.<br>group: Group</p><h3 id="GroupRecallEvent"><a href="#GroupRecallEvent" class="headerlink" title="GroupRecallEvent"></a>GroupRecallEvent</h3><p>当该事件发生时, 有群成员在指定群组撤回了一条消息<br>注意, 这里的群成员若具有管理员/群主权限, 则他们可以撤回其他普通群员的消息, 且不受发出时间限制<br>authorId: int<br>messageId: int<br>time: datetime<br>group: Group<br>operator: Optional[Member]</p><h3 id="FriendRecallEvent"><a href="#FriendRecallEvent" class="headerlink" title="FriendRecallEvent"></a>FriendRecallEvent</h3><p>当该事件发生时, 有一位与应用实例所辖账号为好友关系的用户撤回了一条消息<br>authorId: int<br>messageId: int<br>time: int<br>operator: int</p><h3 id="GroupNameChangeEvent"><a href="#GroupNameChangeEvent" class="headerlink" title="GroupNameChangeEvent"></a>GroupNameChangeEvent</h3><p>该事件发生时, 有一群组被修改了群名称<br>origin: str<br>current: str<br>group: Group<br>operator: Optional[Member] = None</p><h3 id="GroupEntranceAnnouncementChangeEvent"><a href="#GroupEntranceAnnouncementChangeEvent" class="headerlink" title="GroupEntranceAnnouncementChangeEvent"></a>GroupEntranceAnnouncementChangeEvent</h3><p>该事件发生时, 有一群组被修改了入群公告<br>origin: str<br>current: str<br>group: Group<br>operator: Optional[Member]</p><h3 id="GroupMuteAllEvent"><a href="#GroupMuteAllEvent" class="headerlink" title="GroupMuteAllEvent"></a>GroupMuteAllEvent</h3><p>该事件发生时, 有一群组开启了全体禁言<br>origin: bool<br>current: bool<br>group: Group<br>operator: Optional[Member]</p><h3 id="GroupAllowAnonymousChatEvent"><a href="#GroupAllowAnonymousChatEvent" class="headerlink" title="GroupAllowAnonymousChatEvent"></a>GroupAllowAnonymousChatEvent</h3><p>该事件发生时, 有一群组修改了有关匿名聊天的相关设定<br>origin: bool<br>current: bool<br>group: Group<br>operator: Optional[Member]</p><h3 id="GroupAllowConfessTalkEvent"><a href="#GroupAllowConfessTalkEvent" class="headerlink" title="GroupAllowConfessTalkEvent"></a>GroupAllowConfessTalkEvent</h3><p>该事件发生时, 有一群组修改了有关坦白说的相关设定<br>origin: bool<br>current: bool<br>group: Group<br>isByBot: bool</p><h3 id="GroupAllowMemberInviteEvent"><a href="#GroupAllowMemberInviteEvent" class="headerlink" title="GroupAllowMemberInviteEvent"></a>GroupAllowMemberInviteEvent</h3><p>该事件发生时, 有一群组修改了有关是否允许已有成员邀请其他用户加入群组的相关设定<br>origin: bool<br>current: bool<br>group: Group<br>operator: Optional[Member]</p><h3 id="MemberJoinEvent"><a href="#MemberJoinEvent" class="headerlink" title="MemberJoinEvent"></a>MemberJoinEvent</h3><p>该事件发生时, 有一新成员加入了一特定群组<br>member: Member</p><h3 id="MemberLeaveEventKick"><a href="#MemberLeaveEventKick" class="headerlink" title="MemberLeaveEventKick"></a>MemberLeaveEventKick</h3><p>该事件发生时, 有一群组成员被管理员/群主从群组中删除, 当 <code>operator</code> 为 <code>None</code> 时, 执行者为应用实例所辖账号.<br>type = “MemberLeaveEventKick”<br>member: Member<br>operator: Optional[Member]</p><h3 id="MemberLeaveEventQuit"><a href="#MemberLeaveEventQuit" class="headerlink" title="MemberLeaveEventQuit"></a>MemberLeaveEventQuit</h3><p>该事件发生时, 有一群组成员主动退出群组.<br>member: Member</p><h3 id="MemberCardChangeEvent"><a href="#MemberCardChangeEvent" class="headerlink" title="MemberCardChangeEvent"></a>MemberCardChangeEvent</h3><p>该事件发生时, 有一群组成员的群名片被更改, 执行者可能是管理员/群主, 该成员自己, 也可能是应用实例所辖账号(这时, <code>operator</code> 为 <code>None</code>).<br>origin: str<br>current: str<br>member: Member<br>operator: Optional[Member]</p><h3 id="MemberSpecialTitleChangeEvent"><a href="#MemberSpecialTitleChangeEvent" class="headerlink" title="MemberSpecialTitleChangeEvent"></a>MemberSpecialTitleChangeEvent</h3><p>该事件发生时, 有一群组成员的群头衔被更改, 执行者只可能是群组的群主.<br>origin: str<br>current: str<br>member: Member</p><h3 id="MemberPermissionChangeEvent"><a href="#MemberPermissionChangeEvent" class="headerlink" title="MemberPermissionChangeEvent"></a>MemberPermissionChangeEvent</h3><p>该事件发生时, 有一群组成员的权限被更改/调整, 执行者只可能是群组的群主.<br>origin: str<br>current: str<br>member: Member</p><h3 id="MemberMuteEvent"><a href="#MemberMuteEvent" class="headerlink" title="MemberMuteEvent"></a>MemberMuteEvent</h3><p>该事件发生时, 有一群组成员被管理员/群组禁言, 当 <code>operator</code> 为 <code>None</code> 时为应用实例所辖账号操作.<br>durationSeconds: int<br>member: Member<br>operator: Optional[Member]</p><h3 id="MemberUnmuteEvent"><a href="#MemberUnmuteEvent" class="headerlink" title="MemberUnmuteEvent"></a>MemberUnmuteEvent</h3><p>该事件发生时, 有一群组成员被管理员/群组解除禁言, 当 <code>operator</code> 为 <code>None</code> 时为应用实例所辖账号操作.<br>member: Member<br>operator: Optional[Member]</p><h3 id="NewFriendRequestEvent"><a href="#NewFriendRequestEvent" class="headerlink" title="NewFriendRequestEvent"></a>NewFriendRequestEvent</h3><p>当该事件发生时, 有一用户向机器人提起好友请求.</p><blockquote><p>该事件的处理需要你获取原始事件实例.</p></blockquote><ol><li>读取该事件的基础信息:</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">event.supplicant: int # 发起加好友请求的用户的 ID</span><br><span class="line">event.sourceGroup: Optional[int] # 对方可能是从某个群发起对账号的请求的, mirai 可以解析对方从哪个群发起的请求.</span><br><span class="line">event.nickname: str # 对方的昵称</span><br><span class="line">event.message: str # 对方发起请求时填写的描述</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">同意请求: &#96;await event.accept()&#96;, 具体查看该方法所附带的说明.</span><br><span class="line">拒绝请求: &#96;await event.reject()&#96;, 具体查看该方法所附带的说明.</span><br><span class="line">拒绝并不再接受来自对方的请求: &#96;await event.rejectAndBlock()&#96;, 具体查看该方法所附带的说明.</span><br></pre></td></tr></table></figure><p>requestId: int = Field(…, alias=“eventId”)<br>supplicant: int = Field(…, alias=“fromId”) # 即请求方 QQ<br>sourceGroup: Optional[int] = Field(…, alias=“groupId”)<br>nickname: str = Field(…, alias=“nick”)<br>message: str</p><h3 id="accept-message-str-””"><a href="#accept-message-str-””" class="headerlink" title="accept(message:str=””)"></a>accept(message:str=””)</h3><p>同意对方的加好友请求.<br>message (str, optional): 附带给对方的消息. 默认为 “”.</p><h3 id="reject-message-str-“”"><a href="#reject-message-str-“”" class="headerlink" title="reject(message: str = “”)"></a>reject(message: str = “”)</h3><p>拒绝对方的加好友请求.<br>message (str, optional): 附带给对方的消息. 默认为 “”.</p><h3 id="rejectAndBlock-message-str-“”"><a href="#rejectAndBlock-message-str-“”" class="headerlink" title="rejectAndBlock(message: str = “”)"></a>rejectAndBlock(message: str = “”)</h3><p>拒绝对方的加好友请求, 并不再接受来自对方的加好友请求.<br>message (str, optional): 附带给对方的消息. 默认为 “”.</p><h3 id="MemberJoinRequestEvent"><a href="#MemberJoinRequestEvent" class="headerlink" title="MemberJoinRequestEvent"></a>MemberJoinRequestEvent</h3><p>当该事件发生时, 有一用户向机器人作为管理员/群主的群组申请加入群组.</p><blockquote><p>该事件的处理需要你获取原始事件实例.</p></blockquote><ol><li>读取该事件的基础信息:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5event.supplicant: int # 申请加入群组的用户的 ID</span><br><span class="line">event.groupId: Optional[int] # 对方试图加入的群组的 ID</span><br><span class="line">event.groupName: str # 对方试图加入的群组的名称</span><br><span class="line">event.nickname: str # 对方的昵称</span><br><span class="line">event.message: str # 对方发起请求时填写的描述</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">同意请求: &#96;await event.accept()&#96;, 具体查看该方法所附带的说明.</span><br><span class="line">拒绝请求: &#96;await event.reject()&#96;, 具体查看该方法所附带的说明.</span><br><span class="line">忽略请求: &#96;await event.ignore()&#96;, 具体查看该方法所附带的说明.</span><br><span class="line">拒绝并不再接受来自对方的请求: &#96;await event.rejectAndBlock()&#96;, 具体查看该方法所附带的说明.</span><br><span class="line">忽略并不再接受来自对方的请求: &#96;await event.ignoreAndBlock()&#96;, 具体查看该方法所附带的说明.</span><br></pre></td></tr></table></figure></li></ol><p>requestId: int = Field(…, alias=“eventId”)<br>supplicant: int = Field(…, alias=“fromId”) # 即请求方 QQ<br>groupId: Optional[int] = Field(…, alias=“groupId”)<br>groupName: str = Field(…, alias=“groupName”)<br>nickname: str = Field(…, alias=“nick”)<br>message: str</p><h3 id="accept-message-str-“”"><a href="#accept-message-str-“”" class="headerlink" title="accept(message: str = “”)"></a>accept(message: str = “”)</h3><p>同意对方加入群组.<br>message (str, optional): 附带给对方的消息. 默认为 “”.</p><h3 id="reject-message-str-“”-1"><a href="#reject-message-str-“”-1" class="headerlink" title="reject(message: str = “”)"></a>reject(message: str = “”)</h3><p>拒绝对方加入群组.<br>message (str, optional): 附带给对方的消息. 默认为 “”.</p><h3 id="ignore-self-message-str-“”"><a href="#ignore-self-message-str-“”" class="headerlink" title="ignore(self, message: str = “”)"></a>ignore(self, message: str = “”)</h3><p>忽略对方加入群组的请求.<br>message (str, optional): 附带给对方的消息. 默认为 “”.</p><h3 id="rejectAndBlock-self-message-str-“”"><a href="#rejectAndBlock-self-message-str-“”" class="headerlink" title="rejectAndBlock(self, message: str = “”)"></a>rejectAndBlock(self, message: str = “”)</h3><p>拒绝对方加入群组的请求, 并不再接受来自对方加入群组的请求<br>message (str, optional): 附带给对方的消息. 默认为 “”.</p><h3 id="BotInvitedJoinGroupRequestEvent"><a href="#BotInvitedJoinGroupRequestEvent" class="headerlink" title="BotInvitedJoinGroupRequestEvent"></a>BotInvitedJoinGroupRequestEvent</h3><p>当该事件发生时, 应用实例所辖账号接受到来自某个账号的邀请加入某个群组的请求.</p><blockquote><p>该事件的处理需要你获取原始事件实例.</p></blockquote><ol><li>读取该事件的基础信息:<figure class="highlight plain"><figcaption><span>int # 邀请所辖账号加入群组的用户的 ID</span></figcaption><table><tr><td class="code"><pre><span class="line">event.groupId: Optional[int] # 对方邀请所辖账号加入的群组的 ID</span><br><span class="line">event.groupName: str # 对方邀请所辖账号加入的群组的名称</span><br><span class="line">event.nickname: str # 对方的昵称</span><br><span class="line">event.message: str # 对方发起请求时填写的描述</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">同意请求: &#96;await event.accept()&#96;, 具体查看该方法所附带的说明.</span><br><span class="line">拒绝请求: &#96;await event.reject()&#96;, 具体查看该方法所附带的说明.</span><br></pre></td></tr></table></figure></li></ol><p>requestId: int = Field(…, alias=“eventId”)<br>supplicant: int = Field(…, alias=“fromId”) # 即请求方 QQ<br>groupId: Optional[int] = Field(…, alias=“groupId”)<br>groupName: str = Field(…, alias=“groupName”)<br>nickname: str = Field(…, alias=“nick”)<br>message: str</p><h3 id="accept-message-str-“”-1"><a href="#accept-message-str-“”-1" class="headerlink" title="accept(message: str = “”)"></a>accept(message: str = “”)</h3><p>同意对方加入群组.<br>message (str, optional): 附带给对方的消息. 默认为 “”.</p><h3 id="reject-message-str-“”-2"><a href="#reject-message-str-“”-2" class="headerlink" title="reject(message: str = “”)"></a>reject(message: str = “”)</h3><p>拒绝对方加入群组.<br>message (str, optional): 附带给对方的消息. 默认为 “”.</p><h2 id="GraiaScheduler模块"><a href="#GraiaScheduler模块" class="headerlink" title="GraiaScheduler模块"></a>GraiaScheduler模块</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from graia.scheduler import (</span><br><span class="line">    timers,</span><br><span class="line">)</span><br><span class="line">import graia.scheduler as scheduler</span><br><span class="line">loop &#x3D; asyncio.get_event_loop()</span><br><span class="line">bcc &#x3D; Broadcast(loop&#x3D;loop)</span><br><span class="line">app &#x3D; GraiaMiraiApplication(</span><br><span class="line">    ...</span><br><span class="line">)</span><br><span class="line">sche &#x3D; scheduler.GraiaScheduler(loop&#x3D;loop,broadcast&#x3D;bcc)</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line">@sche.schedule(timers.every_custom_seconds(60))</span><br><span class="line">async def test():</span><br><span class="line">    print(&quot;60s一次&quot;)</span><br><span class="line">....</span><br></pre></td></tr></table></figure><blockquote><p>timers为一些常用的Scheduler时间设置</p></blockquote><p>对于<code>timers</code>中自造方法，使用<code>croniter</code>模块</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from datetime import datetime, timedelta</span><br><span class="line">from croniter import croniter</span><br><span class="line"></span><br><span class="line">def every(**kwargs):</span><br><span class="line">    while True:</span><br><span class="line">        yield datetime.now() + timedelta(**kwargs)</span><br><span class="line"></span><br><span class="line">def func(n):</span><br><span class="line">    &quot;&quot;&quot;每时间执行一次&quot;&quot;&quot;</span><br><span class="line">    yield from every(seconds&#x3D;n)</span><br><span class="line">    #yield from every(hours&#x3D;n)</span><br><span class="line">    #yield from every(minutes&#x3D;n)</span><br><span class="line"></span><br><span class="line">def crontabify(pattern: str):</span><br><span class="line">    &quot;&quot;&quot;使用类似 crontab 的方式生成计时器</span><br><span class="line"></span><br><span class="line">    Args:</span><br><span class="line">        pattern (str): crontab 的设置, 具体请合理使用搜索引擎</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    base_datetime &#x3D; datetime.now()</span><br><span class="line">    crontab_iter &#x3D; croniter(pattern, base_datetime)</span><br><span class="line">    while True:</span><br><span class="line">        yield crontab_iter.get_next(datetime)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文作者： YOOZIKI&lt;br&gt; 本文链接： &lt;a href=&quot;https://yooziki.github.io/2020/08/297095/&quot;&gt;https://yooziki.github.io/2020/08/297095/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Python版本：py37&quot;&gt;&lt;a href=&quot;#Python版本：py37&quot; class=&quot;headerlink&quot; title=&quot;Python版本：py37&quot;&gt;&lt;/a&gt;Python版本：py37&lt;/h2&gt;&lt;p&gt;安装相关模块，&lt;a href=&quot;https://github.com/GraiaProject/Application&quot;&gt;源码在这里&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install graia-application-mirai&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install graia-broadcast --upgrade&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install singledispatchmethod&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;添加选择器子模块&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install graia-component-selector&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;mirai环境配置&quot;&gt;&lt;a href=&quot;#mirai环境配置&quot; class=&quot;headerlink&quot; title=&quot;mirai环境配置&quot;&gt;&lt;/a&gt;mirai环境配置&lt;/h2&gt;&lt;h3 id=&quot;自定义方式-推荐&quot;&gt;&lt;a href=&quot;#自定义方式-推荐&quot; class=&quot;headerlink&quot; title=&quot;自定义方式(推荐)&quot;&gt;&lt;/a&gt;自定义方式(推荐)&lt;/h3&gt;&lt;p&gt;在&lt;a href=&quot;https://github.com/project-mirai/mirai-repo&quot;&gt;mirai仓库中&lt;/a&gt;的&lt;code&gt;shadow&lt;/code&gt;下找到对应的包体并下载&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果出现无法下载的情况下载文件时将&lt;a href=&quot;https://github.com替换成http://github-proxy.yobot.win即可&quot;&gt;https://github.com替换成http://github-proxy.yobot.win即可&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://asea.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="robot" scheme="https://asea.fun/tags/robot/"/>
    
      <category term="mirai" scheme="https://asea.fun/tags/mirai/"/>
    
      <category term="Graia" scheme="https://asea.fun/tags/Graia/"/>
    
  </entry>
  
  <entry>
    <title>小小总结</title>
    <link href="https://asea.fun/post/427de4be.html"/>
    <id>https://asea.fun/post/427de4be.html</id>
    <published>2021-05-06T15:49:34.000Z</published>
    <updated>2021-05-09T16:28:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目前涉猎内容"><a href="#目前涉猎内容" class="headerlink" title="目前涉猎内容"></a>目前涉猎内容</h1><blockquote><p>简单记录一下自己目前所了解到的知识</p></blockquote><ol><li>hexo个人博客</li><li>cocoscreater开发的小游戏</li><li>前端三剑客入门</li><li>计算机二级证书</li><li>python做的几个桌面应用<ol><li>百度网盘链接提取器</li><li>文件批量处理工具</li></ol></li><li>学习通作业提醒、博客更新提醒</li><li>基于mirai和graia的qq机器人（集成包括作业提醒的功能）</li><li>微信小程序（起步）</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;目前涉猎内容&quot;&gt;&lt;a href=&quot;#目前涉猎内容&quot; class=&quot;headerlink&quot; title=&quot;目前涉猎内容&quot;&gt;&lt;/a&gt;目前涉猎内容&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;简单记录一下自己目前所了解到的知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;hexo个人博客&lt;/li&gt;
&lt;li&gt;cocoscreater开发的小游戏&lt;/li&gt;
&lt;li&gt;前端三剑客入门&lt;/li&gt;
&lt;li&gt;计算机二级证书&lt;/li&gt;
&lt;li&gt;python做的几个桌面应用&lt;ol&gt;
&lt;li&gt;百度网盘链接提取器&lt;/li&gt;
&lt;li&gt;文件批量处理工具&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;学习通作业提醒、博客更新提醒&lt;/li&gt;
&lt;li&gt;基于mirai和graia的qq机器人（集成包括作业提醒的功能）&lt;/li&gt;
&lt;li&gt;微信小程序（起步）&lt;/li&gt;
&lt;/ol&gt;

    
    </summary>
    
    
      <category term="日常" scheme="https://asea.fun/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="summary" scheme="https://asea.fun/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>Github进不去解决方法</title>
    <link href="https://asea.fun/post/3345821.html"/>
    <id>https://asea.fun/post/3345821.html</id>
    <published>2021-05-06T13:23:47.000Z</published>
    <updated>2021-05-06T13:25:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Github进不去解决方法"><a href="#Github进不去解决方法" class="headerlink" title="Github进不去解决方法"></a>Github进不去解决方法</h1><p>按以下方法修改hosts文件，注意hosts文件只有在管理员权限下才可以修改，hosts文件所在目录为:</p><p>C:\Windows\System32\drivers\etc\hosts，注意修改右下角显示所有文件才可以看到。</p><p><a href="https://www.ipaddress.com/ip-lookup用此网站查找github.com和github.global.ssl.fastly.net对应的ip，然后添加hosts文件以下内容：">https://www.ipaddress.com/ip-lookup用此网站查找github.com和github.global.ssl.fastly.net对应的ip，然后添加hosts文件以下内容：</a></p><p>github.com的ip    github.com</p><p>github.global.ssl.fastly.net的ip    github.global.ssl.fastly.net</p><p> 注意添加的ip要是你自己本机查到的，用网上其他人查到的可能不管用</p><p>————————————————</p><p>版权声明：本文为CSDN博主「w͏l͏j͏」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</p><p><a href="https://blog.csdn.net/qq_40624026/article/details/107704677">原文链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Github进不去解决方法&quot;&gt;&lt;a href=&quot;#Github进不去解决方法&quot; class=&quot;headerlink&quot; title=&quot;Github进不去解决方法&quot;&gt;&lt;/a&gt;Github进不去解决方法&lt;/h1&gt;&lt;p&gt;按以下方法修改hosts文件，注意hosts文件只有在管理员权限下才可以修改，hosts文件所在目录为:&lt;/p&gt;
&lt;p&gt;C:\Windows\System32\drivers\etc\hosts，注意修改右下角显示所有文件才可以看到。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ipaddress.com/ip-lookup用此网站查找github.com和github.global.ssl.fastly.net对应的ip，然后添加hosts文件以下内容：&quot;&gt;https://www.ipaddress.com/ip-lookup用此网站查找github.com和github.global.ssl.fastly.net对应的ip，然后添加hosts文件以下内容：&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;github.com的ip    github.com&lt;/p&gt;
&lt;p&gt;github.global.ssl.fastly.net的ip    github.global.ssl.fastly.net&lt;/p&gt;
&lt;p&gt; 注意添加的ip要是你自己本机查到的，用网上其他人查到的可能不管用&lt;/p&gt;
&lt;p&gt;————————————————&lt;/p&gt;
&lt;p&gt;版权声明：本文为CSDN博主「w͏l͏j͏」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_40624026/article/details/107704677&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://asea.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="github" scheme="https://asea.fun/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习笔记</title>
    <link href="https://asea.fun/post/31bf2518.html"/>
    <id>https://asea.fun/post/31bf2518.html</id>
    <published>2021-05-05T14:54:39.000Z</published>
    <updated>2021-05-05T14:54:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构学习笔记"><a href="#数据结构学习笔记" class="headerlink" title="数据结构学习笔记"></a>数据结构学习笔记</h1><h2 id="认识数据"><a href="#认识数据" class="headerlink" title="认识数据"></a>认识数据</h2><ul><li>数据</li><li>数据对象（<em>同一类数据元素的集合</em>）</li><li>数据元素（<em>研究的最小的一个整体</em>）</li><li>数据项（<em>数据元素的最小构成单位</em>）</li></ul><h2 id="数据结构分类"><a href="#数据结构分类" class="headerlink" title="数据结构分类"></a>数据结构分类</h2><ol><li>数据结构主要研究其<strong>逻辑结构</strong>、<strong>物理结构</strong>、及其<strong>运算</strong>。</li><li>逻辑结构<ol><li>划分一<ul><li>线性结构（<em>有且仅有一个开始和一个终端结点，并且所有结点都最多只有一个直接前趋和一个直接后继。</em>）<ul><li>线性表</li><li>栈</li><li>队列</li><li>串</li></ul></li><li>非线性结构（<em>一个结点可能有多个直接前趋和直接后继</em>）<ul><li>树</li><li>图</li></ul></li></ul></li><li>划分二<ul><li>集合结构（<em>结构中的数据元素之间除了同属于一个集合的关系外，无任何其它关系。</em>）</li><li>线性结构（<em>结构中的数据元素之间存在着一对一的线性关系。</em>）</li><li>树形结构（<em>结构中的数据元素之间存在着一对多的层次关系。</em>）</li><li>图/网状结构 （<em>结构中的数据元素之间存在着多对多的任意关系。</em>）</li></ul></li></ol></li><li>存储结构<ol><li>顺序存储结构（<em>用一组连续的存储单鹂依次存储数据元素，数据元素之间的逻辑关系由元素的存储位置来表示。*</em>C语言中用数组来实现顺序存储结构***）</li><li>链式存储结构（<em>用一组任意的存储单元存储数据元素，数据元素之间的逻辑关系用指针来表示。*</em>C中用指针来实现链式存储结构***）</li><li><em>索引存储结构</em></li><li><em>散列存储结构</em></li></ol></li></ol><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据结构学习笔记&quot;&gt;&lt;a href=&quot;#数据结构学习笔记&quot; class=&quot;headerlink&quot; title=&quot;数据结构学习笔记&quot;&gt;&lt;/a&gt;数据结构学习笔记&lt;/h1&gt;&lt;h2 id=&quot;认识数据&quot;&gt;&lt;a href=&quot;#认识数据&quot; class=&quot;headerlink&quot; title=&quot;认识数据&quot;&gt;&lt;/a&gt;认识数据&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数据&lt;/li&gt;
&lt;li&gt;数据对象（&lt;em&gt;同一类数据元素的集合&lt;/em&gt;）&lt;/li&gt;
&lt;li&gt;数据元素（&lt;em&gt;研究的最小的一个整体&lt;/em&gt;）&lt;/li&gt;
&lt;li&gt;数据项（&lt;em&gt;数据元素的最小构成单位&lt;/em&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;数据结构分类&quot;&gt;&lt;a href=&quot;#数据结构分类&quot; class=&quot;headerlink&quot; title=&quot;数据结构分类&quot;&gt;&lt;/a&gt;数据结构分类&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;数据结构主要研究其&lt;strong&gt;逻辑结构&lt;/strong&gt;、&lt;strong&gt;物理结构&lt;/strong&gt;、及其&lt;strong&gt;运算&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;逻辑结构&lt;ol&gt;
&lt;li&gt;划分一&lt;ul&gt;
&lt;li&gt;线性结构（&lt;em&gt;有且仅有一个开始和一个终端结点，并且所有结点都最多只有一个直接前趋和一个直接后继。&lt;/em&gt;）&lt;ul&gt;
&lt;li&gt;线性表&lt;/li&gt;
&lt;li&gt;栈&lt;/li&gt;
&lt;li&gt;队列&lt;/li&gt;
&lt;li&gt;串&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非线性结构（&lt;em&gt;一个结点可能有多个直接前趋和直接后继&lt;/em&gt;）&lt;ul&gt;
&lt;li&gt;树&lt;/li&gt;
&lt;li&gt;图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;划分二&lt;ul&gt;
&lt;li&gt;集合结构（&lt;em&gt;结构中的数据元素之间除了同属于一个集合的关系外，无任何其它关系。&lt;/em&gt;）&lt;/li&gt;
&lt;li&gt;线性结构（&lt;em&gt;结构中的数据元素之间存在着一对一的线性关系。&lt;/em&gt;）&lt;/li&gt;
&lt;li&gt;树形结构（&lt;em&gt;结构中的数据元素之间存在着一对多的层次关系。&lt;/em&gt;）&lt;/li&gt;
&lt;li&gt;图/网状结构 （&lt;em&gt;结构中的数据元素之间存在着多对多的任意关系。&lt;/em&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;存储结构&lt;ol&gt;
&lt;li&gt;顺序存储结构（&lt;em&gt;用一组连续的存储单鹂依次存储数据元素，数据元素之间的逻辑关系由元素的存储位置来表示。*&lt;/em&gt;C语言中用数组来实现顺序存储结构***）&lt;/li&gt;
&lt;li&gt;链式存储结构（&lt;em&gt;用一组任意的存储单元存储数据元素，数据元素之间的逻辑关系用指针来表示。*&lt;/em&gt;C中用指针来实现链式存储结构***）&lt;/li&gt;
&lt;li&gt;&lt;em&gt;索引存储结构&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;散列存储结构&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;/h2&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://asea.fun/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数据结构" scheme="https://asea.fun/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习笔记</title>
    <link href="https://asea.fun/post/31bf2518.html"/>
    <id>https://asea.fun/post/31bf2518.html</id>
    <published>2021-05-05T14:54:39.000Z</published>
    <updated>2021-05-05T15:32:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构学习笔记"><a href="#数据结构学习笔记" class="headerlink" title="数据结构学习笔记"></a>数据结构学习笔记</h1><h2 id="认识数据"><a href="#认识数据" class="headerlink" title="认识数据"></a>认识数据</h2><ul><li>数据</li><li>数据对象（<em>同一类数据元素的集合</em>）</li><li>数据元素（<em>研究的最小的一个整体</em>）</li><li>数据项（<em>数据元素的最小构成单位</em>）</li></ul><h2 id="数据结构分类"><a href="#数据结构分类" class="headerlink" title="数据结构分类"></a>数据结构分类</h2><ol><li>数据结构主要研究其<strong>逻辑结构</strong>、<strong>物理结构</strong>、及其<strong>运算</strong>。</li><li>逻辑结构<ol><li>划分一<ul><li>线性结构（<em>有且仅有一个开始和一个终端结点，并且所有结点都最多只有一个直接前趋和一个直接后继。</em>）<ul><li>线性表</li><li>栈</li><li>队列</li><li>串</li></ul></li><li>非线性结构（<em>一个结点可能有多个直接前趋和直接后继</em>）<ul><li>树</li><li>图</li></ul></li></ul></li><li>划分二<ul><li>集合结构（<em>结构中的数据元素之间除了同属于一个集合的关系外，无任何其它关系。</em>）</li><li>线性结构（<em>结构中的数据元素之间存在着一对一的线性关系。</em>）</li><li>树形结构（<em>结构中的数据元素之间存在着一对多的层次关系。</em>）</li><li>图/网状结构 （<em>结构中的数据元素之间存在着多对多的任意关系。</em>）</li></ul></li></ol></li><li>存储结构<ol><li>顺序存储结构（<em>用一组连续的存储单鹂依次存储数据元素，数据元素之间的逻辑关系由元素的存储位置来表示。*</em>C语言中用数组来实现顺序存储结构***）</li><li>链式存储结构（<em>用一组任意的存储单元存储数据元素，数据元素之间的逻辑关系用指针来表示。*</em>C中用指针来实现链式存储结构***）</li><li><em>索引存储结构</em></li><li><em>散列存储结构</em></li></ol></li></ol><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据结构学习笔记&quot;&gt;&lt;a href=&quot;#数据结构学习笔记&quot; class=&quot;headerlink&quot; title=&quot;数据结构学习笔记&quot;&gt;&lt;/a&gt;数据结构学习笔记&lt;/h1&gt;&lt;h2 id=&quot;认识数据&quot;&gt;&lt;a href=&quot;#认识数据&quot; class=&quot;headerlink&quot; title=&quot;认识数据&quot;&gt;&lt;/a&gt;认识数据&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数据&lt;/li&gt;
&lt;li&gt;数据对象（&lt;em&gt;同一类数据元素的集合&lt;/em&gt;）&lt;/li&gt;
&lt;li&gt;数据元素（&lt;em&gt;研究的最小的一个整体&lt;/em&gt;）&lt;/li&gt;
&lt;li&gt;数据项（&lt;em&gt;数据元素的最小构成单位&lt;/em&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;数据结构分类&quot;&gt;&lt;a href=&quot;#数据结构分类&quot; class=&quot;headerlink&quot; title=&quot;数据结构分类&quot;&gt;&lt;/a&gt;数据结构分类&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;数据结构主要研究其&lt;strong&gt;逻辑结构&lt;/strong&gt;、&lt;strong&gt;物理结构&lt;/strong&gt;、及其&lt;strong&gt;运算&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;逻辑结构&lt;ol&gt;
&lt;li&gt;划分一&lt;ul&gt;
&lt;li&gt;线性结构（&lt;em&gt;有且仅有一个开始和一个终端结点，并且所有结点都最多只有一个直接前趋和一个直接后继。&lt;/em&gt;）&lt;ul&gt;
&lt;li&gt;线性表&lt;/li&gt;
&lt;li&gt;栈&lt;/li&gt;
&lt;li&gt;队列&lt;/li&gt;
&lt;li&gt;串&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非线性结构（&lt;em&gt;一个结点可能有多个直接前趋和直接后继&lt;/em&gt;）&lt;ul&gt;
&lt;li&gt;树&lt;/li&gt;
&lt;li&gt;图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;划分二&lt;ul&gt;
&lt;li&gt;集合结构（&lt;em&gt;结构中的数据元素之间除了同属于一个集合的关系外，无任何其它关系。&lt;/em&gt;）&lt;/li&gt;
&lt;li&gt;线性结构（&lt;em&gt;结构中的数据元素之间存在着一对一的线性关系。&lt;/em&gt;）&lt;/li&gt;
&lt;li&gt;树形结构（&lt;em&gt;结构中的数据元素之间存在着一对多的层次关系。&lt;/em&gt;）&lt;/li&gt;
&lt;li&gt;图/网状结构 （&lt;em&gt;结构中的数据元素之间存在着多对多的任意关系。&lt;/em&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;存储结构&lt;ol&gt;
&lt;li&gt;顺序存储结构（&lt;em&gt;用一组连续的存储单鹂依次存储数据元素，数据元素之间的逻辑关系由元素的存储位置来表示。*&lt;/em&gt;C语言中用数组来实现顺序存储结构***）&lt;/li&gt;
&lt;li&gt;链式存储结构（&lt;em&gt;用一组任意的存储单元存储数据元素，数据元素之间的逻辑关系用指针来表示。*&lt;/em&gt;C中用指针来实现链式存储结构***）&lt;/li&gt;
&lt;li&gt;&lt;em&gt;索引存储结构&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;散列存储结构&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;/h2&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://asea.fun/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数据结构" scheme="https://asea.fun/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>水漫二十</title>
    <link href="https://asea.fun/post/42a48ee3.html"/>
    <id>https://asea.fun/post/42a48ee3.html</id>
    <published>2021-04-28T16:31:04.000Z</published>
    <updated>2021-04-28T16:31:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在生日过后记录些"><a href="#在生日过后记录些" class="headerlink" title="在生日过后记录些"></a>在生日过后记录些</h2><p>前两天忽然想起来《毕业缺海》那篇文章，于是又翻出来看了看，其中大概有一成的东西读来仿佛不属于我了，我知道这个比例会越来越大，但相较于其他篇算性能不错了。一晃而过，毕业到现在，还有一个多月便两年了，刚好是我从一个环境到另一个环境所需要的适应的时间。再多一年就会成为心里永远的壁垒了。<br>农历生日过了十几年了，今年单独抽出来过了阳历生日，410总比317好听些，但是317实在太令人熟悉了，条件反射般的让我激灵。2021年的317，算是我主观意义上真正二十了，这一天极为平淡，上午两大节课，电工技术和机械原理都是再前半段集中注意力了，后面逐渐跑神，就再也没能回过来。下午互换性还算勉强抵抗困意，软件技术还是一如往常。这些事情不重要，所以只需要一笔带过。真正想要记录的有一些，例如：阿弥在我生日这天直播，我把qq飞车打上了星耀，买的拖鞋到了，会用浴花起沫洗头，会在vscode使用qq插件，我妈早上给我了500，奶奶在七点多就给我打了个电话（我到晚上才回过去），我爸发的红包里我和我妈抢到的竟然一模一样（这毕竟是我们母子二人的节日），作业基本搞定，两天后要出去玩一下，衣服洗好，床单更换，枕套更换，我对家的理解慢慢改善，家庭关系愈发融洽（我悟出来的解决方法就是像对待朋友一样对待他们）……<br>最近仿佛是在好起来。<br>仿佛我在阳历生日许下的心愿已经完成一二。<br>那这次生日许个什么愿呢，愿望是不能说出来的，但毕竟我写这些东西的时候，已经二十了，所以还是可以说的对吧？<br>所以，我真的希望，现阶段，转专业可以成功吧，之后便是投入计算机的努力（这是最好的结果，尽管可能性不是很大）。</p><p>再说点关于生日的吧，现在除了家人（大鹅也是家人）基本没人会跟我说生日快乐了。可能会有些失落，是不可控的那种失落。我想起来那个up过二十的时候录vlog了，还是很喜欢那样直抒胸臆的措辞和神态的，至少我做不出来，我还是很喜欢看别人快乐。<br>为什么说水漫二十呢，第一是有点上火喝了很多水；第二是水有时候很平静，就像这次的生日；第三是毕业缺海那篇，到现在我也没见到海；第四是过去稀里糊涂，二十算是上岸了吧。<br>太晚了，就不多写了。<br><strong>anyway，goonigh~</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在生日过后记录些&quot;&gt;&lt;a href=&quot;#在生日过后记录些&quot; class=&quot;headerlink&quot; title=&quot;在生日过后记录些&quot;&gt;&lt;/a&gt;在生日过后记录些&lt;/h2&gt;&lt;p&gt;前两天忽然想起来《毕业缺海》那篇文章，于是又翻出来看了看，其中大概有一成的东西读来仿佛不属于我了，我知道这个比例会越来越大，但相较于其他篇算性能不错了。一晃而过，毕业到现在，还有一个多月便两年了，刚好是我从一个环境到另一个环境所需要的适应的时间。再多一年就会成为心里永远的壁垒了。&lt;br&gt;农历生日过了十几年了，今年单独抽出来过了阳历生日，410总比317好听些，但是317实在太令人熟悉了，条件反射般的让我激灵。2021年的317，算是我主观意义上真正二十了，这一天极为平淡，上午两大节课，电工技术和机械原理都是再前半段集中注意力了，后面逐渐跑神，就再也没能回过来。下午互换性还算勉强抵抗困意，软件技术还是一如往常。这些事情不重要，所以只需要一笔带过。真正想要记录的有一些，例如：阿弥在我生日这天直播，我把qq飞车打上了星耀，买的拖鞋到了，会用浴花起沫洗头，会在vscode使用qq插件，我妈早上给我了500，奶奶在七点多就给我打了个电话（我到晚上才回过去），我爸发的红包里我和我妈抢到的竟然一模一样（这毕竟是我们母子二人的节日），作业基本搞定，两天后要出去玩一下，衣服洗好，床单更换，枕套更换，我对家的理解慢慢改善，家庭关系愈发融洽（我悟出来的解决方法就是像对待朋友一样对待他们）……&lt;br&gt;最近仿佛是在好起来。&lt;br&gt;仿佛我在阳历生日许下的心愿已经完成一二。&lt;br&gt;那这次生日许个什么愿呢，愿望是不能说出来的，但毕竟我写这些东西的时候，已经二十了，所以还是可以说的对吧？&lt;br&gt;所以，我真的希望，现阶段，转专业可以成功吧，之后便是投入计算机的努力（这是最好的结果，尽管可能性不是很大）。&lt;/p&gt;
&lt;p&gt;再说点关于生日的吧，现在除了家人（大鹅也是家人）基本没人会跟我说生日快乐了。可能会有些失落，是不可控的那种失落。我想起来那个up过二十的时候录vlog了，还是很喜欢那样直抒胸臆的措辞和神态的，至少我做不出来，我还是很喜欢看别人快乐。&lt;br&gt;为什么说水漫二十呢，第一是有点上火喝了很多水；第二是水有时候很平静，就像这次的生日；第三是毕业缺海那篇，到现在我也没见到海；第四是过去稀里糊涂，二十算是上岸了吧。&lt;br&gt;太晚了，就不多写了。&lt;br&gt;&lt;strong&gt;anyway，goonigh~&lt;/strong&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="日常" scheme="https://asea.fun/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="life" scheme="https://asea.fun/tags/life/"/>
    
      <category term="birthday" scheme="https://asea.fun/tags/birthday/"/>
    
  </entry>
  
  <entry>
    <title>水漫二十</title>
    <link href="https://asea.fun/post/42a48ee3.html"/>
    <id>https://asea.fun/post/42a48ee3.html</id>
    <published>2021-04-28T16:31:04.000Z</published>
    <updated>2021-04-28T16:31:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在生日过后记录些"><a href="#在生日过后记录些" class="headerlink" title="在生日过后记录些"></a>在生日过后记录些</h2><p>前两天忽然想起来《毕业缺海》那篇文章，于是又翻出来看了看，其中大概有一成的东西读来仿佛不属于我了，我知道这个比例会越来越大，但相较于其他篇算性能不错了。一晃而过，毕业到现在，还有一个多月便两年了，刚好是我从一个环境到另一个环境所需要的适应的时间。再多一年就会成为心里永远的壁垒了。<br>农历生日过了十几年了，今年单独抽出来过了阳历生日，410总比317好听些，但是317实在太令人熟悉了，条件反射般的让我激灵。2021年的317，算是我主观意义上真正二十了，这一天极为平淡，上午两大节课，电工技术和机械原理都是再前半段集中注意力了，后面逐渐跑神，就再也没能回过来。下午互换性还算勉强抵抗困意，软件技术还是一如往常。这些事情不重要，所以只需要一笔带过。真正想要记录的有一些，例如：阿弥在我生日这天直播，我把qq飞车打上了星耀，买的拖鞋到了，会用浴花起沫洗头，会在vscode使用qq插件，我妈早上给我了500，奶奶在七点多就给我打了个电话（我到晚上才回过去），我爸发的红包里我和我妈抢到的竟然一模一样（这毕竟是我们母子二人的节日），作业基本搞定，两天后要出去玩一下，衣服洗好，床单更换，枕套更换，我对家的理解慢慢改善，家庭关系愈发融洽（我悟出来的解决方法就是像对待朋友一样对待他们）……<br>最近仿佛是在好起来。<br>仿佛我在阳历生日许下的心愿已经完成一二。<br>那这次生日许个什么愿呢，愿望是不能说出来的，但毕竟我写这些东西的时候，已经二十了，所以还是可以说的对吧？<br>所以，我真的希望，现阶段，转专业可以成功吧，之后便是投入计算机的努力（这是最好的结果，尽管可能性不是很大）。</p><p>再说点关于生日的吧，现在除了家人（大鹅也是家人）基本没人会跟我说生日快乐了。可能会有些失落，是不可控的那种失落。我想起来那个up过二十的时候录vlog了，还是很喜欢那样直抒胸臆的措辞和神态的，至少我做不出来，我还是很喜欢看别人快乐。<br>为什么说水漫二十呢，第一是有点上火喝了很多水；第二是水有时候很平静，就像这次的生日；第三是毕业缺海那篇，到现在我也没见到海；第四是过去稀里糊涂，二十算是上岸了吧。<br>太晚了，就不多写了。<br><strong>anyway，goonigh~</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在生日过后记录些&quot;&gt;&lt;a href=&quot;#在生日过后记录些&quot; class=&quot;headerlink&quot; title=&quot;在生日过后记录些&quot;&gt;&lt;/a&gt;在生日过后记录些&lt;/h2&gt;&lt;p&gt;前两天忽然想起来《毕业缺海》那篇文章，于是又翻出来看了看，其中大概有一成的东西读来仿佛不属于我了，我知道这个比例会越来越大，但相较于其他篇算性能不错了。一晃而过，毕业到现在，还有一个多月便两年了，刚好是我从一个环境到另一个环境所需要的适应的时间。再多一年就会成为心里永远的壁垒了。&lt;br&gt;农历生日过了十几年了，今年单独抽出来过了阳历生日，410总比317好听些，但是317实在太令人熟悉了，条件反射般的让我激灵。2021年的317，算是我主观意义上真正二十了，这一天极为平淡，上午两大节课，电工技术和机械原理都是再前半段集中注意力了，后面逐渐跑神，就再也没能回过来。下午互换性还算勉强抵抗困意，软件技术还是一如往常。这些事情不重要，所以只需要一笔带过。真正想要记录的有一些，例如：阿弥在我生日这天直播，我把qq飞车打上了星耀，买的拖鞋到了，会用浴花起沫洗头，会在vscode使用qq插件，我妈早上给我了500，奶奶在七点多就给我打了个电话（我到晚上才回过去），我爸发的红包里我和我妈抢到的竟然一模一样（这毕竟是我们母子二人的节日），作业基本搞定，两天后要出去玩一下，衣服洗好，床单更换，枕套更换，我对家的理解慢慢改善，家庭关系愈发融洽（我悟出来的解决方法就是像对待朋友一样对待他们）……&lt;br&gt;最近仿佛是在好起来。&lt;br&gt;仿佛我在阳历生日许下的心愿已经完成一二。&lt;br&gt;那这次生日许个什么愿呢，愿望是不能说出来的，但毕竟我写这些东西的时候，已经二十了，所以还是可以说的对吧？&lt;br&gt;所以，我真的希望，现阶段，转专业可以成功吧，之后便是投入计算机的努力（这是最好的结果，尽管可能性不是很大）。&lt;/p&gt;
&lt;p&gt;再说点关于生日的吧，现在除了家人（大鹅也是家人）基本没人会跟我说生日快乐了。可能会有些失落，是不可控的那种失落。我想起来那个up过二十的时候录vlog了，还是很喜欢那样直抒胸臆的措辞和神态的，至少我做不出来，我还是很喜欢看别人快乐。&lt;br&gt;为什么说水漫二十呢，第一是有点上火喝了很多水；第二是水有时候很平静，就像这次的生日；第三是毕业缺海那篇，到现在我也没见到海；第四是过去稀里糊涂，二十算是上岸了吧。&lt;br&gt;太晚了，就不多写了。&lt;br&gt;&lt;strong&gt;anyway，goonigh~&lt;/strong&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="日常" scheme="https://asea.fun/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="life" scheme="https://asea.fun/tags/life/"/>
    
      <category term="birthday" scheme="https://asea.fun/tags/birthday/"/>
    
  </entry>
  
  <entry>
    <title>node学习笔记</title>
    <link href="https://asea.fun/post/129264f1.html"/>
    <id>https://asea.fun/post/129264f1.html</id>
    <published>2021-04-26T13:53:00.000Z</published>
    <updated>2021-04-26T13:53:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node初步学习（后端入门）"><a href="#Node初步学习（后端入门）" class="headerlink" title="Node初步学习（后端入门）"></a>Node初步学习（后端入门）</h1><h2 id="基础入门"><a href="#基础入门" class="headerlink" title="基础入门"></a>基础入门</h2><ol><li>node安装</li><li>node运行js文件<h2 id="模块使用之fs"><a href="#模块使用之fs" class="headerlink" title="模块使用之fs"></a>模块使用之fs</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">// 写文件</span></span><br><span class="line">fs.writeFile(path,data,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 读文件</span></span><br><span class="line">fs.readFile(path,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="模块使用之http"><a href="#模块使用之http" class="headerlink" title="模块使用之http"></a>模块使用之http</h2><h3 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> server = http.createServer()</span><br><span class="line"><span class="comment">// 绑定事件</span></span><br><span class="line">server.on(<span class="string">&#x27;request&#x27;</span>,<span class="function"><span class="title">funtion</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 根据不同路径返回不同response</span></span><br><span class="line">    <span class="keyword">if</span> (url = <span class="string">&#x27;/index&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res.url)</span><br><span class="line">        <span class="comment">// 需要end结束，不太常用</span></span><br><span class="line">        res.write(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">        res.end</span><br><span class="line">        <span class="comment">// 一般不用write</span></span><br><span class="line">        res.end(<span class="string">&#x27;hhh&#x27;</span>) <span class="comment">// 只能是字符串，可以用json. stringify()</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 绑定端口号，启动服务器</span></span><br><span class="line">server.listen()</span><br></pre></td></tr></table></figure><h3 id="关于content-type"><a href="#关于content-type" class="headerlink" title="关于content-type"></a>关于content-type</h3><p><code>res.setHeader(&#39;Content-Type&#39;,&#39;text/plain;charset-utf-8&#39;)</code><br>具体类型可参照<a href="https://tool.oschina.net/commons">此处链接</a></p><h2 id="引用自己的模块"><a href="#引用自己的模块" class="headerlink" title="引用自己的模块"></a>引用自己的模块</h2><!-- 核心模块os不讲了 --><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自制模块，需要用到exports对象，设定不同的属性值达到跨文件引用变量目的</span></span><br><span class="line"><span class="built_in">exports</span>.name = <span class="string">&#x27;Doge&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用模块</span></span><br><span class="line"><span class="keyword">var</span> myModule = <span class="built_in">require</span>(<span class="string">&#x27;./a.js&#x27;</span>) <span class="comment">// 后缀可以省略</span></span><br><span class="line"><span class="built_in">console</span>.log(a.name) <span class="comment">// 输出Dog</span></span><br></pre></td></tr></table></figure><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><ol><li>JavaScript Style要求tab两个空格</li><li>一般结尾不加<code>;</code> 某些特殊情况要加（很不常见）</li></ol><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p><strong>art-template</strong><br><code>npm install art-template</code><br><strong>暂时跳过</strong></p><h2 id="渲染模式"><a href="#渲染模式" class="headerlink" title="渲染模式"></a>渲染模式</h2><ul><li>服务端渲染（服务端使用模板引擎）<br>SEO优化</li><li>客户端渲染<br>请求更快，但不利于SEO</li></ul><h2 id="静态资源案例"><a href="#静态资源案例" class="headerlink" title="静态资源案例"></a>静态资源案例</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">http <span class="comment">//简写方式，默认绑定request</span></span><br><span class="line">  .creatServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.end(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;runing&#x27;</span>) </span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Node初步学习（后端入门）&quot;&gt;&lt;a href=&quot;#Node初步学习（后端入门）&quot; class=&quot;headerlink&quot; title=&quot;Node初步学习（后端入门）&quot;&gt;&lt;/a&gt;Node初步学习（后端入门）&lt;/h1&gt;&lt;h2 id=&quot;基础入门&quot;&gt;&lt;a href=&quot;#基础入门&quot; class=&quot;headerlink&quot; title=&quot;基础入门&quot;&gt;&lt;/a&gt;基础入门&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;node安装&lt;/li&gt;
&lt;li&gt;node运行js文件&lt;h2 id=&quot;模块使用之fs&quot;&gt;&lt;a href=&quot;#模块使用之fs&quot; class=&quot;headerlink&quot; title=&quot;模块使用之fs&quot;&gt;&lt;/a&gt;模块使用之fs&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;fs&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 写文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fs.writeFile(path,data,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 读文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fs.readFile(path,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err,data&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;模块使用之http&quot;&gt;&lt;a href=&quot;#模块使用之http&quot; class=&quot;headerlink&quot; title=&quot;模块使用之http&quot;&gt;&lt;/a&gt;模块使用之http&lt;/h2&gt;&lt;h3 id=&quot;基本使用方法&quot;&gt;&lt;a href=&quot;#基本使用方法&quot; class=&quot;headerlink&quot; title=&quot;基本使用方法&quot;&gt;&lt;/a&gt;基本使用方法&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;http&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; server = http.createServer()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 绑定事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server.on(&lt;span class=&quot;string&quot;&gt;&amp;#x27;request&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;funtion&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req,res&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 根据不同路径返回不同response&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (url = &lt;span class=&quot;string&quot;&gt;&amp;#x27;/index&amp;#x27;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(res.url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 需要end结束，不太常用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        res.write(&lt;span class=&quot;string&quot;&gt;&amp;#x27;hello&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        res.end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 一般不用write&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        res.end(&lt;span class=&quot;string&quot;&gt;&amp;#x27;hhh&amp;#x27;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 只能是字符串，可以用json. stringify()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 绑定端口号，启动服务器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server.listen()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;关于content-type&quot;&gt;&lt;a href=&quot;#关于content-type&quot; class=&quot;headerlink&quot; title=&quot;关于content-type&quot;&gt;&lt;/a&gt;关于content-type&lt;/h3&gt;&lt;p&gt;&lt;code&gt;res.setHeader(&amp;#39;Content-Type&amp;#39;,&amp;#39;text/plain;charset-utf-8&amp;#39;)&lt;/code&gt;&lt;br&gt;具体类型可参照&lt;a href=&quot;https://tool.oschina.net/commons&quot;&gt;此处链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;引用自己的模块&quot;&gt;&lt;a href=&quot;#引用自己的模块&quot; class=&quot;headerlink&quot; title=&quot;引用自己的模块&quot;&gt;&lt;/a&gt;引用自己的模块&lt;/h2&gt;&lt;!-- 核心模块os不讲了 --&gt;

&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 自制模块，需要用到exports对象，设定不同的属性值达到跨文件引用变量目的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;exports&lt;/span&gt;.name = &lt;span class=&quot;string&quot;&gt;&amp;#x27;Doge&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://asea.fun/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="notes" scheme="https://asea.fun/tags/notes/"/>
    
      <category term="node" scheme="https://asea.fun/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>我的记忆只有一扇门</title>
    <link href="https://asea.fun/post/7e086bda.html"/>
    <id>https://asea.fun/post/7e086bda.html</id>
    <published>2021-04-17T16:14:20.000Z</published>
    <updated>2021-04-17T16:29:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>我总是在打算干正事的时候发现很多有趣的事情，于是开始陷入对某些旧事的反思。我时常感到我有些笨，我故意起了个“<strong>我的记忆只有一扇门</strong>”这样的标题，看起来能让世俗更有气质。<br>不写东西几近半年，我已经很久没有用文学的头脑去思考问题了，随之而来的，我丢掉了很多独特的情感，包括对某种<strong>亲情的憎恶</strong>、<strong>爱情的崇尚</strong>、<strong>世俗的感叹</strong>。我看过去的我就像是秋天的虫子，四足渐僵。<br>我感到很遗憾，在忘记某本书是谁送的时候：<strong>梦里有人告诉我说，我看好你，你很棒的，我也不再多夸你了，你受到的称赞一定不会少。</strong>但是都很飘渺，就在身边绕来绕去，半径越来越大。这真令人遗憾，我在摆脱一种生活的同时，也摆脱掉了无数珍宝，甚至是我多年前唯一的宝藏。而我又在不断挖掘新的宝藏，这然我感到充实，可我每当停下来的时候却又很失落，我正处于上一代货币被淘汰，而无处兑换新的货币的时候。哪些财富离我而去，同时对我嗤之以鼻。<br>记忆只有一扇门，要门往里进，要么往外出，我发现我印在瓶子上的话就像是个咒，我深知多年以前的担忧，却毫无办法，我活成了另一个样子：<strong>过去和未来不兼得，我忘了回忆过去，也不会想往未来。</strong><br>但是当我停下来的时候，我又有一种感受，那就是我拥有了前前后后的所有。<br>我几分钟前打算联系一位好友，当我打了三行字后才盯着它的名字看了半天，我越看越陌生，直到我一点也认不出它。我大概明白，我们正在互相远离。我也不知道很多过去怎么和现下链接。<br>所以只好删除所有文字，<strong>再把记忆之门开到另一个方向。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我总是在打算干正事的时候发现很多有趣的事情，于是开始陷入对某些旧事的反思。我时常感到我有些笨，我故意起了个“&lt;strong&gt;我的记忆只有一扇门&lt;/strong&gt;”这样的标题，看起来能让世俗更有气质。&lt;br&gt;不写东西几近半年，我已经很久没有用文学的头脑去思考问题了，随之而来的，我丢掉了很多独特的情感，包括对某种&lt;strong&gt;亲情的憎恶&lt;/strong&gt;、&lt;strong&gt;爱情的崇尚&lt;/strong&gt;、&lt;strong&gt;世俗的感叹&lt;/strong&gt;。我看过去的我就像是秋天的虫子，四足渐僵。&lt;br&gt;我感到很遗憾，在忘记某本书是谁送的时候：&lt;strong&gt;梦里有人告诉我说，我看好你，你很棒的，我也不再多夸你了，你受到的称赞一定不会少。&lt;/strong&gt;但是都很飘渺，就在身边绕来绕去，半径越来越大。这真令人遗憾，我在摆脱一种生活的同时，也摆脱掉了无数珍宝，甚至是我多年前唯一的宝藏。而我又在不断挖掘新的宝藏，这然我感到充实，可我每当停下来的时候却又很失落，我正处于上一代货币被淘汰，而无处兑换新的货币的时候。哪些财富离我而去，同时对我嗤之以鼻。&lt;br&gt;记忆只有一扇门，要门往里进，要么往外出，我发现我印在瓶子上的话就像是个咒，我深知多年以前的担忧，却毫无办法，我活成了另一个样子：&lt;strong&gt;过去和未来不兼得，我忘了回忆过去，也不会想往未来。&lt;/strong&gt;&lt;br&gt;但是当我停下来的时候，我又有一种感受，那就是我拥有了前前后后的所有。&lt;br&gt;我几分钟前打算联系一位好友，当我打了三行字后才盯着它的名字看了半天，我越看越陌生，直到我一点也认不出它。我大概明白，我们正在互相远离。我也不知道很多过去怎么和现下链接。&lt;br&gt;所以只好删除所有文字，&lt;strong&gt;再把记忆之门开到另一个方向。&lt;/strong&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="文学" scheme="https://asea.fun/categories/%E6%96%87%E5%AD%A6/"/>
    
    
      <category term="literature" scheme="https://asea.fun/tags/literature/"/>
    
  </entry>
  
  <entry>
    <title>electron学习笔记</title>
    <link href="https://asea.fun/post/5f7056f2.html"/>
    <id>https://asea.fun/post/5f7056f2.html</id>
    <published>2021-04-14T14:59:41.000Z</published>
    <updated>2021-04-17T16:13:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录一下学习electron的坑"><a href="#记录一下学习electron的坑" class="headerlink" title="记录一下学习electron的坑"></a>记录一下学习electron的坑</h1><ol><li>require is not defined<br> 在12版本往后，同时设置<code>nodeIntegration: true</code>及<code>contextIsolation: false</code>解决该问题！</li><li>cannot read property ‘BrowserWindow’ of undefined<br> 在原有的基础上配置<code>enableRemoteModule:true</code></li><li>打包<br> <code>electron-packager . HelloWorld --win --out ../HelloWorldApp --arch=x64 --electron-ersion=1.0.0 --electron-version=12.0.4</code><br> 貌似下载下来一个包要放到哪里来着。。。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;记录一下学习electron的坑&quot;&gt;&lt;a href=&quot;#记录一下学习electron的坑&quot; class=&quot;headerlink&quot; title=&quot;记录一下学习electron的坑&quot;&gt;&lt;/a&gt;记录一下学习electron的坑&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;require is not defined&lt;br&gt; 在12版本往后，同时设置&lt;code&gt;nodeIntegration: true&lt;/code&gt;及&lt;code&gt;contextIsolation: false&lt;/code&gt;解决该问题！&lt;/li&gt;
&lt;li&gt;cannot read property ‘BrowserWindow’ of undefined&lt;br&gt; 在原有的基础上配置&lt;code&gt;enableRemoteModule:true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;打包&lt;br&gt; &lt;code&gt;electron-packager . HelloWorld --win --out ../HelloWorldApp --arch=x64 --electron-ersion=1.0.0 --electron-version=12.0.4&lt;/code&gt;&lt;br&gt; 貌似下载下来一个包要放到哪里来着。。。&lt;/li&gt;
&lt;/ol&gt;

    
    </summary>
    
    
      <category term="笔记" scheme="https://asea.fun/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="notes" scheme="https://asea.fun/tags/notes/"/>
    
      <category term="electron" scheme="https://asea.fun/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>PHP学习笔记</title>
    <link href="https://asea.fun/post/55d182ea.html"/>
    <id>https://asea.fun/post/55d182ea.html</id>
    <published>2021-04-13T04:18:56.000Z</published>
    <updated>2021-04-13T08:47:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以下是我最近学习php的笔记，主要记录自认为会遗忘的知识点</p></blockquote><h1 id="初识php"><a href="#初识php" class="headerlink" title="初识php"></a>初识php</h1><p>php是一种动态网站开发的脚本语言，有交互性，有数据的传递。</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>标准语法<code>&lt;?php php代码 ?&gt;</code></li><li>最后一句php语言可以不带结束符<code>;</code></li><li>最后可以不写<code>?&gt;</code>，这样就可以避免读取最后的空行</li><li>行注释<code>//</code>或<code>#</code></li><li>块注释<code>/* */</code></li></ol><h2 id="开始语法"><a href="#开始语法" class="headerlink" title="开始语法"></a>开始语法</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ol><li>声明<br><code>$var1;</code>或直接赋值<code>$var2 = 1;</code></li><li>删除变量<br><code>unset($var1);</code></li><li>命名规则<ul><li>以$开始</li><li>由字母、数字、下划线组成，但不能以数字开始</li><li>支持中文变量（很不建议你懂的）</li></ul></li><li>预定义变量（均为数组类型）<ul><li>$_GET: 获取所有表单以get方式提交的数据</li><li>$_POST: 提交的数据都会保存在此</li><li>$_REQUEST: GET和POST提交的都会保存</li><li>$GLOBALS: PHP钟所有的全局变量</li><li>$_SERVER: 服务器信息</li><li>$_SESSION: session会话数据</li><li>$_COOKIE: cookie会话数据</li><li>$_ENV: 环境信息</li><li>$_FILES: 用户上传的文件信息</li></ul></li><li>可变变量<br>如果一个变量保存的值刚好是另一个变量的名字，那么可以通过访问一个变量得到另一个变量的值。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a &#x3D; &#39;b&#39;</span><br><span class="line">$b &#x3D; &#39;bb&#39;</span><br><span class="line">echo $$A</span><br></pre></td></tr></table></figure></li><li>变量赋值<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$b &#x3D; 1</span><br><span class="line">$a &#x3D; $b</span><br><span class="line">$a &#x3D; 2 </span><br><span class="line">echo $a，$b</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$b &#x3D; 1</span><br><span class="line">$a &#x3D; &amp;$b &#x2F;&#x2F;引用赋值</span><br><span class="line">$a &#x3D; 2 </span><br><span class="line">echo $a，$b</span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3></li><li>定义常量<ul><li>函数定义 <code>define(&#39;PI&#39;,3.14)</code></li><li>const定义 <code>const PI = 3.14</code></li></ul></li><li>命名规则<ul><li>不需要$</li><li>名字由数字、字母、下划线组成但不能由数字开头</li><li>通常常量都是大写字母</li><li>命名规则其实比较松，比如其实可以用一些特殊字符，但标准下不这样使用 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">define(&#39;-_-&#39;,3); &#x2F;&#x2F;只能这样命名</span><br><span class="line">const -_-,3; &#x2F;&#x2F;这是错误的</span><br></pre></td></tr></table></figure></li><li>注意细节<ul><li>define和const定义的常量是有区别的：访问权限有区别</li><li>常量名不区分大小写，但是可以区分（？？？）</li></ul></li></ul></li><li>使用形式<br><code>echo PI;</code><ul><li>特殊常量的使用形式 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo -_-; &#x2F;&#x2F;X</span><br><span class="line">echo constant(&#39;-_-&#39;); &#x2F;&#x2F;√</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;以下是我最近学习php的笔记，主要记录自认为会遗忘的知识点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;初识php&quot;&gt;&lt;a href=&quot;#初识php&quot; class=&quot;headerlink&quot; title=&quot;初识php&quot;&gt;&lt;/a&gt;初识php&lt;/h1&gt;&lt;p&gt;php是一种动态网站开发的脚本语言，有交互性，有数据的传递。&lt;/p&gt;
&lt;h1 id=&quot;基本语法&quot;&gt;&lt;a href=&quot;#基本语法&quot; class=&quot;headerlink&quot; title=&quot;基本语法&quot;&gt;&lt;/a&gt;基本语法&lt;/h1&gt;&lt;h2 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;标准语法&lt;code&gt;&amp;lt;?php php代码 ?&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;最后一句php语言可以不带结束符&lt;code&gt;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;最后可以不写&lt;code&gt;?&amp;gt;&lt;/code&gt;，这样就可以避免读取最后的空行&lt;/li&gt;
&lt;li&gt;行注释&lt;code&gt;//&lt;/code&gt;或&lt;code&gt;#&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;块注释&lt;code&gt;/* */&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;开始语法&quot;&gt;&lt;a href=&quot;#开始语法&quot; class=&quot;headerlink&quot; title=&quot;开始语法&quot;&gt;&lt;/a&gt;开始语法&lt;/h2&gt;&lt;h3 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;声明&lt;br&gt;&lt;code&gt;$var1;&lt;/code&gt;或直接赋值&lt;code&gt;$var2 = 1;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除变量&lt;br&gt;&lt;code&gt;unset($var1);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;命名规则&lt;ul&gt;
&lt;li&gt;以$开始&lt;/li&gt;
&lt;li&gt;由字母、数字、下划线组成，但不能以数字开始&lt;/li&gt;
&lt;li&gt;支持中文变量（很不建议你懂的）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;预定义变量（均为数组类型）&lt;ul&gt;
&lt;li&gt;$_GET: 获取所有表单以get方式提交的数据&lt;/li&gt;
&lt;li&gt;$_POST: 提交的数据都会保存在此&lt;/li&gt;
&lt;li&gt;$_REQUEST: GET和POST提交的都会保存&lt;/li&gt;
&lt;li&gt;$GLOBALS: PHP钟所有的全局变量&lt;/li&gt;
&lt;li&gt;$_SERVER: 服务器信息&lt;/li&gt;
&lt;li&gt;$_SESSION: session会话数据&lt;/li&gt;
&lt;li&gt;$_COOKIE: cookie会话数据&lt;/li&gt;
&lt;li&gt;$_ENV: 环境信息&lt;/li&gt;
&lt;li&gt;$_FILES: 用户上传的文件信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可变变量&lt;br&gt;如果一个变量保存的值刚好是另一个变量的名字，那么可以通过访问一个变量得到另一个变量的值。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$a &amp;#x3D; &amp;#39;b&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$b &amp;#x3D; &amp;#39;bb&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo $$A&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;变量赋值&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$b &amp;#x3D; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$a &amp;#x3D; $b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$a &amp;#x3D; 2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo $a，$b&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$b &amp;#x3D; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$a &amp;#x3D; &amp;amp;$b &amp;#x2F;&amp;#x2F;引用赋值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$a &amp;#x3D; 2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo $a，$b&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;常量&quot;&gt;&lt;a href=&quot;#常量&quot; class=&quot;headerlink&quot; title=&quot;常量&quot;&gt;&lt;/a&gt;常量&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;定义常量&lt;ul&gt;
&lt;li&gt;函数定义 &lt;code&gt;define(&amp;#39;PI&amp;#39;,3.14)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;const定义 &lt;code&gt;const PI = 3.14&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;命名规则&lt;ul&gt;
&lt;li&gt;不需要$&lt;/li&gt;
&lt;li&gt;名字由数字、字母、下划线组成但不能由数字开头&lt;/li&gt;
&lt;li&gt;通常常量都是大写字母&lt;/li&gt;
&lt;li&gt;命名规则其实比较松，比如其实可以用一些特殊字符，但标准下不这样使用 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;define(&amp;#39;-_-&amp;#39;,3); &amp;#x2F;&amp;#x2F;只能这样命名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const -_-,3; &amp;#x2F;&amp;#x2F;这是错误的&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;注意细节&lt;ul&gt;
&lt;li&gt;define和const定义的常量是有区别的：访问权限有区别&lt;/li&gt;
&lt;li&gt;常量名不区分大小写，但是可以区分（？？？）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用形式&lt;br&gt;&lt;code&gt;echo PI;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;特殊常量的使用形式 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;echo -_-; &amp;#x2F;&amp;#x2F;X&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo constant(&amp;#39;-_-&amp;#39;); &amp;#x2F;&amp;#x2F;√&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

    
    </summary>
    
    
      <category term="笔记" scheme="https://asea.fun/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="notes" scheme="https://asea.fun/tags/notes/"/>
    
      <category term="php" scheme="https://asea.fun/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>PHP学习笔记</title>
    <link href="https://asea.fun/post/55d182ea.html"/>
    <id>https://asea.fun/post/55d182ea.html</id>
    <published>2021-04-13T04:18:56.000Z</published>
    <updated>2021-04-13T09:41:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>视频：<a href="https://www.bilibili.com/video/BV18x411H7qD?p=3">https://www.bilibili.com/video/BV18x411H7qD?p=3</a></p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>Web分为两类：静态网站和动态网站。流程:浏览器发起访问-&gt;DNS解析域名-&gt;服务器电脑-&gt;服务软件</p><h5 id="1、静态网站访问原理："><a href="#1、静态网站访问原理：" class="headerlink" title="1、静态网站访问原理："></a>1、静态网站访问原理：</h5><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200726195840264.png" alt="image-20200726195840264"></p><p><strong>必备工具</strong>：1、有两台电脑，PC（个人电脑），里面需要有浏览器；另外一台为服务器（需要有服务软件，假设为APACHE）,软件没有数据，故需在里面添加文件夹（准备访问的文件/网页）2、下面蓝线代表两个在同一个互联网下。</p><p><strong>访问流程</strong>：1、在浏览器中需输入URL（uniformed resource location，统一资源定位，即互联网的绝对路径）；2、第一部需要经过URL的解析（DNS，DNS内部包含本地DNS与网络DNS，，访问本地DNS无需通过网络，可提高效率。如果本地DNS无法转化IP，就需要网络DNS）。3、DNS将转换后的IP地址返回给浏览器。4、浏览器通过IP地址找到服务器。5、（虽然找到了服务器，但服务器里面资源很多，如何找自己想要的APACH？）这就需要利用端口，APACHE的端口为80。6、访问APACHE后，即可找到要访问的内容（IP地址后的/index.html也称为URI（uniformed resource identify，统一资源标志。目标机器上相对某个文件夹的相对路径，，，注/即为根目录，相对根目录所以其为相对路径））.7、Apache根据URI读取文件，读取文件的内容（注意只是读取）。8、Apache读取文件后，返回结果。9、浏览器看之前，需要经过浏览器解析，才可展示给用户。（所有人访问的时候，都访问的一样的index文件，若要改变显示的信息，就需要改变index，比较麻烦）</p><h5 id="2、动态网站访问"><a href="#2、动态网站访问" class="headerlink" title="2、动态网站访问"></a>2、动态网站访问</h5><p>区别：相对静态网站访问多了几个步骤：需要服务器端解析；需要数据库</p><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200726202647377.png" alt="image-20200726202647377"></p><p>在访问内容时，Apache不能识别PHP（只能识别html），需通过PHP引擎读取PHP代码。读取PHP代码之后需要进行解析，解析过程中可能需要数据库。PHP引擎通过数据库，找到内容以后再返回给Apache。（注意，PHP引擎得到的内容是PHP代码，但交给Apache的是HTML内容，，，因为浏览器只能解析html文件）</p><h5 id="3、C-S、B-S"><a href="#3、C-S、B-S" class="headerlink" title="3、C/S、B/S"></a>3、C/S、B/S</h5><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200726203705834.png" alt="image-20200726203705834" style="zoom: 67%;"><p><strong>软件设计结构</strong>：C/S、B/S</p><p>C/S：Client客户端/Server服务端，用户需要安装客户端产品才能访问服务器，且只能访问一种软件（自己的）</p><p>B/S：Browser浏览器/Server服务端，用户只需要安装浏览器，就可以访问所有的服务器（B/S架构服务）。</p><h5 id="4、MySQL访问流程"><a href="#4、MySQL访问流程" class="headerlink" title="4、MySQL访问流程"></a>4、MySQL访问流程</h5><p>Mysql是一款C/S架构的软件，需要通过客户端来访问服务端</p><p><strong>运行：</strong>1、启用MySQL客户端：mysqi.exe</p><p>2、mysql.exe通过cmd运行（安装配置环境变量后可这样运行）</p><p><strong>操作：</strong>由于qq服务器不在自己的电脑（即客户端与服务器可分离），故MySQL客户端访问服务器需进行寻找匹配：连接认证</p><p>a、连接：IP端口和确认。。。如果是本地，均可省略</p><p>命令：<em>-h 主机地址</em>      <em>-hlocalhost（或IP）</em>  localhost是主机名     <em>-P 端口 -P3306</em>（MySQL服务器的端口默认是3306）</p><p>b、认证：通过用户名和密码进入服务器。</p><p><em>-u 用户名     -uroot*（不可省略，匿名用户除外）      *-p 密码    -proot</em></p><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200726211039168.png" alt="image-20200726211039168"></p><p><strong>退出命令行：</strong>\q</p><p><strong>注意：</strong>通常连接认证的时候不建议密码明文，可在输入-p之后回车，系统会再次让输入密码，此时为密文。</p><h5 id="5、PHP连接MySQL数据库"><a href="#5、PHP连接MySQL数据库" class="headerlink" title="5、PHP连接MySQL数据库"></a>5、PHP连接MySQL数据库</h5><p>PHP本身不具备操作MySQL数据库的能力，需要借助MySQL扩展来实现。</p><p>1、PHP加载MySQL扩展：php.ini文件中。（不要用记事本打开）</p><p>2、PHP中所有扩展都是在ext的文件夹中，需要指定扩展所在路径：extension_dir。</p><p>3、php.ini已经被Apache重载，故需要重启才可。</p><h5 id="6、设定系统时区"><a href="#6、设定系统时区" class="headerlink" title="6、设定系统时区"></a>6、设定系统时区</h5><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200726214149458.png" alt="image-20200726214149458"></p><h5 id="7、配置虚拟主机"><a href="#7、配置虚拟主机" class="headerlink" title="7、配置虚拟主机"></a>7、配置虚拟主机</h5><p>一台服务器若只能部署一个网站，则非常浪费。故需通过其他渠道实现一台主机上部署多个网站。</p><p><strong>虚拟主机：</strong>Virtual machine，并不存在的主机，但可提供真实主机所实现的功能。虚拟主机是将计算机中不同的文件夹进行不同的命名，然后可实现让服务器（Apache）根据用户的需求从不同的文件夹（网站）中读取不同的内容。</p><p><strong>分类：</strong>在Apache中，可将虚拟主机划分为两类</p><p>1、基于IP的虚拟主机，一台电脑上有多个IP，每个IP对应一个网站。</p><p>原理：电脑默认只有一个IP，因为通常只有一个网卡，但有的电脑可配置多个网卡，每个网卡可绑定一个IP地址。</p><p>2、基于域名的虚拟主机：一台主机只有一个IP，但IP下课制作多个网站，但需给每个网站不同的名字。</p><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h5 id="初步语法"><a href="#初步语法" class="headerlink" title="初步语法"></a>初步语法</h5><p>PHP是一种运行在服务器端的脚本语言，可以嵌入到HTML中。（HTML是通过浏览器解析，PHP是通过PHP引擎解析,那么嵌入到里面以后如何区分什么时候通过什么来解析？）</p><p><strong>PHP代码标记</strong>：可通过多种标记来区分PHP脚本</p><p>ASP标记  &lt;% php 代码 %&gt;；    短标记  <? Php 代码 ?>    以上两种基本弃用，如使用，需在配置文件中开启</p><p>脚本标记 ：也不经常用</p><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200726215627740.png" alt="image-20200726215627740" style="zoom:67%;"><p>标准标记：</p><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200726215718187.png" alt="image-20200726215718187" style="zoom:67%;"><p><strong>PHP注释：</strong>行注释：//（双斜杠）或#          块注释：/*     */</p><p><strong>PHP语句分隔符：</strong></p><p>1、在PHP中，代码以行为单位，系统需要通过判断行的结束，通常都用；表示结束。</p><p>注注注：PHP中标记结束符?&gt;有自带语句结束符的效果，最后一行PHP代码可以没有语句结束符。</p><p>2、PHP中代码的书写并不是全嵌入到HTML中，而是单独存在，所以可以不用标记结束符?&gt;</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>1、变量是用来存储数据的；                2、变量是存在名字的；</p><p>3、变量是通过名字访问数据的；        4、变量的数据是可以改变的。</p><h5 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h5><p>1、定义：在系统中增加对应的变量名字（在内存中开发一块地）</p><p>2、赋值：将数据赋值给变量（在定义时直接初始化）</p><p>3、可通过变量名访问数据</p><p>4、变量可从内存中删除</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义时不需要关键字，但必须使用$符号</span></span><br><span class="line">$var1;</span><br><span class="line">$var2 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">echo</span> $var2;   <span class="comment">// 访问变量，通过变量名找到数据，并显示</span></span><br><span class="line">$var2 = <span class="number">2</span>;        <span class="comment">// 修改变量</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr/&gt;&#x27;</span>,$var2;    <span class="comment">// hr/“ 为下划线，分隔符</span></span><br><span class="line"><span class="keyword">unset</span>($var2); <span class="comment">// 删除变量，从内存中剔除 </span></span><br><span class="line"><span class="keyword">echo</span> $var2;   <span class="comment">// 此时会报错，因为不存在变量</span></span><br></pre></td></tr></table></figure><h5 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h5><p>1、变量名字必须以”$”开头；</p><p>2、变量名可由数字、字母、下划线命名，但必须以字母和下划线开头</p><p>3、允许中文变量；</p><h5 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h5><p>即提前定义的变量，由系统定义的变量，存储许多要用到的数据（预定义变量都是数组）。</p><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200727081937045.png" alt="image-20200727081937045"></p><h5 id="可变变量"><a href="#可变变量" class="headerlink" title="可变变量"></a>可变变量</h5><p>如果一个变量保存的值刚好是另外一个变量的名字，则可直接通过访问一个变量得到另外一个变量的值：但需在变量前多加一个$符号</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$a = <span class="string">&#x27;b&#x27;</span>;    <span class="comment">// a变量的内容正好是b变量的名称，故称a为可变变量</span></span><br><span class="line">$b = <span class="string">&#x27;bb&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> $$a;    <span class="comment">// 使用时需加一个$符号</span></span><br></pre></td></tr></table></figure><h5 id="变量传值"><a href="#变量传值" class="headerlink" title="变量传值"></a>变量传值</h5><p>将一个变量赋值给另一个变量：值传递、引用传递</p><p>值传递：将变量保存的值复制一份，并将该值给另外一个变量保存(两个变量无关系)</p><p>引用传递：将变量保存值所在的内存地址传递给另外一个变量，两个变量同指一块内存（名字不一样而已）。</p><h6 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h6><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200727083357714.png" alt="image-20200727083357714"></p><p>注：c++中，栈区由编译器自动释放，存储局部变量和函数参数；代码区存放函数的二进制代码，由操作系统管理；全局区存放全局变量、静态变量、常量；堆区由程序员分配释放。</p><h6 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h6><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 值传递</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 2.1 执行此行，在栈区开辟一块内存存储$a，在数据段中开辟一块内存保存值1。然后将1所在位置赋值给a变量</span></span><br><span class="line">$a = <span class="number">1</span>;   </span><br><span class="line"><span class="comment">// 2.2 栈区开辟存储$b；发现是赋值运算，故会取出$a的值，</span></span><br><span class="line"><span class="comment">// 并在数据段重新开辟一块内存并保存，且再把新开辟地址赋值给栈区的变量b</span></span><br><span class="line">$b = $a;   <span class="comment">// 值传递</span></span><br><span class="line"><span class="comment">// 2.3 执行该行</span></span><br><span class="line">$b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">echo</span> $a,$b;</span><br></pre></td></tr></table></figure><p>讲解运行步骤：</p><p>1、代码装载：从脚本文件中将代码读取出来，进行编译，将编译结果存放到代码段（二进制）。</p><p>2、代码执行：从代码段中一行一行执行代码。</p><p>3、脚本执行结束：系统会回收所有内存（栈区、代码区）：因为数据段与栈区有关系，回收栈后，数据段的内容无意义，相当于回收。</p><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200727085308489.png" alt="image-20200727085308489" style="zoom: 67%;"><h6 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h6><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用传递</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.1 执行此行，在栈区开辟一块内存存储$a，在数据段中开辟一块内存保存值1。然后将1所在位置赋值给a变量</span></span><br><span class="line">$a = <span class="number">1</span>;   </span><br><span class="line"><span class="comment">// 2.2 栈区开辟存储$b；发现是引用运算，故会取出$a的地址，并将该地址给栈区的变量b</span></span><br><span class="line">$b = $a;   <span class="comment">// 值传递</span></span><br><span class="line"><span class="comment">// 2.3 执行该行</span></span><br><span class="line">$b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">echo</span> $a,$b;</span><br></pre></td></tr></table></figure><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200727091111294.png" alt="image-20200727091111294"></p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量与变量一样，均是用来保存数据的。</p><h5 id="常量的基本概念"><a href="#常量的基本概念" class="headerlink" title="常量的基本概念"></a>常量的基本概念</h5><p>const/constant:是在程序运行中，不可改变的量（数据）；常量一旦定义，通常不可更改。</p><h5 id="常量定义的形式"><a href="#常量定义的形式" class="headerlink" title="常量定义的形式"></a>常量定义的形式</h5><h6 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h6><p>1、使用定义常量的函数：define（’常量名’,常量值）——类似于c++的 #define</p><p>2、const</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 使用函数定义常量</span></span><br><span class="line">define(<span class="string">&#x27;PI&#x27;</span>,<span class="number">3.1415</span>);   <span class="comment">// 注意此处与c++不同，#define 为预处理命令，宏定义，无需加；。。</span></span><br><span class="line"><span class="comment">// 使用const关键字定义</span></span><br><span class="line"><span class="keyword">const</span> PI1 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义特殊常量</span></span><br><span class="line">define(<span class="string">&#x27;^-^&#x27;</span>,<span class="string">&#x27;smile&#x27;</span>);</span><br><span class="line"><span class="comment">// const ^-^   // 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问常量</span></span><br><span class="line"><span class="keyword">echo</span> PI1;</span><br><span class="line"><span class="comment">// echo ^-^   // 报错</span></span><br><span class="line">constant(<span class="string">&#x27;^-^&#x27;</span>);  <span class="comment">// 特殊常量的访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统常量</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr/&gt;&#x27;</span>,PHP_VERSION,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,PHP_INI_SIZE,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,PHP_INI_MAX;   <span class="comment">// 有符号整形</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 魔术常量</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr/&gt;&#x27;</span>,<span class="keyword">__DIR__</span>,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,<span class="keyword">__FILE__</span>,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,<span class="keyword">__LINE__</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">__LINE__</span>;  <span class="comment">// 输出的行数会变</span></span><br></pre></td></tr></table></figure><h6 id="常量命名规则："><a href="#常量命名规则：" class="headerlink" title="常量命名规则："></a>常量命名规则：</h6><p>1、常量不需要使用”$”符号，一旦使用被认为是变量</p><p>2、变量名可由数字、字母、下划线命名，但必须以字母和下划线开头（const定义）</p><p>3、常量的名字通常是以大写字母为主（与变量以示区别）</p><p>4、变量命名的规则比变量要松散，可以使用一些特殊字符（define函数）</p><p>5、变量通常不区分大小写，但可以区分（define函数的第三个参数）</p><h5 id="系统常量"><a href="#系统常量" class="headerlink" title="系统常量"></a>系统常量</h5><p>魔术常量：由双下划线+常量名+双下划线组成，其值会随着环境变化而变化，用户无法改变。</p><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200727094945925.png" alt="image-20200727094945925"></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型：data type，在PHP中指的是数据本身的类型，而不是变量的类型。PHP是一种弱类型语言，变量本身没有数据类型。</p><h5 id="PHP八大数据类型"><a href="#PHP八大数据类型" class="headerlink" title="PHP八大数据类型"></a>PHP八大数据类型</h5><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200727095933827.png" alt="image-20200727095933827"> </p><h5 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h5><p>很多情况需要指定数据类型，需要将外部数据类型（当前PHP获得的数据）转换成目标数据类型。</p><h6 id="两种转化方式："><a href="#两种转化方式：" class="headerlink" title="两种转化方式："></a>两种转化方式：</h6><p>1、自动转化：系统根据自己的需求判断，自己转化（用的较多、但效率较低）。</p><p>2、强制转换（手动）：在变量之前增加一个()，并在括号里面写上对于的类型，其中NULL特殊，需用unset。</p><h6 id="转换说明："><a href="#转换说明：" class="headerlink" title="转换说明："></a>转换说明：</h6><p>1、以字母开头的字符串，永远为0；</p><p>2、以数字开头的字符串，取到碰到字符串为止。（不会同时包含两个小数点）</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 数据类型</span></span><br><span class="line"><span class="comment">// 创建数据</span></span><br><span class="line">$a = <span class="string">&#x27;abcd1.1.1&#x27;</span>;</span><br><span class="line">$b = <span class="string">&#x27;1.1.1abc&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动转换。算术运算，系统先转化为数值类型，然后运算</span></span><br><span class="line"><span class="keyword">echo</span> $a+$b;  <span class="comment">//   结果为1.1（0+1.1）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制转换</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>,(<span class="keyword">float</span>)$a,(<span class="keyword">float</span>)$b;  <span class="comment">// 01.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型判断</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr/&gt;&#x27;</span>;</span><br><span class="line">var_dump(is_int($a));         <span class="comment">// bool(FALSE)</span></span><br><span class="line">var_dump(is_string($a));      <span class="comment">// bool(TRUE)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数据类型</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr/&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> gettype($a);    <span class="comment">// string（虽然前面强制转换了，但并未改变本身）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置类型</span></span><br><span class="line"><span class="comment">// var_dump 输出展示展示代码内容，结构与类型。该函数作可以窥探所有内容的类型，以及内部信息</span></span><br><span class="line">var_dump(settype($b,<span class="string">&#x27;int&#x27;</span>));    <span class="comment">// 先将字符串转换为int型，转换成功返回true，var_dump判断是否为bool型，故显示                                 bool（true）</span></span><br><span class="line"><span class="keyword">echo</span> gettype($b),$b;     <span class="comment">// interger1</span></span><br></pre></td></tr></table></figure><h5 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">十进制转换二进制-----&gt;除以2</span></span><br><span class="line"><span class="comment">10  1010  注：不管结果ruhr，均需补足32位：00000000 00000000 00000000 00001010</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// php中提供了很多函数进行转换：</span></span><br><span class="line"><span class="comment">// Decbin():十进制转二进制</span></span><br><span class="line">var_dump(decbin(<span class="number">107</span>));     <span class="comment">// 结果：string(7) &quot;1101011&quot;</span></span><br><span class="line"><span class="comment">// 同理，还有Decoct():十进制转八进制</span></span><br><span class="line"><span class="comment">// Dechex():十进制转十六进制</span></span><br><span class="line"><span class="comment">// Bindec():二进制转十进制</span></span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h5 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h5><p>问：为什么浮点数和整型均占用四个字节，为什么比整型表示的范围大？</p><p>整型数据的32位均通过*2转化为十进制。而浮点型中，前八位的后七位为指数，所以表示的范围要大。</p><p>另，实际使用时，尽量不用浮点型数字做精确判断，且计算机中凡是小数基本上均不准确。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浮点数的定义</span></span><br><span class="line">$f1 = <span class="number">1.23</span>;</span><br><span class="line">$f2 = <span class="number">1.23e10</span>;</span><br><span class="line">$f3 = PHP_INT_MAX+<span class="number">1</span>;   <span class="comment">// 若整型超过自身存储的大小之后会自动改为浮点型存储</span></span><br><span class="line"></span><br><span class="line">var_dump($f1,$f2,$f3);</span><br><span class="line"><span class="comment">// 结果：float(1.23)float(1.2300000000) float(214748348)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浮点数判断</span></span><br><span class="line">$f4 = <span class="number">0.7</span>;</span><br><span class="line">$f5 = <span class="number">2.1</span>;</span><br><span class="line">$f6 = $f5/<span class="number">3</span>;</span><br><span class="line">var_dump($f6 == $f4);      <span class="comment">// 结果：bool(false),,因此其不能进行精确判断</span></span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 运算符：是一种将数据进行运算的特殊符号，在PHP中一共有十多种运算符。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 算术运算符   +-*/%</span></span><br><span class="line"><span class="comment">// 比较运算符   &gt; &gt;= &lt; &lt;= ==(数据大小相同即可，无需考虑数据数据类型) != ===(全等于，大小及数据类型均等) !==</span></span><br><span class="line">$a = <span class="string">&#x27;123&#x27;</span>;  <span class="comment">// 字符串</span></span><br><span class="line">$b = <span class="number">123</span>;  <span class="comment">// 整型</span></span><br><span class="line">var_dump($a == $b);   <span class="comment">// 结果： bool(true)</span></span><br><span class="line"></span><br><span class="line">var_dump($a === $b);   <span class="comment">// 结果： bool(false)   不全等于</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 逻辑运算符 &amp;&amp;(左边条件与右边条件同时成立) ||(有一个满足即可) !(取反)</span></span><br><span class="line">$c = <span class="string">&#x27;weekend&#x27;</span>;</span><br><span class="line">$d = <span class="string">&#x27;goods&#x27;</span>;</span><br><span class="line"></span><br><span class="line">var_dump($c == <span class="string">&#x27;weekend&#x27;</span> &amp;&amp; $d == <span class="string">&#x27;good&#x27;</span>);   <span class="comment">// bool(false)</span></span><br><span class="line">var_dump($c == <span class="string">&#x27;weekend&#x27;</span> &amp;&amp; $d == <span class="string">&#x27;good&#x27;</span>);   <span class="comment">// bool(true)</span></span><br><span class="line">var_dump(!($c == good);   <span class="comment">// bool(true)</span></span><br><span class="line">         </span><br><span class="line"><span class="comment">// 连接运算符  .(将字符串连接一起)   .=(将左边内容与右边内容连接起来并重新赋值)</span></span><br><span class="line">$e = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">$f = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">echo</span> $e . $f;   <span class="comment">// hello 123（注意，此处有强制类型转换）</span></span><br><span class="line"></span><br><span class="line">$e .= $e;      </span><br><span class="line"><span class="keyword">echo</span> $e;       <span class="comment">// hello 123</span></span><br><span class="line">     </span><br><span class="line"><span class="comment">// 错误抑制符：@(可能出错的表达式)，在PHP中有一些错误可以提前预知，但又不想报错，这就需要错误抑制符。</span></span><br><span class="line">$g = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">echo</span> $f % $g;    <span class="comment">// 此时会报错</span></span><br><span class="line"><span class="keyword">echo</span> @($f % $g); <span class="comment">// 不会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 三目运算符(问号表达式) 表达式1 ？ 表达式2：表达式3</span></span><br><span class="line"><span class="keyword">echo</span> $g ==<span class="number">0</span>?<span class="number">1</span>:<span class="number">2</span>;</span><br><span class="line">   </span><br><span class="line"><span class="comment">// 自操作运算符 ++ --(前置或后置如果只有自操作，则效果一致)</span></span><br><span class="line">$i = $g++;    <span class="comment">// $g = 1;  $i = 0</span></span><br><span class="line">$i = ++$g;    <span class="comment">// $g = 2;  $i = 2;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 位运算符</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">计算机码：计算机在实际存储数据时，采用的编码规则(二进制规则)</span></span><br><span class="line"><span class="comment">计算机码：原码、反码和补码。数值本身最左边一位用来充当符号位：正数为0，负数为1；</span></span><br><span class="line"><span class="comment">原码:数据本身从十进制转换成二进制得到的结果</span></span><br><span class="line"><span class="comment">     正数，左符号位为0         负数：右符号位为1</span></span><br><span class="line"><span class="comment">反码：针对负数，符号位不变，其他位取反。</span></span><br><span class="line"><span class="comment">补码：针对负数，反码+1.（系统中存的为补码）</span></span><br><span class="line"><span class="comment">以0为例，若是原码，则+0 = 00000000  -0 = 10000000；二者不一样</span></span><br><span class="line"><span class="comment">         -0 反码 11111111   -0 补码 00000000   与+0一样（正数原码、补码、反码为其本身）。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$j = <span class="number">5</span>;      <span class="comment">// 原码：00000101</span></span><br><span class="line">$k = <span class="number">-5</span>;     <span class="comment">// 原码：10000101  反码：11111010  补码：11111011</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 位运算：取出计算机中最小的单位（bit）进行运算  &amp; | ~(按位取反) ^(按位异或) &gt;&gt;(右移) &lt;&lt;(左移)</span></span><br><span class="line"><span class="comment">// 注：1、系统进行位运算时，均是利用补码进行运算的     2、运算结束之后，必须转换为原码进行显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按位取与         </span></span><br><span class="line">var_dump($j &amp; $k);    <span class="comment">// int(1)</span></span><br><span class="line"><span class="comment">/*    5  00000101</span></span><br><span class="line"><span class="comment">     -5  11111011</span></span><br><span class="line"><span class="comment">      &amp;  00000001  判断：符号位为0，正数，所存即为原码，无需操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按位取反</span></span><br><span class="line">var_dump(~ $k);       <span class="comment">// int(4)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     -5  11111011</span></span><br><span class="line"><span class="comment">      ~  00000100  正数即为原码，</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">         </span><br><span class="line"><span class="comment">// 按位左移</span></span><br><span class="line">var_dump($k &gt;&gt; <span class="number">1</span>)   <span class="comment">// int(-3)</span></span><br><span class="line">var_dump($k &gt;&gt; <span class="number">2</span>)   <span class="comment">// int(-2)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     -5  11111011</span></span><br><span class="line"><span class="comment">    &gt;&gt;2  11111110(右移补符号位)</span></span><br><span class="line"><span class="comment">   反码  11111101(补码-1)</span></span><br><span class="line"><span class="comment">   原码  10000010(除符号位均取反)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">         </span><br><span class="line"><span class="comment">// 运算符优先级</span></span><br></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p><strong>分类</strong>：顺序结构、分支结构（if分支与switch分支）、循环结构</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分支结构——if分支</span></span><br><span class="line">$day = <span class="string">&#x27;星期天&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>($day == <span class="string">&#x27;星期1&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;go out&#x27;</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;work&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch 分支：同一条件下，有多个值，且每个值对应一种操作</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">switch(条件表达式)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    case 值1:</span></span><br><span class="line"><span class="comment">        代码;</span></span><br><span class="line"><span class="comment">        break;</span></span><br><span class="line"><span class="comment">    case 值1:</span></span><br><span class="line"><span class="comment">        代码;</span></span><br><span class="line"><span class="comment">        break;</span></span><br><span class="line"><span class="comment">    default:</span></span><br><span class="line"><span class="comment">        代码;</span></span><br><span class="line"><span class="comment">        break;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环结构 for循环、while循环、Do-While循环、foreach循环（针对数组）</span></span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> $i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// while  Do-while循环</span></span><br><span class="line"><span class="keyword">while</span>($i &lt;= <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> $i++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环控制</span></span><br><span class="line"><span class="comment">// 1、中断控制：重新开始从头循环 continue(需求，输出1-100的5的倍数)  </span></span><br><span class="line">$i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>($i &lt;= <span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>($i % <span class="number">5</span> != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        $i++ ;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> $i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  <img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200727163058009.png" alt="image-20200727163058009"></p><h5 id="流程控制替代语法"><a href="#流程控制替代语法" class="headerlink" title="流程控制替代语法"></a>流程控制替代语法</h5><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200727163350639.png" alt="image-20200727163350639"></p><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200727164308351.png" alt="image-20200727164308351" style="zoom:67%;"><p>上述书写中(tr 代表表格的一行，td代表表格的一列)，大括号很容易丢失，所以PHP有了一种替代机制，让其可以不用书写大括号。</p><p><em>for(;;){   =&gt; :      }=&gt;endfor;</em></p><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200727164715418.png" alt="image-20200727164715418" style="zoom:67%;"><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200727164840718.png" alt="image-20200727164840718"></p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>文件包含：在一个PHP脚本中，将另外一个文件包含进来，合作完成一件事情。</p><h5 id="文件包含作用"><a href="#文件包含作用" class="headerlink" title="文件包含作用"></a>文件包含作用</h5><p>1、要么使用被包含文件中的内容，实现代码共享，向上包含（索要）</p><p>2、要么自己的东西可被使用，向下包含（给予）：自己有某个东西需要别的脚本显示。</p><p>最大的作用是分工协作，共同完成一件事情。</p><h5 id="文件包含四种形式"><a href="#文件包含四种形式" class="headerlink" title="文件包含四种形式"></a>文件包含四种形式</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含文件：使用数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含文件：include  include_once(系统自动判断文件包含当中，是否已被包含过)  require  require_once</span></span><br><span class="line"><span class="comment">// 向上包含：使用已准备好的文件</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;include1.php&#x27;</span>;  <span class="comment">// 包含当前文件所在文件夹下的include1.php文件</span></span><br><span class="line"><span class="keyword">echo</span> $a,PI;              <span class="comment">// include1.php中已定义这个变量和常量，故可直接使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向下包含：类似于调用了子函数</span></span><br><span class="line">$a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&#x27;display.php&#x27;</span>;   <span class="comment">// 该文件中可输出a和PI</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="文件加载原理"><a href="#文件加载原理" class="headerlink" title="文件加载原理"></a>文件加载原理</h5><h6 id="PHP代码执行流程："><a href="#PHP代码执行流程：" class="headerlink" title="PHP代码执行流程："></a>PHP代码执行流程：</h6><p>1、读取代码文件（相当于PHP程序）；</p><p>2、编译：将PHP代码转化成字节码（二进制），生成opcode（php可解析的代码）；</p><p>3、针对引擎来解析opcode，按照细节码进行逻辑运算；</p><p>4    转化成对应的html代码。</p><p>1、在文件加载（include 或 require）时，系统会自动嵌入对应的include位置</p><p>2、在PHP中，被包含的文件是单独编译的。。</p><p>若编译过程中报错，则会失败，不执行。但若是被包含文件有错误，则系统执行到include语句时，才回报错。</p><h6 id="include-和-require区别"><a href="#include-和-require区别" class="headerlink" title="include 和 require区别"></a>include 和 require区别</h6><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200727185824220.png" alt="image-20200727185824220" style="zoom:67%;"><p>include会执行多次，导致报错（重复定义变量）。。而include_once不会出现这种情况。</p><p>require和include区别在于：若未包含文件，则报错形式不一样。（require包含错误文件，则include后不再执行；include未包含文件，会警告，但是仍会执行后面的。）</p><h5 id="文件加载路径"><a href="#文件加载路径" class="headerlink" title="文件加载路径"></a>文件加载路径</h5><p>文件加载时需指定文件路径，才能保证PHP正确找到对应的文件。</p><p>1、绝对路径（从磁盘根目录开始—本地绝对路径；从网站根目录开始—网络绝对路径–相对于/的路径，，/相当于绝对路径）</p><p>2、相对路径：从当前文件所在目录开始的路径。。.或者./表示当前文件夹。。../上级目录</p><p>绝对路径和相对路径加载区别：绝对路径相对效率偏低（因为要从跟目录开始找，但相对安全，路径固定）</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 文件加载路径</span></span><br><span class="line"><span class="comment">// 相对路径加载(只供演示，不考虑多次加载)</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;include1.php&#x27;</span>;  <span class="comment">// 不写路径，默认在当前文件夹下</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;./include1.php&#x27;</span>; <span class="comment">// 另一种形式</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../hostdoc/include1.php&#x27;</span>;  <span class="comment">// ../代表当前文件夹的上一个文件夹，hostdoc为当前文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绝对路径</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;E:/server/apache/htdocs/include1.php&#x27;</span>;   <span class="comment">// 绝对路径，不会出错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="文件嵌套包含"><a href="#文件嵌套包含" class="headerlink" title="文件嵌套包含"></a>文件嵌套包含</h5><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200727194419362.png" alt="image-20200727194419362" style="zoom:67%;"><p><strong>嵌套包含容易出现相对路径出错的问题。</strong></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>将实现某一功能的代码块封装到一个结构中，从而实现代码的复用。</p><h5 id="函数定义语法（与c的差别在于可在任意位置调用子函数）"><a href="#函数定义语法（与c的差别在于可在任意位置调用子函数）" class="headerlink" title="函数定义语法（与c的差别在于可在任意位置调用子函数）"></a>函数定义语法（与c的差别在于可在任意位置调用子函数）</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function 函数名(参数)&#123;</span></span><br><span class="line"><span class="comment">函数体</span></span><br><span class="line"><span class="comment">返回值</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 函数的定义</span></span><br><span class="line"><span class="comment">// 1、函数不会自动运行，必须调用才可</span></span><br><span class="line"><span class="comment">// 2、代码执行阶段，遇到函数名字才回调用，不是在编译阶段</span></span><br><span class="line"><span class="comment">// 3、函数调用可在声明之前</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span>;   <span class="comment">// 没有返回值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的调用（）</span></span><br><span class="line">diaplay();   <span class="comment">// 若函数有参数，则需加参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数命名规范：字母数字下划线、但不能数字开头。</span></span><br><span class="line"><span class="comment">// 一半遵循以下规则：1、驼峰法：除第一个单词外，其余首字母大写。showParent()   2、下划线方式</span></span><br><span class="line"><span class="comment">// 在一个脚本函数周期中，不允许出现同名函数。</span></span><br></pre></td></tr></table></figure><h5 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义函数:定义函数时使用的参数，形参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">$arg1,$arg2</span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> arg1+arg2;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数时使用的参数，实参</span></span><br><span class="line">$num1 = <span class="number">10</span>;</span><br><span class="line">add($num1,<span class="number">20</span>);  <span class="comment">// 1、实参个数可以多于形参（不能少于），只是函数不用而已  2、理论上实参个数没有限制</span></span><br><span class="line"><span class="comment">/* 调用过程：1、系统调用add函数时，会去内存中找是否有add函数</span></span><br><span class="line"><span class="comment">             2、系统在栈区开辟内存空间运行函数add</span></span><br><span class="line"><span class="comment">             3、系统查看函数本身是否有形参</span></span><br><span class="line"><span class="comment">             4、系统判断调用函数时是否有实参</span></span><br><span class="line"><span class="comment">             5、系统默认会将实参$num、20分别赋值给形参</span></span><br><span class="line"><span class="comment">             6、执行函数体、运行</span></span><br><span class="line"><span class="comment">             7、返回值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认值：形参的默认值。。若调用时没有提供实参，则函数使用默认值执行函数</span></span><br><span class="line"><span class="comment">// 注：1、默认值定义时，应放在后边，不能左边有默认值，而右边没有</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moren</span>(<span class="params">$num1 = <span class="number">0</span>,$num2 =<span class="number">0</span></span>)  // 当前的<span class="title">num1</span>是形参，编译时不执行。且如果外部有同名子变量，也不会冲突</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> $num1-$num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上述实参形参的传递相当于值传递，函数内部改变变量的内容，不会影响外面变量的内容</span></span><br><span class="line"><span class="comment">// 引用传递：可在函数内部改变外部变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yinyong</span>(<span class="params">$a,&amp;$b</span>)   // 函数要的是地址，故将外部变量<span class="title">b</span>存储的地址取出赋值给了形参</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $b = $b - <span class="number">1</span>;</span><br><span class="line">    $a = $a <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="number">10</span>;</span><br><span class="line">$b = <span class="number">5</span>;</span><br><span class="line">yinyong($a,$b);    <span class="comment">// 注意：此处不取地址..另，引用传递不可传入数字（常量中存储的不是地址）</span></span><br></pre></td></tr></table></figure><h5 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h5><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200727204330212.png" alt="image-20200727204330212" style="zoom:67%;"><h5 id="作用域（与c差别在于全局变量不能直接被函数调用）"><a href="#作用域（与c差别在于全局变量不能直接被函数调用）" class="headerlink" title="作用域（与c差别在于全局变量不能直接被函数调用）"></a>作用域（与c差别在于全局变量不能直接被函数调用）</h5><p>作用域：通常是指变量可以被访问的区域。</p><p>在PHP中，作用域严格分为两种，以及内部定义的一种</p><p>1、全局变量：所属全局空间，在PHP中只允许在全局空间使用，函数内部不可用。（c++可使用）</p><p>2、局部变量：函数内部的变量</p><p>3、超全局变量：预定义变量（系统定义的）,没有访问限制，能够帮助局部去访问全局变量。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> php</span><br><span class="line"></span><br><span class="line"><span class="comment">// php中作用域</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认的代码空间：全局空间</span></span><br><span class="line">$global = <span class="string">&#x27;global area&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部变量（函数内部定义）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $inner = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 访问全局变量</span></span><br><span class="line">    <span class="keyword">echo</span> $global;   <span class="comment">// 函数内部不能访问全局变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 转化为超全局变量，使得函数内部可以访问</span></span><br><span class="line">    <span class="keyword">echo</span> $GLOBALS[<span class="string">&#x27;global&#x27;</span>];  <span class="comment">// 这样可访问</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">display();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>想在函数内部访问全局变量，可通过$GLOBALS，也可使用引用传值。</strong></p><p>另，还有一种方式既可从全局访问局部、也可从局部访问全局。即，<strong>global关键字</strong>：</p><p>1、若使用global定义的关键字在外部存在，那么系统在函数内部定义的变量直接指向外部变量所指向的内存空间（同一个变量）。</p><p>2、若其定义的变量在外部不存在，系统会自动在全局空间定义一个与局部变量同名的全局变量。</p><p>本质为：在函数的内部和外部，对一个同名变量使用同一块内存地址保存数据。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> php</span><br><span class="line"></span><br><span class="line"><span class="comment">// global关键字的应用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认的代码空间：全局空间</span></span><br><span class="line">$global = <span class="string">&#x27;global area&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部变量（函数内部定义）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 访问全局变量</span></span><br><span class="line">    <span class="keyword">echo</span> $global;   <span class="comment">// 函数内部不能访问全局变量</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment">// 1、全局变量存在</span></span><br><span class="line">    <span class="keyword">global</span> $global;</span><br><span class="line">    <span class="keyword">echo</span> $global;    <span class="comment">// 此时可以调用全局变量</span></span><br><span class="line">   <span class="comment">//2、全局变量不存在</span></span><br><span class="line">    <span class="keyword">global</span> $local = <span class="string">&#x27;inner&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $local;   <span class="comment">// 访问局部变量</span></span><br><span class="line">display();</span><br></pre></td></tr></table></figure><h5 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h5><p>静态变量：static是在函数内部定义的变量，使用static关键字修饰，用来实现夸函数共享数据的变量（注：跨函数是指同个函数多次调用）。</p><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200727213251776.png" alt="image-20200727213251776" style="zoom:67%;"><p><strong>静态变量原理：系统在进行编译的时候，就已经对static这一行进行了初始化：即为静态变量赋值。。。而在执行时，会跳过初始化这一行。</strong></p><h5 id="可变函数（未写全）"><a href="#可变函数（未写全）" class="headerlink" title="可变函数（未写全）"></a>可变函数（未写全）</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可变函数:当前有一个变量所保存的值，刚好是一个函数的名字，那么就可以使用$变量()来充当函数名使用。</span></span><br><span class="line"><span class="comment">// 可变函数在使用系统函数时，需用户在外部定义一个自定义函数，但是需要传入到系统函数内部使用。</span></span><br><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">__FUNCTION__</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义变量</span></span><br><span class="line">$func = <span class="string">&#x27;display&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可变函数</span></span><br><span class="line">$func();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名函数：没有名字的函数，</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 定义基本匿名函数</span></span><br><span class="line"><span class="comment">// function()  // 没有办法运行，故须加一个变量名字</span></span><br><span class="line"><span class="comment">// 变量保存匿名函数，本质得到的是一个对象（closure类中的对象）</span></span><br><span class="line">$func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">&#125;;         <span class="comment">// 因为相当于变量的赋值，所以需加一个分号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用匿名函数</span></span><br><span class="line">$func();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">闭包：要执行的代码块（由于自由变量被包含在代码块中，这些自由变量以及它们引用的对象没有被释放）和为自由变量提供绑定地计算环境。（简单理解就是说，函数内部的一些局部变量即要执行的代码块，在执行完毕后没有被释放）。没有被释放的原因是：在函数内部，还有对应的函数被引用，通常为匿名函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $name == <span class="keyword">__FUNCTION__</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义匿名函数</span></span><br><span class="line">    <span class="comment">// $innerfunction = function()// $name 相对于匿名函数来说是外部变量，故不能直接用</span></span><br><span class="line">    <span class="comment">// 1、使用匿名函数    2、使用关键字use</span></span><br><span class="line">    $innerfunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="title">use</span>(<span class="params">$name</span>)  // <span class="title">use</span>就是将局部变量 保留给内部使用（形成了闭包，使<span class="title">display</span>运行完                                                毕后，不会被释放）</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> $name;     </span><br><span class="line">    &#125;</span><br><span class="line">    $innerfunction();  </span><br><span class="line">    <span class="comment">// 3、 匿名函数返回给外部使用</span></span><br><span class="line">    <span class="keyword">return</span>  $innerfunction();    <span class="comment">// 为验证局部变量未被释放而返回</span></span><br><span class="line">&#125;;</span><br><span class="line">$closure = display();   <span class="comment">// 理论上此处局部变量被释放</span></span><br><span class="line"></span><br><span class="line">$closure();   <span class="comment">// 结果却输出了name，说明上一行并未释放局部变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如何证明局部变量在函数使用完之后没有被释放？（三步法）</span></span><br><span class="line"><span class="comment">// 1、使用内部匿名函数</span></span><br><span class="line"><span class="comment">// 2、匿名函数使用句变量：use</span></span><br><span class="line"><span class="comment">// 3、匿名函数返回给外部使用。</span></span><br></pre></td></tr></table></figure><h5 id="伪类型"><a href="#伪类型" class="headerlink" title="伪类型"></a>伪类型</h5><p>PHP中不存在的类型，只是为了方便查看操作手册。（可当作模板，只是为了泛化数据类型）</p><p>伪类型有两类:mixed混合的，只要是php中的类型即可；numbe数值的</p><h5 id="常用系统函数"><a href="#常用系统函数" class="headerlink" title="常用系统函数"></a>常用系统函数</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出相关</span></span><br><span class="line"><span class="comment">// print():类似于echo输出提供的内容，本质是一种结构（非函数），返回值为1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">print</span>(<span class="string">&#x27;hello lewao&#x27;</span>);   <span class="comment">// 输出hello world</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;hello lewao&#x27;</span>;         <span class="comment">// 输出1hello world（1为上一行echo的输出）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// print_r()：类似于var_dump，但不会输出数据类型，只会输出值，数组打印使用较多。</span></span><br><span class="line">print_r(<span class="string">&#x27;hello&#x27;</span>);            <span class="comment">// 输出为hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//时间函数</span></span><br><span class="line"><span class="keyword">echo</span> data(<span class="string">&#x27;Y 年 m 月 d 日&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> time();</span><br><span class="line"><span class="keyword">echo</span> microtime();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数学函数：  max()、rand():指定范围里的随机整数、round()：四舍五入、ceil():向上取整、floor()向下取整、pow(2,8):2的8次方、abs()：绝对值、sqrt()：求平方根</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有关函数的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">$a,$b</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取指定参数</span></span><br><span class="line">    var_dump(func_get_arg(<span class="number">1</span>));    <span class="comment">// 得到了第二个参数，结果为：string(1) &#x27;2&#x27;;</span></span><br><span class="line">    <span class="comment">// 获取所有参数:对应实参的个数</span></span><br><span class="line">    var_dump(func_get_args());    <span class="comment">// array(4)&#123;   &#125;</span></span><br><span class="line">    <span class="comment">// 获取参数数量：对应实参的个数</span></span><br><span class="line">    var_dump(func_num_args());    <span class="comment">// 参数数量 int(4)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用(如果存在的话，执行test)</span></span><br><span class="line">function_exist(<span class="string">&#x27;test&#x27;</span>) &amp;&amp; test(<span class="number">1</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>错误处理：指系统或用户在对某些代码进行执行的时候，发现有错误，就会通过错误处理的形式告诉程序员。</p><h5 id="错误分类"><a href="#错误分类" class="headerlink" title="错误分类"></a>错误分类</h5><p>1、语法错误：书写代码不符合PHP语法规范，会导致代码在编译中不允许，故也不会执行（parse error）；</p><p>2、运行时错误：代码编译通过，但在执行时会出现一些条件不满足从而导致的错误。（runtime error取空数组的第几位数）</p><p>3、逻辑错误：写代码不规范、但逻辑性错误，导致虽可正常运行，但得不到预期结果。</p><h5 id="错误代号"><a href="#错误代号" class="headerlink" title="错误代号"></a>错误代号</h5><p>系统代号在PHP中均被定义为了系统常量，故可直接使用：</p><p>1、系统错误（系统使用的代号）：</p><p>E_PARSE：编译错误，代码不会运行</p><p>E_ERROR：fatal error致命错误，会在出错的位置断掉</p><p>E_WARNING：warning警告错误，不影响执行，但可能得不到预期结果</p><p>E_NOTICE：notice，通知错误、不影响代码执行</p><p>2、用户错误（用户使用的代号）：E_USER_ERROR、E_USER_WARNING、E_USER_NOTICE用户在使用自定义错误出发的时候，会使用道德错误代号。</p><p>3、E_ALL：代表所有错误</p><p>所有E开头的错误常量都由一个字节（8位）存储，且每一种错误占用一个位，故可进行位操作。</p><p>排除通知级别notice：E_ALL &amp; ~E_NOTICE 。。假设ALL全为1，那么与NOTICE取反再取与就可把其剔除</p><p>只要警告和同志：E_WARNING | E_NOTICE</p><h5 id="错误触发"><a href="#错误触发" class="headerlink" title="错误触发"></a>错误触发</h5><p>程序运行时触发：主要针对代码的语法错误和运行时错误。</p><p>人为触发：知道某些逻辑可能会出错，从而使用对应的代码编号来判断</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// php错误处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 人为触发</span></span><br><span class="line"><span class="comment">// 处理脚本让浏览器按照指定字符集解析</span></span><br><span class="line"><span class="comment">// header(&#x27;Content-type:text/html;charset=utf-8&#x27;);</span></span><br><span class="line"></span><br><span class="line">$b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>($b == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    trigger_error(<span class="string">&#x27;除数不能为0&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $a / $b;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200728093504044.png" alt="image-20200728093504044" style="zoom:80%;"><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728093845093.png" alt="image-20200728093845093"></p><h5 id="错误显示设置（未全）"><a href="#错误显示设置（未全）" class="headerlink" title="错误显示设置（未全）"></a>错误显示设置（未全）</h5><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><h5 id="字符串定义语法"><a href="#字符串定义语法" class="headerlink" title="字符串定义语法"></a>字符串定义语法</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//php字符串：定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、引号定义:比较适合定义较短的或无结构要求的字符串</span></span><br><span class="line">$str1 = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">$str2 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">var_dump($str1,$str2);  <span class="comment">// 两种方式显示的结果一致</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构化定义</span></span><br><span class="line"><span class="comment">// 2、heredoc字符串：没有单引号的单引号字符串</span></span><br><span class="line">$str3 = &lt;&lt;&lt;EOD</span><br><span class="line">          HELLO</span><br><span class="line">          EOD;</span><br><span class="line"><span class="comment">// 3、nowdoc 结构</span></span><br><span class="line">$str4 = &lt;&lt;&lt;<span class="string">&#x27;EOD&#x27;</span>   <span class="comment">// eod只是边界符，可自己定义</span></span><br><span class="line">           hello</span><br><span class="line">EOD;</span><br><span class="line">var_dump($str3,$str4);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="转义字符串"><a href="#转义字符串" class="headerlink" title="转义字符串"></a>转义字符串</h5><p>字符串转义：在计算机通用协议中，有一些特定方式定义的字母，系统会特定处理；反斜杠+字母<br>&#39;:在单引号字符串中显示单引号  &quot; 在双引号字符串中显示双引号  \r：回车  \n：换行  \t:四个空格  $<br><strong>区别:</strong>上述转义符中，单引号只能识别&#39;。而双引号中不能识别&#39;；</p><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728100839775.png" alt="image-20200728100839775"></p><p>双引号中变量识别规则：</p><p>1、变量本身系统能够与后面的内容区分；即应该保证变量的独立性，不要使系统难以识别。</p><p>2、使用变量专业标识符，即给变量加一组{}；</p><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728101319093.png" alt="image-20200728101319093"></p><p>结构化字符串变量的规则</p><p>1、结构化定义字符串对应的边界符有条件</p><p>1.1 上边界符和后面不能有任何东西（包括注释）</p><p>1.2 下边界符必须顶格</p><p>1.3 下边界符后面只能跟分号</p><p>2、结构化定义字符串内部均是字符串本身（包括空格、换行、注释等）</p><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728102143974.png" alt="image-20200728102143974"></p><h5 id="字符串长度问题"><a href="#字符串长度问题" class="headerlink" title="字符串长度问题"></a>字符串长度问题</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header(<span class="string">&#x27;Content-type:text/html;charset = utf-8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义字符串</span></span><br><span class="line">$str1 = <span class="string">&#x27;abcefjdoifaoi&#x27;</span>;</span><br><span class="line">$str2 = <span class="string">&#x27;你好中国123&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> strlen($str1),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,strlen($str2);  <span class="comment">// 13   15(中文在utf下占3个字节)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多字节字符串的长度问题：包含中文的长度</span></span><br><span class="line"><span class="comment">// 多字节字符串扩展模块：mbstring扩展(mb:Multi Bytes)</span></span><br><span class="line"><span class="comment">// 首先需加载PHP的mbstring扩展（php.ini中去注释即可）</span></span><br><span class="line"><span class="comment">// 使用mbstring</span></span><br><span class="line"><span class="keyword">echo</span> mb_strlen($str1),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,mb_strlen($str2);  <span class="comment">// 13   15(与之前一致) </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 长度并未改变，MBstring针对不同的字符集有不同的统计结果</span></span><br><span class="line"><span class="keyword">echo</span> mb_strlen($str1),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,mb_strlen($str2),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,mb_string($str2,<span class="string">&#x27;utf-8&#x27;</span>);  <span class="comment">// 13   15   7</span></span><br></pre></td></tr></table></figure><h5 id="字符串相关函数"><a href="#字符串相关函数" class="headerlink" title="字符串相关函数"></a>字符串相关函数</h5><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728104720621.png" alt="image-20200728104720621"></p><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728104800475.png" alt="image-20200728104800475"></p><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728105204318.png" alt="image-20200728105204318"></p><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728105449502.png" alt="image-20200728105449502"></p><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728105557351.png" alt="image-20200728105557351"></p><h2 id="数组（元素下标均和c-不一样）"><a href="#数组（元素下标均和c-不一样）" class="headerlink" title="数组（元素下标均和c++不一样）"></a>数组（元素下标均和c++不一样）</h2><p>数组：数据的组合，指将一组数据（多个）存储到一个指定的容器中，并用变量指向该容器，然后可用变量一次性取得该容器的所有数据。</p><h5 id="定义语法"><a href="#定义语法" class="headerlink" title="定义语法"></a>定义语法</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// php数组：可以是一种或多种类型的数据，这与c++很不一样.类似于哈希表</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 定义数组：array</span></span><br><span class="line">$arr1 = <span class="keyword">array</span>(<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">var_dump($arr1);    <span class="comment">// 结果：// array(3) ([0]=&gt;string(1) &quot;1&quot; [1]=&gt;int(2) [2]=&gt;string(5) &quot;hello&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数组：[]</span></span><br><span class="line">$arr2 = [<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line">var_dump($arr2);   <span class="comment">// array(3) ([0]=&gt;string(1) &quot;1&quot; [1]=&gt;int(2) [2]=&gt;string(5) &quot;hello&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数组：隐型数组  </span></span><br><span class="line">$arr3[] = <span class="number">1</span>;      <span class="comment">// 默认给数组第0个元素赋值</span></span><br><span class="line">$arr3[<span class="number">10</span>] = <span class="number">100</span>;  <span class="comment">// 第10个元素赋值</span></span><br><span class="line">$arr3[] = <span class="string">&#x27;1&#x27;</span>;    <span class="comment">// 第11个。默认下标是从当前最大下标</span></span><br><span class="line">$arr[<span class="string">&#x27;key&#x27;</span>] = <span class="string">&#x27;key&#x27;</span>;  <span class="comment">// 第key个</span></span><br><span class="line">$arr[<span class="number">1</span>] = <span class="string">&#x27;value&#x27;</span>  <span class="comment">// 第1个，但不会自动调整，还是会处于最后一个位置</span></span><br><span class="line"><span class="comment">// 结果为：array(4) ([0]=&gt;int(1) [10]=&gt;int(100) [11]=&gt;string(1) &quot;1&quot; [&quot;key&quot;]=&gt;string(3)&quot;key&quot; [1]=&gt;string(5) &quot;value&quot;)</span></span><br></pre></td></tr></table></figure><h5 id="PHP数组特点"><a href="#PHP数组特点" class="headerlink" title="PHP数组特点"></a>PHP数组特点</h5><p>1、可以整数下标或者字符串下标</p><p>若数组下标均为整数，则称为<strong>索引数组</strong></p><p>若数组下标均为字符串，则称为<strong>关联数组</strong>。</p><p>混合下标的话称为<strong>混合数组</strong></p><p>2、数组元素的顺序以放入顺序为准，与下标无关</p><p>3、数字下标的增长特性：从0开始自动增长，若中间手动加入较大的下标，则后面则会从当前最大下标+1增长。</p><p>4、特殊值下标的自动转换</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊下标自动转换</span></span><br><span class="line">$arr1[<span class="literal">false</span>] = <span class="literal">false</span>;</span><br><span class="line">$arr1[<span class="literal">true</span>] = <span class="literal">true</span>;</span><br><span class="line">arr1[<span class="literal">NULL</span>] = <span class="literal">NULL</span>;</span><br><span class="line">var_dump($arr1);   <span class="comment">// array(3)([0]=&gt;bool(false),[1]=&gt;bool(true) [&quot;&quot;]-&gt;NULL)</span></span><br></pre></td></tr></table></figure><p>5、PHP数组中类型元素没有限制。</p><p>6、PHP中数组元素没有长度限制。c++ vector</p><p>补充：PHP中数组是很大的数据，故会存储在堆区。</p><h5 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h5><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200728143259676.png" alt="image-20200728143259676" style="zoom:67%;"><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200728143418531.png" alt="image-20200728143418531" style="zoom:67%;"><h5 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h5><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728143816339.png" alt="image-20200728143816339"></p><h6 id="Foreach语法"><a href="#Foreach语法" class="headerlink" title="Foreach语法"></a>Foreach语法</h6><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 数组遍历  foreach</span></span><br><span class="line"></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// foreach</span></span><br><span class="line"><span class="keyword">foreach</span>($arr <span class="keyword">as</span> $a)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> $a,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;    <span class="comment">// 依次输出1，2，3，4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($arr <span class="keyword">as</span> $a =&gt; $v)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;key&#x27;</span>,$a,<span class="string">&#x27;== value&#x27;</span>,$v,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;    <span class="comment">// 依次输出key0 == value1  等</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维数组</span></span><br><span class="line">$arr = <span class="keyword">array</span>(</span><br><span class="line"><span class="number">0</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt;<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">10</span>),</span><br><span class="line">    <span class="number">1</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Jim&#x27;</span>,<span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">11</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过foreach遍历二维元素</span></span><br><span class="line"><span class="keyword">foreach</span>($arr <span class="keyword">as</span> $a)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;name is:&#x27;</span>,$a[<span class="string">&#x27;name&#x27;</span>],<span class="string">&#x27;age is:&#x27;</span>,$a[<span class="string">&#x27;age&#x27;</span>],<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    <span class="comment">// name is:TOM age is:10</span></span><br><span class="line">    <span class="comment">// name is:TOM age is:10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="foreach遍历原理"><a href="#foreach遍历原理" class="headerlink" title="foreach遍历原理"></a>foreach遍历原理</h6><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728145904737.png" alt="image-20200728145904737"></p><h6 id="for循环遍历"><a href="#for循环遍历" class="headerlink" title="for循环遍历"></a>for循环遍历</h6><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// for循环遍历数组</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数组特点：1、索引数组   2、下标规律</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i&lt;count($arr);$i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;key is:&#x27;</span>,$i,<span class="string">&#x27;value is:&#x27;</span>,$arr[$i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="while配合each和list遍历数组"><a href="#while配合each和list遍历数组" class="headerlink" title="while配合each和list遍历数组"></a>while配合each和list遍历数组</h6><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728152144177.png" alt="image-20200728152144177"></p><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200728152016161.png" alt="image-20200728152016161" style="zoom:67%;"><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728152224856.png" alt="image-20200728152224856"></p><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200728161251519.png" alt="image-20200728161251519" style="zoom:67%;"><p>由于不存在下标1，而list只能从0开始依次查找，故上述会报错。</p><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200728161749886.png" alt="image-20200728161749886" style="zoom:67%;"><h5 id="数组相关的函数"><a href="#数组相关的函数" class="headerlink" title="数组相关的函数"></a>数组相关的函数</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组相关函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序函数</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">print_r(sort($arr))  <span class="comment">// 结果为1</span></span><br><span class="line">print_r($arr);     <span class="comment">// 排序后，索引变为01234</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针函数 reset:将数组的内部指针指向第一个单元；end():将数组指针指向最后一个元素；</span></span><br><span class="line"><span class="comment">// next():     prev():指针上移   current():获取当前指针对应的元素值    key()获取当前指针对应的key</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否指针移动</span></span><br><span class="line"><span class="keyword">echo</span> current($arr),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> key($arr),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;  <span class="comment">//若是第一个元素。则当前数组指针未移动</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> next($arr),next($arr),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;  <span class="comment">//15</span></span><br><span class="line"><span class="keyword">echo</span> prev($arr);<span class="comment">//1</span></span><br><span class="line"><span class="comment">// 注意事项：next，prev会移动指针，可能导致超出数组，此时再使用next、prev便不能再返回数组，只能通过end/reset</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他函数：count</span></span><br></pre></td></tr></table></figure><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200728164831073.png" alt="image-20200728164831073" style="zoom:67%;"><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200728165028151.png" alt="image-20200728165028151" style="zoom:67%;"><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200728165056637.png" alt="image-20200728165056637" style="zoom:67%;"><h2 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h2><h5 id="递推算法"><a href="#递推算法" class="headerlink" title="递推算法"></a>递推算法</h5><p>利用特定关系得出中间推论，直至得到结果的算法。。。分为顺推和逆推两种</p><p>顺推:通过最简单的条件，逐步推演结果。</p><p>逆推，通过结果找到规律，从而推到已知条件。</p><h5 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h5><p>把问题转化为规模缩小了的同类问题的子问题。然后递归调用函数以表达问题的解。</p><p><strong>简化问题，找到最优子问题。</strong></p><p>递归的本质是函数调用：一个函数需要开辟一块内存，递归会出现同时调用多个函数，故占用很多内存。</p><h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><p>1、比较相邻元素，若前一个比后一个大，则交换。</p><p>2、对每一对相邻元素进行1操作，直至最后一对。此时最后一个因为最大值。</p><p>3、除最后一个外，重复以上操作</p><p>4、重复以上操作，直至排序完成。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>);</span><br><span class="line"><span class="comment">// 计算长度</span></span><br><span class="line">$len = count($arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>;$i&lt;$len<span class="number">-1</span>;$i++)    <span class="comment">// 第几次重复循环</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>($j = <span class="number">0</span>;$j&lt;$len-$i<span class="number">-1</span>;$j++)  <span class="comment">// 第几次交换</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>($arr[$j] &gt; $arr[$j+<span class="number">1</span>])</span><br><span class="line">            swap1($arr[$j],$arr[$j+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var_dump($arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap1</span>(<span class="params">&amp;$a,&amp;$b</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $tmp = $a;</span><br><span class="line">    $a = $b;</span><br><span class="line">    $b = $tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h5><p>1、假设第一个元素为最小元素，记下下标</p><p>2、寻找右侧剩余元素，若有更小的，则记下更小的下标</p><p>3、一行对比完成后，交换第一个和最小的元素</p><p>4、重新开始以上操作</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">$min_index = <span class="number">0</span>;  </span><br><span class="line"></span><br><span class="line">$len = count($arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i&lt;$len<span class="number">-1</span>; $i++)</span><br><span class="line">&#123;</span><br><span class="line">    $min_index = $i;</span><br><span class="line">    <span class="keyword">for</span>($j = $min_index + <span class="number">1</span>;$j&lt;$len;$j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>($arr[$min_index] &gt; $arr[$j])</span><br><span class="line">            $min_index = $j;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>($min_index != $i)</span><br><span class="line">    swap1($arr[$min_index],$arr[$i]);</span><br><span class="line">&#125;</span><br><span class="line">var_dump($arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap1</span>(<span class="params">&amp;$a,&amp;$b</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $tmp = $a;</span><br><span class="line">    $a = $b;</span><br><span class="line">    $b = $tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h5><p>1、认定一个第一个元素已经排好序；</p><p>2、取出第二个元素作为待插入元素；</p><p>3、将待插入元素与已排好元素比较；</p><p>4、若小于已排好元素，则说明前面排序未在正确位置，应该向后移动，让新元素插入进去</p><p>5、重复以上操作，直到该元素插入完毕</p><p>6、重复操作，直至所有元素完毕</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">$len = count($arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">1</span>;$i&lt;$len;$i++)   <span class="comment">// 第几个元素为待插入元素</span></span><br><span class="line">&#123;</span><br><span class="line">    $tmp = $arr[$i];</span><br><span class="line">    <span class="keyword">for</span>($j = $i;$j&gt;<span class="number">0</span>;$j--)  <span class="comment">// 比较几次</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>($tmp &lt; $arr[$j<span class="number">-1</span>])    <span class="comment">// 注意此处比较的是tmp</span></span><br><span class="line">            $arr[$j] = $arr[$j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>($arr[$j] != $tmp)</span><br><span class="line">        $arr[$j] =$tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump($arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap1</span>(<span class="params">&amp;$a,&amp;$b</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $tmp = $a;</span><br><span class="line">    $a = $b;</span><br><span class="line">    $b = $tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="快速排序法："><a href="#快速排序法：" class="headerlink" title="快速排序法："></a>快速排序法：</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数组开头及结尾</span></span><br><span class="line">$start = <span class="number">0</span>;</span><br><span class="line">$end = count($arr)<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义函数作为递归函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick_sort</span>(<span class="params">$arr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 递归出口</span></span><br><span class="line">    $len = count($arr);</span><br><span class="line">    <span class="keyword">if</span>($len &lt;= <span class="number">1</span>) <span class="keyword">return</span> $arr;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 比较并分散数据</span></span><br><span class="line">    $left = $right = <span class="keyword">array</span>();  <span class="comment">// 定义空数组用于存放大的或小的</span></span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">1</span>;$i&lt;$len;$i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>($arr[$i]&gt;$arr[<span class="number">0</span>]) $right[] = $arr[$i];   <span class="comment">// 大于存放在右边数组</span></span><br><span class="line">        <span class="keyword">else</span> $left[] = $arr[$i];   <span class="comment">// 小于存放在左边数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 递归</span></span><br><span class="line">    $left = quick_sort($left);  <span class="comment">// 分别将右数组和左数组进一步排序</span></span><br><span class="line">    $right = quick_sort($right);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> array_merge($left,(<span class="keyword">array</span>)$arr[<span class="number">0</span>],$right);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$res = quick_sort($arr);</span><br><span class="line">var_dump($res);   <span class="comment">// 不能用echo</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 快排双指针</span></span><br><span class="line"></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">7</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick_sort</span>(<span class="params">$arr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 递归结束条件</span></span><br><span class="line">    $len = count($arr);</span><br><span class="line">    <span class="keyword">if</span>($len &lt;= <span class="number">1</span>) <span class="keyword">return</span> $arr;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义双指针</span></span><br><span class="line">    $left = <span class="number">0</span>;</span><br><span class="line">    $right = $len<span class="number">-1</span>;</span><br><span class="line">    $pivot = $arr[<span class="number">0</span>];  <span class="comment">// 确定基准</span></span><br><span class="line">    <span class="keyword">while</span>($left &lt; $right)   <span class="comment">// left == right时跳出循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>($left &lt; $right &amp;&amp; $arr[$right] &gt;= $pivot) $right--;</span><br><span class="line"><span class="keyword">while</span>($left &lt; $right &amp;&amp; $arr[$left] &lt;= $pivot) $left++;</span><br><span class="line">swap1($arr[$left],$arr[$right]);</span><br><span class="line">    &#125;</span><br><span class="line">    swap1($arr[$left],$arr[<span class="number">0</span>]);   <span class="comment">// 跳出循环时，left = right ，故将pivot赋值即可</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 递归点(上述操作完毕后，需要进一步排序左边和右边，故需递归)</span></span><br><span class="line">    $left_arr = quick_sort(array_slice($arr,<span class="number">0</span>,$left));</span><br><span class="line">    $right_arr = quick_sort(array_slice($arr,$left+<span class="number">1</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> array_merge($left_arr,(<span class="keyword">array</span>)$arr[$left],$right_arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(quick_sort($arr));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap1</span>(<span class="params">&amp;$a,&amp;$b</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $tmp = $a;</span><br><span class="line">    $a = $b;</span><br><span class="line">    $b = $tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二路合并算法</span></span><br><span class="line">$arr1 = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">$arr2 = <span class="keyword">array</span>(<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">$res = <span class="keyword">array</span>();    <span class="comment">// 存合并后的元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(count($arr1) &amp;&amp; count($arr2))</span><br><span class="line">&#123;</span><br><span class="line">    $res[] = $arr1[<span class="number">0</span>]&gt;$arr2[<span class="number">0</span>] ? array_shift($arr2):array_shift($arr1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(count($arr1) &amp;&amp; !count($arr2))</span><br><span class="line">&#123;</span><br><span class="line">    $res[] = array_shift($arr1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(count($arr2) &amp;&amp; !count($arr1))</span><br><span class="line">&#123;</span><br><span class="line">    $res[] = array_shift($arr2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump($res);</span><br></pre></td></tr></table></figure><p>1、将数组拆分成两个数组</p><p>2、重复步骤1，将数组拆分成最小单元</p><p>3、然后二路归并</p><p>4、重复步骤直至完成</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序</span></span><br><span class="line">    </span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge_sort</span>(<span class="params">$arr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 1、递归结束条件</span></span><br><span class="line">    $len = count($arr);</span><br><span class="line">    <span class="keyword">if</span>($len &lt;= <span class="number">1</span>) <span class="keyword">return</span> $arr;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2、重复的操作</span></span><br><span class="line">    <span class="comment">// 2、1 拆分数组</span></span><br><span class="line">    $middle = $len&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    $left = array_slice($arr,<span class="number">0</span>,$middle);</span><br><span class="line">    $right = array_slice($arr,$middle);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4、递归点（最后写这一步，先将一层的分离和合并写完，再找递归点）</span></span><br><span class="line">    $left = merge_sort($left);</span><br><span class="line">    $right = merge_sort($right);</span><br><span class="line">    <span class="comment">// 2、2 二路归并</span></span><br><span class="line">    $res = <span class="keyword">array</span>();    <span class="comment">// 存合并后的元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(count($left) &amp;&amp; count($right))</span><br><span class="line">    &#123;</span><br><span class="line">        $res[] = $left[<span class="number">0</span>]&gt;$right[<span class="number">0</span>] ? array_shift($right):array_shift($left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(count($left) &amp;&amp; !count($right))</span><br><span class="line">    &#123;</span><br><span class="line">        $res[] = array_shift($left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(count($right) &amp;&amp; !count($left))</span><br><span class="line">    &#123;</span><br><span class="line">        $res[] = array_shift($right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、返回值</span></span><br><span class="line">    <span class="keyword">return</span> array_merge($res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(merge_sort($arr));</span><br></pre></td></tr></table></figure><h5 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">17</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">32</span>);</span><br><span class="line"><span class="comment">// 顺序查找：从数组第一个元素开始挨个匹配</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find_index</span>(<span class="params">$arr,$num</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span>($arr <span class="keyword">as</span> $k =&gt; $v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>($v == $num) <span class="keyword">return</span> $k;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var_dump(find_index($arr,2));  // 不存在，故返回bool(false)</span></span><br><span class="line"><span class="comment">// var_dump(find_index($arr,32));  // 存在，故返回int(5)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Binary_search</span>(<span class="params">$arr,$num</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $len = count($arr);</span><br><span class="line">    $left = <span class="number">0</span>;</span><br><span class="line">    $right = $len<span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>($left &lt;= $right)</span><br><span class="line">    &#123;</span><br><span class="line">        $middle = $left+($right-$left&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>($arr[$middle] &gt; $num) </span><br><span class="line">$right = $middle<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">elseif</span>($arr[$middle] &lt; $num) </span><br><span class="line">$left = $middle+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line"><span class="keyword">return</span> $middle;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">print_r(Binary_search($arr,<span class="number">6</span>));</span><br><span class="line">var_dump(Binary_search($arr,<span class="number">2</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;视频：&lt;a href=&quot;https://www.bilibili.com/video/BV18x411H7qD?p=3&quot;&gt;https://www.bilibili.com/video/BV18x411H7qD?p=3&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h1&gt;&lt;p&gt;Web分为两类：静态网站和动态网站。流程:浏览器发起访问-&amp;gt;DNS解析域名-&amp;gt;服务器电脑-&amp;gt;服务软件&lt;/p&gt;
&lt;h5 id=&quot;1、静态网站访问原理：&quot;&gt;&lt;a href=&quot;#1、静态网站访问原理：&quot; class=&quot;headerlink&quot; title=&quot;1、静态网站访问原理：&quot;&gt;&lt;/a&gt;1、静态网站访问原理：&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200726195840264.png&quot; alt=&quot;image-20200726195840264&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;必备工具&lt;/strong&gt;：1、有两台电脑，PC（个人电脑），里面需要有浏览器；另外一台为服务器（需要有服务软件，假设为APACHE）,软件没有数据，故需在里面添加文件夹（准备访问的文件/网页）2、下面蓝线代表两个在同一个互联网下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;访问流程&lt;/strong&gt;：1、在浏览器中需输入URL（uniformed resource location，统一资源定位，即互联网的绝对路径）；2、第一部需要经过URL的解析（DNS，DNS内部包含本地DNS与网络DNS，，访问本地DNS无需通过网络，可提高效率。如果本地DNS无法转化IP，就需要网络DNS）。3、DNS将转换后的IP地址返回给浏览器。4、浏览器通过IP地址找到服务器。5、（虽然找到了服务器，但服务器里面资源很多，如何找自己想要的APACH？）这就需要利用端口，APACHE的端口为80。6、访问APACHE后，即可找到要访问的内容（IP地址后的/index.html也称为URI（uniformed resource identify，统一资源标志。目标机器上相对某个文件夹的相对路径，，，注/即为根目录，相对根目录所以其为相对路径））.7、Apache根据URI读取文件，读取文件的内容（注意只是读取）。8、Apache读取文件后，返回结果。9、浏览器看之前，需要经过浏览器解析，才可展示给用户。（所有人访问的时候，都访问的一样的index文件，若要改变显示的信息，就需要改变index，比较麻烦）&lt;/p&gt;
&lt;h5 id=&quot;2、动态网站访问&quot;&gt;&lt;a href=&quot;#2、动态网站访问&quot; class=&quot;headerlink&quot; title=&quot;2、动态网站访问&quot;&gt;&lt;/a&gt;2、动态网站访问&lt;/h5&gt;&lt;p&gt;区别：相对静态网站访问多了几个步骤：需要服务器端解析；需要数据库&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200726202647377.png&quot; alt=&quot;image-20200726202647377&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://asea.fun/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="notes" scheme="https://asea.fun/tags/notes/"/>
    
      <category term="php" scheme="https://asea.fun/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>旅行说走就走，二十岁说走就走</title>
    <link href="https://asea.fun/post/e6351f8b.html"/>
    <id>https://asea.fun/post/e6351f8b.html</id>
    <published>2021-04-05T12:37:25.000Z</published>
    <updated>2021-04-05T23:48:32.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="4cf46947b33711549667985c62613a518bd30812932281913a9fa8422c490376"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">已加密，请在这里密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;抱歉, 这个密码看着不太对, 请再试试.&quot; data-whm=&quot;抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.&quot;&gt;
  &lt;script id=&quot;hbeData&quot; type=&quot;hbeData&quot; data-hmacdigest=&quot;4cf46947b33711549667985c62613a518bd30812932281913a9fa8422c490376&quot;&gt;&lt;/script&gt;
  &lt;div class=&quot;hbe hbe-content&quot;&gt;
    &lt;div class=&quot;hbe hbe-input hbe-input-default&quot;&gt;
      &lt;input class=&quot;hbe hbe-input-field hbe-input-field-default&quot; type=&quot;password&quot; id=&quot;hbePass&quot;&gt;
      &lt;label class=&quot;hbe hbe-input-label hbe-input-label-default&quot; for=&quot;hbePass&quot;&gt;
        &lt;span class=&quot;hbe hbe-input-label-content hbe-input-label-content-default&quot;&gt;已加密，请在这里密码.&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script data-pjax src=&quot;/lib/hbe.js&quot;&gt;&lt;/script&gt;&lt;link href=&quot;/css/hbe.style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;
    
    </summary>
    
    
      <category term="日常" scheme="https://asea.fun/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="life" scheme="https://asea.fun/tags/life/"/>
    
      <category term="think" scheme="https://asea.fun/tags/think/"/>
    
  </entry>
  
  <entry>
    <title>看小米春季新品发布会有感</title>
    <link href="https://asea.fun/post/f32b1748.html"/>
    <id>https://asea.fun/post/f32b1748.html</id>
    <published>2021-03-30T14:06:44.000Z</published>
    <updated>2021-04-05T12:24:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>从来没看过这么长的发布会，有感于雷总的人格魅力，分为两场的发布会丝毫不觉得劳累。今天的发布会雷总已经嗓子哑得很严重了，只要稍微大声说话便会失声，我以为讲完mix雷总要休息了，没想到后面的笔记本，以及最后的充满激情的造车宣言，他都坚持下来了。我在想，假如我在场，一定会热泪盈眶吧。听了太多的参数，这里我已经不想提产品了。正常发布会看下来，各种新品层出不穷，可谓盛宴，又被人称之为手机界的“春晚”，说实话，毫不为过。但是其实我最喜欢的还是雷总讲起来他的回忆，讲起来他和许知远的对话，那是无比真诚的，一口不是很标准的普通话却感人肺腑。雷总又讲起来了他的以往，从当年笃定要敲代码，到最后代码被格式化，学习管理、金融的知识，16年小米的低谷期，雷总挑起大旗带领大家扛了过来，如今有了“我们又1080亿”的资本这样的豪言，属实让人感叹！今天雷总正式在发布会上宣布要进军智能电动汽车行业，他说到：“这是我人生中最后一次重大的创业项目了。”我一时间还不能接受这样的消息，雷军在我眼里一直是一个年轻帅气充满魅力的成功人士，况且当他将其mix fold的时候还调侃自己还年轻，可是终究逃不了变老的命运。这样的感受让我想起来罗老师，当年他在各行各业闯荡，而现在算算，他还有多少时间可以依旧保持活力探索呢。我真心的希望小米能在汽车行业有一番成就，至少不会辜负一百亿美金的资金调用，至少不会辜负发布会最后两句失声的谢谢。<br><img src="https://img.imgdb.cn/item/606335818322e6675c6e5344.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从来没看过这么长的发布会，有感于雷总的人格魅力，分为两场的发布会丝毫不觉得劳累。今天的发布会雷总已经嗓子哑得很严重了，只要稍微大声说话便会失声，我以为讲完mix雷总要休息了，没想到后面的笔记本，以及最后的充满激情的造车宣言，他都坚持下来了。我在想，假如我在场，一定会热泪盈眶吧。听了太多的参数，这里我已经不想提产品了。正常发布会看下来，各种新品层出不穷，可谓盛宴，又被人称之为手机界的“春晚”，说实话，毫不为过。但是其实我最喜欢的还是雷总讲起来他的回忆，讲起来他和许知远的对话，那是无比真诚的，一口不是很标准的普通话却感人肺腑。雷总又讲起来了他的以往，从当年笃定要敲代码，到最后代码被格式化，学习管理、金融的知识，16年小米的低谷期，雷总挑起大旗带领大家扛了过来，如今有了“我们又1080亿”的资本这样的豪言，属实让人感叹！今天雷总正式在发布会上宣布要进军智能电动汽车行业，他说到：“这是我人生中最后一次重大的创业项目了。”我一时间还不能接受这样的消息，雷军在我眼里一直是一个年轻帅气充满魅力的成功人士，况且当他将其mix fold的时候还调侃自己还年轻，可是终究逃不了变老的命运。这样的感受让我想起来罗老师，当年他在各行各业闯荡，而现在算算，他还有多少时间可以依旧保持活力探索呢。我真心的希望小米能在汽车行业有一番成就，至少不会辜负一百亿美金的资金调用，至少不会辜负发布会最后两句失声的谢谢。&lt;br&gt;&lt;img src=&quot;https://img.imgdb.cn/item/606335818322e6675c6e5344.jpg&quot; alt&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="日常" scheme="https://asea.fun/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="life" scheme="https://asea.fun/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>python项目练习</title>
    <link href="https://asea.fun/post/71485f5b.html"/>
    <id>https://asea.fun/post/71485f5b.html</id>
    <published>2021-03-27T03:44:22.000Z</published>
    <updated>2021-03-30T03:56:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录一下python常用的源码"><a href="#记录一下python常用的源码" class="headerlink" title="记录一下python常用的源码"></a>记录一下python常用的源码</h1><h2 id="邮件服务"><a href="#邮件服务" class="headerlink" title="邮件服务"></a>邮件服务</h2><blockquote><p>用来每次部署博客以后给订阅的人自动发邮件</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 邮件服务 --&gt;</span><br><span class="line"># coding: UTF-8</span><br><span class="line">import smtplib</span><br><span class="line">from email.mime.text import MIMEText</span><br><span class="line">mailserver &#x3D; &quot;smtp.163.com&quot;  #邮箱服务器地址</span><br><span class="line">username_send &#x3D; &#39;******@163.com,xxx@qq.com&#39;  #邮箱用户名</span><br><span class="line">password &#x3D; &#39;******&#39;   #邮箱密码：需要使用授权码</span><br><span class="line">username_recv &#x3D; &#39;****@qq.com&#39;  #收件人，多个收件人用逗号隔开</span><br><span class="line">mail &#x3D; MIMEText(&#39;xxx&#39;)</span><br><span class="line">mail[&#39;Subject&#39;] &#x3D; &#39;xxx&#39;</span><br><span class="line">mail[&#39;From&#39;] &#x3D; username_send  #发件人</span><br><span class="line">mail[&#39;To&#39;] &#x3D; username_recv  #收件人；[]里的三个是固定写法，别问为什么，我只是代码的搬运工</span><br><span class="line">smtp &#x3D; smtplib.SMTP(mailserver,port&#x3D;25) # 连接邮箱服务器，smtp的端口号是25</span><br><span class="line"># smtp&#x3D;smtplib.SMTP_SSL(&#39;smtp.qq.com&#39;,port&#x3D;465) #QQ邮箱的服务器和端口号</span><br><span class="line">smtp.login(username_send,password)  #登录邮箱</span><br><span class="line">smtp.sendmail(username_send,username_recv,mail.as_string())# 参数分别是发送者，接收者，第三个是把上面的发送邮件的内容变成字符串</span><br><span class="line">smtp.quit() # 发送完毕后退出smtp</span><br><span class="line">print (&#39;success&#39;)</span><br></pre></td></tr></table></figure><h2 id="自动更新更新时间"><a href="#自动更新更新时间" class="headerlink" title="自动更新更新时间"></a>自动更新更新时间</h2><blockquote><p>每次部署的时候自动将post的<code>update:</code>后面的时间改成文件的修改时间</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 自动更新更新时间和文件名 --&gt;</span><br><span class="line">import re</span><br><span class="line">import time</span><br><span class="line">import os</span><br><span class="line">def change_time(path):</span><br><span class="line">        fileList &#x3D; os.listdir(path)</span><br><span class="line">        fb &#x3D; open(&#39;更新内容.txt&#39;,&#39;w&#39;,encoding &#x3D; &#39;utf-8&#39;)</span><br><span class="line">        hello &#x3D; &#39;博客更新&#39;</span><br><span class="line">        fb.write(&#39;&#123;:⭐^10&#125;\n&#39;.format(hello))</span><br><span class="line">        for file in fileList:</span><br><span class="line">            allpath &#x3D; path+file</span><br><span class="line">            f &#x3D; open(allpath,&#39;r&#39;,encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">            txt &#x3D; f.read() #读取内容</span><br><span class="line">            f.close()</span><br><span class="line">            now &#x3D; int(time.time())</span><br><span class="line">            # 匹配，加入\n是为了防止匹配到文章内部代码。</span><br><span class="line">            old_update &#x3D; re.findall(r&quot;(updated: \d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;\s\d&#123;1,2&#125;:\d&#123;1,2&#125;:\d&#123;1,2&#125;\n)&quot;,txt) # 正则匹配要修改的字符串</span><br><span class="line">            file_title &#x3D; re.findall(r&#39;title: (.*?)\n&#39;,txt)</span><br><span class="line">            if old_update &#x3D;&#x3D; []:</span><br><span class="line">                    old_update &#x3D; [&#39;updated:\n&#39;]</span><br><span class="line">            new_update &#x3D; time.strftime(&#39;updated: %Y-%m-%d %H:%M:%S\n&#39;,time.localtime(int(os.path.getmtime(allpath)))) # 获取文件的最后修改时间并赋值</span><br><span class="line">            </span><br><span class="line">            try:</span><br><span class="line">                txt &#x3D; txt.replace(old_update[0],new_update) # 替换</span><br><span class="line">            except:</span><br><span class="line">                print(&#39;&#123;&#125;有误&#39;.format(file))</span><br><span class="line">                continue</span><br><span class="line">            else:</span><br><span class="line">                if now - int(os.path.getmtime(allpath)) &lt; 43200:</span><br><span class="line">                    fi &#x3D; open(allpath,&#39;w&#39;,encoding &#x3D; &#39;utf-8&#39;)</span><br><span class="line">                    fi.write(txt) # 写入</span><br><span class="line">                    fi.close() # 关闭</span><br><span class="line">                    os.rename(allpath,path+file_title[0]+os.path.splitext(allpath)[1])</span><br><span class="line">                    update_name &#x3D; &#39;《&#39;+file_title[0]+&#39;》&#39;</span><br><span class="line">                    fb.write(&#39;------------&#123;&#125;\n&#39;.format(update_name))</span><br><span class="line">        fb.write(&#39;\n访问地址：https:&#x2F;&#x2F;blog.asea.fun&#39;)</span><br><span class="line">        fb.close()</span><br><span class="line">change_time(&#39;E:&#x2F;blog&#x2F;source&#x2F;_posts&#x2F;&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自己写了一个文件名字批处理的软件"><a href="#自己写了一个文件名字批处理的软件" class="headerlink" title="自己写了一个文件名字批处理的软件"></a>自己写了一个文件名字批处理的软件</h2><blockquote><p>网上找的都怪怪的，用起来不舒服，就自己写了一个，自由度更高，使用的是tkinter。</p></blockquote><p><strong>未来打算更新的几个功能</strong></p><ul><li><input checked disabled type="checkbox"> 增加前缀后缀（已实现） </li><li><input checked disabled type="checkbox"> 修改字符的半匹配（逻辑重复已pass）</li><li><input disabled type="checkbox"> 支持正则替换</li><li><input disabled type="checkbox"> 支持修改范围（例如：前十个）</li><li><input disabled type="checkbox"> 支持批量word转pdf</li><li><input disabled type="checkbox"> 支持批量pdf转word<blockquote><p> 另外附上：<a href="https://asea.ys168.com">&gt;&gt;最新版本下载地址&lt;&lt;</a></p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line">import time</span><br><span class="line">import os</span><br><span class="line">import re</span><br><span class="line">from tkinter import scrolledtext</span><br><span class="line">import webbrowser</span><br><span class="line">import tkinter.messagebox</span><br><span class="line"></span><br><span class="line">class MY_GUI():</span><br><span class="line">    #窗口初始化</span><br><span class="line">    def __init__(self,window_name):</span><br><span class="line">        self.window &#x3D; window_name</span><br><span class="line">        self.is_all_change &#x3D; 0</span><br><span class="line">        self.is_all_change &#x3D; tk.IntVar()</span><br><span class="line">        self.can_change &#x3D; 0</span><br><span class="line">        self.theme_CN&#x3D;self.mode_CN&#x3D;&#39;默认&#39;</span><br><span class="line">        # 设置窗口</span><br><span class="line">    #窗口设置</span><br><span class="line">    def set_window(self):</span><br><span class="line">        self.window.title(&#39;文件名称批量修改器_v1.2.0&#39;)</span><br><span class="line">        self.window.geometry(&#39;800x600+500+100&#39;)</span><br><span class="line">        self.window.maxsize(800,600)</span><br><span class="line">        self.window.minsize(800,600)</span><br><span class="line">        self.window.attributes(&#39;-alpha&#39;,1) # 1为不虚化</span><br><span class="line">        # self.to_be_changed_label_name&#x3D;tk.StringVar()</span><br><span class="line">        self.to_change_label_name&#x3D;tk.StringVar()</span><br><span class="line">        self.change_button_name&#x3D;tk.StringVar()</span><br><span class="line">        # 标签</span><br><span class="line">        self.address_label &#x3D; tk.Label(self.window,text&#x3D;&#39;原文件夹的地址&#39;,font&#x3D;(&#39;microsoft yahei&#39;, 10),relief&#x3D;&#39;groove&#39;)</span><br><span class="line">        self.state_label &#x3D; tk.Label(self.window,font&#x3D;(&#39;microsoft yahei&#39;, 9),anchor&#x3D;&#39;w&#39;,relief&#x3D;&#39;groove&#39;)</span><br><span class="line">        self.to_be_changed_label &#x3D; tk.Label(self.window,text&#x3D;&#39;&#39;,font&#x3D;(&#39;microsoft yahei&#39;, 10),relief&#x3D;&#39;groove&#39;)</span><br><span class="line">        self.to_change_label &#x3D; tk.Label(self.window,text &#x3D; &#39;&#39;,font&#x3D;(&#39;microsoft yahei&#39;, 10),relief&#x3D;&#39;groove&#39;)</span><br><span class="line">        self.change_button &#x3D; tk.Button(self.window,text &#x3D; &#39;&#39;,bg&#x3D;&#39;#CCCCCC&#39;,command&#x3D;self.callChange)</span><br><span class="line">        self.original_fileList_label &#x3D; tk.Label(self.window,text&#x3D;&#39;原始文件目录&#39;,relief&#x3D;&#39;groove&#39;)</span><br><span class="line">        self.latest_fileList_label &#x3D; tk.Label(self.window,text&#x3D;&#39;修改后文件目录&#39;,relief&#x3D;&#39;groove&#39;)</span><br><span class="line">        self.log_data_label &#x3D; tk.Label(self.window,text&#x3D;&#39;工  作  日  志&#39;,font&#x3D;(&#39;microsoft yahei&#39;, 10,&#39;bold&#39;))</span><br><span class="line">        # 单行输入框</span><br><span class="line">        self.address_Entry &#x3D; tk.Entry(self.window) # 文件夹地址收集框</span><br><span class="line">        self.to_be_changed_Entry &#x3D; tk.Entry(self.window) # 要被改变的字符串</span><br><span class="line">        self.to_change_Entry &#x3D; tk.Entry(self.window) # 要改变成的字符串</span><br><span class="line">        # 按钮</span><br><span class="line">        self.is_all_change_button &#x3D; tk.Checkbutton(self.window,text &#x3D; &quot;是否遍历整个文件夹(默认为否)&quot;,variable&#x3D;self.is_all_change,onvalue&#x3D;1,offvalue&#x3D;0)</span><br><span class="line">        self.look_files_button &#x3D; tk.Button(self.window,text&#x3D;&#39;查看当前目录&#39;,command&#x3D;self.look_files)</span><br><span class="line">        self.clear_button &#x3D; tk.Button(self.window,text&#x3D;&#39;重置&#39;,command&#x3D;self.clearAll)</span><br><span class="line">        self.clearLog_button &#x3D; tk.Button(self.window,text&#x3D;&#39;清除工作日志&#39;,command&#x3D;self.clearLog)</span><br><span class="line">        # 多行文本框</span><br><span class="line">        self.original_fileList_text &#x3D; tk.Text(self.window) # 原始文件目录</span><br><span class="line">        self.latest_fileList_text &#x3D; tk.Text(self.window) # 修改后的文件目录</span><br><span class="line">        self.log_data_text &#x3D; scrolledtext.ScrolledText(self.window,font&#x3D;(&#39;microsoft yahei&#39;, 10),fg&#x3D;&#39;#fff&#39;,bg&#x3D;&#39;#455&#39;) # 工作日志</span><br><span class="line">        # 菜单栏</span><br><span class="line">        self.menubar &#x3D; tk.Menu(self.window)</span><br><span class="line">        self.func_menu &#x3D; tk.Menu(self.menubar, tearoff&#x3D;0)</span><br><span class="line">        self.menubar.add_cascade(label&#x3D;&#39;功能&#39;, menu&#x3D;self.func_menu)</span><br><span class="line">        self.func_menu.add_command(label&#x3D;&#39;查看当前目录&#39;,command&#x3D;self.look_files)</span><br><span class="line">        self.func_menu.add_command(label&#x3D;&#39;执行&#39;,command&#x3D;self.change_name)</span><br><span class="line">        self.func_menu.add_command(label&#x3D;&#39;退出&#39;,command&#x3D;self.window.quit)</span><br><span class="line">        self.func_menu.add_command(label&#x3D;&#39;重置&#39;,command&#x3D;self.clearAll)</span><br><span class="line">        self.change_mode_menu &#x3D; tk.Menu(self.menubar,tearoff&#x3D;0)</span><br><span class="line">        self.menubar.add_cascade(label&#x3D;&#39;模式&#39;,menu&#x3D;self.change_mode_menu)</span><br><span class="line">        self.change_mode_menu.add_command(label&#x3D;&#39;替换模式&#39;,command&#x3D; lambda: self.change_mode(&#39;replace_mode&#39;))</span><br><span class="line">        self.change_mode_menu.add_command(label&#x3D;&#39;加缀模式&#39;,command&#x3D;lambda: self.change_mode(&#39;clues_mode&#39;))</span><br><span class="line">        self.more_menu &#x3D; tk.Menu(self.menubar,tearoff&#x3D;0)</span><br><span class="line">        self.color_menu &#x3D; tk.Menu(self.menubar,tearoff&#x3D;0)</span><br><span class="line">        self.menubar.add_cascade(label&#x3D;&#39;主题&#39;,menu &#x3D; self.color_menu)</span><br><span class="line">        self.color_menu.add_command(label&#x3D;&#39;默认&#39;,command&#x3D;lambda: self.change_color(&#39;默认&#39;,&#39;#eee&#39;,&#39;#eee&#39;,&#39;#eee&#39;,&#39;#000&#39;))</span><br><span class="line">        self.color_menu.add_command(label&#x3D;&#39;灰蓝&#39;,command&#x3D;lambda: self.change_color(&#39;灰蓝&#39;,&#39;#758a99&#39;,&#39;#50616d&#39;,&#39;#41555d&#39;,&#39;#eee&#39;))</span><br><span class="line">        self.color_menu.add_command(label&#x3D;&#39;苍水&#39;,command&#x3D;lambda: self.change_color(&#39;苍水&#39;,&#39;#75878a&#39;,&#39;#88ada6&#39;,&#39;#808080&#39;,&#39;#eee&#39;))</span><br><span class="line">        self.color_menu.add_command(label&#x3D;&#39;茶白&#39;,command&#x3D;lambda: self.change_color(&#39;茶白&#39;,&#39;#f3f9f1&#39;,&#39;#e0eee8&#39;,&#39;#fffbf0&#39;,&#39;#000&#39;))</span><br><span class="line">        self.color_menu.add_command(label&#x3D;&#39;豆青&#39;,command&#x3D;lambda: self.change_color(&#39;豆青&#39;,&#39;#bce672&#39;,&#39;#96ce54&#39;,&#39;#0eb83a&#39;,&#39;#000&#39;))</span><br><span class="line">        self.color_menu.add_command(label&#x3D;&#39;黛紫&#39;,command&#x3D;lambda: self.change_color(&#39;豆青&#39;,&#39;#815463&#39;,&#39;#8c4356&#39;,&#39;#8c4356&#39;,&#39;#fff&#39;))</span><br><span class="line">        self.color_menu.add_command(label&#x3D;&#39;深黑&#39;,command&#x3D;lambda: self.change_color(&#39;深黑&#39;,&#39;#000&#39;,&#39;#000&#39;,&#39;#000&#39;,&#39;#fff&#39;))</span><br><span class="line">        self.color_menu.add_command(label&#x3D;&#39;砺茶&#39;,command&#x3D;lambda: self.change_color(&#39;砺茶&#39;,&#39;#9f6f55&#39;,&#39;#8c6450&#39;,&#39;#a16d5d&#39;,&#39;#fff&#39;))</span><br><span class="line">        self.menubar.add_cascade(label&#x3D;&#39;更多&#39;, menu&#x3D;self.more_menu)</span><br><span class="line">        self.more_menu.add_command(label&#x3D;&#39;bug反馈&#39;,command&#x3D;self.bug_return)</span><br><span class="line">        self.more_menu.add_command(label&#x3D;&#39;赞赏&#39;,command&#x3D;self.reward)</span><br><span class="line">        self.menubar.add_command(label&#x3D;&#39;关于&#39;,command&#x3D;self.about_window)</span><br><span class="line">        self.menubar.add_command(label&#x3D;&#39;更新&#39;,command&#x3D;self.update_link)</span><br><span class="line">        # 菜单栏的关联</span><br><span class="line">        self.window.config(menu&#x3D;self.menubar)</span><br><span class="line">        # 滚动条</span><br><span class="line">        self.original_fileList_text_scroll &#x3D; tk.Scrollbar()</span><br><span class="line">        self.latest_fileList_text_scroll &#x3D; tk.Scrollbar()</span><br><span class="line">        # 放到窗口的右侧, 填充Y竖直方向       </span><br><span class="line">        # 两个控件关联</span><br><span class="line">        self.original_fileList_text_scroll.config(command&#x3D;self.original_fileList_text.yview)</span><br><span class="line">        self.original_fileList_text.config(yscrollcommand&#x3D;self.original_fileList_text_scroll.set)</span><br><span class="line">        self.latest_fileList_text_scroll.config(command&#x3D;self.latest_fileList_text.yview)</span><br><span class="line">        self.latest_fileList_text.config(yscrollcommand&#x3D;self.latest_fileList_text_scroll.set)</span><br><span class="line">        self.change_mode(&#39;replace_mode&#39;)# 初始化标签名字</span><br><span class="line">        #布局</span><br><span class="line">        label_x &#x3D; 10</span><br><span class="line">        extry_x &#x3D; 140</span><br><span class="line">        fileList_text_x &#x3D; 380</span><br><span class="line">        log_text_width &#x3D; 360-label_x</span><br><span class="line">        self.address_label.place(x&#x3D;label_x,y&#x3D;0,width&#x3D;log_text_width&#x2F;3,height&#x3D;30)</span><br><span class="line">        self.to_be_changed_label.place(x&#x3D;label_x,y&#x3D;30,width&#x3D;log_text_width&#x2F;3,height&#x3D;30)</span><br><span class="line">        self.to_change_label.place(x&#x3D;label_x,y&#x3D;60,width&#x3D;log_text_width&#x2F;3,height&#x3D;30)</span><br><span class="line">        self.address_Entry.place(x&#x3D;extry_x,y&#x3D;0,width&#x3D;220,height&#x3D;30)</span><br><span class="line">        self.to_be_changed_Entry.place(x&#x3D;extry_x,y&#x3D;30,width&#x3D;220,height&#x3D;30)</span><br><span class="line">        self.to_change_Entry.place(x&#x3D;extry_x,y&#x3D;60,width&#x3D;220,height&#x3D;30)</span><br><span class="line">        self.change_button.place(x&#x3D;2*(log_text_width)&#x2F;3+label_x,y&#x3D;120,width&#x3D;log_text_width&#x2F;3,height&#x3D;30)</span><br><span class="line">        self.is_all_change_button.place(x&#x3D;100,y&#x3D;90,width&#x3D;280,height&#x3D;30)</span><br><span class="line">        self.log_data_text.place(x&#x3D;label_x,y&#x3D;175,width&#x3D;log_text_width+18,height&#x3D;430-25)</span><br><span class="line">        self.original_fileList_label.place(x&#x3D;fileList_text_x,y&#x3D;0,width&#x3D;100,height&#x3D;30)</span><br><span class="line">        self.original_fileList_text.place(x&#x3D;fileList_text_x,y&#x3D;30,width&#x3D;400,height&#x3D;250)</span><br><span class="line">        self.latest_fileList_label.place(x&#x3D;fileList_text_x,y&#x3D;300,width&#x3D;100,height&#x3D;30)</span><br><span class="line">        self.latest_fileList_text.place(x&#x3D;fileList_text_x,y&#x3D;330,width&#x3D;400,height&#x3D;250)</span><br><span class="line">        self.look_files_button.place(x&#x3D;label_x,y&#x3D;90,width&#x3D;log_text_width&#x2F;3,height&#x3D;30)</span><br><span class="line">        self.clear_button.place(x&#x3D;label_x,y&#x3D;120,width&#x3D;log_text_width&#x2F;3,height&#x3D;30)</span><br><span class="line">        self.original_fileList_text_scroll.place(x&#x3D;780,y&#x3D;0,width&#x3D;15,height&#x3D;300)</span><br><span class="line">        self.latest_fileList_text_scroll.place(x&#x3D;780,y&#x3D;330,width&#x3D;15,height&#x3D;300)</span><br><span class="line">        self.clearLog_button.place(x&#x3D;log_text_width&#x2F;3+label_x,y&#x3D;120,width&#x3D;log_text_width&#x2F;3,height&#x3D;30)</span><br><span class="line">        self.log_data_label.place(x&#x3D;label_x,y&#x3D;150,width&#x3D;log_text_width,height&#x3D;25)</span><br><span class="line">        self.state_label.place(x&#x3D;label_x,y&#x3D;580,width&#x3D;log_text_width,height&#x3D;20)</span><br><span class="line">    def change_color(self,theme_CN,color1,color2,color3,fontcolor):</span><br><span class="line">        self.address_label.config(bg&#x3D;color1,fg&#x3D;fontcolor)</span><br><span class="line">        self.to_be_changed_label.config(bg&#x3D;color2,fg&#x3D;fontcolor)</span><br><span class="line">        self.to_change_label.config(bg&#x3D;color3,fg&#x3D;fontcolor)</span><br><span class="line">        self.original_fileList_label.config(bg &#x3D; color1,fg&#x3D;fontcolor)</span><br><span class="line">        self.latest_fileList_label.config(bg&#x3D;color1,fg&#x3D;fontcolor)</span><br><span class="line">        self.log_data_label.config(bg&#x3D;color2,fg&#x3D;fontcolor)</span><br><span class="line">        self.theme_CN&#x3D;theme_CN</span><br><span class="line">        self.state_label.config(text&#x3D;&#39;当前模式：&#39;+self.mode_CN+&#39;       当前主题：&#39;+self.theme_CN)</span><br><span class="line">    def change_mode(self,mode):</span><br><span class="line">        if mode &#x3D;&#x3D; &#39;replace_mode&#39;:</span><br><span class="line">            self.mode&#x3D;&#39;replace_mode&#39;</span><br><span class="line">            self.to_be_changed_label.config(text &#x3D; &#39;被替换的字符串&#39;)</span><br><span class="line">            self.to_change_label.config(text &#x3D; &#39;来替换的字符串&#39;)</span><br><span class="line">            self.change_button.config(text &#x3D; &#39;替换&#39;)</span><br><span class="line">            self.mode_CN&#x3D;&#39;替换模式&#39;</span><br><span class="line">        else:</span><br><span class="line">            self.mode&#x3D;&#39;clues_mode&#39;</span><br><span class="line">            self.to_be_changed_label.config(text&#x3D;&#39;要添加的前缀&#39;)</span><br><span class="line">            self.to_change_label.config(text &#x3D; &#39;要添加的后缀&#39;)</span><br><span class="line">            self.change_button.config(text &#x3D; &#39;添加&#39;)</span><br><span class="line">            self.mode_CN&#x3D;&#39;加缀模式&#39;</span><br><span class="line">        self.state_label.config(text&#x3D;&#39;当前模式：&#39;+self.mode_CN+&#39;        当前主题：&#39;+self.theme_CN)</span><br><span class="line">    def update_link(self):</span><br><span class="line">        webbrowser.open(&#39;http:&#x2F;&#x2F;asea.ys168.com&#x2F;&#39;,new&#x3D;0)</span><br><span class="line">    def reward(self):</span><br><span class="line">        webbrowser.open(&quot;https:&#x2F;&#x2F;img.imgdb.cn&#x2F;item&#x2F;605ff1f08322e6675cb51721.jpg&quot;, new&#x3D;0)</span><br><span class="line">    def about_window(self):</span><br><span class="line">        tk.messagebox.askyesno(&#39;关于&#39;,&#39;本软件为我闲暇之余开发的小应用，目的是解决一下自己常遇到的批量替换文件名的问题，由于我还是个新手，软件可能还有bug，你可以点击菜单栏的更多——bug反馈来进行反馈，希望本工具能够帮助到你。&#39;)</span><br><span class="line">    def bug_return(self):</span><br><span class="line">        webbrowser.open(&quot;tencent:&#x2F;&#x2F;message&#x2F;?uin&#x3D;569389750&amp;Site&#x3D;admin5.com&amp;Menu&#x3D;yes&quot;, new&#x3D;0)</span><br><span class="line">    #清除工作日志</span><br><span class="line">    def clearLog(self):</span><br><span class="line">        self.log_data_text.delete(1.0,tk.END)</span><br><span class="line">        current_time &#x3D; str(self.get_current_time())</span><br><span class="line">        self.log_data_text.insert(1.0, current_time+&#39; &#39;+&#39;WARNING:已清除\n&#39;)</span><br><span class="line">        # self.log_data_text.mark_set(&#39;insert&#39;, tk.END)</span><br><span class="line">    #遍历文件夹返回生成器</span><br><span class="line">    def findAllFile(self,path): # 获取文件夹下所有文件</span><br><span class="line">        for root, ds, fs in os.walk(path):</span><br><span class="line">            for f in fs:</span><br><span class="line">                fullname &#x3D; [os.path.join(root, f),os.path.join(root),os.path.join(f)]</span><br><span class="line">                yield fullname</span><br><span class="line">    #重置</span><br><span class="line">    def clearAll(self):</span><br><span class="line">        current_time &#x3D; str(self.get_current_time())</span><br><span class="line">        # self.address_Entry.delete(0,tk.END)</span><br><span class="line">        # self.to_be_changed_Entry.delete(0,tk.END)</span><br><span class="line">        # self.to_change_Entry.delete(0,tk.END,)</span><br><span class="line">        # self.log_data_text.delete(1.0,tk.END)</span><br><span class="line">        self.set_window()</span><br><span class="line">        self.log_data_text.insert(1.0,current_time+&#39; &#39;+&#39;WARNING:已重置\n&#39;)</span><br><span class="line">        # self.original_fileList_text.delete(1.0,tk.END)</span><br><span class="line">        # self.latest_fileList_text.delete(1.0,tk.END)</span><br><span class="line">    #获取当前时间</span><br><span class="line">    def get_current_time(self):</span><br><span class="line">        current_time &#x3D; time.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;,time.localtime(time.time()))</span><br><span class="line">        return current_time</span><br><span class="line">    #判断是否输入文件夹地址</span><br><span class="line">    def callChange(self):</span><br><span class="line">        if self.address_Entry.get() !&#x3D; &#39;&#39;:</span><br><span class="line">            self.change_name()</span><br><span class="line">    #查看当前文件夹目录</span><br><span class="line">    def look_files(self):</span><br><span class="line">        self.original_fileList_text.delete(1.0,tk.END)</span><br><span class="line">        address_str &#x3D; self.address_Entry.get()</span><br><span class="line">        try:</span><br><span class="line">            if self.is_all_change.get():</span><br><span class="line">                fileList &#x3D; self.findAllFile(address_str)</span><br><span class="line">                for filelist in fileList:</span><br><span class="line">                    self.original_fileList_text.insert(tk.END,filelist[2]+&#39;\n&#39;)</span><br><span class="line">            else:</span><br><span class="line">                fileList &#x3D; os.listdir(address_str)</span><br><span class="line">                for fileName in fileList:</span><br><span class="line">                    self.original_fileList_text.insert(tk.END,fileName+&#39;\n&#39;)</span><br><span class="line">        except:</span><br><span class="line">            current_time &#x3D; self.get_current_time()</span><br><span class="line">            self.log_data_text.insert(tk.END,current_time+&#39; &#39;+&#39;ERROR:请确认路径存在\n&#39;)</span><br><span class="line"></span><br><span class="line">    #主函数</span><br><span class="line">    def change_name(self):</span><br><span class="line">        address_str &#x3D; self.address_Entry.get()</span><br><span class="line">        if self.is_all_change.get():#判断是否遍历</span><br><span class="line">            current_time &#x3D; self.get_current_time()</span><br><span class="line">            try:</span><br><span class="line">                fileList &#x3D; self.findAllFile(address_str)</span><br><span class="line">            except:</span><br><span class="line">                self.log_data_text.insert(tk.END,current_time+&#39; &#39;+&#39;ERROR:请确认路径存在\n&#39;)</span><br><span class="line">            self.original_fileList_text.delete(1.0,tk.END)</span><br><span class="line">            self.latest_fileList_text.delete(1.0,tk.END)</span><br><span class="line">            to_be_changed_str &#x3D; self.to_be_changed_Entry.get()</span><br><span class="line">            to_change_str &#x3D; self.to_change_Entry.get()</span><br><span class="line">            num &#x3D; 0</span><br><span class="line">            for filelist in (fileList):</span><br><span class="line">                fileName &#x3D; filelist[0]#绝对路径</span><br><span class="line">                fileRoot &#x3D; filelist[1]+&#39;\\&#39;</span><br><span class="line">                fileShortName &#x3D; filelist[2]</span><br><span class="line">                self.original_fileList_text.insert(tk.END,fileShortName+&#39;\n&#39;)</span><br><span class="line">                if self.mode &#x3D;&#x3D; &#39;replace_mode&#39;:</span><br><span class="line">                    try:</span><br><span class="line">                        os.rename(fileName, fileRoot + fileShortName.replace(to_be_changed_str,to_change_str)) # 文件重新命名</span><br><span class="line">                        if fileShortName !&#x3D; fileShortName.replace(to_be_changed_str,to_change_str):</span><br><span class="line">                            num +&#x3D; 1</span><br><span class="line">                            self.log_data_text.insert(tk.END, &#39;已将\n&#39;+fileShortName+&#39;\n&#39;+&#39;修改为\n&#39;+fileShortName.replace(to_be_changed_str,to_change_str)+&#39;\n&#39;+&#39;-&#39;*20+&#39;\n&#39;)</span><br><span class="line">                    except:</span><br><span class="line">                        self.log_data_text.insert(tk.END,current_time+&#39; &#39;+&#39;ERROR:无法同时存在两个相同名字的文件\n&#39;)</span><br><span class="line">                else:</span><br><span class="line">                    try:</span><br><span class="line">                        os.rename(fileName, fileRoot + to_be_changed_str + os.path.splitext(fileShortName)[0] + to_change_str + os.path.splitext(fileShortName)[1]) </span><br><span class="line">                        num +&#x3D; 1</span><br><span class="line">                        self.log_data_text.insert(tk.END, &#39;已将\n&#39;+fileName+&#39;\n&#39;+&#39;修改为\n&#39;+fileRoot + fileShortName.replace(to_be_changed_str,to_change_str)+&#39;\n&#39;+&#39;-&#39;*20+&#39;\n&#39;)</span><br><span class="line">                    except:</span><br><span class="line">                        self.log_data_text.insert(tk.END,current_time+&#39; &#39;+&#39;ERROR:添加错误，请点击菜单栏反馈bug\n&#39;)</span><br><span class="line">            self.log_data_text.insert(tk.END,current_time+&#39; &#39;+&#39;共修改&#39;+str(num)+&#39;个文件&#39;+&#39;\n&#39;+&#39;&#123;:■^26&#125;&#39;.format(&#39;本次修改结束&#39;)+&#39;\n&#39;)</span><br><span class="line">            fileList &#x3D; self.findAllFile(address_str)</span><br><span class="line">            for filelist in fileList:</span><br><span class="line">                self.latest_fileList_text.insert(tk.END,filelist[2]+&#39;\n&#39;)</span><br><span class="line">            self.log_data_text.see(tk.END) # 自动将光标移到末尾</span><br><span class="line">        else:</span><br><span class="line">            current_time &#x3D; self.get_current_time()</span><br><span class="line">            try:</span><br><span class="line">                fileList &#x3D; os.listdir(address_str)</span><br><span class="line">            except:</span><br><span class="line">                self.log_data_text.insert(tk.END,current_time+&#39; &#39;+&#39;ERROR:请确认路径存在\n&#39;)</span><br><span class="line">            # os.chdir(address_str)  # 将当前工作目录修改为待修改文件夹的位置</span><br><span class="line">            self.original_fileList_text.delete(1.0,tk.END)</span><br><span class="line">            self.latest_fileList_text.delete(1.0,tk.END)</span><br><span class="line">            to_be_changed_str &#x3D; self.to_be_changed_Entry.get()</span><br><span class="line">            to_change_str &#x3D; self.to_change_Entry.get()</span><br><span class="line">            num &#x3D; 0</span><br><span class="line">            for fileName in fileList:</span><br><span class="line">                self.original_fileList_text.insert(tk.END,fileName+&#39;\n&#39;)</span><br><span class="line">                if self.mode &#x3D;&#x3D; &#39;replace_mode&#39;:</span><br><span class="line">                    try:</span><br><span class="line">                        os.rename(address_str+&#39;\\&#39;+fileName, address_str+&#39;\\&#39;+fileName.replace(to_be_changed_str,to_change_str)) # 3. 文件重新命名 规则根据需求自己定</span><br><span class="line">                        if fileName !&#x3D; fileName.replace(to_be_changed_str,to_change_str):</span><br><span class="line">                            num +&#x3D; 1</span><br><span class="line">                            self.log_data_text.insert(tk.END, &#39;已将\n&#39;+fileName+&#39;\n&#39;+&#39;修改为\n&#39;+fileName.replace(to_be_changed_str,to_change_str)+&#39;\n&#39;+&#39;-&#39;*20+&#39;\n&#39;)</span><br><span class="line">                    except:</span><br><span class="line">                        self.log_data_text.insert(tk.END,current_time+&#39; &#39;+&#39;ERROR:无法同时存在两个相同名字的文件\n&#39;)</span><br><span class="line">                else:</span><br><span class="line">                    try:</span><br><span class="line">                        os.rename(address_str+&#39;\\&#39;+fileName, address_str+&#39;\\&#39;+to_be_changed_str+os.path.splitext(fileName)[0]+to_change_str+os.path.splitext(fileName)[1]) # 3. 文件重新命名 规则根据需求自己定</span><br><span class="line">                        num +&#x3D; 1</span><br><span class="line">                        self.log_data_text.insert(tk.END, &#39;已将\n&#39;+fileName+&#39;\n&#39;+&#39;修改为\n&#39;+fileName.replace(to_be_changed_str,to_change_str)+&#39;\n&#39;+&#39;-&#39;*20+&#39;\n&#39;)</span><br><span class="line">                    except:</span><br><span class="line">                        self.log_data_text.insert(tk.END,current_time+&#39; &#39;+&#39;ERROR:添加错误，请点击菜单栏反馈bug\n&#39;)</span><br><span class="line">            fileList &#x3D; os.listdir(address_str)</span><br><span class="line">            self.latest_fileList_text.insert(tk.END,&#39;\n&#39;.join(fileList))</span><br><span class="line">            self.log_data_text.insert(tk.END,current_time+&#39; &#39;+&#39;共修改&#39;+str(num)+&#39;个文件&#39;+&#39;\n&#39;+&#39;&#123;:■^26&#125;&#39;.format(&#39;本次修改结束&#39;)+&#39;\n&#39;)</span><br><span class="line">            self.log_data_text.see(tk.END)</span><br><span class="line"></span><br><span class="line">def gui_start():</span><br><span class="line">    window &#x3D; tk.Tk()</span><br><span class="line">    MY_PORTAL &#x3D; MY_GUI(window)</span><br><span class="line">    MY_PORTAL.set_window()</span><br><span class="line">    window.mainloop()</span><br><span class="line"></span><br><span class="line">gui_start()#启动</span><br></pre></td></tr></table></figure><h2 id="pyinstaller反编译代码《pyinstxtractor-py》"><a href="#pyinstaller反编译代码《pyinstxtractor-py》" class="headerlink" title="pyinstaller反编译代码《pyinstxtractor.py》"></a>pyinstaller反编译代码《pyinstxtractor.py》</h2><blockquote><p>具体使用可以自行百度<strong>pyinstxtractor.py</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">PyInstaller Extractor v1.9 (Supports pyinstaller 3.3, 3.2, 3.1, 3.0, 2.1, 2.0)</span><br><span class="line">Author : Extreme Coders</span><br><span class="line">E-mail : extremecoders(at)hotmail(dot)com</span><br><span class="line">Web    : https:&#x2F;&#x2F;0xec.blogspot.com</span><br><span class="line">Date   : 29-November-2017</span><br><span class="line">Url    : https:&#x2F;&#x2F;sourceforge.net&#x2F;projects&#x2F;pyinstallerextractor&#x2F;</span><br><span class="line"></span><br><span class="line">For any suggestions, leave a comment on</span><br><span class="line">https:&#x2F;&#x2F;forum.tuts4you.com&#x2F;topic&#x2F;34455-pyinstaller-extractor&#x2F;</span><br><span class="line"></span><br><span class="line">This script extracts a pyinstaller generated executable file.</span><br><span class="line">Pyinstaller installation is not needed. The script has it all.</span><br><span class="line"></span><br><span class="line">For best results, it is recommended to run this script in the</span><br><span class="line">same version of python as was used to create the executable.</span><br><span class="line">This is just to prevent unmarshalling errors(if any) while</span><br><span class="line">extracting the PYZ archive.</span><br><span class="line"></span><br><span class="line">Usage : Just copy this script to the directory where your exe resides</span><br><span class="line">        and run the script with the exe file name as a parameter</span><br><span class="line"></span><br><span class="line">C:\path\to\exe\&gt;python pyinstxtractor.py &lt;filename&gt;</span><br><span class="line">$ &#x2F;path&#x2F;to&#x2F;exe&#x2F;python pyinstxtractor.py &lt;filename&gt;</span><br><span class="line"></span><br><span class="line">Licensed under GNU General Public License (GPL) v3.</span><br><span class="line">You are free to modify this source.</span><br><span class="line"></span><br><span class="line">CHANGELOG</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">Version 1.1 (Jan 28, 2014)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- First Release</span><br><span class="line">- Supports only pyinstaller 2.0</span><br><span class="line"></span><br><span class="line">Version 1.2 (Sept 12, 2015)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- Added support for pyinstaller 2.1 and 3.0 dev</span><br><span class="line">- Cleaned up code</span><br><span class="line">- Script is now more verbose</span><br><span class="line">- Executable extracted within a dedicated sub-directory</span><br><span class="line"></span><br><span class="line">(Support for pyinstaller 3.0 dev is experimental)</span><br><span class="line"></span><br><span class="line">Version 1.3 (Dec 12, 2015)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- Added support for pyinstaller 3.0 final</span><br><span class="line">- Script is compatible with both python 2.x &amp; 3.x (Thanks to Moritz Kroll @ Avira Operations GmbH &amp; Co. KG)</span><br><span class="line"></span><br><span class="line">Version 1.4 (Jan 19, 2016)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- Fixed a bug when writing pyc files &gt;&#x3D; version 3.3 (Thanks to Daniello Alto: https:&#x2F;&#x2F;github.com&#x2F;Djamana)</span><br><span class="line"></span><br><span class="line">Version 1.5 (March 1, 2016)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- Added support for pyinstaller 3.1 (Thanks to Berwyn Hoyt for reporting)</span><br><span class="line"></span><br><span class="line">Version 1.6 (Sept 5, 2016)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- Added support for pyinstaller 3.2</span><br><span class="line">- Extractor will use a random name while extracting unnamed files.</span><br><span class="line">- For encrypted pyz archives it will dump the contents as is. Previously, the tool would fail.</span><br><span class="line"></span><br><span class="line">Version 1.7 (March 13, 2017)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- Made the script compatible with python 2.6 (Thanks to Ross for reporting)</span><br><span class="line"></span><br><span class="line">Version 1.8 (April 28, 2017)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- Support for sub-directories in .pyz files (Thanks to Moritz Kroll @ Avira Operations GmbH &amp; Co. KG)</span><br><span class="line"></span><br><span class="line">Version 1.9 (November 29, 2017)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- Added support for pyinstaller 3.3</span><br><span class="line">- Display the scripts which are run at entry (Thanks to Michael Gillespie @ malwarehunterteam for the feature request)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">from __future__ import print_function</span><br><span class="line">import os</span><br><span class="line">import struct</span><br><span class="line">import marshal</span><br><span class="line">import zlib</span><br><span class="line">import sys</span><br><span class="line">import imp</span><br><span class="line">import types</span><br><span class="line">from uuid import uuid4 as uniquename</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CTOCEntry:</span><br><span class="line">    def __init__(self, position, cmprsdDataSize, uncmprsdDataSize, cmprsFlag, typeCmprsData, name):</span><br><span class="line">        self.position &#x3D; position</span><br><span class="line">        self.cmprsdDataSize &#x3D; cmprsdDataSize</span><br><span class="line">        self.uncmprsdDataSize &#x3D; uncmprsdDataSize</span><br><span class="line">        self.cmprsFlag &#x3D; cmprsFlag</span><br><span class="line">        self.typeCmprsData &#x3D; typeCmprsData</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class PyInstArchive:</span><br><span class="line">    PYINST20_COOKIE_SIZE &#x3D; 24           # For pyinstaller 2.0</span><br><span class="line">    PYINST21_COOKIE_SIZE &#x3D; 24 + 64      # For pyinstaller 2.1+</span><br><span class="line">    MAGIC &#x3D; b&#39;MEI\014\013\012\013\016&#39;  # Magic number which identifies pyinstaller</span><br><span class="line"></span><br><span class="line">    def __init__(self, path):</span><br><span class="line">        self.filePath &#x3D; path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def open(self):</span><br><span class="line">        try:</span><br><span class="line">            self.fPtr &#x3D; open(self.filePath, &#39;rb&#39;)</span><br><span class="line">            self.fileSize &#x3D; os.stat(self.filePath).st_size</span><br><span class="line">        except:</span><br><span class="line">            print(&#39;[*] Error: Could not open &#123;0&#125;&#39;.format(self.filePath))</span><br><span class="line">            return False</span><br><span class="line">        return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        try:</span><br><span class="line">            self.fPtr.close()</span><br><span class="line">        except:</span><br><span class="line">            pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def checkFile(self):</span><br><span class="line">        print(&#39;[*] Processing &#123;0&#125;&#39;.format(self.filePath))</span><br><span class="line">        # Check if it is a 2.0 archive</span><br><span class="line">        self.fPtr.seek(self.fileSize - self.PYINST20_COOKIE_SIZE, os.SEEK_SET)</span><br><span class="line">        magicFromFile &#x3D; self.fPtr.read(len(self.MAGIC))</span><br><span class="line"></span><br><span class="line">        if magicFromFile &#x3D;&#x3D; self.MAGIC:</span><br><span class="line">            self.pyinstVer &#x3D; 20     # pyinstaller 2.0</span><br><span class="line">            print(&#39;[*] Pyinstaller version: 2.0&#39;)</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">        # Check for pyinstaller 2.1+ before bailing out</span><br><span class="line">        self.fPtr.seek(self.fileSize - self.PYINST21_COOKIE_SIZE, os.SEEK_SET)</span><br><span class="line">        magicFromFile &#x3D; self.fPtr.read(len(self.MAGIC))</span><br><span class="line"></span><br><span class="line">        if magicFromFile &#x3D;&#x3D; self.MAGIC:</span><br><span class="line">            print(&#39;[*] Pyinstaller version: 2.1+&#39;)</span><br><span class="line">            self.pyinstVer &#x3D; 21     # pyinstaller 2.1+</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">        print(&#39;[*] Error : Unsupported pyinstaller version or not a pyinstaller archive&#39;)</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def getCArchiveInfo(self):</span><br><span class="line">        try:</span><br><span class="line">            if self.pyinstVer &#x3D;&#x3D; 20:</span><br><span class="line">                self.fPtr.seek(self.fileSize - self.PYINST20_COOKIE_SIZE, os.SEEK_SET)</span><br><span class="line"></span><br><span class="line">                # Read CArchive cookie</span><br><span class="line">                (magic, lengthofPackage, toc, tocLen, self.pyver) &#x3D; \</span><br><span class="line">                struct.unpack(&#39;!8siiii&#39;, self.fPtr.read(self.PYINST20_COOKIE_SIZE))</span><br><span class="line"></span><br><span class="line">            elif self.pyinstVer &#x3D;&#x3D; 21:</span><br><span class="line">                self.fPtr.seek(self.fileSize - self.PYINST21_COOKIE_SIZE, os.SEEK_SET)</span><br><span class="line"></span><br><span class="line">                # Read CArchive cookie</span><br><span class="line">                (magic, lengthofPackage, toc, tocLen, self.pyver, pylibname) &#x3D; \</span><br><span class="line">                struct.unpack(&#39;!8siiii64s&#39;, self.fPtr.read(self.PYINST21_COOKIE_SIZE))</span><br><span class="line"></span><br><span class="line">        except:</span><br><span class="line">            print(&#39;[*] Error : The file is not a pyinstaller archive&#39;)</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line">        print(&#39;[*] Python version: &#123;0&#125;&#39;.format(self.pyver))</span><br><span class="line"></span><br><span class="line">        # Overlay is the data appended at the end of the PE</span><br><span class="line">        self.overlaySize &#x3D; lengthofPackage</span><br><span class="line">        self.overlayPos &#x3D; self.fileSize - self.overlaySize</span><br><span class="line">        self.tableOfContentsPos &#x3D; self.overlayPos + toc</span><br><span class="line">        self.tableOfContentsSize &#x3D; tocLen</span><br><span class="line"></span><br><span class="line">        print(&#39;[*] Length of package: &#123;0&#125; bytes&#39;.format(self.overlaySize))</span><br><span class="line">        return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def parseTOC(self):</span><br><span class="line">        # Go to the table of contents</span><br><span class="line">        self.fPtr.seek(self.tableOfContentsPos, os.SEEK_SET)</span><br><span class="line"></span><br><span class="line">        self.tocList &#x3D; []</span><br><span class="line">        parsedLen &#x3D; 0</span><br><span class="line"></span><br><span class="line">        # Parse table of contents</span><br><span class="line">        while parsedLen &lt; self.tableOfContentsSize:</span><br><span class="line">            (entrySize, ) &#x3D; struct.unpack(&#39;!i&#39;, self.fPtr.read(4))</span><br><span class="line">            nameLen &#x3D; struct.calcsize(&#39;!iiiiBc&#39;)</span><br><span class="line"></span><br><span class="line">            (entryPos, cmprsdDataSize, uncmprsdDataSize, cmprsFlag, typeCmprsData, name) &#x3D; \</span><br><span class="line">            struct.unpack( \</span><br><span class="line">                &#39;!iiiBc&#123;0&#125;s&#39;.format(entrySize - nameLen), \</span><br><span class="line">                self.fPtr.read(entrySize - 4))</span><br><span class="line"></span><br><span class="line">            name &#x3D; name.decode(&#39;utf-8&#39;).rstrip(&#39;\0&#39;)</span><br><span class="line">            if len(name) &#x3D;&#x3D; 0:</span><br><span class="line">                name &#x3D; str(uniquename())</span><br><span class="line">                print(&#39;[!] Warning: Found an unamed file in CArchive. Using random name &#123;0&#125;&#39;.format(name))</span><br><span class="line"></span><br><span class="line">            self.tocList.append( \</span><br><span class="line">                                CTOCEntry(                      \</span><br><span class="line">                                    self.overlayPos + entryPos, \</span><br><span class="line">                                    cmprsdDataSize,             \</span><br><span class="line">                                    uncmprsdDataSize,           \</span><br><span class="line">                                    cmprsFlag,                  \</span><br><span class="line">                                    typeCmprsData,              \</span><br><span class="line">                                    name                        \</span><br><span class="line">                                ))</span><br><span class="line"></span><br><span class="line">            parsedLen +&#x3D; entrySize</span><br><span class="line">        print(&#39;[*] Found &#123;0&#125; files in CArchive&#39;.format(len(self.tocList)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def extractFiles(self):</span><br><span class="line">        print(&#39;[*] Beginning extraction...please standby&#39;)</span><br><span class="line">        extractionDir &#x3D; os.path.join(os.getcwd(), os.path.basename(self.filePath) + &#39;_extracted&#39;)</span><br><span class="line"></span><br><span class="line">        if not os.path.exists(extractionDir):</span><br><span class="line">            os.mkdir(extractionDir)</span><br><span class="line"></span><br><span class="line">        os.chdir(extractionDir)</span><br><span class="line"></span><br><span class="line">        for entry in self.tocList:</span><br><span class="line">            basePath &#x3D; os.path.dirname(entry.name)</span><br><span class="line">            if basePath !&#x3D; &#39;&#39;:</span><br><span class="line">                # Check if path exists, create if not</span><br><span class="line">                if not os.path.exists(basePath):</span><br><span class="line">                    os.makedirs(basePath)</span><br><span class="line"></span><br><span class="line">            self.fPtr.seek(entry.position, os.SEEK_SET)</span><br><span class="line">            data &#x3D; self.fPtr.read(entry.cmprsdDataSize)</span><br><span class="line"></span><br><span class="line">            if entry.cmprsFlag &#x3D;&#x3D; 1:</span><br><span class="line">                data &#x3D; zlib.decompress(data)</span><br><span class="line">                # Malware may tamper with the uncompressed size</span><br><span class="line">                # Comment out the assertion in such a case</span><br><span class="line">                assert len(data) &#x3D;&#x3D; entry.uncmprsdDataSize # Sanity Check</span><br><span class="line"></span><br><span class="line">            with open(entry.name, &#39;wb&#39;) as f:</span><br><span class="line">                f.write(data)</span><br><span class="line"></span><br><span class="line">            if entry.typeCmprsData &#x3D;&#x3D; b&#39;s&#39;:</span><br><span class="line">            print(&#39;[+] Possible entry point: &#123;0&#125;&#39;.format(entry.name))</span><br><span class="line"></span><br><span class="line">            elif entry.typeCmprsData &#x3D;&#x3D; b&#39;z&#39; or entry.typeCmprsData &#x3D;&#x3D; b&#39;Z&#39;:</span><br><span class="line">                self._extractPyz(entry.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def _extractPyz(self, name):</span><br><span class="line">        dirName &#x3D;  name + &#39;_extracted&#39;</span><br><span class="line">        # Create a directory for the contents of the pyz</span><br><span class="line">        if not os.path.exists(dirName):</span><br><span class="line">            os.mkdir(dirName)</span><br><span class="line"></span><br><span class="line">        with open(name, &#39;rb&#39;) as f:</span><br><span class="line">            pyzMagic &#x3D; f.read(4)</span><br><span class="line">            assert pyzMagic &#x3D;&#x3D; b&#39;PYZ\0&#39; # Sanity Check</span><br><span class="line"></span><br><span class="line">            pycHeader &#x3D; f.read(4) # Python magic value</span><br><span class="line"></span><br><span class="line">            if imp.get_magic() !&#x3D; pycHeader:</span><br><span class="line">                print(&#39;[!] Warning: The script is running in a different python version than the one used to build the executable&#39;)</span><br><span class="line">                print(&#39;    Run this script in Python&#123;0&#125; to prevent extraction errors(if any) during unmarshalling&#39;.format(self.pyver))</span><br><span class="line"></span><br><span class="line">            (tocPosition, ) &#x3D; struct.unpack(&#39;!i&#39;, f.read(4))</span><br><span class="line">            f.seek(tocPosition, os.SEEK_SET)</span><br><span class="line"></span><br><span class="line">            try:</span><br><span class="line">                toc &#x3D; marshal.load(f)</span><br><span class="line">            except:</span><br><span class="line">                print(&#39;[!] Unmarshalling FAILED. Cannot extract &#123;0&#125;. Extracting remaining files.&#39;.format(name))</span><br><span class="line">                return</span><br><span class="line"></span><br><span class="line">            print(&#39;[*] Found &#123;0&#125; files in PYZ archive&#39;.format(len(toc)))</span><br><span class="line"></span><br><span class="line">            # From pyinstaller 3.1+ toc is a list of tuples</span><br><span class="line">            if type(toc) &#x3D;&#x3D; list:</span><br><span class="line">                toc &#x3D; dict(toc)</span><br><span class="line"></span><br><span class="line">            for key in toc.keys():</span><br><span class="line">                (ispkg, pos, length) &#x3D; toc[key]</span><br><span class="line">                f.seek(pos, os.SEEK_SET)</span><br><span class="line"></span><br><span class="line">                fileName &#x3D; key</span><br><span class="line">                try:</span><br><span class="line">                    # for Python &gt; 3.3 some keys are bytes object some are str object</span><br><span class="line">                    fileName &#x3D; key.decode(&#39;utf-8&#39;)</span><br><span class="line">                except:</span><br><span class="line">                    pass</span><br><span class="line"></span><br><span class="line">                # Make sure destination directory exists, ensuring we keep inside dirName</span><br><span class="line">                destName &#x3D; os.path.join(dirName, fileName.replace(&quot;..&quot;, &quot;__&quot;))</span><br><span class="line">                destDirName &#x3D; os.path.dirname(destName)</span><br><span class="line">                if not os.path.exists(destDirName):</span><br><span class="line">                    os.makedirs(destDirName)</span><br><span class="line"></span><br><span class="line">                try:</span><br><span class="line">                    data &#x3D; f.read(length)</span><br><span class="line">                    data &#x3D; zlib.decompress(data)</span><br><span class="line">                except:</span><br><span class="line">                    print(&#39;[!] Error: Failed to decompress &#123;0&#125;, probably encrypted. Extracting as is.&#39;.format(fileName))</span><br><span class="line">                    open(destName + &#39;.pyc.encrypted&#39;, &#39;wb&#39;).write(data)</span><br><span class="line">                    continue</span><br><span class="line"></span><br><span class="line">                with open(destName + &#39;.pyc&#39;, &#39;wb&#39;) as pycFile:</span><br><span class="line">                    pycFile.write(pycHeader)      # Write pyc magic</span><br><span class="line">                    pycFile.write(b&#39;\0&#39; * 4)      # Write timestamp</span><br><span class="line">                    if self.pyver &gt;&#x3D; 33:</span><br><span class="line">                        pycFile.write(b&#39;\0&#39; * 4)  # Size parameter added in Python 3.3</span><br><span class="line">                    pycFile.write(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    if len(sys.argv) &lt; 2:</span><br><span class="line">        print(&#39;[*] Usage: pyinstxtractor.py &lt;filename&gt;&#39;)</span><br><span class="line"></span><br><span class="line">    else:</span><br><span class="line">        arch &#x3D; PyInstArchive(sys.argv[1])</span><br><span class="line">        if arch.open():</span><br><span class="line">            if arch.checkFile():</span><br><span class="line">                if arch.getCArchiveInfo():</span><br><span class="line">                    arch.parseTOC()</span><br><span class="line">                    arch.extractFiles()</span><br><span class="line">                    arch.close()</span><br><span class="line">                    print(&#39;[*] Successfully extracted pyinstaller archive: &#123;0&#125;&#39;.format(sys.argv[1]))</span><br><span class="line">                    print(&#39;&#39;)</span><br><span class="line">                    print(&#39;You can now use a python decompiler on the pyc files within the extracted directory&#39;)</span><br><span class="line">                    return</span><br><span class="line"></span><br><span class="line">            arch.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="预支项目"><a href="#预支项目" class="headerlink" title="预支项目"></a>预支项目</h1><h2 id="opencv"><a href="#opencv" class="headerlink" title="opencv"></a>opencv</h2><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><h2 id="pdf-word"><a href="#pdf-word" class="headerlink" title="pdf-word"></a>pdf-word</h2><h2 id="mysql-python搭建后端接口"><a href="#mysql-python搭建后端接口" class="headerlink" title="mysql+python搭建后端接口"></a>mysql+python搭建后端接口</h2></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;记录一下python常用的源码&quot;&gt;&lt;a href=&quot;#记录一下python常用的源码&quot; class=&quot;headerlink&quot; title=&quot;记录一下python常用的源码&quot;&gt;&lt;/a&gt;记录一下python常用的源码&lt;/h1&gt;&lt;h2 id=&quot;邮件服务&quot;&gt;&lt;a href=&quot;#邮件服务&quot; class=&quot;headerlink&quot; title=&quot;邮件服务&quot;&gt;&lt;/a&gt;邮件服务&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;用来每次部署博客以后给订阅的人自动发邮件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- 邮件服务 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# coding: UTF-8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import smtplib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;from email.mime.text import MIMEText&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mailserver &amp;#x3D; &amp;quot;smtp.163.com&amp;quot;  #邮箱服务器地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;username_send &amp;#x3D; &amp;#39;******@163.com,xxx@qq.com&amp;#39;  #邮箱用户名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;password &amp;#x3D; &amp;#39;******&amp;#39;   #邮箱密码：需要使用授权码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;username_recv &amp;#x3D; &amp;#39;****@qq.com&amp;#39;  #收件人，多个收件人用逗号隔开&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mail &amp;#x3D; MIMEText(&amp;#39;xxx&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mail[&amp;#39;Subject&amp;#39;] &amp;#x3D; &amp;#39;xxx&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mail[&amp;#39;From&amp;#39;] &amp;#x3D; username_send  #发件人&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mail[&amp;#39;To&amp;#39;] &amp;#x3D; username_recv  #收件人；[]里的三个是固定写法，别问为什么，我只是代码的搬运工&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;smtp &amp;#x3D; smtplib.SMTP(mailserver,port&amp;#x3D;25) # 连接邮箱服务器，smtp的端口号是25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# smtp&amp;#x3D;smtplib.SMTP_SSL(&amp;#39;smtp.qq.com&amp;#39;,port&amp;#x3D;465) #QQ邮箱的服务器和端口号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;smtp.login(username_send,password)  #登录邮箱&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;smtp.sendmail(username_send,username_recv,mail.as_string())# 参数分别是发送者，接收者，第三个是把上面的发送邮件的内容变成字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;smtp.quit() # 发送完毕后退出smtp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print (&amp;#39;success&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;自动更新更新时间&quot;&gt;&lt;a href=&quot;#自动更新更新时间&quot; class=&quot;headerlink&quot; title=&quot;自动更新更新时间&quot;&gt;&lt;/a&gt;自动更新更新时间&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;每次部署的时候自动将post的&lt;code&gt;update:&lt;/code&gt;后面的时间改成文件的修改时间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- 自动更新更新时间和文件名 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import re&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import os&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def change_time(path):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fileList &amp;#x3D; os.listdir(path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fb &amp;#x3D; open(&amp;#39;更新内容.txt&amp;#39;,&amp;#39;w&amp;#39;,encoding &amp;#x3D; &amp;#39;utf-8&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        hello &amp;#x3D; &amp;#39;博客更新&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fb.write(&amp;#39;&amp;#123;:⭐^10&amp;#125;\n&amp;#39;.format(hello))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for file in fileList:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            allpath &amp;#x3D; path+file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            f &amp;#x3D; open(allpath,&amp;#39;r&amp;#39;,encoding&amp;#x3D;&amp;#39;utf-8&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            txt &amp;#x3D; f.read() #读取内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            f.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            now &amp;#x3D; int(time.time())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            # 匹配，加入\n是为了防止匹配到文章内部代码。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            old_update &amp;#x3D; re.findall(r&amp;quot;(updated: \d&amp;#123;4&amp;#125;-\d&amp;#123;1,2&amp;#125;-\d&amp;#123;1,2&amp;#125;\s\d&amp;#123;1,2&amp;#125;:\d&amp;#123;1,2&amp;#125;:\d&amp;#123;1,2&amp;#125;\n)&amp;quot;,txt) # 正则匹配要修改的字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            file_title &amp;#x3D; re.findall(r&amp;#39;title: (.*?)\n&amp;#39;,txt)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if old_update &amp;#x3D;&amp;#x3D; []:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    old_update &amp;#x3D; [&amp;#39;updated:\n&amp;#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            new_update &amp;#x3D; time.strftime(&amp;#39;updated: %Y-%m-%d %H:%M:%S\n&amp;#39;,time.localtime(int(os.path.getmtime(allpath)))) # 获取文件的最后修改时间并赋值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            try:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                txt &amp;#x3D; txt.replace(old_update[0],new_update) # 替换&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            except:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                print(&amp;#39;&amp;#123;&amp;#125;有误&amp;#39;.format(file))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                continue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            else:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if now - int(os.path.getmtime(allpath)) &amp;lt; 43200:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    fi &amp;#x3D; open(allpath,&amp;#39;w&amp;#39;,encoding &amp;#x3D; &amp;#39;utf-8&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    fi.write(txt) # 写入&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    fi.close() # 关闭&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    os.rename(allpath,path+file_title[0]+os.path.splitext(allpath)[1])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    update_name &amp;#x3D; &amp;#39;《&amp;#39;+file_title[0]+&amp;#39;》&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    fb.write(&amp;#39;------------&amp;#123;&amp;#125;\n&amp;#39;.format(update_name))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fb.write(&amp;#39;\n访问地址：https:&amp;#x2F;&amp;#x2F;blog.asea.fun&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fb.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;change_time(&amp;#39;E:&amp;#x2F;blog&amp;#x2F;source&amp;#x2F;_posts&amp;#x2F;&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;自己写了一个文件名字批处理的软件&quot;&gt;&lt;a href=&quot;#自己写了一个文件名字批处理的软件&quot; class=&quot;headerlink&quot; title=&quot;自己写了一个文件名字批处理的软件&quot;&gt;&lt;/a&gt;自己写了一个文件名字批处理的软件&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;网上找的都怪怪的，用起来不舒服，就自己写了一个，自由度更高，使用的是tkinter。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;未来打算更新的几个功能&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://asea.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="https://asea.fun/tags/python/"/>
    
  </entry>
  
</feed>
