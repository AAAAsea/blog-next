<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AseaBlog</title>
  <icon>https://www.gravatar.com/avatar/2ab32513ce6dc86cc9542de0cb40ddbe</icon>
  <subtitle>我的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://asea.fun/"/>
  <updated>2022-02-15T11:15:31.000Z</updated>
  <id>https://asea.fun/</id>
  
  <author>
    <name>Asea</name>
    <email>gyvip001@126.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>天真而感伤的上元夜</title>
    <link href="https://asea.fun/post/109e94e2.html"/>
    <id>https://asea.fun/post/109e94e2.html</id>
    <published>2022-02-15T10:34:19.000Z</published>
    <updated>2022-02-15T11:15:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>距离出发还有不到两天的时间，此刻天空逐渐变得漆黑深沉。从很远处传来几声炮响，它们在我的脑海中绽放开来。当我想象着不日我将躺在卧铺上前往那个充满感伤和忧虑的地方我就感到疲倦，即便是沿途亲眼看见烟花绽放也难以治愈。<br>据说元宵节是古代的情人节，而昨天又刚好是情人节。怎么回事呢，这么多节日都挤在一块了。<br>昨天下午看计网看得昏昏沉沉，于是又钻进被窝看了会昏昏之前的文字。我注意到她谈起她的初恋，在那个十四岁的年纪，谈起她奋不顾身的相信爱情的力量，谈起之后在海边写下他的名字希望海水可以埋葬往事。过去这么多年了，时间拍打着我们，可是有些东西却怎么也拍不掉。<br>我有时候会抛锚，在遇到一些无法避免的情感上涌时。这时一位精灵在我身边跳起舞来，周围点起了蜡烛，精灵亲切地在我耳边悄悄说，嘿，你知道吗，我享受和你在一块的美好~<br>当然了，谁又知道，那精灵是不是在说谎呢，精灵只是习惯这么讲了吧。</p><p>“爱情是绝症，可来生我还想做病人。”<br>我看到这句话热泪盈眶，我想象着一个柔弱敏感的女子在经历重创之后还坚定的站起来。若有来生，我还会愿意做个病人吗，连我都要怀疑自己。</p><p>“事不关己者，不过叹一句，哦，这样啊。”<br>除了屈指可数的几声炮响，这个晚上到处都静悄悄的。脑子里二十年来的光景一一上演，纷杂错乱，不可言说。我知道那些感人至深的故事到底还是讲不出来的，否则他们就会像看了一场庸俗的电视剧一样，什么狗血，无聊，然后说些普适的大道理给你听。我能怎么办呢，我只好说，是啊，要勇敢啊，活在过去怎么能行。</p><p>或许感伤总是伴随着天真，即便我已不再能因为爱情就能理直气壮，可人总是在情绪化时变得回归本性，幼稚，童真（是童真吗）。我看着其他情侣甜蜜与否都像在读一本史书，上面落满了灰尘。<br>可那是最干净的啊！</p><p>也许真的是这样，无法触摸到的，虚无缥缈的东西才最纯净。</p><p>此时此刻，这个世界有两个人。一个在迪士尼等待着盛大的烟花，另一个面前是宽阔的黑色。<br>他没有办法，只好吹灭蜡烛，他知道诺言没法兑现，只好期待着一场前所未有的烟火大会在心底绽放。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;距离出发还有不到两天的时间，此刻天空逐渐变得漆黑深沉。从很远处传来几声炮响，它们在我的脑海中绽放开来。当我想象着不日我将躺在卧铺上前往那个充满感伤和忧虑的地方我就感到疲倦，即便是沿途亲眼看见烟花绽放也难以治愈。&lt;br&gt;据说元宵节是古代的情人节，而昨天又刚好是情人节。怎么回事呢，这么多节日都挤在一块了。&lt;br&gt;昨天下午看计网看得昏昏沉沉，于是又钻进被窝看了会昏昏之前的文字。我注意到她谈起她的初恋，在那个十四岁的年纪，谈起她奋不顾身的相信爱情的力量，谈起之后在海边写下他的名字希望海水可以埋葬往事。过去这么多年了，时间拍打着我们，可是有些东西却怎么也拍不掉。&lt;br&gt;我有时候会抛锚，在遇到一些无法避免的情感上涌时。这时一位精灵在我身边跳起舞来，周围点起了蜡烛，精灵亲切地在我耳边悄悄说，嘿，你知道吗，我享受和你在一块的美好~&lt;br&gt;当然了，谁又知道，那精灵是不是在说谎呢，精灵只是习惯这么讲了吧。&lt;/p&gt;
&lt;p&gt;“爱情是绝症，可来生我还想做病人。”&lt;br&gt;我看到这句话热泪盈眶，我想象着一个柔弱敏感的女子在经历重创之后还坚定的站起来。若有来生，我还会愿意做个病人吗，连我都要怀疑自己。&lt;/p&gt;
&lt;p&gt;“事不关己者，不过叹一句，哦，这样啊。”&lt;br&gt;除了屈指可数的几声炮响，这个晚上到处都静悄悄的。脑子里二十年来的光景一一上演，纷杂错乱，不可言说。我知道那些感人至深的故事到底还是讲不出来的，否则他们就会像看了一场庸俗的电视剧一样，什么狗血，无聊，然后说些普适的大道理给你听。我能怎么办呢，我只好说，是啊，要勇敢啊，活在过去怎么能行。&lt;/p&gt;
&lt;p&gt;或许感伤总是伴随着天真，即便我已不再能因为爱情就能理直气壮，可人总是在情绪化时变得回归本性，幼稚，童真（是童真吗）。我看着其他情侣甜蜜与否都像在读一本史书，上面落满了灰尘。&lt;br&gt;可那是最干净的啊！&lt;/p&gt;
&lt;p&gt;也许真的是这样，无法触摸到的，虚无缥缈的东西才最纯净。&lt;/p&gt;
&lt;p&gt;此时此刻，这个世界有两个人。一个在迪士尼等待着盛大的烟花，另一个面前是宽阔的黑色。&lt;br&gt;他没有办法，只好吹灭蜡烛，他知道诺言没法兑现，只好期待着一场前所未有的烟火大会在心底绽放。&lt;/p&gt;

    
    </summary>
    
    
      <category term="日常" scheme="https://asea.fun/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="life" scheme="https://asea.fun/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>阳台旧事</title>
    <link href="https://asea.fun/post/cb1f858a.html"/>
    <id>https://asea.fun/post/cb1f858a.html</id>
    <published>2022-02-08T07:43:34.000Z</published>
    <updated>2022-02-08T08:40:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>一如往常，在有些太阳的白天里，他就缩在阳台上。<br>每年回家待得最多的地方就是这里，因为冷，因为安静。在这里可以听见楼下小朋友和爷爷的玩耍，可以听见不远处传来几声狗叫。敲下这几个文字的时候，那条养了十多年的狗狗在他面前扒了几下裤腿，然后跑掉了。<br>这里仅仅是一个几平米的阳台，但容纳他刚刚好。他不需要很大的地方，他只想要平静一些，温柔一些。抬头看着夕阳沉进窗户里的倒影，看树，看云。还有几盆植物在他身旁慢慢生长。<br>可是人总是这样，想要寻求一个安静的地方，当寻到了以后却又变得急躁，孤独感总是挠你痒痒。这时候看书看视频都让他心烦意乱。飘过来的大片的云会遮住白色的太阳。</p><p>他曾在这里看过不少东西，无论是日记还是信，无论是小说还是电影，无论是托马斯还是狂阿弥。他看着视频中的人被感动的稀里哗啦，看着娟秀的字一个一个的蹦出来，他在没有人的阳台上看，他却觉得身处世界中心。</p><p>阳台和客厅隔了一个房间，那就是他的房间。每次看到这个房间，他就仿佛看到那个蜷缩在被子里的他，被耳机线缠了脖子，不时发出一些笑声。这时父亲突然推门而入，一切声响都像是捉迷藏一样躲了起来，伪造出的呼吸声直到父亲走出去才紊乱，他裹好被子然后换个方向，线缠得更紧了。<br>阳台上有个躺椅，他经常像一个婴儿一样躲在躺椅上，那时候他要么是在看好看的视频，要么是晒着太阳午睡。他当然还有另一种姿态，他会正襟危坐，将笔记本放在腿上码字。一年多以前他在这里写了一万多字的小说，以及一些长度不一的残篇。哦，已经快要两年了。人生就像在山顶朝着白花花的月亮扔冰淇淋啊，扔的气势汹汹，却很快坠入黑暗里。</p><p>他看见之前在阳台上的那个人，会在草草吃完晚饭以后躲在黑黑的阳台里，翻读《假如真有时光机》。他并不知道要读到哪里，也不是很清楚读的内容，只依稀记得跑步，记得雷克雅未克，记得冰岛。那个人在黑暗的阳台上，微弱的屏幕照出并不好看的轮廓，头上可以看见几颗明亮的星。有时也觉得读的不好，毕竟想要大声一点但又胆怯时发出声音时很累，一会便嗓子发紧口干舌燥。于是有时也放弃了村上，转而去寻找可爱的故事，或是寓言，或是童话。真找不来，就讲讲童年好友，讲讲过去。但他乐此不疲。当然，这都已经过去快要两年了。</p><p>今年回家第一件事就是好好打扫了阳台，他一年没回来了，无论是亲友还是阳台都有些沧海桑田。那些曾经追着自己跑的小孩都已经要中考了。他把阳台清空，用了各种清洁剂，趴在地上清洗。然后和母亲布置好这一隅。期间起意，将煮茶的东西搬到了阳台，于是每天早上起来坐在躺椅上泡茶喝成了新的爱好。那天铁观音喝罢，父亲拿出来新茶，他看到那是西湖龙井。<br>有些淡。</p><p>在这个家没住多少年，所以每次在家的时间大都是特殊节日，因此承载了太多美好的记忆。<br>可是时间一点也不温柔，冷不丁会打你一巴掌。他捂着脸，写下这一千多个字。抬头发现，天彻底阴下来了 雪却迟迟没有降落。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一如往常，在有些太阳的白天里，他就缩在阳台上。&lt;br&gt;每年回家待得最多的地方就是这里，因为冷，因为安静。在这里可以听见楼下小朋友和爷爷的玩耍，可以听见不远处传来几声狗叫。敲下这几个文字的时候，那条养了十多年的狗狗在他面前扒了几下裤腿，然后跑掉了。&lt;br&gt;这里仅仅是一个几平米的阳台，但容纳他刚刚好。他不需要很大的地方，他只想要平静一些，温柔一些。抬头看着夕阳沉进窗户里的倒影，看树，看云。还有几盆植物在他身旁慢慢生长。&lt;br&gt;可是人总是这样，想要寻求一个安静的地方，当寻到了以后却又变得急躁，孤独感总是挠你痒痒。这时候看书看视频都让他心烦意乱。飘过来的大片的云会遮住白色的太阳。&lt;/p&gt;
&lt;p&gt;他曾在这里看过不少东西，无论是日记还是信，无论是小说还是电影，无论是托马斯还是狂阿弥。他看着视频中的人被感动的稀里哗啦，看着娟秀的字一个一个的蹦出来，他在没有人的阳台上看，他却觉得身处世界中心。&lt;/p&gt;
&lt;p&gt;阳台和客厅隔了一个房间，那就是他的房间。每次看到这个房间，他就仿佛看到那个蜷缩在被子里的他，被耳机线缠了脖子，不时发出一些笑声。这时父亲突然推门而入，一切声响都像是捉迷藏一样躲了起来，伪造出的呼吸声直到父亲走出去才紊乱，他裹好被子然后换个方向，线缠得更紧了。&lt;br&gt;阳台上有个躺椅，他经常像一个婴儿一样躲在躺椅上，那时候他要么是在看好看的视频，要么是晒着太阳午睡。他当然还有另一种姿态，他会正襟危坐，将笔记本放在腿上码字。一年多以前他在这里写了一万多字的小说，以及一些长度不一的残篇。哦，已经快要两年了。人生就像在山顶朝着白花花的月亮扔冰淇淋啊，扔的气势汹汹，却很快坠入黑暗里。&lt;/p&gt;
&lt;p&gt;他看见之前在阳台上的那个人，会在草草吃完晚饭以后躲在黑黑的阳台里，翻读《假如真有时光机》。他并不知道要读到哪里，也不是很清楚读的内容，只依稀记得跑步，记得雷克雅未克，记得冰岛。那个人在黑暗的阳台上，微弱的屏幕照出并不好看的轮廓，头上可以看见几颗明亮的星。有时也觉得读的不好，毕竟想要大声一点但又胆怯时发出声音时很累，一会便嗓子发紧口干舌燥。于是有时也放弃了村上，转而去寻找可爱的故事，或是寓言，或是童话。真找不来，就讲讲童年好友，讲讲过去。但他乐此不疲。当然，这都已经过去快要两年了。&lt;/p&gt;
&lt;p&gt;今年回家第一件事就是好好打扫了阳台，他一年没回来了，无论是亲友还是阳台都有些沧海桑田。那些曾经追着自己跑的小孩都已经要中考了。他把阳台清空，用了各种清洁剂，趴在地上清洗。然后和母亲布置好这一隅。期间起意，将煮茶的东西搬到了阳台，于是每天早上起来坐在躺椅上泡茶喝成了新的爱好。那天铁观音喝罢，父亲拿出来新茶，他看到那是西湖龙井。&lt;br&gt;有些淡。&lt;/p&gt;
&lt;p&gt;在这个家没住多少年，所以每次在家的时间大都是特殊节日，因此承载了太多美好的记忆。&lt;br&gt;可是时间一点也不温柔，冷不丁会打你一巴掌。他捂着脸，写下这一千多个字。抬头发现，天彻底阴下来了 雪却迟迟没有降落。&lt;/p&gt;

    
    </summary>
    
    
      <category term="日常" scheme="https://asea.fun/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="life" scheme="https://asea.fun/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>2021-20</title>
    <link href="https://asea.fun/post/cea0a9e4.html"/>
    <id>https://asea.fun/post/cea0a9e4.html</id>
    <published>2022-01-11T08:36:39.000Z</published>
    <updated>2022-01-12T03:50:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天上海是一个大风天，太阳格外好，我在无限的幸福与有限的遗憾中踏上了回家的路。上次回家已经可以追溯到2021年1月20日。那对我来说是现实且魔幻的弱冠之年。当我开始尝试回忆总结的时候，19年的记忆却纷至沓来。对于20年，我知道大部分时间都在客厅和卧室里囚居，所以印象不深情有可原，但21年却也这样，这让我不知从何下笔。<br>20年末，手机数据无故消失，因此现在翻起相册，最早的照片也是20年12月底。我尝试从相册里寻找记忆，然后慢慢拼凑起这破碎的一年，那么本篇大抵会是个流水账。</p><h2 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h2><p>去年回家的时候和jn一起，我拍下来了当时的电脑桌面，现在布局也没什么变化，多了些看起来高大上的软件，卸载掉了仅有的而且不常玩的两个游戏。我依然能记起来年间写了几个游戏，那段时间合成大西瓜很火，刚好对口，就开始尝试魔改，最后留下了个不怎么好看的合成黑洞。游戏做了几个后面就没时间深入了，甚至unity根本没开始入门。还记得回老家拍了一组照片，写了<a href="https://blog.asea.fun/post/6d79d7dd.html">《老地方》</a>那篇文章，还在夜里拍了星星。回家把没考完的驾照给结业了，过年间开了很多次车（虽然总是被迫）。后来和几个同学一起卧铺来了上海，留下了一篇<a href="https://blog.asea.fun/post/b6589fc3.html">《返校日记》</a>_。</p><hr><p>大二下大概是机械专业最难的一个学期之一吧（说之一是因为大三上也很难熬但我没体验过所以没法确定），但大部分时间都在学专业之外的东西，作业一直在应付（这从最后学期绩点3.1就可以看得出来）。考了二级证书（没用），考过了四级，重启了大壳，写了几个软件….认真打理起来博客，上线了Next主题。参加了个不知道什么创新比赛，帮忙答了辩。当然印象最深的当属期末周，每天睡三四个小时的日子，还要考四级，还写了几个脚本。这段日子真是劳苦功高，以至于以后遇到任何学业压力都觉得问题不大。</p><hr><p>最值得说道的大概就是转了个专业吧，这个疫情在家被耽搁的想法终于实现了。我很难描述这是怎样一种心情，用前两天室友的话说就是“这一定是你人生中排名前三的决定，仅次于结婚。”但我始终觉得不能这么排名次。从上半年的提升自己，到无垠的焦虑，当我拿着自己写的东西在面试中侃侃而谈后，最后拿到了唯一一个名额，我还没意识到，一块石头放下了，却要搬起来更大的。这个大石头给我带来了太多的影响，它仿佛化成了无数的压力、焦虑、失望和无奈，就真真切切的砸在脑袋上，每天每天。我以为在几乎所有人都降级而自己依然坚持着，我以为自己选了四十学分的课，在面临冲突的时候选择自修两门，我以为只要我咬咬牙其实都会过去，然而这一切就像我以为那个会跟我一同战胜苦难迎接未来的人一样，都不是我以为的。</p><hr><p>想要记录一下后半年，但似乎很难描述，只能想到几个关键词：焦虑、痛苦、孤独、坚持、绝望、崩溃、跌宕、蜕变。我经历了第一次真正彻底的失恋，最近三个月我不知道怎么过来的。我感到我的希望、我的浪漫、我的真诚、我的信仰、我的爱与被爱甚至于我的情欲都随着她的离去而被一并带走了，然后留下了需要我独自面对的无数问题。这就像僵王博士扔下来一辆车，把我的植物和花盆全部砸扁了。</p><hr><p>直至现在，我还在不停地修复伤口。但我想上天是眷顾我的，派了一位天使在我身边。我不想把天使放在年末总结里，我更希望是人生总结。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>20岁像是在拖着我走。在这一年里，我开始思考人生走向、思考爱情，开始学着面对苦难，开始真正把生活的重心转移到自己身上，开始认识到读书真正的意义和魅力，开始变得更加勇敢且谨慎。这一年大概是我经历过的最为刺激的一年，困苦频繁，所以动心忍性收获颇丰。在这一年里，阿弥也入选了百大，我觉得这一定算是圆满了他的一个小目标，也补了我去年的遗憾。整理笔记的时候看到我两年前的愿望，只实现了一个，希望22年可以实现后面两个。不知道怎么给流水账作结，想起来看电视以及前几天写的两句话：</p><p>“弃尔幼志，顺尔成德，寿考惟祺，介尔景福。”<br>“有些彻底结束了，有些才刚刚开始。”</p><p>高铁码字晕高铁，那就这样。<br><img src="https://pic.imgdb.cn/item/61dd5dc02ab3f51d91a1a9b9.jpg" alt><br><img src="https://pic.imgdb.cn/item/61dd5dc42ab3f51d91a1ac26.jpg" alt></p><p><img src="https://pic.imgdb.cn/item/61de4ec52ab3f51d91336101.jpg" alt></p><p><img src="https://pic.imgdb.cn/item/61de4ec82ab3f51d9133633b.jpg" alt></p><p><img src="https://pic.imgdb.cn/item/61de4ec72ab3f51d913362b3.jpg" alt></p><blockquote><p>我深知他们只是展露了生活中的高光，他们也离不开琐碎，而我要做的便是在复杂的生活中不断追求那些可爱与美好。生活复杂，不要害怕悲伤，也不要失去希望；不要害怕快乐，也不要担心平静。那都是我们的生活。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天上海是一个大风天，太阳格外好，我在无限的幸福与有限的遗憾中踏上了回家的路。上次回家已经可以追溯到2021年1月20日。那对我来说是现实且魔幻的弱冠之年。当我开始尝试回忆总结的时候，19年的记忆却纷至沓来。对于20年，我知道大部分时间都在客厅和卧室里囚居，所以印象不深情有可原，但21年却也这样，这让我不知从何下笔。&lt;br&gt;20年末，手机数据无故消失，因此现在翻起相册，最早的照片也是20年12月底。我尝试从相册里寻找记忆，然后慢慢拼凑起这破碎的一年，那么本篇大抵会是个流水账。&lt;/p&gt;
&lt;h2 id=&quot;流水账&quot;&gt;&lt;a href=&quot;#流水账&quot; class=&quot;headerlink&quot; title=&quot;流水账&quot;&gt;&lt;/a&gt;流水账&lt;/h2&gt;&lt;p&gt;去年回家的时候和jn一起，我拍下来了当时的电脑桌面，现在布局也没什么变化，多了些看起来高大上的软件，卸载掉了仅有的而且不常玩的两个游戏。我依然能记起来年间写了几个游戏，那段时间合成大西瓜很火，刚好对口，就开始尝试魔改，最后留下了个不怎么好看的合成黑洞。游戏做了几个后面就没时间深入了，甚至unity根本没开始入门。还记得回老家拍了一组照片，写了&lt;a href=&quot;https://blog.asea.fun/post/6d79d7dd.html&quot;&gt;《老地方》&lt;/a&gt;那篇文章，还在夜里拍了星星。回家把没考完的驾照给结业了，过年间开了很多次车（虽然总是被迫）。后来和几个同学一起卧铺来了上海，留下了一篇&lt;a href=&quot;https://blog.asea.fun/post/b6589fc3.html&quot;&gt;《返校日记》&lt;/a&gt;_。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;大二下大概是机械专业最难的一个学期之一吧（说之一是因为大三上也很难熬但我没体验过所以没法确定），但大部分时间都在学专业之外的东西，作业一直在应付（这从最后学期绩点3.1就可以看得出来）。考了二级证书（没用），考过了四级，重启了大壳，写了几个软件….认真打理起来博客，上线了Next主题。参加了个不知道什么创新比赛，帮忙答了辩。当然印象最深的当属期末周，每天睡三四个小时的日子，还要考四级，还写了几个脚本。这段日子真是劳苦功高，以至于以后遇到任何学业压力都觉得问题不大。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最值得说道的大概就是转了个专业吧，这个疫情在家被耽搁的想法终于实现了。我很难描述这是怎样一种心情，用前两天室友的话说就是“这一定是你人生中排名前三的决定，仅次于结婚。”但我始终觉得不能这么排名次。从上半年的提升自己，到无垠的焦虑，当我拿着自己写的东西在面试中侃侃而谈后，最后拿到了唯一一个名额，我还没意识到，一块石头放下了，却要搬起来更大的。这个大石头给我带来了太多的影响，它仿佛化成了无数的压力、焦虑、失望和无奈，就真真切切的砸在脑袋上，每天每天。我以为在几乎所有人都降级而自己依然坚持着，我以为自己选了四十学分的课，在面临冲突的时候选择自修两门，我以为只要我咬咬牙其实都会过去，然而这一切就像我以为那个会跟我一同战胜苦难迎接未来的人一样，都不是我以为的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;想要记录一下后半年，但似乎很难描述，只能想到几个关键词：焦虑、痛苦、孤独、坚持、绝望、崩溃、跌宕、蜕变。我经历了第一次真正彻底的失恋，最近三个月我不知道怎么过来的。我感到我的希望、我的浪漫、我的真诚、我的信仰、我的爱与被爱甚至于我的情欲都随着她的离去而被一并带走了，然后留下了需要我独自面对的无数问题。这就像僵王博士扔下来一辆车，把我的植物和花盆全部砸扁了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日常" scheme="https://asea.fun/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="life" scheme="https://asea.fun/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>2021-20</title>
    <link href="https://asea.fun/post/cea0a9e4.html"/>
    <id>https://asea.fun/post/cea0a9e4.html</id>
    <published>2022-01-11T08:36:39.000Z</published>
    <updated>2022-01-11T10:44:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天上海是一个大风天，太阳格外好，我在无限的幸福与有限的遗憾中踏上了回家的路。上次回家已经可以追溯到2021年1月20日。那对我来说是现实且魔幻的一年，这一年对我来说可以称之为弱冠之年。而当我开始尝试回忆总结的时候，19年的记忆却纷至沓来。对于20年，我知道大部分时间都在客厅和卧室里囚居，所以印象不深情有可原，但21年却也这样，这让我不知从何下笔。<br>20年末，手机数据无故消失，因此现在翻起相册，最早的照片也是20年12月底。我尝试从相册里寻找记忆，然后慢慢拼凑起这破碎的一年，那么本篇大抵会是个流水账。</p><h2 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h2><p>去年回家的时候和jn一起，我拍下来了当时的电脑桌面，现在布局也没什么变化，多了些看起来高大上的软件，卸载掉了仅有的而且不常玩的两个游戏。我依然能记起来年间写了几个游戏，那段时间合成大西瓜很火，刚好对口，就开始尝试魔改，最后留下了个不怎么好看的合成黑洞。游戏做了几个后面就没时间深入了，甚至unity根本没开始入门。还记得回老家拍了一组照片，写了《老地方》那篇文章，还在夜里拍了星星。回家把没考完的驾照给结业了，过年间开了很多次车（虽然总是被迫）。后来和几个同学一起卧铺来了上海，留下了一篇返校日记。</p><hr><p>这个学期大概是机械专业最难的一个学期之一吧（说之一是因为大三上也很难熬但我没体验过所以没法确定），但大部分时间都在学专业之外的东西，作业一直在应付（这从最后学期几点3.1就可以看得出来）。考了二级证书（没用），考过了四级，重启了大壳，写了几个软件….认真打理起来博客，上线了Next主题。参加了个不知道什么创新比赛，帮忙答了辩。当然印象最深的当属期末周，每天睡三四个小时的日子，还要考四级，还写了几个脚本。这段日子真是劳苦功高，以至于以后遇到任何学业压力都觉得问题不大。</p><hr><p>最值得说道的大概就是转了个专业吧，这个疫情在家被耽搁的想法终于实现了。我很难描述这是怎样一种心情，用前两天室友的话说就是“这一定是你人生中排名前三的决定，仅次于结婚。”但我始终觉得不能这么排名次。从上半年的提升自己，到无垠的焦虑，当我拿着自己写的东西在面试中侃侃而谈后，最后拿到了唯一一个名额，我还没意识到，一块石头放下了，却要搬起来更大的。这个大石头给我带来了太多的影响，它仿佛化成了无数的压力、焦虑、失望和无奈，就真真切切的砸在脑袋上，每天每天。我以为在几乎所有人都降级而自己依然坚持着，我以为自己选了四十学分的课，在面临冲突的时候选择自修两门，我以为只要我咬咬牙其实都会过去，然而这一切就像我以为那个会跟我一同战胜苦难迎接未来的人一样，都不是我以为的。</p><hr><p>想要记录一下后半年，但似乎很难描述，只能想到几个关键词：焦虑、痛苦、孤独、坚持、绝望、崩溃、跌宕、蜕变。我经历了第一次真正彻底的失恋，最近三个月我不知道怎么过来的。我感到我的希望、我的浪漫、我的真诚、我的信仰、我的爱与被爱甚至于我的情欲都随着她的离去而被一并带走了，然后留下了需要我独自面对的无数问题。这就像僵王博士扔下来一辆车，把我的植物和花盆全部砸扁了。</p><hr><p>直至现在，我还在不停地修复伤口。但我想上天是眷顾我的，派了一位天使在我身边。我不想把天使放在年末总结里，我更希望是人生总结。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>20岁像是在拖着我走。在这一年里，我开始思考人生走向、思考爱情，开始学着面对苦难，开始真正把生活的重心转移到自己身上，开始认识到读书真正的意义和魅力，开始变得更加勇敢且谨慎。这一年大概是我经历过的最为刺激的一年，困苦频繁，所以动心忍性收获颇丰。在这一年里，阿弥也入选了百大，我觉得这一定算是圆满了他的一个小目标，也补了我去年的遗憾。整理笔记的时候看到我两年前的愿望，只实现了一个，希望22年可以实现后面两个。不知道怎么给流水账作结，想起来看电视以及前几天写的两句话：</p><p>“弃尔幼志，顺尔成德，寿考惟祺，介尔景福。”<br>“有些彻底结束了，有些才刚刚开始。”</p><p>高铁码字晕高铁，那就这样。<br><img src="https://pic.imgdb.cn/item/61dd5dc02ab3f51d91a1a9b9.jpg" alt><br><img src="https://pic.imgdb.cn/item/61dd5dc42ab3f51d91a1ac26.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天上海是一个大风天，太阳格外好，我在无限的幸福与有限的遗憾中踏上了回家的路。上次回家已经可以追溯到2021年1月20日。那对我来说是现实且魔幻的一年，这一年对我来说可以称之为弱冠之年。而当我开始尝试回忆总结的时候，19年的记忆却纷至沓来。对于20年，我知道大部分时间都在客厅和卧室里囚居，所以印象不深情有可原，但21年却也这样，这让我不知从何下笔。&lt;br&gt;20年末，手机数据无故消失，因此现在翻起相册，最早的照片也是20年12月底。我尝试从相册里寻找记忆，然后慢慢拼凑起这破碎的一年，那么本篇大抵会是个流水账。&lt;/p&gt;
&lt;h2 id=&quot;流水账&quot;&gt;&lt;a href=&quot;#流水账&quot; class=&quot;headerlink&quot; title=&quot;流水账&quot;&gt;&lt;/a&gt;流水账&lt;/h2&gt;&lt;p&gt;去年回家的时候和jn一起，我拍下来了当时的电脑桌面，现在布局也没什么变化，多了些看起来高大上的软件，卸载掉了仅有的而且不常玩的两个游戏。我依然能记起来年间写了几个游戏，那段时间合成大西瓜很火，刚好对口，就开始尝试魔改，最后留下了个不怎么好看的合成黑洞。游戏做了几个后面就没时间深入了，甚至unity根本没开始入门。还记得回老家拍了一组照片，写了《老地方》那篇文章，还在夜里拍了星星。回家把没考完的驾照给结业了，过年间开了很多次车（虽然总是被迫）。后来和几个同学一起卧铺来了上海，留下了一篇返校日记。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这个学期大概是机械专业最难的一个学期之一吧（说之一是因为大三上也很难熬但我没体验过所以没法确定），但大部分时间都在学专业之外的东西，作业一直在应付（这从最后学期几点3.1就可以看得出来）。考了二级证书（没用），考过了四级，重启了大壳，写了几个软件….认真打理起来博客，上线了Next主题。参加了个不知道什么创新比赛，帮忙答了辩。当然印象最深的当属期末周，每天睡三四个小时的日子，还要考四级，还写了几个脚本。这段日子真是劳苦功高，以至于以后遇到任何学业压力都觉得问题不大。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最值得说道的大概就是转了个专业吧，这个疫情在家被耽搁的想法终于实现了。我很难描述这是怎样一种心情，用前两天室友的话说就是“这一定是你人生中排名前三的决定，仅次于结婚。”但我始终觉得不能这么排名次。从上半年的提升自己，到无垠的焦虑，当我拿着自己写的东西在面试中侃侃而谈后，最后拿到了唯一一个名额，我还没意识到，一块石头放下了，却要搬起来更大的。这个大石头给我带来了太多的影响，它仿佛化成了无数的压力、焦虑、失望和无奈，就真真切切的砸在脑袋上，每天每天。我以为在几乎所有人都降级而自己依然坚持着，我以为自己选了四十学分的课，在面临冲突的时候选择自修两门，我以为只要我咬咬牙其实都会过去，然而这一切就像我以为那个会跟我一同战胜苦难迎接未来的人一样，都不是我以为的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;想要记录一下后半年，但似乎很难描述，只能想到几个关键词：焦虑、痛苦、孤独、坚持、绝望、崩溃、跌宕、蜕变。我经历了第一次真正彻底的失恋，最近三个月我不知道怎么过来的。我感到我的希望、我的浪漫、我的真诚、我的信仰、我的爱与被爱甚至于我的情欲都随着她的离去而被一并带走了，然后留下了需要我独自面对的无数问题。这就像僵王博士扔下来一辆车，把我的植物和花盆全部砸扁了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日常" scheme="https://asea.fun/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="life" scheme="https://asea.fun/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>一次奇葩的试错</title>
    <link href="https://asea.fun/post/3884ab12.html"/>
    <id>https://asea.fun/post/3884ab12.html</id>
    <published>2021-12-28T03:58:22.000Z</published>
    <updated>2021-12-28T04:01:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>提交了21次oj试出来的问题（本地运行无问题）</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回G中指定顶点的位置</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">TypeOfVer</span>, <span class="keyword">class</span> <span class="title">TypeOfEdge</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> adjlist_graph&lt;TypeOfVer, TypeOfEdge&gt;::LocateVer(TypeOfVer &amp;data)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Vers; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(verList[i].getVer() == data)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>错误原因：</strong>传TypeOfVer没有传递引用（fu*k)</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;提交了21次oj试出来的问题（本地运行无问题）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回G中指定顶点的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TypeOfVer&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TypeOfEdge&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; adjlist_graph&amp;lt;TypeOfVer, TypeOfEdge&amp;gt;::LocateVer(TypeOfVer &amp;amp;data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; Vers; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(verList[i].getVer() == data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;错误原因：&lt;/strong&gt;传TypeOfVer没有传递引用（fu*k)&lt;/p&gt;

    
    </summary>
    
    
      <category term="技术" scheme="https://asea.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="oj" scheme="https://asea.fun/tags/oj/"/>
    
      <category term="c++" scheme="https://asea.fun/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>数据库系统原理期末复习</title>
    <link href="https://asea.fun/post/f3c8943e.html"/>
    <id>https://asea.fun/post/f3c8943e.html</id>
    <published>2021-12-23T16:43:38.000Z</published>
    <updated>2021-12-23T16:45:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>梳理一下数据库的考点，梳理顺序大概是考题的顺序吧</p></blockquote><h2 id="第二章-关系模型、关系代数"><a href="#第二章-关系模型、关系代数" class="headerlink" title="第二章 关系模型、关系代数"></a>第二章 关系模型、关系代数</h2><ol><li>用二维表格表示实体集，用关键码进行数据导航的数据模型称为关系模型</li><li>在关系模型中，字段称为属性，字段值称为属性值，记录类型称为关系模式</li><li>元组的集合称为关系（relation）或实例（instance）</li><li>关系中属性个数称为“元数”（arity），元组个数为“基数”(cardinality)。 </li><li>关系是一个属性数目相同的元组的集合。 </li><li><strong>实体完整性规则</strong>在组成主键的属性上不能有空值</li><li><strong>参照完整性规则</strong>不允许引用不存在的实体</li><li>关系模型有三个重要组成部分：数据结构，数据操纵，数据完整性规则。</li><li>关系型数据库优点<ol><li>单一的数据结构形式</li><li>高度的数据独立性</li><li>建立在比较坚实的数学基础上</li><li>….记不住</li></ol></li></ol><h2 id="第四章-规范化设计"><a href="#第四章-规范化设计" class="headerlink" title="第四章 规范化设计"></a>第四章 规范化设计</h2><ol><li>关系模型具有外延和内涵两个部分的内容</li><li>数据冗余是指同一数据在系统中多次重复出现</li><li>属性集闭包</li><li>2NF去除了非主键的局部依赖，3NF去除了非主键的传递依赖，BCNF去除了主键的以上两个依赖</li><li>无损分解的测试方法（chase）以及定理（R1∩R2）→（R1－R2）</li></ol><h2 id="第五章-ER"><a href="#第五章-ER" class="headerlink" title="第五章 ER"></a>第五章 ER</h2><ol><li><strong>数据库设计步骤</strong><ul><li>规划</li><li>需求分析</li><li>概念设计</li><li>逻辑设计</li><li>物理设计</li><li>实现</li><li>运行维护</li></ul></li><li><strong>ER图要点</strong>：标出1:N还是M:N的对应关系，以及主键。</li><li>转化为关系模式时，每个实体单独是一个关系模式，对于1:N，在N端加上外键，引用1端的主键；对于M:N，单独拎出来一个关系模式主键是两端的主键的并集，两个外键分别对应两个主键，以及独有的属性。</li><li><strong>陈品山</strong></li></ol><h2 id="第三章-SQL"><a href="#第三章-SQL" class="headerlink" title="第三章 SQL"></a>第三章 SQL</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">用户</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> xxx</span><br><span class="line"><span class="keyword">identified</span> <span class="keyword">by</span> xxx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> xxx</span><br><span class="line"><span class="keyword">identified</span> <span class="keyword">by</span> xxx</span><br><span class="line"><span class="keyword">replace</span> xxx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span></span><br><span class="line"><span class="keyword">to</span> xxx;</span><br><span class="line"></span><br><span class="line">建表</span><br><span class="line"><span class="keyword">create</span> talbe xxx(</span><br><span class="line">xxx xxx,</span><br><span class="line">xxx xxx,</span><br><span class="line"><span class="keyword">constraint</span> xxx primary <span class="keyword">key</span>(xx,xx),</span><br><span class="line"><span class="keyword">constraint</span> xxx <span class="keyword">foreign</span> <span class="keyword">key</span>(customer_id)</span><br><span class="line">    <span class="keyword">references</span> customer(customer_id)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept80</span><br><span class="line">  <span class="keyword">AS</span> </span><br><span class="line">    <span class="keyword">SELECT</span> ...;</span><br><span class="line"></span><br><span class="line">修改表</span><br><span class="line"><span class="keyword">rename</span> <span class="keyword">table</span> <span class="keyword">to</span> xxx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> customer</span><br><span class="line"><span class="keyword">add</span> (address <span class="built_in">varchar</span>(<span class="number">50</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> customer</span><br><span class="line"><span class="keyword">drop</span> (memo);</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> customer</span><br><span class="line"><span class="keyword">modify</span> (address <span class="built_in">varchar</span>(<span class="number">40</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> customer</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span> xxx <span class="keyword">check</span>(sale_num &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">删除表</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> xxx;</span><br><span class="line"></span><br><span class="line">插入</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="string">&#x27;001001&#x27;</span>,<span class="string">&#x27;玩具熊&#x27;</span>,<span class="number">25.50</span>,<span class="number">900</span>,<span class="keyword">to_date</span>(<span class="string">&#x27;2008-12-20&#x27;</span>,<span class="string">&#x27;YYYY-MM-DD&#x27;</span>));</span><br><span class="line"></span><br><span class="line">更新</span><br><span class="line"><span class="keyword">update</span> product</span><br><span class="line"><span class="keyword">set</span> price = <span class="number">22</span></span><br><span class="line"><span class="keyword">where</span> product_id = <span class="string">&#x27;001&#x27;</span>;</span><br><span class="line"></span><br><span class="line">删除</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> product</span><br><span class="line"><span class="keyword">where</span> ...;</span><br><span class="line"></span><br><span class="line">索引</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_name</span><br><span class="line"><span class="keyword">on</span> customer(customer_name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> idx_name;</span><br><span class="line"></span><br><span class="line">查询</span><br><span class="line"><span class="keyword">select</span> product_id,product_name</span><br><span class="line"><span class="keyword">from</span> product;</span><br><span class="line">where round(months_between(sysdate,product_date))&lt;12;</span><br><span class="line"></span><br><span class="line">视图</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> vu_p1 </span><br><span class="line"><span class="keyword">as</span> <span class="keyword">select</span> product_name,<span class="keyword">sum</span>(sale_num*price)</span><br><span class="line"><span class="keyword">from</span> product p,sale_detail s</span><br><span class="line"><span class="keyword">where</span> p.product_id = s.product_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> p.product_name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">view</span> vu_p1</span><br><span class="line"><span class="keyword">as</span> ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> vu_p1;</span><br><span class="line"></span><br><span class="line">事务</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"><span class="keyword">savepoint</span> flag;</span><br><span class="line"><span class="keyword">rollback</span> <span class="keyword">to</span> flag;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第七章-事务、锁"><a href="#第七章-事务、锁" class="headerlink" title="第七章 事务、锁"></a>第七章 事务、锁</h2><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><ol><li>事务(transaction)是构成单一逻辑工作单元的操作集合 。</li><li>事务四个特性：原子、一致、隔离、持久</li><li>块：内外存数据交换的基本单位</li></ol><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><ol><li><p>X锁（Exclusive Lock）：对数据R解除封锁之前，不允许其他事务T再对该数据加任何类型的锁。</p></li><li><p>S锁（Shared Lock）：仍允许其他事务再对该数据加 S锁，但在对该数据的所有S锁都解除之前不允许任何事务对该数据加X锁。</p></li><li><p>封锁相容矩阵</p><p><img src="https://pic.imgdb.cn/item/61c4957e2ab3f51d91b55cb8.jpg" alt></p></li><li><p>封锁对象的大小称为<strong>封锁的粒度</strong></p></li></ol><h2 id="第二章-查询优化"><a href="#第二章-查询优化" class="headerlink" title="第二章 查询优化"></a>第二章 查询优化</h2><p>我好困…</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;梳理一下数据库的考点，梳理顺序大概是考题的顺序吧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;第二章-关系模型、关系代数&quot;&gt;&lt;a href=&quot;#第二章-关系模型、关系代数&quot; class=&quot;headerlink&quot; title=&quot;第二章 关系模型、关系代数&quot;&gt;&lt;/a&gt;第二章 关系模型、关系代数&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;用二维表格表示实体集，用关键码进行数据导航的数据模型称为关系模型&lt;/li&gt;
&lt;li&gt;在关系模型中，字段称为属性，字段值称为属性值，记录类型称为关系模式&lt;/li&gt;
&lt;li&gt;元组的集合称为关系（relation）或实例（instance）&lt;/li&gt;
&lt;li&gt;关系中属性个数称为“元数”（arity），元组个数为“基数”(cardinality)。 &lt;/li&gt;
&lt;li&gt;关系是一个属性数目相同的元组的集合。 &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实体完整性规则&lt;/strong&gt;在组成主键的属性上不能有空值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;参照完整性规则&lt;/strong&gt;不允许引用不存在的实体&lt;/li&gt;
&lt;li&gt;关系模型有三个重要组成部分：数据结构，数据操纵，数据完整性规则。&lt;/li&gt;
&lt;li&gt;关系型数据库优点&lt;ol&gt;
&lt;li&gt;单一的数据结构形式&lt;/li&gt;
&lt;li&gt;高度的数据独立性&lt;/li&gt;
&lt;li&gt;建立在比较坚实的数学基础上&lt;/li&gt;
&lt;li&gt;….记不住&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;第四章-规范化设计&quot;&gt;&lt;a href=&quot;#第四章-规范化设计&quot; class=&quot;headerlink&quot; title=&quot;第四章 规范化设计&quot;&gt;&lt;/a&gt;第四章 规范化设计&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;关系模型具有外延和内涵两个部分的内容&lt;/li&gt;
&lt;li&gt;数据冗余是指同一数据在系统中多次重复出现&lt;/li&gt;
&lt;li&gt;属性集闭包&lt;/li&gt;
&lt;li&gt;2NF去除了非主键的局部依赖，3NF去除了非主键的传递依赖，BCNF去除了主键的以上两个依赖&lt;/li&gt;
&lt;li&gt;无损分解的测试方法（chase）以及定理（R1∩R2）→（R1－R2）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;第五章-ER&quot;&gt;&lt;a href=&quot;#第五章-ER&quot; class=&quot;headerlink&quot; title=&quot;第五章 ER&quot;&gt;&lt;/a&gt;第五章 ER&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;数据库设计步骤&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;规划&lt;/li&gt;
&lt;li&gt;需求分析&lt;/li&gt;
&lt;li&gt;概念设计&lt;/li&gt;
&lt;li&gt;逻辑设计&lt;/li&gt;
&lt;li&gt;物理设计&lt;/li&gt;
&lt;li&gt;实现&lt;/li&gt;
&lt;li&gt;运行维护&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ER图要点&lt;/strong&gt;：标出1:N还是M:N的对应关系，以及主键。&lt;/li&gt;
&lt;li&gt;转化为关系模式时，每个实体单独是一个关系模式，对于1:N，在N端加上外键，引用1端的主键；对于M:N，单独拎出来一个关系模式主键是两端的主键的并集，两个外键分别对应两个主键，以及独有的属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;陈品山&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;第三章-SQL&quot;&gt;&lt;a href=&quot;#第三章-SQL&quot; class=&quot;headerlink&quot; title=&quot;第三章 SQL&quot;&gt;&lt;/a&gt;第三章 SQL&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;用户&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt; xxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;identified&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; xxx;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt; xxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;identified&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; xxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;replace&lt;/span&gt; xxx;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;grant&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;connect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; xxx;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;建表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; talbe xxx(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xxx xxx,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xxx xxx,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;constraint&lt;/span&gt; xxx primary &lt;span class=&quot;keyword&quot;&gt;key&lt;/span&gt;(xx,xx),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;constraint&lt;/span&gt; xxx &lt;span class=&quot;keyword&quot;&gt;foreign&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;key&lt;/span&gt;(customer_id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;references&lt;/span&gt; customer(customer_id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; 	dept80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; ...;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;修改表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;rename&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; xxx;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; customer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;add&lt;/span&gt; (address &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; customer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; (memo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; customer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;modify&lt;/span&gt; (address &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; customer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;constraint&lt;/span&gt; xxx &lt;span class=&quot;keyword&quot;&gt;check&lt;/span&gt;(sale_num &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;删除表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; xxx;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;插入&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; product &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;001001&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;#x27;玩具熊&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;25.50&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;900&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;to_date&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;2008-12-20&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;#x27;YYYY-MM-DD&amp;#x27;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;更新&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt; product&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; price = &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; product_id = &lt;span class=&quot;string&quot;&gt;&amp;#x27;001&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;删除&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; product&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; ...;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;索引&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;index&lt;/span&gt; idx_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; customer(customer_name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;index&lt;/span&gt; idx_name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;查询&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; product_id,product_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; product;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;where round(months_between(sysdate,product_date))&amp;lt;12;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;视图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;view&lt;/span&gt; vu_p1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; product_name,&lt;span class=&quot;keyword&quot;&gt;sum&lt;/span&gt;(sale_num*price)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; product p,sale_detail s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; p.product_id = s.product_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; p.product_name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;replace&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;view&lt;/span&gt; vu_p1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; ...;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;view&lt;/span&gt; vu_p1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;事务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;commit&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;rollback&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;savepoint&lt;/span&gt; flag;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;rollback&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; flag;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;第七章-事务、锁&quot;&gt;&lt;a href=&quot;#第七章-事务、锁&quot; class=&quot;headerlink&quot; title=&quot;第七章 事务、锁&quot;&gt;&lt;/a&gt;第七章 事务、锁&lt;/h2&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://asea.fun/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="DB" scheme="https://asea.fun/tags/DB/"/>
    
      <category term="note" scheme="https://asea.fun/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>python + mysql</title>
    <link href="https://asea.fun/post/1fc191f2.html"/>
    <id>https://asea.fun/post/1fc191f2.html</id>
    <published>2021-12-17T13:45:21.000Z</published>
    <updated>2021-12-17T14:03:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>其实大壳的后台管理非常的杂乱，也不是说本身多么复杂，只不过不管是配置文件，还是各个module，甚至是数据存储都在用文件式存储，以至于很多时候花了很多心思优化逻辑还是一塌糊涂。就拿教务处提醒为例，因为一直不想用数据库，所以一直拿文件存储，但是局限性太大了，最近老是出bug，所以决定上手数据库了。<br>由于服务器上还跑了很多东西，例如apache、jupyter等，所以phpstudy一直挂着，索性拿它提供的工具直接装mysql吧。毕竟一直在学数据库，但真正自己放到项目里还没实践过。</p></blockquote><h2 id="梳理项目结构"><a href="#梳理项目结构" class="headerlink" title="梳理项目结构"></a>梳理项目结构</h2><blockquote><p>不得不吐槽的是，我的主文件里写了一大堆import，结构一塌糊涂，所以今天认真了解了一下python的package机制，把我自己写的模块封装到utils的package下，然后再package里建立<code>__init__.py</code>，将需要的模块放到<code>__all__</code>这个数组变量里，类型都是不带后缀的字符串，这样在主文件里只需要<code>from utils import *</code>就行，终于整齐了一些</p></blockquote><p><img src="https://pic.imgdb.cn/item/61bc96782ab3f51d9194d25a.jpg" alt></p><h2 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h2><ol><li>phpstudy里安装好mysql和可视化界面（我选的是sql_front)，其实也用不了几下，你也可以敲命令，都很快。</li><li>创建自己的数据库，建表，设计结构。</li><li>哦对了<code>mysql -uroot -pxxxx</code>，记一下命令，用来命令行连接数据库。</li><li>基本配置好后，着手学习<code>pymysql</code>来连接python和mysql，很简单，这里直接放代码<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接MySQL获取游标</span></span><br><span class="line">  db = pymysql.connect(</span><br><span class="line">    host=<span class="string">&#x27;127.0.0.1&#x27;</span>, </span><br><span class="line">    port=<span class="number">3306</span>, </span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>, </span><br><span class="line">    password=<span class="string">&#x27;xxxx&#x27;</span>, </span><br><span class="line">    db=<span class="string">&#x27;xxx&#x27;</span>, </span><br><span class="line">    charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  cur = db.cursor()</span><br><span class="line">  sql_select = <span class="string">&quot;select count(*) from tablename where title = &#x27;&quot;</span>+title+<span class="string">&quot;&#x27;;&quot;</span></span><br><span class="line">  cur.execute(sql_select)</span><br><span class="line">  result = cur.fetchone()</span><br><span class="line">  <span class="keyword">if</span> result[<span class="number">0</span>] &gt; <span class="number">0</span>: <span class="comment"># 如果存在就返回0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    sql_insert = <span class="string">&quot;insert into tablename values(null,&quot;</span>+ <span class="string">&quot;&#x27;&quot;</span> + <span class="built_in">str</span>(date) + <span class="string">&quot;&#x27;,&#x27;&quot;</span> + title + <span class="string">&quot;&#x27;,&#x27;&quot;</span> + link + <span class="string">&quot;&#x27;);&quot;</span> <span class="comment"># id设置了自增</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      cur.execute(sql_insert)</span><br><span class="line">      db.commit() <span class="comment"># 事务提交</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      db.rollback() <span class="comment"># 回滚</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  cur.close()</span><br><span class="line">  db.close()</span><br></pre></td></tr></table></figure></li><li>值得注意的是sql字符串的拼接注意单引号，以及每次查询（如果不频繁的话）就重新连接最后断开，因为隔一段时间不请求就自动断开了。</li></ol><blockquote><p>我发现其实也没啥东西，但我就是弄了两个小时…可能因为一直想做没勇气做吧，虽然不是什么难事，但还是比较满意….考试周加油。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;其实大壳的后台管理非常的杂乱，也不是说本身多么复杂，只不过不管是配置文件，还是各个module，甚至是数据存储都在用文件式存储，以至于很多时候花了很多心思优化逻辑还是一塌糊涂。就拿教务处提醒为例，因为一直不想用数据库，所以一直拿文件存储，但是局限性太大了，最近老是出bug，所以决定上手数据库了。&lt;br&gt;由于服务器上还跑了很多东西，例如apache、jupyter等，所以phpstudy一直挂着，索性拿它提供的工具直接装mysql吧。毕竟一直在学数据库，但真正自己放到项目里还没实践过。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;梳理项目结构&quot;&gt;&lt;a href=&quot;#梳理项目结构&quot; class=&quot;headerlink&quot; title=&quot;梳理项目结构&quot;&gt;&lt;/a&gt;梳理项目结构&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;不得不吐槽的是，我的主文件里写了一大堆import，结构一塌糊涂，所以今天认真了解了一下python的package机制，把我自己写的模块封装到utils的package下，然后再package里建立&lt;code&gt;__init__.py&lt;/code&gt;，将需要的模块放到&lt;code&gt;__all__&lt;/code&gt;这个数组变量里，类型都是不带后缀的字符串，这样在主文件里只需要&lt;code&gt;from utils import *&lt;/code&gt;就行，终于整齐了一些&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.imgdb.cn/item/61bc96782ab3f51d9194d25a.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;配置mysql&quot;&gt;&lt;a href=&quot;#配置mysql&quot; class=&quot;headerlink&quot; title=&quot;配置mysql&quot;&gt;&lt;/a&gt;配置mysql&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;phpstudy里安装好mysql和可视化界面（我选的是sql_front)，其实也用不了几下，你也可以敲命令，都很快。&lt;/li&gt;
&lt;li&gt;创建自己的数据库，建表，设计结构。&lt;/li&gt;
&lt;li&gt;哦对了&lt;code&gt;mysql -uroot -pxxxx&lt;/code&gt;，记一下命令，用来命令行连接数据库。&lt;/li&gt;
&lt;li&gt;基本配置好后，着手学习&lt;code&gt;pymysql&lt;/code&gt;来连接python和mysql，很简单，这里直接放代码&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 连接MySQL获取游标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  db = pymysql.connect(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    host=&lt;span class=&quot;string&quot;&gt;&amp;#x27;127.0.0.1&amp;#x27;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    port=&lt;span class=&quot;number&quot;&gt;3306&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    user=&lt;span class=&quot;string&quot;&gt;&amp;#x27;root&amp;#x27;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    password=&lt;span class=&quot;string&quot;&gt;&amp;#x27;xxxx&amp;#x27;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    db=&lt;span class=&quot;string&quot;&gt;&amp;#x27;xxx&amp;#x27;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    charset=&lt;span class=&quot;string&quot;&gt;&amp;#x27;utf8&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cur = db.cursor()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sql_select = &lt;span class=&quot;string&quot;&gt;&amp;quot;select count(*) from tablename where title = &amp;#x27;&amp;quot;&lt;/span&gt;+title+&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;#x27;;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cur.execute(sql_select)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  result = cur.fetchone()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; result[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;comment&quot;&gt;# 如果存在就返回0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sql_insert = &lt;span class=&quot;string&quot;&gt;&amp;quot;insert into tablename values(null,&amp;quot;&lt;/span&gt;+ &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;#x27;&amp;quot;&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;(date) + &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;#x27;,&amp;#x27;&amp;quot;&lt;/span&gt; + title + &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;#x27;,&amp;#x27;&amp;quot;&lt;/span&gt; + link + &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;#x27;);&amp;quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# id设置了自增&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      cur.execute(sql_insert)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      db.commit() &lt;span class=&quot;comment&quot;&gt;# 事务提交&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      db.rollback() &lt;span class=&quot;comment&quot;&gt;# 回滚&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cur.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  db.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;值得注意的是sql字符串的拼接注意单引号，以及每次查询（如果不频繁的话）就重新连接最后断开，因为隔一段时间不请求就自动断开了。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;我发现其实也没啥东西，但我就是弄了两个小时…可能因为一直想做没勇气做吧，虽然不是什么难事，但还是比较满意….考试周加油。&lt;/p&gt;
&lt;/blockquote&gt;

    
    </summary>
    
    
      <category term="技术" scheme="https://asea.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="mysql" scheme="https://asea.fun/tags/mysql/"/>
    
      <category term="python" scheme="https://asea.fun/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>关于为什么要谈恋爱</title>
    <link href="https://asea.fun/post/8f75d213.html"/>
    <id>https://asea.fun/post/8f75d213.html</id>
    <published>2021-12-12T14:48:40.000Z</published>
    <updated>2021-12-12T15:04:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>对于恋爱的一些思索</p></blockquote><p>在我成长这么多年，最值得一提的一点就是，我和家庭的和解。我一直不明白我是怎么从厌倦逃离家庭到现在想念和热爱我的家庭的，现在大概明白了，是恋爱教会我如何爱和感受爱。<br>其实每次有勇气面对眼前的这些问题的时候，我都会想，我为什么想要拉她回来，其实我在想一个什么样的问题呢，就是，为什么要恋爱，也就是说当我在学会怎么恋爱的时候，我始终没想明白，为什么要恋爱。这个问题其实可以很含糊的回答，比如两个喜欢的人在一起了，不需要理由。但我不喜欢这样糊弄，于是我开始认真地想为什么人要恋爱，仅仅是喜欢对方的好然后想要占有吗，仅仅是看到别人恋爱然后从众吗，或者是其中有很多很多原因。我觉得这个问题每个想要好好谈恋爱的人都要搞懂，或者说即便它是搞不懂的，也要深入想一想，然后深入浅出，不然就很难谈一场健康的恋爱。</p><p>一、恋爱可以让我发现自己的缺点<br>这点毋庸置疑，很多很多缺点是自己一个人没办法发现的，即便身边朋友感觉到也不会跟你提出，所以在恋爱的时候，我想变得更好，同时我也会暴露自己的缺点，这让对方感到不适，对方向你提出了你的问题，这些问题通常是你自己没有发现过但是一发现也会觉得确实是个问题，然后认真的反思改进，不断的互相成为更优秀的人，不只是为了对方，也是为了自己。</p><p>二、恋爱可以让人学会爱人<br>其实我一直觉得我自己很爱对方，但其实我一直不很会爱对方，这里说的不是说生活中的惊喜和浪漫，而是在说从心灵上如何去关爱对方，其中包括如何关心一个人的情绪、如何尊重一个人以及如何帮助一个人，这些都算是爱，但是要比那些表面的仪式感更难意识到。“我都是为了你好！”这些人往往都不会爱人。</p><p>三、恋爱可以让我学会感受爱<br>人其实都容易自私，喜欢索取容易变得贪婪。往往这个时候我们会对对方苛责，会极尽力气想让对方对自己好，我想说，这样的人不懂得被爱。被爱当然也是种能力，恋爱的过程中人们其实很难学会被爱，相反当恋爱出现问题，人才开始思考对方的好，才开始感受到原来对方其实真的对我很好了，这时候才会想起来当时自己的幼稚。就是这样一步步学会了感受到对方的爱意。其实对于家庭也是这样，感受家庭的爱和如何去爱家庭都是一件很难很难的事情。</p><p>四、恋爱可以让我变得勇敢<br>一个人的时候往往瞻前顾后在意别人的看法，恋爱让我有了依靠，可以不必太在意其他人看发，所以可以勇敢的尝试以前害怕的事情，恋爱让我变得勇敢起来。</p><p>五、恋爱让我认识自己<br>人最难的一个过程还是认识自己，成长就是不断地认识自己，但是往往一个人很难明白自己，日常生活中很难和其他人有深入灵魂的交流，但是恋爱让你走进对方深处的同时也看清自己内心深处。恋爱本身就是两个人的交融，人是复杂的，没有完美契合的两个人，所以这中间必定会有摩擦，但正是这些摩擦让你认识到自己的形状，认识到自己是一个怎样的人。</p><p>六、（还有很多，用心感悟吧）…</p><p>最后想说的是，人类社会形态本就不是孤身一人的，除却极少数，大多数人都需要一个依靠，这个依靠不是绑定，也不是享乐的纽带，它最终极的要义就是使得两个人在幸福和痛苦中感受到人间的美好同时也变得更加勇敢坚强，大概这样的变化适合人类生存吧，大概这才是健康的恋爱吧。</p><p>反观自己，虽然甜蜜不少，但是真正去思考如何去谈恋爱，如何处理痛苦，如何反思进步共同成长却是想的很少，当然不是否认享乐的恋爱不好，只是，我们已经有过这样的阶段了，总是要到下一个阶段的。<br>爱总是会消失的，如果不转化为习惯、依赖、责任，那就很难以后了，没有人会永远保持新鲜感。所以，希望每个人都能认识到，自己为什么要谈恋爱，不要总是被推着走，这样才值得健康的恋爱，打开心结吧，我的朋友们。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;对于恋爱的一些思索&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在我成长这么多年，最值得一提的一点就是，我和家庭的和解。我一直不明白我是怎么从厌倦逃离家庭到现在想念和热爱我的家庭的，现在大概明白了，是恋爱教会我如何爱和感受爱。&lt;br&gt;其实每次有勇气面对眼前的这些问题的时候，我都会想，我为什么想要拉她回来，其实我在想一个什么样的问题呢，就是，为什么要恋爱，也就是说当我在学会怎么恋爱的时候，我始终没想明白，为什么要恋爱。这个问题其实可以很含糊的回答，比如两个喜欢的人在一起了，不需要理由。但我不喜欢这样糊弄，于是我开始认真地想为什么人要恋爱，仅仅是喜欢对方的好然后想要占有吗，仅仅是看到别人恋爱然后从众吗，或者是其中有很多很多原因。我觉得这个问题每个想要好好谈恋爱的人都要搞懂，或者说即便它是搞不懂的，也要深入想一想，然后深入浅出，不然就很难谈一场健康的恋爱。&lt;/p&gt;
&lt;p&gt;一、恋爱可以让我发现自己的缺点&lt;br&gt;这点毋庸置疑，很多很多缺点是自己一个人没办法发现的，即便身边朋友感觉到也不会跟你提出，所以在恋爱的时候，我想变得更好，同时我也会暴露自己的缺点，这让对方感到不适，对方向你提出了你的问题，这些问题通常是你自己没有发现过但是一发现也会觉得确实是个问题，然后认真的反思改进，不断的互相成为更优秀的人，不只是为了对方，也是为了自己。&lt;/p&gt;
&lt;p&gt;二、恋爱可以让人学会爱人&lt;br&gt;其实我一直觉得我自己很爱对方，但其实我一直不很会爱对方，这里说的不是说生活中的惊喜和浪漫，而是在说从心灵上如何去关爱对方，其中包括如何关心一个人的情绪、如何尊重一个人以及如何帮助一个人，这些都算是爱，但是要比那些表面的仪式感更难意识到。“我都是为了你好！”这些人往往都不会爱人。&lt;/p&gt;
&lt;p&gt;三、恋爱可以让我学会感受爱&lt;br&gt;人其实都容易自私，喜欢索取容易变得贪婪。往往这个时候我们会对对方苛责，会极尽力气想让对方对自己好，我想说，这样的人不懂得被爱。被爱当然也是种能力，恋爱的过程中人们其实很难学会被爱，相反当恋爱出现问题，人才开始思考对方的好，才开始感受到原来对方其实真的对我很好了，这时候才会想起来当时自己的幼稚。就是这样一步步学会了感受到对方的爱意。其实对于家庭也是这样，感受家庭的爱和如何去爱家庭都是一件很难很难的事情。&lt;/p&gt;
&lt;p&gt;四、恋爱可以让我变得勇敢&lt;br&gt;一个人的时候往往瞻前顾后在意别人的看法，恋爱让我有了依靠，可以不必太在意其他人看发，所以可以勇敢的尝试以前害怕的事情，恋爱让我变得勇敢起来。&lt;/p&gt;
&lt;p&gt;五、恋爱让我认识自己&lt;br&gt;人最难的一个过程还是认识自己，成长就是不断地认识自己，但是往往一个人很难明白自己，日常生活中很难和其他人有深入灵魂的交流，但是恋爱让你走进对方深处的同时也看清自己内心深处。恋爱本身就是两个人的交融，人是复杂的，没有完美契合的两个人，所以这中间必定会有摩擦，但正是这些摩擦让你认识到自己的形状，认识到自己是一个怎样的人。&lt;/p&gt;
&lt;p&gt;六、（还有很多，用心感悟吧）…&lt;/p&gt;
&lt;p&gt;最后想说的是，人类社会形态本就不是孤身一人的，除却极少数，大多数人都需要一个依靠，这个依靠不是绑定，也不是享乐的纽带，它最终极的要义就是使得两个人在幸福和痛苦中感受到人间的美好同时也变得更加勇敢坚强，大概这样的变化适合人类生存吧，大概这才是健康的恋爱吧。&lt;/p&gt;
&lt;p&gt;反观自己，虽然甜蜜不少，但是真正去思考如何去谈恋爱，如何处理痛苦，如何反思进步共同成长却是想的很少，当然不是否认享乐的恋爱不好，只是，我们已经有过这样的阶段了，总是要到下一个阶段的。&lt;br&gt;爱总是会消失的，如果不转化为习惯、依赖、责任，那就很难以后了，没有人会永远保持新鲜感。所以，希望每个人都能认识到，自己为什么要谈恋爱，不要总是被推着走，这样才值得健康的恋爱，打开心结吧，我的朋友们。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日常" scheme="https://asea.fun/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="life" scheme="https://asea.fun/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Java期末复习</title>
    <link href="https://asea.fun/post/adf6b9f0.html"/>
    <id>https://asea.fun/post/adf6b9f0.html</id>
    <published>2021-12-12T13:45:21.000Z</published>
    <updated>2021-12-20T01:27:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>—&gt; 把这几百页的书从头到尾看一遍梳理一下期末考点吧！</p><h2 id="基本数据类型与数组"><a href="#基本数据类型与数组" class="headerlink" title="基本数据类型与数组"></a>基本数据类型与数组</h2><h3 id="标识符和关键字"><a href="#标识符和关键字" class="headerlink" title="标识符和关键字"></a>标识符和关键字</h3><ol><li>字母、下划线、美元符号、和数字</li><li>第一个不能是数字</li><li>不能是关键字</li><li>不能是true false null（尽管他们不是关键字）</li><li>区分大小写</li></ol><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><blockquote><p>8种基本数据类型</p><p>boolean</p><p>byte,short,int,long</p><p>char</p><p>float,double</p></blockquote><ol><li>int 四字节</li><li>byte一个字节</li><li>short两个字节</li><li>long八个字节</li><li>没有无符号即unsigned</li><li>char两个字节，没有负数</li><li>使用unicode字符集，前128个是ASCII</li><li>‘\u0041’表示A</li><li>（char)65 a</li><li>double  y = 0.4 小于 float x = 0.4f;</li></ol><h3 id="类型转换运算"><a href="#类型转换运算" class="headerlink" title="类型转换运算"></a>类型转换运算</h3><blockquote><p>低赋值给高会自动转换，反之需要强制转换</p></blockquote><p>低到高排序：byte short char int long float double</p><p>int x = (int)34.89</p><p>float x = 12.3 这是错误的，默认浮点数常量是double，如果不转换会报错“possible loss of precision”</p><h3 id="输入输出数据"><a href="#输入输出数据" class="headerlink" title="输入输出数据"></a>输入输出数据</h3><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p><code>Scanner reader = new Scanner(System.in);</code></p><p>reader调用以下方法，返回值就是读取的内容：</p><p><code>nextBoolean() nextByte() nextShort() nextInt() nextLong() nextFloat() nextDouble()</code></p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p><code>System.out.println() System.out.print() System.out.printf()</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Syetem.out.println(<span class="string">&quot;hhh</span></span><br><span class="line"><span class="string">                   hhh</span></span><br><span class="line"><span class="string">                   hhh&quot;</span>); /这样是不正确的，不允许出现回车，print也是。可以通过加号连接</span><br><span class="line">Sout(<span class="string">&quot;hh&quot;</span>+</span><br><span class="line">    <span class="string">&quot;hhh&quot;</span>);                   </span><br></pre></td></tr></table></figure><p>printf用法类似C</p><p><code>System.out.printf(&quot;%d %f&quot;,12,1,3);</code></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p><code>int arr[]</code> <code>int[] arr</code></p><p><code>int arr[][]</code> <code>int[][] arr</code></p><blockquote><p>和c不同，这里只是生命数据类型，而不能定义其中多少个元素，所以必须</p><p>int arr[] = new int[10];</p><p>当然也可以分步</p></blockquote><ol><li>arr.length可以获取数组长度</li><li>二维数组中的每行长度可以不相同</li><li>sout输出数组会输出引用地址，而对于char数组会输出内容，可以用过<code>&quot;&quot;+arr</code>来输出引用</li></ol><h2 id="运算符、表达式和语句"><a href="#运算符、表达式和语句" class="headerlink" title="运算符、表达式和语句"></a>运算符、表达式和语句</h2><h3 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h3><ol><li>&amp;&amp; || !</li><li>=左边必须是变量</li><li>位运算符<ol><li>&amp;</li><li>|</li><li>~(单目)</li><li>^</li></ol></li><li>instanceof（左边是对象，右边是类，返回值是true false</li></ol><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><ol><li><p>分号是空语句</p></li><li><p>for与数组</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : arr)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>应用（连续读入）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(reader.hasNextDouble())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">double</span> x=  reader.nextDouble();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><ol><li><p>包名第一部分不能是“java”</p></li><li><p>创建类不加public即默认为friend，不能使用protected和private</p></li><li><p>基本类型的类封装</p><p><code>Double Float Byte Short Integer Long Character</code></p><p>通过调用如<code>intValue() shortValue()</code>来获取基本类型值</p><p>可以调用这些类的一些方法例如</p><p><code>Character.toUpperCase() Character.isLowerCase()</code></p></li></ol><h2 id="子类与继承"><a href="#子类与继承" class="headerlink" title="子类与继承"></a>子类与继承</h2><ol><li><p>不持支多继承</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>继承不会继承private，而且当不在一个包的时候也不会继承friend</p></li><li><p>尽管如private的变量不会被继承，但依然在创建对象的时候会分配内存，因为有可能会用方法调用这些变量</p></li><li><p>instanceof  如果左边的是右边或是右边子类创建的话就是true</p></li><li><p>重写（override）以后，想要调用父类的变量或者方法需要super</p></li><li><p>重写不允许降低访问权限但是可以提高</p></li><li><p>子类构造方法中如果明确调用哪一个父类的构造方法的话，就会调用Parent()这个无参的方法，但如果用super指出，就必须是子类构造方法中的第一句。</p></li><li><p>final修饰一个类，则该类不可以被继承</p></li><li><p>final修饰一个方法，则该方法不可以被重写</p></li><li><p>final修饰变量，则成为常量</p></li><li><p>上转型对象会失去一些子类的属性和方法，按时上转型对象会调用子类重写的（非静态）方法（多态….）</p></li><li><p>上转型对象可以再强制转化为子类对象</p></li><li><p>abstract所在的类必须是abstract类</p></li><li><p>抽象类不可以被new，必须被继承重写abstract方法</p></li></ol><h2 id="接口与实现"><a href="#接口与实现" class="headerlink" title="接口与实现"></a>接口与实现</h2><ol><li>接口包括常量（final）和抽象方法。</li><li>变量默认必须是 public final static ，所以可以省略</li><li>抽象方法可以省略（putlic abstrac）</li><li>实现接口implements xxx,xxx,xxx</li><li>必须重写所有方法，且必须用public修饰</li><li>接口回调，有点类似于向上转型吧（也就是接口的多态）</li><li>如果接口作为参数，那么可以将实现该接口的类的实例传进去</li></ol><h2 id="内部类和异常类"><a href="#内部类和异常类" class="headerlink" title="内部类和异常类"></a>内部类和异常类</h2><blockquote><p>所谓内部类就是在一个class里面再定义一个class，可以通过xxx.xxx来访问这个class</p></blockquote><ol><li>内部类可以用static修饰</li><li>异常类</li></ol><h2 id="常用实用类"><a href="#常用实用类" class="headerlink" title="常用实用类"></a>常用实用类</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ol><li>创建 <code>String s = new String(&quot;hhhh&quot;)</code></li><li>还可以传入字符数组</li><li>可以引用常量<code>String s1,s2; s1 = &quot;hhh&quot;;s2 = &quot;ggg&quot;;s1 == s2(true);</code></li><li>字符串的并置，当两个常量并置时，得到的是在常量池，如果有变量则新生成变量</li><li>常用方法：<code>length() equals(String s) startsWith() endsWith() compareTo()大正小负 contains() indexOf() lastIndexOf() subString( int start, int end ) trim()</code></li><li>字符串与基本数据的转化<code>Integer.parseInt(s)其他类似</code></li><li>String类不可以有子类</li><li>符串与基本数据的相互转化<ol><li><code>public static int parseInt(String s)</code></li><li><code>String str = String.valueOf(12313.9876);</code></li></ol></li><li>字符串与字符数组<ol><li><code>void getChars()</code></li><li><code>char[] toCharArray()</code></li></ol></li><li>正则，主要是<code>matches</code>和<code>replaceAll</code>以及<code>split</code>，返回值分别是<code>boolean String String[]</code></li></ol><h3 id="StringTokenizer"><a href="#StringTokenizer" class="headerlink" title="StringTokenizer"></a>StringTokenizer</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringTokenizer = 呢哇StringTokenizer(<span class="string">&quot;you are welcome&quot;</span>);</span><br><span class="line">StringTokenizer = 呢哇StringTokenizer(<span class="string">&quot;you##are#*#welcome&quot;</span>,<span class="string">&quot;#*&quot;</span>);<span class="comment">//分隔符时#*的任意排列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line">hasMoreTokens();</span><br><span class="line">nextToken();</span><br><span class="line">countTokens();</span><br></pre></td></tr></table></figure><h3 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h3><ol><li><p>默认将字符串按照空格分隔，调用<code>next()</code>或者<code>nextInt()</code>等方法一个一个返回，知道<code>hasNext()</code>返回false</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String NBA = <span class="string">&quot;I Love This Game&quot;</span>;</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(NBA);</span><br></pre></td></tr></table></figure></li><li><p>使用正则表达式作为分隔标记解析字符串 </p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(<span class="string">&quot;hh 12 hh 24 hh&quot;</span>);</span><br><span class="line">sc.usDelimiter(<span class="string">&quot;[^0123456789.]+&quot;</span>);<span class="comment">//设置分隔符</span></span><br></pre></td></tr></table></figure></li><li><p>传入<code>File</code>对象，通过<code>next()</code>和<code>nextLine()</code>获取输入</p><ol><li>next():<ul><li>一定要读取到有效字符后才可以结束输入。</li><li>对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。</li><li>只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li><li>next() 不能得到带有空格的字符串。</li></ul></li><li>nextLine()：<ul><li>以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。</li><li>可以获得空白。</li></ul></li><li>如果要输入 int 或 float 类型的数据，在 Scanner 类中也有支持，但是在输入之前最好先使用 hasNextXxx() 方法进行验证，再使用 nextXxx() 来读取</li></ol></li><li></li></ol><h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer()"></a>StringBuffer()</h3><p>StringBuffer是可更改的，<code>append()</code>追加</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCharAt</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> ch)</span></span>;</span><br><span class="line"><span class="function">StringBuffer <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, String str)</span></span>;</span><br><span class="line">reverse</span><br><span class="line">delete</span><br><span class="line">replace</span><br></pre></td></tr></table></figure><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date time = <span class="keyword">new</span> Date();</span><br><span class="line">print(time);</span><br><span class="line">Date time = <span class="keyword">new</span> Date(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="数字格式化"><a href="#数字格式化" class="headerlink" title="数字格式化"></a>数字格式化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = String.format(<span class="string">&quot;%.2f&quot;</span>,<span class="number">3.1415</span>);</span><br><span class="line"><span class="comment">//以下为修饰符</span></span><br><span class="line">%d;</span><br><span class="line">%o;</span><br><span class="line">%x;</span><br><span class="line">%X;</span><br><span class="line">%+d;</span><br><span class="line">%,d;</span><br><span class="line">%-<span class="number">8d</span>;</span><br><span class="line">%f(<span class="number">6</span>位);</span><br><span class="line">%e(%E)科学计数法;</span><br></pre></td></tr></table></figure><h2 id="输入、输出流"><a href="#输入、输出流" class="headerlink" title="输入、输出流"></a>输入、输出流</h2><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><h3 id="流"><a href="#流" class="headerlink" title="流"></a>流</h3><blockquote><p>FileInputStream、FileOutputSteam</p><p>FileReader、FileWriter</p><p>BufferedReader、BufferedWriter</p></blockquote><p>对于缓冲流：</p><ol><li><p>构造方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedReader(Reader in);</span><br><span class="line">BufferedWriter(Writer out);</span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileReader inOne = <span class="keyword">new</span> FileReader(<span class="string">&quot;student.txt&quot;</span>);</span><br><span class="line">BufferedReader inTwo = BufferedReader(inOne);</span><br><span class="line"></span><br><span class="line">String strLine = inTwo.readLine();</span><br><span class="line"></span><br><span class="line">FileWriter tofile = <span class="keyword">new</span> FileWriter(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">BufferedWriter out = BufferedWriter(tofile);</span><br><span class="line"></span><br><span class="line">out.write(str);</span><br><span class="line">out.newLine();</span><br></pre></td></tr></table></figure></li><li><p>注意要先关闭缓冲流，再关闭输入输出</p></li></ol><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><ol><li><p>创建</p><ol><li><code>extends Thread</code>，然后重写run方法</li><li><code>new Thread（Runnable target）</code>，构造函数的参数是implement Runnable的实例，该实例也需要重写run方法</li></ol></li><li><p>运行</p><p><code>start()</code></p></li><li><p>常用方法</p><p><code>sleep(int millsecond)</code></p><p><code>isAlive()</code></p><p><code>currentThread()</code></p></li><li><p>目标对象和线程间的关系（完全解耦和弱耦合）</p></li><li><p>线程同步</p><p>用<code>synchronized</code>修饰的方法必须遵守同步机制，即当一个线程正在使用时，其他线程若要使用则必须等待</p></li><li><p>协调同步</p><p><code>wait()</code>来中断当前线程<br><code>notifyAll()</code>通知中断的线程继续执行，先中断先继续</p></li><li><p>Timer<br>该类在<code>javax.swing</code><br>我太困了……..-_-……..</p></li></ol><h2 id="泛型与集合框架"><a href="#泛型与集合框架" class="headerlink" title="泛型与集合框架"></a>泛型与集合框架</h2><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cone</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> height;</span><br><span class="line">    E bottom;</span><br><span class="line">    <span class="function">Publi <span class="title">Cone</span> <span class="params">( E b )</span></span>&#123;</span><br><span class="line">        bottom = b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Cone&lt;Circle&gt; coneOne;</span><br><span class="line">coneOne = <span class="keyword">new</span> Cone&lt;Circle&gt; (<span class="keyword">new</span> Circle());</span><br></pre></td></tr></table></figure><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList&lt;String&gt; mylist = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//常用方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E element)</span> <span class="comment">//向链表末尾添加一个新的节点，该节点中的数据是参数elememt指定的数据。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index ,E element)</span> <span class="comment">//向链表的指定位置添加一个新的节点，该节点中的数据是参数elememt指定的数据。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> <span class="comment">//删除链表的所有节点，使当前链表成为空链表。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="comment">//删除指定位置上的节点。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(E element)</span> <span class="comment">//删除首次出现含有数据elemen的节点。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="comment">//得到链表中指定位置处节点中的数据。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">sort</span><span class="params">(List&lt;E&gt; list)</span> <span class="comment">//升序</span></span></span><br><span class="line"><span class="function"><span class="comment">//◆ LinkedList&lt;E&gt;泛型类本身新增加的一些常用方法 </span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E element)</span> <span class="comment">//向链表的头添加新节点，该节点中的数据是参数elememt指定的数据。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E element)</span> <span class="comment">//向链表的末尾添加新节点，该节点中的数据是参数elememt指定的数据。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span> <span class="comment">//得到链表中第一个节点中的数据。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getLast</span><span class="params">()</span> <span class="comment">//得到链表中最后一个节点中的数据。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span> <span class="comment">//删除第一个节点，并返回这个节点中的数据。</span></span></span><br></pre></td></tr></table></figure><p><strong>遍历</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList&lt;String&gt; mylist = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">Iterator&lt;String&gt; it = mylist.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())</span><br><span class="line">&#123;</span><br><span class="line">    print(it.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;String,Student&gt; hashtable = HashSet&lt;String,Student&gt;();</span><br><span class="line"><span class="comment">//常用方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key,V value)</span><span class="comment">//将键/值对数据存放到散列映射中，该方法同时返回键所对应的值。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> <span class="comment">//清空散列映射。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span>  <span class="comment">//返回当前散列映射的一个克隆。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> <span class="comment">//如果散列映射有“键/值”对使用了参数指定的键，方法返回true，否则返回false。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> <span class="comment">//如果散列映射有“键/值”对的值是参数指定的值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> <span class="comment">//返回散列映射中使用key做键的“键/值”对中的值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span>  <span class="comment">//如果散列映射不含任何“键/值”对，方法返回true，否则返回false。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> <span class="comment">//删除散列映射中键为参数指定的“键/值”对，并返回键对应的值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="comment">//返回散列映射的大小，即散列映射中“键/值”对的数目。</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;—&amp;gt; 把这几百页的书从头到尾看一遍梳理一下期末考点吧！&lt;/p&gt;
&lt;h2 id=&quot;基本数据类型与数组&quot;&gt;&lt;a href=&quot;#基本数据类型与数组&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型与数组&quot;&gt;&lt;/a&gt;基本数据类型与数组&lt;/h2&gt;&lt;h3 id=&quot;标识符和关键字&quot;&gt;&lt;a href=&quot;#标识符和关键字&quot; class=&quot;headerlink&quot; title=&quot;标识符和关键字&quot;&gt;&lt;/a&gt;标识符和关键字&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;字母、下划线、美元符号、和数字&lt;/li&gt;
&lt;li&gt;第一个不能是数字&lt;/li&gt;
&lt;li&gt;不能是关键字&lt;/li&gt;
&lt;li&gt;不能是true false null（尽管他们不是关键字）&lt;/li&gt;
&lt;li&gt;区分大小写&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;基本数据类型&quot;&gt;&lt;a href=&quot;#基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型&quot;&gt;&lt;/a&gt;基本数据类型&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;8种基本数据类型&lt;/p&gt;
&lt;p&gt;boolean&lt;/p&gt;
&lt;p&gt;byte,short,int,long&lt;/p&gt;
&lt;p&gt;char&lt;/p&gt;
&lt;p&gt;float,double&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;int 四字节&lt;/li&gt;
&lt;li&gt;byte一个字节&lt;/li&gt;
&lt;li&gt;short两个字节&lt;/li&gt;
&lt;li&gt;long八个字节&lt;/li&gt;
&lt;li&gt;没有无符号即unsigned&lt;/li&gt;
&lt;li&gt;char两个字节，没有负数&lt;/li&gt;
&lt;li&gt;使用unicode字符集，前128个是ASCII&lt;/li&gt;
&lt;li&gt;‘\u0041’表示A&lt;/li&gt;
&lt;li&gt;（char)65 a&lt;/li&gt;
&lt;li&gt;double  y = 0.4 小于 float x = 0.4f;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;类型转换运算&quot;&gt;&lt;a href=&quot;#类型转换运算&quot; class=&quot;headerlink&quot; title=&quot;类型转换运算&quot;&gt;&lt;/a&gt;类型转换运算&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;低赋值给高会自动转换，反之需要强制转换&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;低到高排序：byte short char int long float double&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://asea.fun/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="https://asea.fun/tags/java/"/>
    
      <category term="notes" scheme="https://asea.fun/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>疫情下的宿管阿姨</title>
    <link href="https://asea.fun/post/8e7449bd.html"/>
    <id>https://asea.fun/post/8e7449bd.html</id>
    <published>2021-12-11T01:34:27.000Z</published>
    <updated>2021-12-11T01:58:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天挺突然的，忽然得知学校封校了，一阵骚动，食堂面包房、超市、寝室楼下买水，到处都是长队，我很久很久没见过这么大的阵仗了，本来打算到超市买点酒只好作罢。约了室友打羽毛球，结果体育馆已经封起来了，到处都是志愿者，我看到各个运动场馆已经清空了，核酸检测的桌子已经摆起来了，然后收到通知，全员连夜核酸检测。惊诧与学校的行动之快，我和室友在室外的霾里打了球。后来回到宿舍稍稍休息之后戴好口罩下楼了。</p><p>刚走出宿舍楼，被身后的宿管阿姨叫住，一口浓重的sang海口音。<br>“你四去检测的对伐？”<br>“恩是的，我准备去。”<br>“那我跟你一起去好吧。”<br>忽然觉得相处了快三年的阿姨像个小姑娘一样在漆黑里祈求着我，我说走呀，可以。</p><p>一路上人潮汹涌，去检测的人和检测回来的人把桥上填的满满的，阿姨一路嘴不停，向我诉说着那些阿姨们都回不去了，只好找个小房间住一晚。其它好多话我也听不懂，只好嗯嗯啊啊地应付，她似乎看出来了我的应付，还不停地追问我。呼——终于坚持到了体育馆门口，那个时候队伍已经从体育馆排到了教学楼，少说百米长。但是那队伍极快，哪里是在排队啊，我想，这分明是在马拉松。我看到那队伍在我面前跑动着，阿姨拉着我说跑起来，我说我们要去后面排队不能插队，阿姨说哎呀排什么队，都在跑。罪过，于是我就和阿姨插了队，插在了几百人的前面。<br>由于队伍实在跑动过快，阿姨体力不支，我就减速等着阿姨，我说慢点慢点不着急，这时前面的保安喊起来快点快点，身旁的志愿者看着阿姨说阿姨加油！阿姨笑笑说你也在这！</p><p>我带着阿姨走进体育馆来到核酸检测的桌子前，阿姨跟我炫耀说她已经截好图了，我看了看水滴屏，怀疑是红米note，但看UI又不像，倒像是HUAWEI的野鸡手机（说歪了）。我坐在那，等待着被捅鼻子（之前都是喉咙），那医生喊着放松放松，越喊我越紧张，感受着长长的异物捅进最深处转来转去，仿佛要把我的灵魂搅碎了，一边眼泪流个不停。结束后我在后面等着，后来看到阿姨做完以后四处找我，我伸出手摆一摆，这里。“你不等我我都不知道往哪走了！”阿姨有点埋怨的说，“哎呀，捅鼻子可太难受了，鼻涕都要捅出来了，阿姨眼泪都流出来了。”我就在体育馆看着以防护服和嘈杂人群为背景的阿姨，有点好玩。“我从来没来过这个体育馆。”阿姨说。</p><p>你叫什么呀？<br>阿姨突然问我。<br>我告之。<br>阿姨嘴里巴咂着我的名字，然后说有好几个呢，可能是大一的。</p><p>回来的时候，阿姨还在像个小孩子一样嘟哝着什么，我没太听清，只记得到楼下阿姨向我道谢，我说没事，然后匆匆上楼了。<br>室友买了酒等我喝。<br>纯生真难喝，室友说。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天挺突然的，忽然得知学校封校了，一阵骚动，食堂面包房、超市、寝室楼下买水，到处都是长队，我很久很久没见过这么大的阵仗了，本来打算到超市买点酒只好作罢。约了室友打羽毛球，结果体育馆已经封起来了，到处都是志愿者，我看到各个运动场馆已经清空了，核酸检测的桌子已经摆起来了，然后收到通知，全员连夜核酸检测。惊诧与学校的行动之快，我和室友在室外的霾里打了球。后来回到宿舍稍稍休息之后戴好口罩下楼了。&lt;/p&gt;
&lt;p&gt;刚走出宿舍楼，被身后的宿管阿姨叫住，一口浓重的sang海口音。&lt;br&gt;“你四去检测的对伐？”&lt;br&gt;“恩是的，我准备去。”&lt;br&gt;“那我跟你一起去好吧。”&lt;br&gt;忽然觉得相处了快三年的阿姨像个小姑娘一样在漆黑里祈求着我，我说走呀，可以。&lt;/p&gt;
&lt;p&gt;一路上人潮汹涌，去检测的人和检测回来的人把桥上填的满满的，阿姨一路嘴不停，向我诉说着那些阿姨们都回不去了，只好找个小房间住一晚。其它好多话我也听不懂，只好嗯嗯啊啊地应付，她似乎看出来了我的应付，还不停地追问我。呼——终于坚持到了体育馆门口，那个时候队伍已经从体育馆排到了教学楼，少说百米长。但是那队伍极快，哪里是在排队啊，我想，这分明是在马拉松。我看到那队伍在我面前跑动着，阿姨拉着我说跑起来，我说我们要去后面排队不能插队，阿姨说哎呀排什么队，都在跑。罪过，于是我就和阿姨插了队，插在了几百人的前面。&lt;br&gt;由于队伍实在跑动过快，阿姨体力不支，我就减速等着阿姨，我说慢点慢点不着急，这时前面的保安喊起来快点快点，身旁的志愿者看着阿姨说阿姨加油！阿姨笑笑说你也在这！&lt;/p&gt;
&lt;p&gt;我带着阿姨走进体育馆来到核酸检测的桌子前，阿姨跟我炫耀说她已经截好图了，我看了看水滴屏，怀疑是红米note，但看UI又不像，倒像是HUAWEI的野鸡手机（说歪了）。我坐在那，等待着被捅鼻子（之前都是喉咙），那医生喊着放松放松，越喊我越紧张，感受着长长的异物捅进最深处转来转去，仿佛要把我的灵魂搅碎了，一边眼泪流个不停。结束后我在后面等着，后来看到阿姨做完以后四处找我，我伸出手摆一摆，这里。“你不等我我都不知道往哪走了！”阿姨有点埋怨的说，“哎呀，捅鼻子可太难受了，鼻涕都要捅出来了，阿姨眼泪都流出来了。”我就在体育馆看着以防护服和嘈杂人群为背景的阿姨，有点好玩。“我从来没来过这个体育馆。”阿姨说。&lt;/p&gt;
&lt;p&gt;你叫什么呀？&lt;br&gt;阿姨突然问我。&lt;br&gt;我告之。&lt;br&gt;阿姨嘴里巴咂着我的名字，然后说有好几个呢，可能是大一的。&lt;/p&gt;
&lt;p&gt;回来的时候，阿姨还在像个小孩子一样嘟哝着什么，我没太听清，只记得到楼下阿姨向我道谢，我说没事，然后匆匆上楼了。&lt;br&gt;室友买了酒等我喝。&lt;br&gt;纯生真难喝，室友说。&lt;/p&gt;

    
    </summary>
    
    
      <category term="日常" scheme="https://asea.fun/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="life" scheme="https://asea.fun/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>丢失的邮件</title>
    <link href="https://asea.fun/post/894bb4e2.html"/>
    <id>https://asea.fun/post/894bb4e2.html</id>
    <published>2021-12-11T01:29:46.000Z</published>
    <updated>2021-12-17T03:34:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前段时间看了乙一，感悟到故事以及写故事本身的魅力，所以想把脑中很有意思的想法也写成故事来，尝试写了一部分，但是后面的故事情节自己很不满意，所以目前的框架还没搭起来，但是近期实在忙碌，就先停一停，我相信所有人都会理解的。</p></blockquote><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>八月份的天流金铄石，这让我一直处于一种焦虑的状态里，每过正午，我坐在电脑面前盯着屏幕上密密麻麻的代码就会感到热浪从我的背后紧紧包裹着我。我明明开了空调，空调外机的声音已经响彻楼层，但我依然感到酷热难耐。我感觉那热像是化成了人形，就在我的周围走来走去，我挥舞胳膊却怎么也抓不到它，于是我决定出去走走。由于不知道要出去多久，或许几天几夜也不回来，出于安全我把寝室的电源断了，不过是拉下电闸那么简单。<br>刚走出宿舍门，我就感到我被前后夹击了，那化成人形的热跟着我溜了出来，和外面的热合起伙来收拾我。我猜测这会宿舍又凉快下来了，但我不愿再回去，我抱着自己做好防御工事，一边同热较量，一边踉踉跄跄下了楼，期间与正在上楼的工人师傅撞了满怀，我们互相沉默，匆忙走掉。宿管在值班的位置上一动不动，往常大家会向她问好，但这个时候我们都不想被打扰。我喜欢看见她睡着，这样我会很自在。</p><p>我走出了宿舍楼，成千上万的蝉鸣向我扑过来，我眯起眼睛看着四周，到处都是郁郁葱葱的树，我知道那可恶的蝉就藏在里面。白色的天空从树的缝隙间流到地上，汇聚成一滩滩大大小小的水洼。我拖着步子在这胶状的空气里行走，打算到便利店买瓶啤酒。前后左右到处都是热，他们太吵了，推搡着我，挤压着我，搞得我晕头转向。<br>便利店在学校不远处，自动门打开了，一股凉意从里面偷跑出来。自动门每开一次都要偷偷跑出来一些凉，就像我从宿舍里跑出来一样，而随后，也就是在自动门关上以后，还会有一些凉会被抓回便利店——空调就是这么残忍的家伙。<br>我对便利店的东西如数家珍，由于不喜欢在食堂的人群中乞求座位，我常常自己出来到便利店寻找能够填饱肚子的食物——这里总是空无一人。从冷柜里拿出来啤酒，结账，随后又坐在了靠玻璃墙的凳子上。囚禁着凉的液体从我的嘴唇灌进口腔流过食道到达我的胃部，每次吞咽，我都把凉从易拉罐里转移到了我的胃里，它们只不过是换个牢房罢了。我坐在那里四处张望，似乎这样可以给便利店增加点人气，这时自动门开了，伴随着轻快的音乐，我看见她走了进来。</p><p>我惊讶地看到她和我拿了一样的啤酒然后坐在了我的身边。我并不太喜欢和陌生人来往，坐在便利店也是因为这里很少有人驻留，这里已经成了我的私人领地，所以她的入侵顿时让我有点生气，于是我决定不再理她。<br>“你好，坐在这里你不会生气吧？”<br>手机屏幕亮了，我收到了这样一封Email，打开我的电子邮箱，这样短短的文字就这样肆意地躺在我面前。她怎么会知道我的邮箱，我往右边悄悄斜了一眼，并没有发现她的任何动静，我期待这个时候她看我一眼，那样只要我扭过头我们就会双目对视，这将是绝佳的交流时机。从这一刻我开始觉得她是个有趣的人。但是她并没有。她没有任何动静，就像我不存在一样。由于我不善于直视别人，所以一时没办法弄懂她具体在干什么，但我可以肯定的是她并没有看我。<br>我想了想还是决定给她回信，我并不确定这封邮件是谁发的，但直觉告诉我一定是她。</p><p>“随便，又不是我的地盘！”<br>我昧着心意回了邮件，虽然我同意了，但是由于我担心她会察觉不到我客气的背后还有一丝不满，所以加了叹号。但我不知道她会怎样解读这个感叹号，或许她会理解为我的热情好客，一想到这里我又感觉后悔。<br>“你在吃什么呀？”<br>我注意到她邮箱的昵称是“关”，或许是她的姓氏，也或许是她名字中最喜欢的一个字，但我更倾向于礼貌地叫她关小姐。<br>因为常常孤身一人，所以我格外珍惜这次交流，虽然我明明什么也没有吃，我也很不希望对话到我这里就戛然而止——尽管我一开始并不是很喜欢这个关小姐。而当我已经写好了要回复的内容时，手机却怎么也上不了网了。</p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>本意决定在外面逗留几天的我又回到了宿舍，因为我无论如何也连不上便利店的网络，而移动网络在此刻也断了链子。不出所料，宿舍里果然凉了下来，空调还在轰隆隆的工作着，我这才意识到空调的电路是另外的，即便我切断了整个寝室的电源。<br>我将总闸重新推上去，随着“哔——”的一声，启辉器将日光灯管点亮。自从暑假室友都回家以后就没有关过灯，这样独自一人看着灯管从暗到亮还是第一次。但我顾不上灯管了，我的目光拽着我坐下打开电脑，但很不幸——我的电脑也连不上网络了。我觉得很诧异，我又拿起手机，网络旁边的叹号依然在，天哪，我居然没办法发出一封小小的邮件！<br>蝉忽然静了下来，我听到外面公交车到站的播报，楼上有人冲了厕所，还有不知道是几楼的水管不停地发出嘤嘤嘤的怪叫，那是空气柱在高压下不停震动产生的声音。我仿佛看到那声音和蝉鸣和热浪趁我不注意潜入宿舍将我的网线咬断，将便利店的网线咬断，又钻进我的手机将所有的天线网卡都一并咬断，它就是要我上不了网。</p><p>“谢谢你告诉我，听你说话的语气，你是一个好人~”<br>这时我又收到了邮件。<br>我看着那句似乎是赞赏我又似乎是讽刺我而且还有些让人摸不着头脑的话出现在手机通知栏里，和网络旁边的叹号一样，它切切实实的存在着。我试着点开通知，我仿佛听到关小姐在我身后对着我的耳朵说“你是一个好人~”。<br>她为什么还能发进来邮件呢？我什么也没告诉她呀！说话的语气是指我同意她坐下的语气吗？她是误解了我的感叹号吗？为什么要称我为一个好人呢，明明素不相识！我觉得很难理解，同时也很气愤。我不理解为何断网还能收到她的邮件，我气愤即便她是在夸我，我依然不喜欢一个陌生人称呼我为一个好人，正如我不喜欢随便称呼一个不认识的人为好人一样，哪能如此随意的就给对方套上好人的光环。我想象着假如我依然坐在便利店，她忽然站起来居高临下看着我，对我伸出右手说，你是一个好人。这样的事想想都有点恶心。</p><p>“原来你才大四啊？我已经研二了！”<br>邮件又来了，我拉过来室友的躺椅，将自己陷入柔软当中。夏日的炎热已经烟消云散，蝉鸣不再聒噪，我甚是感受到了风在我的头顶绕来绕去，清凉的雨从我脖间流下，滑过我出汗的脊背钻进衣服的沟壑里。我想象着她下一封邮件会发什么，我马上要大三了，我明白了她并不是在跟我聊天，这邮件一定是要发给另一个人的。这时的我有一种偷窥其他人秘密的快感，不过究竟是什么样的人会用邮件聊天呢。我在柔软中等着下一封邮件的到来，我似乎在像看一本小说一样不停地猜测接下来的情节走向，我想她可能是上个年代的人，那个时候或许他们还比较习惯用邮件交流；不过也可能是和我一个时代的人，要真的这样，那可就有趣起来了。我喜欢有趣的人，然而我太不擅长打交道，每次遇到有趣的人又经常把关系搞得一团糟，但是这次却有个有趣的人自己送上门来，我可以肆无忌惮的窥视着她的邮件而不用担心搞砸关系。一想到这些我又感觉很兴奋，要是有个人站在我旁边，一定会觉得我是个变态。你想想，一个独居的大三男生窝在躺椅上咧着嘴笑，脑子里还幻想着窥视其它女生的聊天，多么变态啊！<br>就这样想着，等了很久，邮件却迟迟不来。也许是最近学业压力太大了，或者是夏天的热让我很久没有睡过好觉了，我就这样躺着睡着了。</p><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>我坐在便利店里，关小姐也坐在那里，我们看着太阳一点点地碎成各种各样的灯，夜色渐起，我们不知不觉坐了一整个下午。<br>你已经研二了吗？<br>过几天就研二了。<br>我们只有这么两句对话，然后举起手中的易拉罐干了杯，但里面早已滴酒未剩。纯生真的很苦，我想了半天才想出来这么一句话，但看她刚刚喝酒的时候并没有面露难色，也许她挺喜欢，所以还是作罢。我准备找个机会溜走，这样的气氛实在令我难受，我想坐到打烊，这样我就有合理的理由离开。可是随即想到我身处的便利店是全天营业，我又泄了气。那种坐立不安的感觉从我的脚趾蔓延到全身来，我感到麻酥酥的，冷冰冰的，我似乎出了很多汗，我又感到了粘稠的热。我突然看到她站起来走到我的背后，我感到她从背后抱住了我，一大片柔软覆盖在我的后背上。</p><p>醒来的时候已经是第二天凌晨五点钟了，最近养成的生物钟准时地将我从奇怪的梦中唤醒。日光灯粘在天花板上明晃晃的，我感觉自己的身体在不住地冒汗和战栗，我摸了摸额头，然后眯着眼睛摸到遥控器把空调关了。<br>不知道是中暑还是感冒了，上一次生病已经是很久以前的事，手边一点药物都没有。我撑着站了起来，日光灯洒下来的光就像白天的太阳一样，我一时分不清现在在哪里。我起身走到水管前，捧起一大捧凉水浇在脸上，顿时清醒不少。水管旁边是窗户，我向外面望去，现在已经是五点一刻了，天边泛起红色，仅有的一点云彩慵懒的飘着，也可能只是静静地呆在那，连飘也懒得飘。<br>缓过神来以后我又坐在电脑前，依旧连不上网，我才想起来睡前在等待着关小姐的邮件，这时梦里她从后面抱住我的情景才浮现出来。我打开手机查看有无新的邮件。</p><p>“早，又是新的一天，昨天和你聊得很开心。”<br>我刷新了好几次，没有网络，而且只收到了这一封邮件。从邮件的内容来看，我错过了很多对话，我猜想关小姐一直在和另一个人聊天，而且看样子聊的还不错，居然已经到了发早安的地步了。他们从昨天开始认识，然后聊了很久。我想在我陷入沉睡的时间里他们一定聊的热火朝天，一定觉得遇到了知己。他们谈天气，谈交通，谈研究生学业（尽管我不知道对方是谁，甚至性别都不知道），谈哪个大明星又被处理了，谈雪花要比纯生好喝，谈她身边坐了一个一言不发的人，谈过几天要去哪里玩……我很想知道他们到底聊了什么，和关小姐聊天的人到底是谁，为什么我只收到了部分邮件。我害怕她突然发现自己发错了邮件然后我的小说就成了太监，我想看，我想的不得了，我觉得他们俩已经在我的心里住下来了，他们甚至已经不是聊天，他们在我的心里认识、熟络、谈恋爱、结婚、做爱，甚至已经过了一辈子。空调停止运作以后周围都安静下来了，除了偶尔呼啸而过的飞机就再也听不到任何声响，我又躺在柔软里，开始思前想后。我躺不下去了，我在寝室里来回踱了几千步，我终于忍无可忍了，我决定再去一趟便利店。</p><h2 id="四"><a href="#四" class="headerlink" title="四"></a>四</h2><p>时间大概是六点钟，阿姨刚刚才把寝室楼大门打开不久，我向她问了好然后灰溜溜的出门了。夏天的清晨很舒适，朝霞出生但太阳还未完全升起，空气里氤氲着清爽的香气，天边的云在此时就像是燃烧的棉花，那是一种温润的红色，没有晚霞那么夺目。我感到舒服多了，尽管身体还带着病，但我一路小跑来到了便利店。店员看见我进来和我打了招呼，这个店员我从来没见过。想必我对她也是，但她笑得很开心，像是马上就要下班了一样。我犹豫了一下没有去拿啤酒，手边没有药物，我还是不乱喝东西了吧。我取了三明治拿给店员加热，然后和她攀谈起来——我从来没有主动找这些人聊过，但此时此刻就是想找她聊聊。<br>你知道关小姐吗？昨天在这坐着喝酒来着，昨天下午。<br>店员摇了摇头，并把加热好的三明治递给我，我又让她取了杯刚做好的豆浆。<br>我总是和人说不过两句话，我惴惴不安地回到窗户前，坐在了她昨天坐过的地方，然后手机亮了起来。<br>(未完待续…)</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前段时间看了乙一，感悟到故事以及写故事本身的魅力，所以想把脑中很有意思的想法也写成故事来，尝试写了一部分，但是后面的故事情节自己很不满意，所以目前的框架还没搭起来，但是近期实在忙碌，就先停一停，我相信所有人都会理解的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;p&gt;八月份的天流金铄石，这让我一直处于一种焦虑的状态里，每过正午，我坐在电脑面前盯着屏幕上密密麻麻的代码就会感到热浪从我的背后紧紧包裹着我。我明明开了空调，空调外机的声音已经响彻楼层，但我依然感到酷热难耐。我感觉那热像是化成了人形，就在我的周围走来走去，我挥舞胳膊却怎么也抓不到它，于是我决定出去走走。由于不知道要出去多久，或许几天几夜也不回来，出于安全我把寝室的电源断了，不过是拉下电闸那么简单。&lt;br&gt;刚走出宿舍门，我就感到我被前后夹击了，那化成人形的热跟着我溜了出来，和外面的热合起伙来收拾我。我猜测这会宿舍又凉快下来了，但我不愿再回去，我抱着自己做好防御工事，一边同热较量，一边踉踉跄跄下了楼，期间与正在上楼的工人师傅撞了满怀，我们互相沉默，匆忙走掉。宿管在值班的位置上一动不动，往常大家会向她问好，但这个时候我们都不想被打扰。我喜欢看见她睡着，这样我会很自在。&lt;/p&gt;
&lt;p&gt;我走出了宿舍楼，成千上万的蝉鸣向我扑过来，我眯起眼睛看着四周，到处都是郁郁葱葱的树，我知道那可恶的蝉就藏在里面。白色的天空从树的缝隙间流到地上，汇聚成一滩滩大大小小的水洼。我拖着步子在这胶状的空气里行走，打算到便利店买瓶啤酒。前后左右到处都是热，他们太吵了，推搡着我，挤压着我，搞得我晕头转向。&lt;br&gt;便利店在学校不远处，自动门打开了，一股凉意从里面偷跑出来。自动门每开一次都要偷偷跑出来一些凉，就像我从宿舍里跑出来一样，而随后，也就是在自动门关上以后，还会有一些凉会被抓回便利店——空调就是这么残忍的家伙。&lt;br&gt;我对便利店的东西如数家珍，由于不喜欢在食堂的人群中乞求座位，我常常自己出来到便利店寻找能够填饱肚子的食物——这里总是空无一人。从冷柜里拿出来啤酒，结账，随后又坐在了靠玻璃墙的凳子上。囚禁着凉的液体从我的嘴唇灌进口腔流过食道到达我的胃部，每次吞咽，我都把凉从易拉罐里转移到了我的胃里，它们只不过是换个牢房罢了。我坐在那里四处张望，似乎这样可以给便利店增加点人气，这时自动门开了，伴随着轻快的音乐，我看见她走了进来。&lt;/p&gt;
&lt;p&gt;我惊讶地看到她和我拿了一样的啤酒然后坐在了我的身边。我并不太喜欢和陌生人来往，坐在便利店也是因为这里很少有人驻留，这里已经成了我的私人领地，所以她的入侵顿时让我有点生气，于是我决定不再理她。&lt;br&gt;“你好，坐在这里你不会生气吧？”&lt;br&gt;手机屏幕亮了，我收到了这样一封Email，打开我的电子邮箱，这样短短的文字就这样肆意地躺在我面前。她怎么会知道我的邮箱，我往右边悄悄斜了一眼，并没有发现她的任何动静，我期待这个时候她看我一眼，那样只要我扭过头我们就会双目对视，这将是绝佳的交流时机。从这一刻我开始觉得她是个有趣的人。但是她并没有。她没有任何动静，就像我不存在一样。由于我不善于直视别人，所以一时没办法弄懂她具体在干什么，但我可以肯定的是她并没有看我。&lt;br&gt;我想了想还是决定给她回信，我并不确定这封邮件是谁发的，但直觉告诉我一定是她。&lt;/p&gt;
&lt;p&gt;“随便，又不是我的地盘！”&lt;br&gt;我昧着心意回了邮件，虽然我同意了，但是由于我担心她会察觉不到我客气的背后还有一丝不满，所以加了叹号。但我不知道她会怎样解读这个感叹号，或许她会理解为我的热情好客，一想到这里我又感觉后悔。&lt;br&gt;“你在吃什么呀？”&lt;br&gt;我注意到她邮箱的昵称是“关”，或许是她的姓氏，也或许是她名字中最喜欢的一个字，但我更倾向于礼貌地叫她关小姐。&lt;br&gt;因为常常孤身一人，所以我格外珍惜这次交流，虽然我明明什么也没有吃，我也很不希望对话到我这里就戛然而止——尽管我一开始并不是很喜欢这个关小姐。而当我已经写好了要回复的内容时，手机却怎么也上不了网了。&lt;/p&gt;
&lt;h2 id=&quot;二&quot;&gt;&lt;a href=&quot;#二&quot; class=&quot;headerlink&quot; title=&quot;二&quot;&gt;&lt;/a&gt;二&lt;/h2&gt;&lt;p&gt;本意决定在外面逗留几天的我又回到了宿舍，因为我无论如何也连不上便利店的网络，而移动网络在此刻也断了链子。不出所料，宿舍里果然凉了下来，空调还在轰隆隆的工作着，我这才意识到空调的电路是另外的，即便我切断了整个寝室的电源。&lt;br&gt;我将总闸重新推上去，随着“哔——”的一声，启辉器将日光灯管点亮。自从暑假室友都回家以后就没有关过灯，这样独自一人看着灯管从暗到亮还是第一次。但我顾不上灯管了，我的目光拽着我坐下打开电脑，但很不幸——我的电脑也连不上网络了。我觉得很诧异，我又拿起手机，网络旁边的叹号依然在，天哪，我居然没办法发出一封小小的邮件！&lt;br&gt;蝉忽然静了下来，我听到外面公交车到站的播报，楼上有人冲了厕所，还有不知道是几楼的水管不停地发出嘤嘤嘤的怪叫，那是空气柱在高压下不停震动产生的声音。我仿佛看到那声音和蝉鸣和热浪趁我不注意潜入宿舍将我的网线咬断，将便利店的网线咬断，又钻进我的手机将所有的天线网卡都一并咬断，它就是要我上不了网。&lt;/p&gt;
&lt;p&gt;“谢谢你告诉我，听你说话的语气，你是一个好人~”&lt;br&gt;这时我又收到了邮件。&lt;br&gt;我看着那句似乎是赞赏我又似乎是讽刺我而且还有些让人摸不着头脑的话出现在手机通知栏里，和网络旁边的叹号一样，它切切实实的存在着。我试着点开通知，我仿佛听到关小姐在我身后对着我的耳朵说“你是一个好人~”。&lt;br&gt;她为什么还能发进来邮件呢？我什么也没告诉她呀！说话的语气是指我同意她坐下的语气吗？她是误解了我的感叹号吗？为什么要称我为一个好人呢，明明素不相识！我觉得很难理解，同时也很气愤。我不理解为何断网还能收到她的邮件，我气愤即便她是在夸我，我依然不喜欢一个陌生人称呼我为一个好人，正如我不喜欢随便称呼一个不认识的人为好人一样，哪能如此随意的就给对方套上好人的光环。我想象着假如我依然坐在便利店，她忽然站起来居高临下看着我，对我伸出右手说，你是一个好人。这样的事想想都有点恶心。&lt;/p&gt;
&lt;p&gt;“原来你才大四啊？我已经研二了！”&lt;br&gt;邮件又来了，我拉过来室友的躺椅，将自己陷入柔软当中。夏日的炎热已经烟消云散，蝉鸣不再聒噪，我甚是感受到了风在我的头顶绕来绕去，清凉的雨从我脖间流下，滑过我出汗的脊背钻进衣服的沟壑里。我想象着她下一封邮件会发什么，我马上要大三了，我明白了她并不是在跟我聊天，这邮件一定是要发给另一个人的。这时的我有一种偷窥其他人秘密的快感，不过究竟是什么样的人会用邮件聊天呢。我在柔软中等着下一封邮件的到来，我似乎在像看一本小说一样不停地猜测接下来的情节走向，我想她可能是上个年代的人，那个时候或许他们还比较习惯用邮件交流；不过也可能是和我一个时代的人，要真的这样，那可就有趣起来了。我喜欢有趣的人，然而我太不擅长打交道，每次遇到有趣的人又经常把关系搞得一团糟，但是这次却有个有趣的人自己送上门来，我可以肆无忌惮的窥视着她的邮件而不用担心搞砸关系。一想到这些我又感觉很兴奋，要是有个人站在我旁边，一定会觉得我是个变态。你想想，一个独居的大三男生窝在躺椅上咧着嘴笑，脑子里还幻想着窥视其它女生的聊天，多么变态啊！&lt;br&gt;就这样想着，等了很久，邮件却迟迟不来。也许是最近学业压力太大了，或者是夏天的热让我很久没有睡过好觉了，我就这样躺着睡着了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="文学" scheme="https://asea.fun/categories/%E6%96%87%E5%AD%A6/"/>
    
    
      <category term="literature" scheme="https://asea.fun/tags/literature/"/>
    
  </entry>
  
  <entry>
    <title>夜行</title>
    <link href="https://asea.fun/post/71998f63.html"/>
    <id>https://asea.fun/post/71998f63.html</id>
    <published>2021-11-20T12:15:15.000Z</published>
    <updated>2021-11-20T12:17:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>剃了头，嘴里噙着嚼不烂牛肉，带个耳暖，个子不高，但走路有力得很。<br>走着走着，桥就在脚下了，电话识趣地响起。</p><p>电话那头：家明，到哪了？<br>电话那头：在月亮底下？我看不见月亮。<br>电话那头：我宿舍不向阳，但还是看不见月亮。<br>电话那头：今天不是十五吗怎么会像个月牙呢，我还是看不见啊，是云挡住了吧。<br>电话那头：你拍这照片，肯定是云挡住了，另一半还能隐约看见点。<br>电话那头：正常的也没这么明显啊。<br>电话那头：啊真的吗？<br>电话那头：是要补一下天文学知识了，但是我看不懂啊。<br>电话那头：你说的很有道理，说不定月亮一天也有圆缺。<br>电话那头：天哪，那完蛋了，我们成了最后一批人类。<br>电话那头：你快去问问天文学大佬去吧。<br>电话那头：啥？月食？我也想到了，但想着这么罕见的东西应该不是吧就给pass掉了。<br>电话那头：你不也是吗？我是真的想到了。<br>电话那头：挂了挂了。</p><p>把手机揣进裤子口袋里，口袋有点小，塞进去憋得慌，又拿出来了，还是不舒服，又塞进去了。要说想舒服也行，搁上衣口袋，但就是不想这么做，就是觉得别扭。揣着憋得慌的手机往前走，绕了一个大圈，拐了弯，走到十字路口，交警赶着横向的人过马路，绿灯闪瞎眼了，那人还在扣手机。交警和那人和十五的月牙看起来好看的很，于是掏出来手机准备咔嚓。“草，啥也拍不到。”骂骂咧咧过了马路。也不是啥也拍不到，要拍交警也能拍，拍那人扣手机也不是不行，哪怕是拍月亮，跺跺脚也能看，可就是拍不了这幅景，这景不是交警，也不是那人扣手机，还不是月亮。景就在那，就拍不着。<br>又走到十字路口，打算右转了，看到个女人跟自己一样右转。那女人追不上来，步子太小了，一会就被甩八丈远。走了半道，停下来看看手机，也没啥消息。也不是为了看消息，就是想看两眼手机，手机屏都不用点亮，就那么看两眼就行。这会两辆公交披星戴月开了过去，盯着看了半天。那女人追了上来。<br>“你别追我。”<br>加快脚步向前走，碰上对情侣，路灯黄黄的照着他们，站在远处给他们拍个照。那女人又追了上来。<br>“草，追啥追，你先走。”<br>坐在树底下看了会小说，今天刚看完本小说，不知道看啥好，随便翻。也不是不知道看啥，看刘大爷其它书也行，看历史看科普看社会都行，但就是都行，搞得不知道看啥了。盯着屏幕一会，那女人已经走远了，这才起身走。这会儿有从学校出来回宿舍区的人，也不早了，看到个人骑着车带着个女生。忽然想起来小时候母亲骑着力矩很小的自行车带着自己和姐姐俩人骑了几公里到大姨家洗澡的事。家里穷，天一冷就是没地方洗澡，常四处寄人淋浴间下。眼泪立马就下来了，想家里人了，想的不得了，但不久前刚打过电话，再打也不知道说啥。要说也能说，就是说了就会让家人觉得自己难受，觉得自己是不是有心事，一想到这也就不说了。<br>正走着，听见俩人议论月食，再回头看，背后的月亮跟闰土头上的没啥两样。俩人一人说是月食，一人说没有。开头那人就翻开朋友圈给另一个人看。看罢圆月，回过头又惊了一下，那个女人停了下来，扭头正看着自己，黑色的深筒高跟鞋，肉色裤袜，黑色贝雷帽，一头长头发盖下来，就那么看着。<br>“你别追我！”<br>于是加快脚步向前走了，再往后看时，那女人还是背对着，举着手机拍月亮。也许刚刚也没看自己，就是看月亮而已。</p><p>电话又响起了。<br>“家明，到哪了？”<br>“回去了。”<br>正说着，已经走到超市门口了，翻了瓶啤酒走到门口对着老板笑，然后把账结了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;剃了头，嘴里噙着嚼不烂牛肉，带个耳暖，个子不高，但走路有力得很。&lt;br&gt;走着走着，桥就在脚下了，电话识趣地响起。&lt;/p&gt;
&lt;p&gt;电话那头：家明，到哪了？&lt;br&gt;电话那头：在月亮底下？我看不见月亮。&lt;br&gt;电话那头：我宿舍不向阳，但还是看不见月亮。&lt;br&gt;电话那头：今天不是十五吗怎么会像个月牙呢，我还是看不见啊，是云挡住了吧。&lt;br&gt;电话那头：你拍这照片，肯定是云挡住了，另一半还能隐约看见点。&lt;br&gt;电话那头：正常的也没这么明显啊。&lt;br&gt;电话那头：啊真的吗？&lt;br&gt;电话那头：是要补一下天文学知识了，但是我看不懂啊。&lt;br&gt;电话那头：你说的很有道理，说不定月亮一天也有圆缺。&lt;br&gt;电话那头：天哪，那完蛋了，我们成了最后一批人类。&lt;br&gt;电话那头：你快去问问天文学大佬去吧。&lt;br&gt;电话那头：啥？月食？我也想到了，但想着这么罕见的东西应该不是吧就给pass掉了。&lt;br&gt;电话那头：你不也是吗？我是真的想到了。&lt;br&gt;电话那头：挂了挂了。&lt;/p&gt;
&lt;p&gt;把手机揣进裤子口袋里，口袋有点小，塞进去憋得慌，又拿出来了，还是不舒服，又塞进去了。要说想舒服也行，搁上衣口袋，但就是不想这么做，就是觉得别扭。揣着憋得慌的手机往前走，绕了一个大圈，拐了弯，走到十字路口，交警赶着横向的人过马路，绿灯闪瞎眼了，那人还在扣手机。交警和那人和十五的月牙看起来好看的很，于是掏出来手机准备咔嚓。“草，啥也拍不到。”骂骂咧咧过了马路。也不是啥也拍不到，要拍交警也能拍，拍那人扣手机也不是不行，哪怕是拍月亮，跺跺脚也能看，可就是拍不了这幅景，这景不是交警，也不是那人扣手机，还不是月亮。景就在那，就拍不着。&lt;br&gt;又走到十字路口，打算右转了，看到个女人跟自己一样右转。那女人追不上来，步子太小了，一会就被甩八丈远。走了半道，停下来看看手机，也没啥消息。也不是为了看消息，就是想看两眼手机，手机屏都不用点亮，就那么看两眼就行。这会两辆公交披星戴月开了过去，盯着看了半天。那女人追了上来。&lt;br&gt;“你别追我。”&lt;br&gt;加快脚步向前走，碰上对情侣，路灯黄黄的照着他们，站在远处给他们拍个照。那女人又追了上来。&lt;br&gt;“草，追啥追，你先走。”&lt;br&gt;坐在树底下看了会小说，今天刚看完本小说，不知道看啥好，随便翻。也不是不知道看啥，看刘大爷其它书也行，看历史看科普看社会都行，但就是都行，搞得不知道看啥了。盯着屏幕一会，那女人已经走远了，这才起身走。这会儿有从学校出来回宿舍区的人，也不早了，看到个人骑着车带着个女生。忽然想起来小时候母亲骑着力矩很小的自行车带着自己和姐姐俩人骑了几公里到大姨家洗澡的事。家里穷，天一冷就是没地方洗澡，常四处寄人淋浴间下。眼泪立马就下来了，想家里人了，想的不得了，但不久前刚打过电话，再打也不知道说啥。要说也能说，就是说了就会让家人觉得自己难受，觉得自己是不是有心事，一想到这也就不说了。&lt;br&gt;正走着，听见俩人议论月食，再回头看，背后的月亮跟闰土头上的没啥两样。俩人一人说是月食，一人说没有。开头那人就翻开朋友圈给另一个人看。看罢圆月，回过头又惊了一下，那个女人停了下来，扭头正看着自己，黑色的深筒高跟鞋，肉色裤袜，黑色贝雷帽，一头长头发盖下来，就那么看着。&lt;br&gt;“你别追我！”&lt;br&gt;于是加快脚步向前走了，再往后看时，那女人还是背对着，举着手机拍月亮。也许刚刚也没看自己，就是看月亮而已。&lt;/p&gt;
&lt;p&gt;电话又响起了。&lt;br&gt;“家明，到哪了？”&lt;br&gt;“回去了。”&lt;br&gt;正说着，已经走到超市门口了，翻了瓶啤酒走到门口对着老板笑，然后把账结了。&lt;/p&gt;

    
    </summary>
    
    
      <category term="文学" scheme="https://asea.fun/categories/%E6%96%87%E5%AD%A6/"/>
    
    
      <category term="life" scheme="https://asea.fun/tags/life/"/>
    
      <category term="literature" scheme="https://asea.fun/tags/literature/"/>
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="https://asea.fun/post/79666db.html"/>
    <id>https://asea.fun/post/79666db.html</id>
    <published>2021-11-15T00:47:26.000Z</published>
    <updated>2021-11-15T01:12:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本片对于数据结构自行设计的ADT，以及常用的算法、性质做一个记录。</p></blockquote><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXLISTSIZE = <span class="number">100</span>; <span class="comment">//默认最大长度</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqList</span>&#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    ElemType *elem;   <span class="comment">// 存储空间基址</span></span><br><span class="line">    <span class="keyword">int</span> length;               <span class="comment">// 当前长度</span></span><br><span class="line">    <span class="keyword">int</span> listsize;        <span class="comment">// 允许的最大存储容量(以sizeof(ElemType)为单位</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//初始化顺序表</span></span><br><span class="line">    SqList(<span class="keyword">int</span> ms = MAXLISTSIZE)</span><br><span class="line">    &#123;</span><br><span class="line">        elem = <span class="keyword">new</span> ElemType[ms];</span><br><span class="line">        length = <span class="number">0</span>;</span><br><span class="line">        listsize = ms;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除顺序表</span></span><br><span class="line">    ~SqList()&#123;<span class="keyword">delete</span> [] elem;&#125;</span><br><span class="line">    <span class="comment">//将顺序表置为空表</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ListClear</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] elem;</span><br><span class="line">        elem = <span class="keyword">new</span> ElemType[length];</span><br><span class="line">        length = <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="comment">//返回顺序表的长度</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> length;&#125;</span><br><span class="line">    <span class="comment">//设置顺序表的长度</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">SetListLength</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(len &lt;= listsize &amp;&amp; len &gt;= length)</span><br><span class="line">        &#123;</span><br><span class="line">            length = len;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ElemType *t;</span><br><span class="line">        t = <span class="keyword">new</span> ElemType[len];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; min(length,len); ++i)</span><br><span class="line">            t[i] = elem[i];</span><br><span class="line">        length = len;</span><br><span class="line">        <span class="keyword">delete</span> [] elem;</span><br><span class="line">        elem = t;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断顺序表是否为空表</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ListEmpty</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断顺序表是否为满表</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ListFull</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> listsize == length ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用e返回顺序表标号为i的元素</span></span><br><span class="line">    <span class="function">ElemType <span class="title">GetElem</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elem[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回元素e的标号，否则返回-1</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetElemIndex</span><span class="params">(ElemType e)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(elem[i] == e)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用e设置顺序表标号为i的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">SetElem</span><span class="params">(<span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= length)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        elem[i<span class="number">-1</span>] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在顺序表的标号为pos的元素之前插入e元素</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(ElemType e, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos &lt; <span class="number">0</span> || pos &gt; length)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(listsize - length &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = length; i &gt;= pos; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                elem[i] = elem[i<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            elem[pos] = e;</span><br><span class="line">            length ++;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ElemType *t;</span><br><span class="line">            length ++;</span><br><span class="line">            t = <span class="keyword">new</span> ElemType[length];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">                t[i] = elem[i];</span><br><span class="line">            <span class="keyword">delete</span> [] elem;</span><br><span class="line">            elem = t;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = length; i &gt; pos; i--)</span><br><span class="line">                elem[i] = elem[i<span class="number">-1</span>];</span><br><span class="line">            elem[pos] = e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在顺序表的标号为pos的元素之前插入e元素</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(ElemType e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(listsize - length &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            elem[length] = e;</span><br><span class="line">            length ++;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ElemType *t;</span><br><span class="line">            length ++;</span><br><span class="line">            t = <span class="keyword">new</span> ElemType[length];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">                t[i] = elem[i];</span><br><span class="line">            <span class="keyword">delete</span> [] elem;</span><br><span class="line">            elem = t;</span><br><span class="line">            elem[length<span class="number">-1</span>] = e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除最后一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(length &gt; <span class="number">0</span>)</span><br><span class="line">            length --;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除顺序表下表为pos的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos &lt; <span class="number">0</span> || pos &gt; length)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(length &gt; <span class="number">0</span>)</span><br><span class="line">            length--;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = pos; i &lt; length; ++i)</span><br><span class="line">            elem[i] = elem[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//compare函数，用来判断a和b是否相等</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(ElemType a, ElemType *b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a == *b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//按指定条件查找</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(ElemType e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(elem[i] = e)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//      //逆置顺序表</span></span><br><span class="line">    <span class="comment">//      void Invert(int, int);</span></span><br><span class="line">    <span class="comment">//返回线性表给定数据元素的前驱数据元素的值</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">PriorElem</span><span class="params">(ElemType cur_e, ElemType &amp;pri_e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(elem[i] == cur_e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    pri_e = elem[i<span class="number">-1</span>];</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回线性表给定数据元素的后继数据元素的值</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">NextElem</span><span class="params">(ElemType cur_e, ElemType &amp;nex_e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(elem[i] == cur_e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i &lt; length<span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    nex_e = elem[i+<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将线性表中的元素前移一次</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MoveForward</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ElemType t = elem[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length<span class="number">-1</span>; i++)</span><br><span class="line">            elem[i] = elem[i+<span class="number">1</span>];</span><br><span class="line">        elem[length - <span class="number">1</span>] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(length == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NULL&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;elem[i];</span><br><span class="line">            <span class="keyword">if</span>(i &lt; length - <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//销毁线性表</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ListDestroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] elem;</span><br><span class="line">        elem = <span class="literal">NULL</span>;</span><br><span class="line">        length = <span class="number">0</span>;</span><br><span class="line">        listsize = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//      //遍历顺序表</span></span><br><span class="line">    <span class="comment">//      int ListTraverse() const;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data; <span class="comment">//数据域</span></span><br><span class="line">    LinkNode&lt;ElemType&gt; *next; <span class="comment">//指针域</span></span><br><span class="line">    LinkNode(LinkNode&lt;ElemType&gt; *ptr = <span class="literal">NULL</span>)&#123;next = ptr;&#125; <span class="comment">//构造函数，默认指针域为空，数据域没有初始化</span></span><br><span class="line">    LinkNode(<span class="keyword">const</span> ElemType &amp;item, LinkNode&lt;ElemType&gt; *ptr = <span class="literal">NULL</span>) <span class="comment">//构造函数，默认指针域为空，数据域初始化</span></span><br><span class="line">    &#123;</span><br><span class="line">        next = ptr;</span><br><span class="line">        data = item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//带头结点的单链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">      LinkNode&lt;ElemType&gt; *head;   <span class="comment">// 头指针</span></span><br><span class="line">      LinkNode&lt;ElemType&gt; *tail;   <span class="comment">// 尾指针</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="comment">//无参构造</span></span><br><span class="line">      LinkList()&#123;head = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;; tail = head;&#125;</span><br><span class="line">      <span class="comment">//有参构造，给头节点数据域赋值</span></span><br><span class="line">      LinkList(<span class="keyword">const</span> ElemType &amp;item)&#123;head = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(item); tail = head;&#125;</span><br><span class="line">      <span class="comment">//拷贝构造</span></span><br><span class="line">      LinkList(LinkList&lt;ElemType&gt; &amp;List);</span><br><span class="line">      <span class="comment">//析构</span></span><br><span class="line">      ~LinkList()&#123;ListDestroy();&#125;</span><br><span class="line">      <span class="comment">//等于号重载</span></span><br><span class="line">      LinkList&lt;ElemType&gt;&amp; <span class="keyword">operator</span>=(LinkList&lt;ElemType&gt; &amp;List);</span><br><span class="line">      <span class="comment">//销毁链表</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">ListDestroy</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="comment">//清空链表</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">ListClear</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="comment">//返回链表的长度</span></span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">      <span class="comment">//判断链表是否为空表</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">ListEmpty</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">      <span class="comment">//在首节点之前插入一个结点</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">InsFirst</span><span class="params">(ElemType e)</span></span>;</span><br><span class="line">      <span class="comment">//在尾节点之后添加一个结点</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">InsEnd</span><span class="params">(ElemType e)</span></span>;</span><br><span class="line">      <span class="comment">//获取链表头结点</span></span><br><span class="line">      <span class="function">LinkNode&lt;ElemType&gt;* <span class="title">GetHead</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> head;&#125;</span><br><span class="line">      <span class="comment">//获取链尾结点</span></span><br><span class="line">      <span class="function">LinkNode&lt;ElemType&gt;* <span class="title">GetTail</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> tail;&#125;</span><br><span class="line">      <span class="comment">//设置链表头结点</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">SetHead</span><span class="params">(LinkNode&lt;ElemType&gt; *p)</span></span>;</span><br><span class="line">      <span class="comment">//设置链尾结点</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">SetTail</span><span class="params">(LinkNode&lt;ElemType&gt; *p)</span></span>;</span><br><span class="line">      <span class="comment">//返回链表的第i个元素</span></span><br><span class="line">      <span class="function">ElemType <span class="title">GetElem</span><span class="params">(<span class="keyword">int</span> pos)</span></span>;</span><br><span class="line">      <span class="comment">//在链表的第pos个位置之前插入e元素</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(<span class="keyword">int</span> pos,ElemType e)</span></span>;</span><br><span class="line">      <span class="comment">//删除链表的首结点</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">DelFirst</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="comment">//表头插入法动态生成链表</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">CreateList_Head</span><span class="params">(<span class="keyword">int</span> n, ElemType *A)</span></span>;</span><br><span class="line">      <span class="comment">//表尾插入法动态生成链表</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">CreateList_Tail</span><span class="params">(<span class="keyword">int</span> n, ElemType *A)</span></span>;</span><br><span class="line">      <span class="comment">//删除链表的第pos个位置的元素</span></span><br><span class="line">      <span class="function">ElemType <span class="title">ListDelete</span><span class="params">(<span class="keyword">int</span> pos)</span></span>;</span><br><span class="line">      <span class="comment">//compare函数，用来判断两个链表是否相等</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> LinkList&lt;ElemType&gt; &amp;b)</span></span>;</span><br><span class="line">      <span class="comment">//按指定条件查找，返回指向第一个符合条件（=e）的元素的指针</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">LocateElem</span><span class="params">(<span class="keyword">const</span> ElemType &amp;e, LinkNode&lt;ElemType&gt; *pos)</span></span>;</span><br><span class="line">      <span class="comment">//返回链表给定数据元素的前驱数据元素的值</span></span><br><span class="line">      <span class="comment">//bool PriorElem(ElemType cur_e, ElemType &amp;pri_e);</span></span><br><span class="line">      <span class="comment">//返回链表给定数据元素的后继数据元素的值</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">NextElem</span><span class="params">(LinkNode&lt;ElemType&gt; *p, ElemType &amp;e)</span></span>;</span><br><span class="line">      <span class="comment">//遍历链表</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">ListTraverse</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝构造</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line">LinkList&lt;ElemType&gt;::LinkList(LinkList&lt;ElemType&gt; &amp;List)&#123;</span><br><span class="line">  <span class="keyword">this</span>-&gt;head = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(List.head-&gt;data);</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p1 = <span class="keyword">this</span>-&gt;head,*p2 = List.head;</span><br><span class="line">  <span class="keyword">while</span>(p2-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">    p1-&gt;next = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(p2-&gt;next-&gt;data);</span><br><span class="line">    p1 = p1-&gt;next;</span><br><span class="line">    p2 = p2-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>-&gt;tail = p1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> LinkList&lt;ElemType&gt;::ListDestroy()</span><br><span class="line">&#123;</span><br><span class="line">    LinkNode&lt;ElemType&gt; *p = head, *t = p-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        p = t;</span><br><span class="line">        <span class="keyword">if</span>(p) t = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重载赋值运算符</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line">LinkList&lt;ElemType&gt;&amp; LinkList&lt;ElemType&gt;::<span class="keyword">operator</span>=(LinkList&lt;ElemType&gt; &amp;List)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">this</span>-&gt;head = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(List.head-&gt;data);</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p1 = <span class="keyword">this</span>-&gt;head,*p2 = List.head;</span><br><span class="line">  <span class="keyword">while</span>(p2-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">    p1-&gt;next = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(p2-&gt;next-&gt;data);</span><br><span class="line">    p1 = p1-&gt;next;</span><br><span class="line">    p2 = p2-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  tail = p1;</span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> LinkList&lt;ElemType&gt;::ListClear()</span><br><span class="line">&#123;</span><br><span class="line">  ListDestroy(head-&gt;next);</span><br><span class="line">  tail = head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回链表的长度</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> LinkList&lt;ElemType&gt;::ListLength() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p = head;</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">      p = p-&gt;next;</span><br><span class="line">      length++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断链表是否为空表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::ListEmpty() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在首节点之前插入一个结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::InsFirst(ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *t = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(e);</span><br><span class="line">  t-&gt;next = head-&gt;next;</span><br><span class="line">  head-&gt;next = t;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在尾节点之后添加一个结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::InsEnd(ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *t = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(e);</span><br><span class="line">  tail-&gt;next = t;</span><br><span class="line">  tail = t;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置链表头结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> LinkList&lt;ElemType&gt;::SetHead(LinkNode&lt;ElemType&gt; *p)</span><br><span class="line">&#123;</span><br><span class="line">  head = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置尾结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> LinkList&lt;ElemType&gt;::SetTail(LinkNode&lt;ElemType&gt; *p)</span><br><span class="line">&#123;</span><br><span class="line">  tail = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回链表的第i个元素</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line">ElemType LinkList&lt;ElemType&gt;::GetElem(<span class="keyword">int</span> pos)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(pos &lt; <span class="number">1</span>)  <span class="comment">//不合法数据返回头节点data</span></span><br><span class="line">    <span class="keyword">return</span> head-&gt;data;</span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p = head;</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">    num++;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(num == pos)</span><br><span class="line">      <span class="keyword">return</span> p-&gt;data;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> head-&gt;data; <span class="comment">//不合法数据返回头节点data</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在链表的第pos个位置之前插入e元素</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::ListInsert(<span class="keyword">int</span> pos,ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(pos &lt; <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p = head;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *t = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(e);</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    num++;</span><br><span class="line">    <span class="keyword">if</span>(num == pos)</span><br><span class="line">    &#123;</span><br><span class="line">      t-&gt;next = p-&gt;next;</span><br><span class="line">      p-&gt;next = t;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除链表的首结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::DelFirst()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(!(head-&gt;next))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *t = head-&gt;next;</span><br><span class="line">  head-&gt;next = t-&gt;next;</span><br><span class="line">  <span class="keyword">delete</span> t;</span><br><span class="line">  <span class="keyword">if</span>(!head-&gt;next)</span><br><span class="line">    tail = head;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//表头插入法动态生成链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> LinkList&lt;ElemType&gt;::CreateList_Head(<span class="keyword">int</span> n, ElemType *A)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> m = n;</span><br><span class="line">  <span class="keyword">while</span>(n)</span><br><span class="line">  &#123;</span><br><span class="line">    InsFirst(*(A+(m-n)));</span><br><span class="line">    n--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//表尾插入法动态生成链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> LinkList&lt;ElemType&gt;::CreateList_Tail(<span class="keyword">int</span> n, ElemType *A)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> m = n;</span><br><span class="line">  <span class="keyword">while</span>(n)</span><br><span class="line">  &#123;</span><br><span class="line">    InsEnd(*(A+(m-n)));</span><br><span class="line">    n--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除链表的第pos个位置的元素</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line">ElemType LinkList&lt;ElemType&gt;::ListDelete(<span class="keyword">int</span> pos)</span><br><span class="line">&#123;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p = head, *t;</span><br><span class="line">  <span class="keyword">while</span>(--pos)</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  t = p-&gt;next;</span><br><span class="line">  p-&gt;next = t-&gt;next;</span><br><span class="line">  <span class="keyword">if</span>(!p-&gt;next)</span><br><span class="line">    tail = p;</span><br><span class="line">  ElemType res = t-&gt;data;</span><br><span class="line">  <span class="keyword">delete</span> t;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//compare函数，用来判断a和b是否相等</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::compare(<span class="keyword">const</span> LinkList&lt;ElemType&gt; &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *t = b.GetHead(), *p = head;</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next || t-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;next-&gt;data != t-&gt;next-&gt;data)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    t = t-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回链表给定数据元素的后继数据元素的值</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::NextElem(LinkNode&lt;ElemType&gt; *p, ElemType &amp;e)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next)</span><br><span class="line">    e = p-&gt;next-&gt;data;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::ListTraverse() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p = head;</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;p-&gt;data;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;next)</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;-&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data,num; <span class="comment">//数据域</span></span><br><span class="line">    LinkNode&lt;ElemType&gt; *next; <span class="comment">//指针域</span></span><br><span class="line">    LinkNode(LinkNode&lt;ElemType&gt; *ptr = <span class="literal">NULL</span>)&#123;next = ptr;&#125; <span class="comment">//构造函数，默认指针域为空，数据域没有初始化</span></span><br><span class="line">    LinkNode(<span class="keyword">const</span> ElemType &amp;item, LinkNode&lt;ElemType&gt; *ptr = <span class="literal">NULL</span>) <span class="comment">//构造函数，默认指针域为空，数据域初始化</span></span><br><span class="line">    &#123;</span><br><span class="line">        next = ptr;</span><br><span class="line">        data = item;</span><br><span class="line">        num = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//带头结点的单链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">      LinkNode&lt;ElemType&gt; *head;   <span class="comment">// 头指针</span></span><br><span class="line">      LinkNode&lt;ElemType&gt; *tail;   <span class="comment">// 尾指针</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="comment">//无参构造</span></span><br><span class="line">      LinkList()&#123;head = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;; tail = head;&#125;</span><br><span class="line">      <span class="comment">//有参构造，给头节点数据域赋值</span></span><br><span class="line">      LinkList(<span class="keyword">const</span> ElemType &amp;item)&#123;head = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(item); tail = head;&#125;</span><br><span class="line">      <span class="comment">//拷贝构造</span></span><br><span class="line">      LinkList(LinkList&lt;ElemType&gt; &amp;List);</span><br><span class="line">      <span class="comment">//析构</span></span><br><span class="line">      ~LinkList()&#123;ListDestroy();&#125;</span><br><span class="line">      <span class="comment">//等于号重载</span></span><br><span class="line">      LinkList&lt;ElemType&gt;&amp; <span class="keyword">operator</span>=(LinkList&lt;ElemType&gt; &amp;List);</span><br><span class="line">      <span class="comment">//销毁链表</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">ListDestroy</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="comment">//清空链表</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">ListClear</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="comment">//返回链表的长度</span></span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">      <span class="comment">//判断链表是否为空表</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">ListEmpty</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">      <span class="comment">//在首节点之前插入一个结点</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">InsFirst</span><span class="params">(ElemType e)</span></span>;</span><br><span class="line">      <span class="comment">//在尾节点之后添加一个结点</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">InsEnd</span><span class="params">(ElemType e)</span></span>;</span><br><span class="line">      <span class="comment">//获取链表头结点</span></span><br><span class="line">      <span class="function">LinkNode&lt;ElemType&gt;* <span class="title">GetHead</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> head;&#125;</span><br><span class="line">      <span class="comment">//获取链尾结点</span></span><br><span class="line">      <span class="function">LinkNode&lt;ElemType&gt;* <span class="title">GetTail</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> tail;&#125;</span><br><span class="line">      <span class="comment">//设置链表头结点</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">SetHead</span><span class="params">(LinkNode&lt;ElemType&gt; *p)</span></span>;</span><br><span class="line">      <span class="comment">//设置链尾结点</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">SetTail</span><span class="params">(LinkNode&lt;ElemType&gt; *p)</span></span>;</span><br><span class="line">      <span class="comment">//返回链表的第i个元素</span></span><br><span class="line">      <span class="function">ElemType <span class="title">GetElem</span><span class="params">(<span class="keyword">int</span> pos)</span></span>;</span><br><span class="line">      <span class="comment">//在链表的第pos个位置之前插入e元素</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(<span class="keyword">int</span> pos,ElemType e)</span></span>;</span><br><span class="line">      <span class="comment">//删除链表的首结点</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">DelFirst</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="comment">//表头插入法动态生成链表</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">CreateList_Head</span><span class="params">(<span class="keyword">int</span> n, ElemType *A)</span></span>;</span><br><span class="line">      <span class="comment">//表尾插入法动态生成链表</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">CreateList_Tail</span><span class="params">(<span class="keyword">int</span> n, ElemType *A)</span></span>;</span><br><span class="line">      <span class="comment">//删除链表的第pos个位置的元素</span></span><br><span class="line">      <span class="function">ElemType <span class="title">ListDelete</span><span class="params">(<span class="keyword">int</span> pos)</span></span>;</span><br><span class="line">      <span class="comment">//compare函数，用来判断两个链表是否相等</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> LinkList&lt;ElemType&gt; &amp;b)</span></span>;</span><br><span class="line">      <span class="comment">//按指定条件查找，返回指向第一个符合条件（=e）的元素的指针</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">LocateElem</span><span class="params">(<span class="keyword">const</span> ElemType &amp;e, LinkNode&lt;ElemType&gt; *pos)</span></span>;</span><br><span class="line">      <span class="comment">//返回链表给定数据元素的前驱数据元素的值</span></span><br><span class="line">      <span class="comment">//bool PriorElem(ElemType cur_e, ElemType &amp;pri_e);</span></span><br><span class="line">      <span class="comment">//返回链表给定数据元素的后继数据元素的值</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">NextElem</span><span class="params">(LinkNode&lt;ElemType&gt; *p, ElemType &amp;e)</span></span>;</span><br><span class="line">      <span class="comment">//遍历链表</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">ListTraverse</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝构造</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line">LinkList&lt;ElemType&gt;::LinkList(LinkList&lt;ElemType&gt; &amp;List)&#123;</span><br><span class="line">  <span class="keyword">this</span>-&gt;head = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(List.head-&gt;data);</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p1 = <span class="keyword">this</span>-&gt;head,*p2 = List.head;</span><br><span class="line">  <span class="keyword">while</span>(p2-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">    p1-&gt;next = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(p2-&gt;next-&gt;data);</span><br><span class="line">    p1 = p1-&gt;next;</span><br><span class="line">    p2 = p2-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>-&gt;tail = p1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> LinkList&lt;ElemType&gt;::ListDestroy()</span><br><span class="line">&#123;</span><br><span class="line">    LinkNode&lt;ElemType&gt; *p = head, *t = p-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=head)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        p = t;</span><br><span class="line">        <span class="keyword">if</span>(p) t = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重载赋值运算符</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line">LinkList&lt;ElemType&gt;&amp; LinkList&lt;ElemType&gt;::<span class="keyword">operator</span>=(LinkList&lt;ElemType&gt; &amp;List)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">this</span>-&gt;head = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(List.head-&gt;data);</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p1 = <span class="keyword">this</span>-&gt;head,*p2 = List.head;</span><br><span class="line">  <span class="keyword">while</span>(p2-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">    p1-&gt;next = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(p2-&gt;next-&gt;data);</span><br><span class="line">    p1 = p1-&gt;next;</span><br><span class="line">    p2 = p2-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  tail = p1;</span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> LinkList&lt;ElemType&gt;::ListClear()</span><br><span class="line">&#123;</span><br><span class="line">  ListDestroy(head-&gt;next);</span><br><span class="line">  tail = head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回链表的长度</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> LinkList&lt;ElemType&gt;::ListLength() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p = head;</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">      p = p-&gt;next;</span><br><span class="line">      length++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断链表是否为空表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::ListEmpty() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在首节点之前插入一个结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::InsFirst(ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *t = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(e);</span><br><span class="line">  t-&gt;next = head-&gt;next;</span><br><span class="line">  head-&gt;next = t;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在尾节点之后添加一个结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::InsEnd(ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *t = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(e);</span><br><span class="line">  tail-&gt;next = t;</span><br><span class="line">  tail = t;</span><br><span class="line">  tail-&gt;next = head;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置链表头结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> LinkList&lt;ElemType&gt;::SetHead(LinkNode&lt;ElemType&gt; *p)</span><br><span class="line">&#123;</span><br><span class="line">  head = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置尾结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> LinkList&lt;ElemType&gt;::SetTail(LinkNode&lt;ElemType&gt; *p)</span><br><span class="line">&#123;</span><br><span class="line">  tail = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回链表的第i个元素</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line">ElemType LinkList&lt;ElemType&gt;::GetElem(<span class="keyword">int</span> pos)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(pos &lt; <span class="number">1</span>)  <span class="comment">//不合法数据返回头节点data</span></span><br><span class="line">    <span class="keyword">return</span> head-&gt;data;</span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p = head;</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">    num++;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(num == pos)</span><br><span class="line">      <span class="keyword">return</span> p-&gt;data;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> head-&gt;data; <span class="comment">//不合法数据返回头节点data</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在链表的第pos个位置之前插入e元素</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::ListInsert(<span class="keyword">int</span> pos,ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(pos &lt; <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p = head;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *t = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(e);</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    num++;</span><br><span class="line">    <span class="keyword">if</span>(num == pos)</span><br><span class="line">    &#123;</span><br><span class="line">      t-&gt;next = p-&gt;next;</span><br><span class="line">      p-&gt;next = t;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除链表的首结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::DelFirst()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(!(head-&gt;next))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *t = head-&gt;next;</span><br><span class="line">  head-&gt;next = t-&gt;next;</span><br><span class="line">  <span class="keyword">delete</span> t;</span><br><span class="line">  <span class="keyword">if</span>(!head-&gt;next)</span><br><span class="line">    tail = head;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//表头插入法动态生成链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> LinkList&lt;ElemType&gt;::CreateList_Head(<span class="keyword">int</span> n, ElemType *A)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> m = n;</span><br><span class="line">  <span class="keyword">while</span>(n)</span><br><span class="line">  &#123;</span><br><span class="line">    InsFirst(*(A+(m-n)));</span><br><span class="line">    n--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//表尾插入法动态生成链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> LinkList&lt;ElemType&gt;::CreateList_Tail(<span class="keyword">int</span> n, ElemType *A)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> m = n;</span><br><span class="line">  <span class="keyword">while</span>(n)</span><br><span class="line">  &#123;</span><br><span class="line">    InsEnd(*(A+(m-n)));</span><br><span class="line">    n--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除链表的第pos个位置的元素</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line">ElemType LinkList&lt;ElemType&gt;::ListDelete(<span class="keyword">int</span> pos)</span><br><span class="line">&#123;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p = head, *t;</span><br><span class="line">  <span class="keyword">while</span>(--pos)</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  t = p-&gt;next;</span><br><span class="line">  p-&gt;next = t-&gt;next;</span><br><span class="line">  <span class="keyword">if</span>(!p-&gt;next)</span><br><span class="line">    tail = p;</span><br><span class="line">  ElemType res = t-&gt;data;</span><br><span class="line">  <span class="keyword">delete</span> t;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//compare函数，用来判断a和b是否相等</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::compare(<span class="keyword">const</span> LinkList&lt;ElemType&gt; &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *t = b.GetHead(), *p = head;</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next || t-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;next-&gt;data != t-&gt;next-&gt;data)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    t = t-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回链表给定数据元素的后继数据元素的值</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::NextElem(LinkNode&lt;ElemType&gt; *p, ElemType &amp;e)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next)</span><br><span class="line">    e = p-&gt;next-&gt;data;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::ListTraverse() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p = head;</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next != head)</span><br><span class="line">  &#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;(&#x27;</span>&lt;&lt;p-&gt;num&lt;&lt;<span class="string">&#x27;,&#x27;</span>&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;next != head)</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;-&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXLISTSIZE = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqStack</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ElemType *base;   <span class="comment">// 栈底指针</span></span><br><span class="line">    ElemType *top;   <span class="comment">// 栈顶指针</span></span><br><span class="line">    <span class="keyword">int</span> maxSize;        <span class="comment">// 允许的最大存储容量(以sizeof(ElemType)为单位</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//初始化顺序栈</span></span><br><span class="line">    SqStack(<span class="keyword">int</span> ms = MAXLISTSIZE)</span><br><span class="line">    &#123;</span><br><span class="line">        maxSize = ms;</span><br><span class="line">        base = <span class="keyword">new</span> ElemType[maxSize];</span><br><span class="line">        top = base;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除顺序栈</span></span><br><span class="line">    ~SqStack()&#123;StackDestroy();&#125;</span><br><span class="line">    <span class="comment">//将顺序栈置为空表</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">StackClear</span><span class="params">( )</span></span>&#123;top = base;&#125;</span><br><span class="line">    <span class="comment">//返回顺序栈的长度</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">StackLength</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> top - base;&#125;</span><br><span class="line">    <span class="comment">//设置顺序栈的长度</span></span><br><span class="line">    <span class="comment">//bool SetListLength(int len);</span></span><br><span class="line">    <span class="comment">//判断顺序栈是否为空栈</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">StackisEmpty</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> top == base; &#125;</span><br><span class="line">    <span class="comment">//判断顺序栈是否为满栈</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">StackFull</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> base - top == maxSize;&#125;</span><br><span class="line">    <span class="comment">//用e返回栈顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">GetTop</span><span class="params">(ElemType &amp;e)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        e = *(top<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ElemType <span class="title">GetTop</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> *(top<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//入栈</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(ElemType &amp;e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(StackFull())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        *top = e;</span><br><span class="line">        top++;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//顺序打印</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ElemType *p = base;</span><br><span class="line">        <span class="keyword">while</span>(p!=top)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;*(p++);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(ElemType &amp;e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(StackisEmpty())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        GetTop(e);</span><br><span class="line">        top--;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ElemType <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(StackisEmpty())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        ElemType t = GetTop();</span><br><span class="line">        top--;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//销毁顺序栈</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">StackDestroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">delete</span>[] base;</span><br><span class="line">        base = top = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历顺序栈</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">StackTraverse</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(ElemType* i = base; i != top; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;*i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//栈空间加倍</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">DoubleSpace</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        maxSize *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//比较栈是否相等</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEqual</span><span class="params">(SqStack &amp;t)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t.StackLength() != <span class="keyword">this</span>-&gt;StackLength())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(ElemType *p1 = base, *p2 = t.base; p1 != top; p1++, p2++)</span><br><span class="line">            <span class="keyword">if</span>(*p1 != *p2)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXLISTSIZE = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqQueue</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  ElemType *elem;   <span class="comment">// 存储空间基址</span></span><br><span class="line">  <span class="keyword">int</span> front;   <span class="comment">// 队头指针</span></span><br><span class="line">  <span class="keyword">int</span> rear;   <span class="comment">// 队尾指针</span></span><br><span class="line">  <span class="keyword">int</span> maxSize;        <span class="comment">// 允许的最大存储容量(以sizeof(ElemType)为单位</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//初始化顺序队列</span></span><br><span class="line">  SqQueue(<span class="keyword">int</span> ms = MAXLISTSIZE)&#123;maxSize = ms;front = rear = <span class="number">0</span>; elem = <span class="keyword">new</span> ElemType[ms];&#125;</span><br><span class="line">  <span class="comment">//删除顺序队列</span></span><br><span class="line">  ~SqQueue()&#123;QueueDestroy();&#125;</span><br><span class="line">  <span class="comment">//将顺序队列置为空</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">QueueClear</span><span class="params">()</span></span>&#123;rear = front;<span class="keyword">return</span> <span class="literal">true</span>;&#125;;</span><br><span class="line">  <span class="comment">//设置顺序栈的长度</span></span><br><span class="line">  <span class="comment">//bool SetListLength(int len);</span></span><br><span class="line">  <span class="comment">//判断顺序队列是否为空</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">QueueisEmpty</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> front == rear; &#125;</span><br><span class="line">  <span class="comment">//判断顺序队列是否为满</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">QueueFull</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> rear+<span class="number">1</span> == front;&#125;</span><br><span class="line">  <span class="comment">//用e返回队头元素</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">GetFront</span><span class="params">(ElemType &amp;e)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(!QueueisEmpty())</span><br><span class="line">      &#123;</span><br><span class="line">        e = elem[front];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//入队</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">enQueue</span><span class="params">(<span class="keyword">const</span> ElemType &amp;e)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(QueueFull())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      elem[rear] = e;</span><br><span class="line">      rear++;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//出队</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">deQueue</span><span class="params">(ElemType &amp;e)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(!QueueisEmpty())</span><br><span class="line">      &#123;</span><br><span class="line">          e = elem[front];</span><br><span class="line">          front++;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//销毁顺序队列</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">QueueDestroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(!elem)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">delete</span>[] elem;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//打印</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">//顺序队列最大存储空间加倍</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">DoubleSpace</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> SqQueue&lt;ElemType&gt;::print()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> t = front;</span><br><span class="line">  <span class="keyword">while</span>(t != rear)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;elem[t];</span><br><span class="line">      <span class="keyword">if</span>(++t != rear)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链队列"><a href="#链队列" class="headerlink" title="链队列"></a>链队列</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkQueueNode</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    LinkQueueNode&lt;ElemType&gt; *next;</span><br><span class="line">    LinkQueueNode(LinkQueueNode&lt;ElemType&gt; *ptr = <span class="literal">NULL</span>)&#123;next = ptr;&#125; <span class="comment">//构造函数1，用于构造头结点</span></span><br><span class="line">    LinkQueueNode(<span class="keyword">const</span> ElemType &amp;item, LinkQueueNode&lt;ElemType&gt; *ptr = <span class="literal">NULL</span>) <span class="comment">//构造函数2，用于构造其他结点</span></span><br><span class="line">    <span class="comment">//函数参数表中的形参允许有默认值，但是带默认值的参数需要放后面</span></span><br><span class="line">    &#123;</span><br><span class="line">        next = ptr;</span><br><span class="line">        data = item;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ElemType <span class="title">getData</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> data;&#125;  <span class="comment">//取得结点中的数据</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetLink</span><span class="params">( LinkQueueNode&lt;ElemType&gt; *link )</span></span>&#123; next = link; &#125;  <span class="comment">//修改结点的next域</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetData</span><span class="params">( ElemType value )</span></span>&#123; data = value; &#125;   <span class="comment">//修改结点的data域</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//带头结点的链队列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkQueue</span>&#123;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      LinkQueueNode&lt;ElemType&gt; *front;   <span class="comment">// 队头指针</span></span><br><span class="line">      LinkQueueNode&lt;ElemType&gt; *rear;   <span class="comment">// 队尾指针</span></span><br><span class="line">      <span class="keyword">int</span> length = <span class="number">0</span>;   <span class="comment">//队列当前元素个数</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">      <span class="comment">//无参数的构造函数</span></span><br><span class="line">      LinkQueue()</span><br><span class="line">      &#123;</span><br><span class="line">          front = rear = <span class="keyword">new</span> LinkQueueNode&lt;ElemType&gt;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//析构函数</span></span><br><span class="line">      ~LinkQueue()&#123;LinkQueueDestroy();&#125;</span><br><span class="line">      <span class="comment">//销毁链队列</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">LinkQueueDestroy</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="comment">//清空链表</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">LinkQueueClear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//返回链队列的长度</span></span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">QueueLength</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> length;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//判断链队列是否为空队列</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">QueueisEmpty</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> front == rear;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//出队</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">deQueue</span><span class="params">( ElemType &amp;e )</span></span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//入队</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">enQueue</span><span class="params">( ElemType e )</span></span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取链队列头结点指针</span></span><br><span class="line"></span><br><span class="line">      <span class="function">LinkQueueNode&lt;ElemType&gt;* <span class="title">GetFront</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> front;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取队头元素</span></span><br><span class="line"></span><br><span class="line">      <span class="function">ElemType <span class="title">GetFrontData</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> front-&gt;next-&gt;data;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取链队列队尾指针</span></span><br><span class="line"></span><br><span class="line">      <span class="function">LinkQueueNode&lt;ElemType&gt;* <span class="title">GetRear</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> rear;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//遍历链队列</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">QueueTraverse</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//销毁链队列</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkQueue&lt;ElemType&gt;::LinkQueueDestroy()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!front)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    LinkQueueNode&lt;ElemType&gt; *p;</span><br><span class="line">    <span class="keyword">while</span>(front-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        p = front-&gt;next;</span><br><span class="line">        front-&gt;next = p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> front;</span><br><span class="line">    front = rear = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空链表</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkQueue&lt;ElemType&gt;::LinkQueueClear()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!front)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    LinkQueueNode&lt;ElemType&gt; *p;</span><br><span class="line">    <span class="keyword">while</span>(front-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        p = front-&gt;next;</span><br><span class="line">        front-&gt;next = p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    rear = front;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkQueue&lt;ElemType&gt;::deQueue( ElemType &amp;e )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(QueueisEmpty())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    LinkQueueNode&lt;ElemType&gt; *p = front-&gt;next;</span><br><span class="line">    e = p-&gt;data;</span><br><span class="line">    front-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    length--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkQueue&lt;ElemType&gt;::enQueue( ElemType e )</span><br><span class="line">&#123;</span><br><span class="line">    LinkQueueNode&lt;ElemType&gt; *p;</span><br><span class="line">    p = <span class="keyword">new</span> LinkQueueNode&lt;ElemType&gt;(e);</span><br><span class="line">    rear-&gt;next = p;</span><br><span class="line">    rear = p;</span><br><span class="line">    length++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历链队列</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkQueue&lt;ElemType&gt;::QueueTraverse() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(QueueisEmpty())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    LinkQueueNode&lt;ElemType&gt; *p = front;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><blockquote><p>还没写TT</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本片对于数据结构自行设计的ADT，以及常用的算法、性质做一个记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;顺序表&quot;&gt;&lt;a href=&quot;#顺序表&quot; class=&quot;headerlink&quot; title=&quot;顺序表&quot;&gt;&lt;/a&gt;顺序表&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; MAXLISTSIZE = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//默认最大长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SqList&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ElemType *elem;   &lt;span class=&quot;comment&quot;&gt;// 存储空间基址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; length;               &lt;span class=&quot;comment&quot;&gt;// 当前长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; listsize;        &lt;span class=&quot;comment&quot;&gt;// 允许的最大存储容量(以sizeof(ElemType)为单位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//初始化顺序表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SqList(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ms = MAXLISTSIZE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        elem = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ElemType[ms];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        length = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        listsize = ms;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//删除顺序表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ~SqList()&amp;#123;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; [] elem;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//将顺序表置为空表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListClear&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( )&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; [] elem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        elem = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ElemType[length];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        length = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//返回顺序表的长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListLength&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; length;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//设置顺序表的长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SetListLength&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(len &amp;lt;= listsize &amp;amp;&amp;amp; len &amp;gt;= length)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            length = len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ElemType *t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        t = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ElemType[len];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; min(length,len); ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            t[i] = elem[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        length = len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; [] elem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        elem = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//判断顺序表是否为空表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListEmpty&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//判断顺序表是否为满表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListFull&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; listsize == length ? &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//用e返回顺序表标号为i的元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;ElemType &lt;span class=&quot;title&quot;&gt;GetElem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; elem[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//返回元素e的标号，否则返回-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GetElemIndex&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ElemType e)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; length; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(elem[i] == e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//用e设置顺序表标号为i的元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SetElem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i, ElemType e)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || i &amp;gt;= length)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        elem[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] = e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//在顺序表的标号为pos的元素之前插入e元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListInsert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ElemType e, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pos)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pos &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || pos &amp;gt; length)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(listsize - length &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = length; i &amp;gt;= pos; i--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                elem[i] = elem[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            elem[pos] = e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            length ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ElemType *t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            length ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            t = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ElemType[length];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; length; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                t[i] = elem[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; [] elem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            elem = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = length; i &amp;gt; pos; i--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                elem[i] = elem[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            elem[pos] = e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//在顺序表的标号为pos的元素之前插入e元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Push&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ElemType e)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(listsize - length &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            elem[length] = e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            length ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ElemType *t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            length ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            t = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ElemType[length];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; length; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                t[i] = elem[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; [] elem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            elem = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            elem[length&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] = e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//删除最后一个元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Pop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(length &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            length --;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//删除顺序表下表为pos的元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListDelete&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pos)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pos &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || pos &amp;gt; length)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(length &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            length--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = pos; i &amp;lt; length; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            elem[i] = elem[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//compare函数，用来判断a和b是否相等&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ElemType a, ElemType *b)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a == *b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//按指定条件查找&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LocateElem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ElemType e)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; length; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(elem[i] = e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//      //逆置顺序表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//      void Invert(int, int);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//返回线性表给定数据元素的前驱数据元素的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PriorElem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ElemType cur_e, ElemType &amp;amp;pri_e)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; length; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(elem[i] == cur_e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    pri_e = elem[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//返回线性表给定数据元素的后继数据元素的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NextElem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ElemType cur_e, ElemType &amp;amp;nex_e)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; length; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(elem[i] == cur_e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i &amp;lt; length&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    nex_e = elem[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//将线性表中的元素前移一次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MoveForward&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ElemType t = elem[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; length&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            elem[i] = elem[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        elem[length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//打印元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(length == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&amp;quot;NULL&amp;quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; length; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;elem[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i &amp;lt; length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//销毁线性表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListDestroy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; [] elem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        elem = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        length = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        listsize = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//      //遍历顺序表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//      int ListTraverse() const;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h2&gt;&lt;h3 id=&quot;单链表&quot;&gt;&lt;a href=&quot;#单链表&quot; class=&quot;headerlink&quot; title=&quot;单链表&quot;&gt;&lt;/a&gt;单链表&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LinkNode&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ElemType data; &lt;span class=&quot;comment&quot;&gt;//数据域&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LinkNode&amp;lt;ElemType&amp;gt; *next; &lt;span class=&quot;comment&quot;&gt;//指针域&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LinkNode(LinkNode&amp;lt;ElemType&amp;gt; *ptr = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;)&amp;#123;next = ptr;&amp;#125; &lt;span class=&quot;comment&quot;&gt;//构造函数，默认指针域为空，数据域没有初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LinkNode(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ElemType &amp;amp;item, LinkNode&amp;lt;ElemType&amp;gt; *ptr = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//构造函数，默认指针域为空，数据域初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        next = ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data = item;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//带头结点的单链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LinkList&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      LinkNode&amp;lt;ElemType&amp;gt; *head;   &lt;span class=&quot;comment&quot;&gt;// 头指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      LinkNode&amp;lt;ElemType&amp;gt; *tail;   &lt;span class=&quot;comment&quot;&gt;// 尾指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//无参构造&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      LinkList()&amp;#123;head = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkNode&amp;lt;ElemType&amp;gt;; tail = head;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//有参构造，给头节点数据域赋值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      LinkList(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ElemType &amp;amp;item)&amp;#123;head = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkNode&amp;lt;ElemType&amp;gt;(item); tail = head;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//拷贝构造&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      LinkList(LinkList&amp;lt;ElemType&amp;gt; &amp;amp;List);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//析构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ~LinkList()&amp;#123;ListDestroy();&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//等于号重载&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      LinkList&amp;lt;ElemType&amp;gt;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;=(LinkList&amp;lt;ElemType&amp;gt; &amp;amp;List);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//销毁链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListDestroy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//清空链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListClear&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//返回链表的长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListLength&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//判断链表是否为空表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListEmpty&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//在首节点之前插入一个结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InsFirst&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ElemType e)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//在尾节点之后添加一个结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InsEnd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ElemType e)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//获取链表头结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;LinkNode&amp;lt;ElemType&amp;gt;* &lt;span class=&quot;title&quot;&gt;GetHead&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; head;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//获取链尾结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;LinkNode&amp;lt;ElemType&amp;gt;* &lt;span class=&quot;title&quot;&gt;GetTail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; tail;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//设置链表头结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SetHead&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(LinkNode&amp;lt;ElemType&amp;gt; *p)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//设置链尾结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SetTail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(LinkNode&amp;lt;ElemType&amp;gt; *p)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//返回链表的第i个元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;ElemType &lt;span class=&quot;title&quot;&gt;GetElem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pos)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//在链表的第pos个位置之前插入e元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListInsert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pos,ElemType e)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//删除链表的首结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DelFirst&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//表头插入法动态生成链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CreateList_Head&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, ElemType *A)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//表尾插入法动态生成链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CreateList_Tail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, ElemType *A)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//删除链表的第pos个位置的元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;ElemType &lt;span class=&quot;title&quot;&gt;ListDelete&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pos)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//compare函数，用来判断两个链表是否相等&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt; &amp;amp;b)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//按指定条件查找，返回指向第一个符合条件（=e）的元素的指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LocateElem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ElemType &amp;amp;e, LinkNode&amp;lt;ElemType&amp;gt; *pos)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//返回链表给定数据元素的前驱数据元素的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//bool PriorElem(ElemType cur_e, ElemType &amp;amp;pri_e);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//返回链表给定数据元素的后继数据元素的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NextElem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(LinkNode&amp;lt;ElemType&amp;gt; *p, ElemType &amp;amp;e)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//遍历链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListTraverse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//拷贝构造&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LinkList&amp;lt;ElemType&amp;gt;::LinkList(LinkList&amp;lt;ElemType&amp;gt; &amp;amp;List)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;head = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkNode&amp;lt;ElemType&amp;gt;(List.head-&amp;gt;data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LinkNode&amp;lt;ElemType&amp;gt; *p1 = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;head,*p2 = List.head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(p2-&amp;gt;next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p1-&amp;gt;next = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkNode&amp;lt;ElemType&amp;gt;(p2-&amp;gt;next-&amp;gt;data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p1 = p1-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p2 = p2-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;tail = p1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//销毁链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::ListDestroy()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LinkNode&amp;lt;ElemType&amp;gt; *p = head, *t = p-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(p)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        p = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(p) t = p-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//重载赋值运算符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LinkList&amp;lt;ElemType&amp;gt;&amp;amp; LinkList&amp;lt;ElemType&amp;gt;::&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;=(LinkList&amp;lt;ElemType&amp;gt; &amp;amp;List)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;head = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkNode&amp;lt;ElemType&amp;gt;(List.head-&amp;gt;data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LinkNode&amp;lt;ElemType&amp;gt; *p1 = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;head,*p2 = List.head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(p2-&amp;gt;next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p1-&amp;gt;next = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkNode&amp;lt;ElemType&amp;gt;(p2-&amp;gt;next-&amp;gt;data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p1 = p1-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p2 = p2-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tail = p1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//清空链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::ListClear()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ListDestroy(head-&amp;gt;next);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tail = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回链表的长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::ListLength() &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; length = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LinkNode&amp;lt;ElemType&amp;gt; *p = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(p-&amp;gt;next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      p = p-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      length++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//判断链表是否为空表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::ListEmpty() &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; head-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//在首节点之前插入一个结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::InsFirst(ElemType e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LinkNode&amp;lt;ElemType&amp;gt; *t = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkNode&amp;lt;ElemType&amp;gt;(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  t-&amp;gt;next = head-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  head-&amp;gt;next = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//在尾节点之后添加一个结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::InsEnd(ElemType e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LinkNode&amp;lt;ElemType&amp;gt; *t = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkNode&amp;lt;ElemType&amp;gt;(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tail-&amp;gt;next = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tail = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置链表头结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::SetHead(LinkNode&amp;lt;ElemType&amp;gt; *p)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  head = p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置尾结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::SetTail(LinkNode&amp;lt;ElemType&amp;gt; *p)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tail = p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回链表的第i个元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ElemType LinkList&amp;lt;ElemType&amp;gt;::GetElem(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pos)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pos &amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;//不合法数据返回头节点data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; head-&amp;gt;data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LinkNode&amp;lt;ElemType&amp;gt; *p = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(p-&amp;gt;next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    num++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p = p-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(num == pos)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; p-&amp;gt;data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; head-&amp;gt;data; &lt;span class=&quot;comment&quot;&gt;//不合法数据返回头节点data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//在链表的第pos个位置之前插入e元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::ListInsert(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pos,ElemType e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pos &amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LinkNode&amp;lt;ElemType&amp;gt; *p = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LinkNode&amp;lt;ElemType&amp;gt; *t = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkNode&amp;lt;ElemType&amp;gt;(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(p-&amp;gt;next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    num++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(num == pos)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      t-&amp;gt;next = p-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      p-&amp;gt;next = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p = p-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//删除链表的首结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::DelFirst()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(head-&amp;gt;next))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LinkNode&amp;lt;ElemType&amp;gt; *t = head-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  head-&amp;gt;next = t-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!head-&amp;gt;next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tail = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//表头插入法动态生成链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::CreateList_Head(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, ElemType *A)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m = n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    InsFirst(*(A+(m-n)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    n--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//表尾插入法动态生成链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::CreateList_Tail(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, ElemType *A)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m = n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    InsEnd(*(A+(m-n)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    n--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//删除链表的第pos个位置的元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ElemType LinkList&amp;lt;ElemType&amp;gt;::ListDelete(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pos)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LinkNode&amp;lt;ElemType&amp;gt; *p = head, *t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(--pos)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p = p-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  t = p-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  p-&amp;gt;next = t-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!p-&amp;gt;next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tail = p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ElemType res = t-&amp;gt;data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//compare函数，用来判断a和b是否相等&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::compare(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt; &amp;amp;b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LinkNode&amp;lt;ElemType&amp;gt; *t = b.GetHead(), *p = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(p-&amp;gt;next || t-&amp;gt;next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(p-&amp;gt;next-&amp;gt;data != t-&amp;gt;next-&amp;gt;data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p = p-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t = t-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回链表给定数据元素的后继数据元素的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::NextElem(LinkNode&amp;lt;ElemType&amp;gt; *p, ElemType &amp;amp;e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(p-&amp;gt;next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    e = p-&amp;gt;next-&amp;gt;data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//遍历链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::ListTraverse() &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LinkNode&amp;lt;ElemType&amp;gt; *p = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(p-&amp;gt;next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p = p-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;p-&amp;gt;data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(p-&amp;gt;next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&amp;quot;-&amp;gt;&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;循环链表&quot;&gt;&lt;a href=&quot;#循环链表&quot; class=&quot;headerlink&quot; title=&quot;循环链表&quot;&gt;&lt;/a&gt;循环链表&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LinkNode&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ElemType data,num; &lt;span class=&quot;comment&quot;&gt;//数据域&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LinkNode&amp;lt;ElemType&amp;gt; *next; &lt;span class=&quot;comment&quot;&gt;//指针域&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LinkNode(LinkNode&amp;lt;ElemType&amp;gt; *ptr = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;)&amp;#123;next = ptr;&amp;#125; &lt;span class=&quot;comment&quot;&gt;//构造函数，默认指针域为空，数据域没有初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LinkNode(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ElemType &amp;amp;item, LinkNode&amp;lt;ElemType&amp;gt; *ptr = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//构造函数，默认指针域为空，数据域初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        next = ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data = item;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        num = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//带头结点的单链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LinkList&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      LinkNode&amp;lt;ElemType&amp;gt; *head;   &lt;span class=&quot;comment&quot;&gt;// 头指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      LinkNode&amp;lt;ElemType&amp;gt; *tail;   &lt;span class=&quot;comment&quot;&gt;// 尾指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//无参构造&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      LinkList()&amp;#123;head = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkNode&amp;lt;ElemType&amp;gt;; tail = head;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//有参构造，给头节点数据域赋值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      LinkList(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ElemType &amp;amp;item)&amp;#123;head = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkNode&amp;lt;ElemType&amp;gt;(item); tail = head;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//拷贝构造&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      LinkList(LinkList&amp;lt;ElemType&amp;gt; &amp;amp;List);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//析构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ~LinkList()&amp;#123;ListDestroy();&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//等于号重载&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      LinkList&amp;lt;ElemType&amp;gt;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;=(LinkList&amp;lt;ElemType&amp;gt; &amp;amp;List);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//销毁链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListDestroy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//清空链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListClear&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//返回链表的长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListLength&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//判断链表是否为空表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListEmpty&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//在首节点之前插入一个结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InsFirst&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ElemType e)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//在尾节点之后添加一个结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InsEnd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ElemType e)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//获取链表头结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;LinkNode&amp;lt;ElemType&amp;gt;* &lt;span class=&quot;title&quot;&gt;GetHead&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; head;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//获取链尾结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;LinkNode&amp;lt;ElemType&amp;gt;* &lt;span class=&quot;title&quot;&gt;GetTail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; tail;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//设置链表头结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SetHead&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(LinkNode&amp;lt;ElemType&amp;gt; *p)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//设置链尾结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SetTail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(LinkNode&amp;lt;ElemType&amp;gt; *p)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//返回链表的第i个元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;ElemType &lt;span class=&quot;title&quot;&gt;GetElem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pos)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//在链表的第pos个位置之前插入e元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListInsert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pos,ElemType e)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//删除链表的首结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DelFirst&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//表头插入法动态生成链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CreateList_Head&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, ElemType *A)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//表尾插入法动态生成链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CreateList_Tail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, ElemType *A)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//删除链表的第pos个位置的元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;ElemType &lt;span class=&quot;title&quot;&gt;ListDelete&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pos)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//compare函数，用来判断两个链表是否相等&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt; &amp;amp;b)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//按指定条件查找，返回指向第一个符合条件（=e）的元素的指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LocateElem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ElemType &amp;amp;e, LinkNode&amp;lt;ElemType&amp;gt; *pos)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//返回链表给定数据元素的前驱数据元素的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//bool PriorElem(ElemType cur_e, ElemType &amp;amp;pri_e);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//返回链表给定数据元素的后继数据元素的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NextElem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(LinkNode&amp;lt;ElemType&amp;gt; *p, ElemType &amp;amp;e)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//遍历链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListTraverse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//拷贝构造&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LinkList&amp;lt;ElemType&amp;gt;::LinkList(LinkList&amp;lt;ElemType&amp;gt; &amp;amp;List)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;head = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkNode&amp;lt;ElemType&amp;gt;(List.head-&amp;gt;data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LinkNode&amp;lt;ElemType&amp;gt; *p1 = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;head,*p2 = List.head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(p2-&amp;gt;next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p1-&amp;gt;next = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkNode&amp;lt;ElemType&amp;gt;(p2-&amp;gt;next-&amp;gt;data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p1 = p1-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p2 = p2-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;tail = p1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//销毁链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::ListDestroy()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LinkNode&amp;lt;ElemType&amp;gt; *p = head, *t = p-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(p!=head)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        p = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(p) t = p-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//重载赋值运算符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LinkList&amp;lt;ElemType&amp;gt;&amp;amp; LinkList&amp;lt;ElemType&amp;gt;::&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;=(LinkList&amp;lt;ElemType&amp;gt; &amp;amp;List)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;head = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkNode&amp;lt;ElemType&amp;gt;(List.head-&amp;gt;data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LinkNode&amp;lt;ElemType&amp;gt; *p1 = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;head,*p2 = List.head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(p2-&amp;gt;next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p1-&amp;gt;next = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkNode&amp;lt;ElemType&amp;gt;(p2-&amp;gt;next-&amp;gt;data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p1 = p1-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p2 = p2-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tail = p1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//清空链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::ListClear()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ListDestroy(head-&amp;gt;next);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tail = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回链表的长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::ListLength() &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; length = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LinkNode&amp;lt;ElemType&amp;gt; *p = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(p-&amp;gt;next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      p = p-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      length++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//判断链表是否为空表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::ListEmpty() &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; head-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//在首节点之前插入一个结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::InsFirst(ElemType e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LinkNode&amp;lt;ElemType&amp;gt; *t = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkNode&amp;lt;ElemType&amp;gt;(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  t-&amp;gt;next = head-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  head-&amp;gt;next = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//在尾节点之后添加一个结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::InsEnd(ElemType e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LinkNode&amp;lt;ElemType&amp;gt; *t = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkNode&amp;lt;ElemType&amp;gt;(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tail-&amp;gt;next = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tail = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tail-&amp;gt;next = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置链表头结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::SetHead(LinkNode&amp;lt;ElemType&amp;gt; *p)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  head = p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置尾结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::SetTail(LinkNode&amp;lt;ElemType&amp;gt; *p)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tail = p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回链表的第i个元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ElemType LinkList&amp;lt;ElemType&amp;gt;::GetElem(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pos)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pos &amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;//不合法数据返回头节点data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; head-&amp;gt;data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LinkNode&amp;lt;ElemType&amp;gt; *p = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(p-&amp;gt;next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    num++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p = p-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(num == pos)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; p-&amp;gt;data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; head-&amp;gt;data; &lt;span class=&quot;comment&quot;&gt;//不合法数据返回头节点data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//在链表的第pos个位置之前插入e元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::ListInsert(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pos,ElemType e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pos &amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LinkNode&amp;lt;ElemType&amp;gt; *p = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LinkNode&amp;lt;ElemType&amp;gt; *t = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkNode&amp;lt;ElemType&amp;gt;(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(p-&amp;gt;next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    num++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(num == pos)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      t-&amp;gt;next = p-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      p-&amp;gt;next = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p = p-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//删除链表的首结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::DelFirst()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(head-&amp;gt;next))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LinkNode&amp;lt;ElemType&amp;gt; *t = head-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  head-&amp;gt;next = t-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!head-&amp;gt;next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tail = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//表头插入法动态生成链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::CreateList_Head(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, ElemType *A)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m = n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    InsFirst(*(A+(m-n)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    n--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//表尾插入法动态生成链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::CreateList_Tail(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, ElemType *A)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m = n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    InsEnd(*(A+(m-n)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    n--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//删除链表的第pos个位置的元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ElemType LinkList&amp;lt;ElemType&amp;gt;::ListDelete(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pos)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LinkNode&amp;lt;ElemType&amp;gt; *p = head, *t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(--pos)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p = p-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  t = p-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  p-&amp;gt;next = t-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!p-&amp;gt;next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tail = p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ElemType res = t-&amp;gt;data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//compare函数，用来判断a和b是否相等&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::compare(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt; &amp;amp;b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LinkNode&amp;lt;ElemType&amp;gt; *t = b.GetHead(), *p = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(p-&amp;gt;next || t-&amp;gt;next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(p-&amp;gt;next-&amp;gt;data != t-&amp;gt;next-&amp;gt;data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p = p-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t = t-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回链表给定数据元素的后继数据元素的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::NextElem(LinkNode&amp;lt;ElemType&amp;gt; *p, ElemType &amp;amp;e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(p-&amp;gt;next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    e = p-&amp;gt;next-&amp;gt;data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//遍历链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; LinkList&amp;lt;ElemType&amp;gt;::ListTraverse() &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LinkNode&amp;lt;ElemType&amp;gt; *p = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(p-&amp;gt;next != head)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p = p-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&amp;#x27;(&amp;#x27;&lt;/span&gt;&amp;lt;&amp;lt;p-&amp;gt;num&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt;&amp;lt;&amp;lt;p-&amp;gt;data&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&amp;#x27;)&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(p-&amp;gt;next != head)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&amp;quot;-&amp;gt;&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;顺序栈&quot;&gt;&lt;a href=&quot;#顺序栈&quot; class=&quot;headerlink&quot; title=&quot;顺序栈&quot;&gt;&lt;/a&gt;顺序栈&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; MAXLISTSIZE = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SqStack&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ElemType *base;   &lt;span class=&quot;comment&quot;&gt;// 栈底指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ElemType *top;   &lt;span class=&quot;comment&quot;&gt;// 栈顶指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxSize;        &lt;span class=&quot;comment&quot;&gt;// 允许的最大存储容量(以sizeof(ElemType)为单位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//初始化顺序栈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SqStack(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ms = MAXLISTSIZE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        maxSize = ms;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        base = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ElemType[maxSize];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        top = base;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//删除顺序栈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ~SqStack()&amp;#123;StackDestroy();&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//将顺序栈置为空表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StackClear&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( )&lt;/span&gt;&lt;/span&gt;&amp;#123;top = base;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//返回顺序栈的长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StackLength&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; top - base;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//设置顺序栈的长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//bool SetListLength(int len);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//判断顺序栈是否为空栈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StackisEmpty&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; top == base; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//判断顺序栈是否为满栈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StackFull&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; base - top == maxSize;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//用e返回栈顶元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GetTop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ElemType &amp;amp;e)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        e = *(top&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;ElemType &lt;span class=&quot;title&quot;&gt;GetTop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *(top&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//入栈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ElemType &amp;amp;e)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(StackFull())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        *top = e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        top++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//顺序打印&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ElemType *p = base;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(p!=top)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;*(p++);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//出栈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ElemType &amp;amp;e)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(StackisEmpty())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        GetTop(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        top--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;ElemType &lt;span class=&quot;title&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(StackisEmpty())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ElemType t = GetTop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        top--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//销毁顺序栈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StackDestroy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt;[] base;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        base = top = &lt;span class=&quot;literal&quot;&gt;nullptr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//遍历顺序栈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StackTraverse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(ElemType* i = base; i != top; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;*i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//栈空间加倍&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DoubleSpace&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        maxSize *= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//比较栈是否相等&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isEqual&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(SqStack &amp;amp;t)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(t.StackLength() != &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;StackLength())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(ElemType *p1 = base, *p2 = t.base; p1 != top; p1++, p2++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(*p1 != *p2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://asea.fun/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数据结构" scheme="https://asea.fun/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="https://asea.fun/post/53d0684b.html"/>
    <id>https://asea.fun/post/53d0684b.html</id>
    <published>2021-10-26T10:42:58.000Z</published>
    <updated>2021-10-26T10:42:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux目录介绍"><a href="#Linux目录介绍" class="headerlink" title="Linux目录介绍"></a>Linux目录介绍</h2><p>/bin存放二进制可执行文件(ls,cat,mkdir等)，常用命令一般都在这里；</p><p>/etc存放系统管理和配置文件；</p><p>/home存放所有用户文件的根目录，是用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示；</p><p>/usr用于存放系统应用程序，比较重要的目录/usr/local 本地系统管理员软件安装目录(安装系统级的应用)。这是最庞大的目录，要用到的应用程序和文件几乎都在这个目录；</p><p>/usr/x11r6 存放x window的目录；</p><p>/usr/bin 众多的应用程序；</p><p>/usr/sbin 超级用户的一些管理程序；</p><p>/usr/doc linux文档；</p><p>/usr/include linux下开发和编译应用程序所需要的头文件；</p><p>/usr/lib 常用的动态链接库和软件包的配置文件；</p><p>/usr/man 帮助文档；</p><p>/usr/src 源代码，linux内核的源代码就放在/usr/src/linux里；</p><p>/usr/local/bin 本地增加的命令；</p><p>/usr/local/lib 本地增加的库；</p><p>/opt额外安装的可选应用程序包所放置的位置。一般情况下，我们可以把tomcat等都安装到这里；</p><p>/proc虚拟文件系统目录，是系统内存的映射。可直接访问这个目录来获取系统信息；</p><p>/root超级用户(系统管理员)的主目录(特权阶级)；</p><p>/sbin存放二进制可执行文件，只有root才能访问。这里存放的是系统管理员使用的系统级别的管理命令和程序。如ifconfig等；</p><p>/dev用于存放设备文件；</p><p>/mnt系统管理员安装临时文件系统的安装点，系统提供这个目录是让用户临时挂载其他的文件系统；</p><p>/boot存放用于系统引导时使用的各种文件；</p><p>/lib存放跟文件系统中的程序运行所需要的共享库及内核模块。共享库又叫动态链接共享库，作用类似windows里的.dll文件，存放了根文件系统程序运行所需的共享文件；</p><p>/tmp用于存放各种临时文件，是公用的临时文件存储点；</p><p>/var用于存放运行时需要改变数据的文件，也是某些大文件的溢出区，比方说各种服务的日志文件(系统启动日志等。)等；</p><p>/lost+found这个目录平时是空的，系统非正常关机而留下“无家可归”的文件(windows下叫什么.chk)就在这里；</p><h2 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h2><p><img src="https://pic.imgdb.cn/item/6177db212ab3f51d91f61594.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Linux目录介绍&quot;&gt;&lt;a href=&quot;#Linux目录介绍&quot; class=&quot;headerlink&quot; title=&quot;Linux目录介绍&quot;&gt;&lt;/a&gt;Linux目录介绍&lt;/h2&gt;&lt;p&gt;/bin存放二进制可执行文件(ls,cat,mkdir等)，常用命令一般都在这里；&lt;/p&gt;
&lt;p&gt;/etc存放系统管理和配置文件；&lt;/p&gt;
&lt;p&gt;/home存放所有用户文件的根目录，是用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示；&lt;/p&gt;
&lt;p&gt;/usr用于存放系统应用程序，比较重要的目录/usr/local 本地系统管理员软件安装目录(安装系统级的应用)。这是最庞大的目录，要用到的应用程序和文件几乎都在这个目录；&lt;/p&gt;
&lt;p&gt;/usr/x11r6 存放x window的目录；&lt;/p&gt;
&lt;p&gt;/usr/bin 众多的应用程序；&lt;/p&gt;
&lt;p&gt;/usr/sbin 超级用户的一些管理程序；&lt;/p&gt;
&lt;p&gt;/usr/doc linux文档；&lt;/p&gt;
&lt;p&gt;/usr/include linux下开发和编译应用程序所需要的头文件；&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://asea.fun/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://asea.fun/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>数据结构oj</title>
    <link href="https://asea.fun/post/c8c632fe.html"/>
    <id>https://asea.fun/post/c8c632fe.html</id>
    <published>2021-10-06T08:46:24.000Z</published>
    <updated>2021-10-13T09:20:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="提纯"><a href="#提纯" class="headerlink" title="提纯"></a>提纯</h3><blockquote><p>记录一下我踩的坑吧…真够蠢的</p><ol><li>没加abs，因为题目是绝对值…</li><li>删除元素以后pos应该–，或者删除的时候pos不++，传参的时候传pos+1</li><li>拿一个指针记录上一次的位置！</li><li>把其它题目adt复制过来了，忘了原题是个循环链表…</li><li>new出来的数组没有初始化0…</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete_Equal_Node</span><span class="params">( LinkList&lt;ElemType&gt; &amp;A, <span class="keyword">int</span> N )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *arr = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">        arr[i] = <span class="number">0</span>;</span><br><span class="line">    LinkNode&lt;ElemType&gt; *p = A.GetHead()-&gt;next, *t;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    p = A.GetHead()-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!arr[<span class="built_in">abs</span>(p-&gt;data)])</span><br><span class="line">        &#123;</span><br><span class="line">            arr[<span class="built_in">abs</span>(p-&gt;data)] = <span class="number">1</span>;</span><br><span class="line">            t = p;</span><br><span class="line">            pos++;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p = t;</span><br><span class="line">            A.ListDelete(pos+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有序归并"><a href="#有序归并" class="headerlink" title="有序归并"></a>有序归并</h3><blockquote><p>当b比a长的时候，要把b接在a后边，还要注意b本身也要提纯。。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge_L_Order</span><span class="params">( LinkList&lt;ElemType&gt; &amp;A, LinkList&lt;ElemType&gt; &amp;B )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkNode&lt;ElemType&gt; *pa = A.GetHead()-&gt;next, *pb = B.GetHead()-&gt;next, *t1=A.GetHead(), *t2;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(pa)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!pb)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(pb-&gt;data &lt; pa-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            t2 = pb-&gt;next;</span><br><span class="line">            A.ListInsertNode(t1, pb);</span><br><span class="line">            pa = pb;</span><br><span class="line">            pb = t2;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pb-&gt;data == pa-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            t2 = pb-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> pb;</span><br><span class="line">            pb = t2;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pos ++;</span><br><span class="line">            t1 = pa;</span><br><span class="line">            pa = pa-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pb)</span><br><span class="line">        A.GetTail()-&gt;next = pb;</span><br><span class="line">    <span class="keyword">while</span>(pb &amp;&amp; pb-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(pb-&gt;next-&gt;data == pb-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            t1 = pb-&gt;next;</span><br><span class="line">            pb-&gt;next = t1-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> t1;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pb = pb-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pb)</span><br><span class="line">        A.SetTail(pb);</span><br><span class="line">    <span class="keyword">delete</span> B.GetHead();</span><br><span class="line">    B.GetTail()-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h2&gt;&lt;h3 id=&quot;提纯&quot;&gt;&lt;a href=&quot;#提纯&quot; class=&quot;headerlink&quot; title=&quot;提纯&quot;&gt;&lt;/a&gt;提纯&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;记录一下我踩的坑吧…真够蠢的&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;没加abs，因为题目是绝对值…&lt;/li&gt;
&lt;li&gt;删除元素以后pos应该–，或者删除的时候pos不++，传参的时候传pos+1&lt;/li&gt;
&lt;li&gt;拿一个指针记录上一次的位置！&lt;/li&gt;
&lt;li&gt;把其它题目adt复制过来了，忘了原题是个循环链表…&lt;/li&gt;
&lt;li&gt;new出来的数组没有初始化0…&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ElemType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Delete_Equal_Node&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( LinkList&amp;lt;ElemType&amp;gt; &amp;amp;A, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; N )&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *arr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[N+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        arr[i] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LinkNode&amp;lt;ElemType&amp;gt; *p = A.GetHead()-&amp;gt;next, *t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pos = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(p)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        p = p-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p = A.GetHead()-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(p)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!arr[&lt;span class=&quot;built_in&quot;&gt;abs&lt;/span&gt;(p-&amp;gt;data)])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            arr[&lt;span class=&quot;built_in&quot;&gt;abs&lt;/span&gt;(p-&amp;gt;data)] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            t = p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pos++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            p = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            A.ListDelete(pos+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        p = p-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;有序归并&quot;&gt;&lt;a href=&quot;#有序归并&quot; class=&quot;headerlink&quot; title=&quot;有序归并&quot;&gt;&lt;/a&gt;有序归并&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;当b比a长的时候，要把b接在a后边，还要注意b本身也要提纯。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Merge_L_Order&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( LinkList&amp;lt;ElemType&amp;gt; &amp;amp;A, LinkList&amp;lt;ElemType&amp;gt; &amp;amp;B )&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LinkNode&amp;lt;ElemType&amp;gt; *pa = A.GetHead()-&amp;gt;next, *pb = B.GetHead()-&amp;gt;next, *t1=A.GetHead(), *t2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pos = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(pa)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!pb)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pb-&amp;gt;data &amp;lt; pa-&amp;gt;data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            t2 = pb-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            A.ListInsertNode(t1, pb);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pa = pb;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pb = t2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pb-&amp;gt;data == pa-&amp;gt;data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            t2 = pb-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; pb;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pb = t2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pos ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            t1 = pa;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pa = pa-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pb)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        A.GetTail()-&amp;gt;next = pb;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(pb &amp;amp;&amp;amp; pb-&amp;gt;next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pb-&amp;gt;next-&amp;gt;data == pb-&amp;gt;data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            t1 = pb-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pb-&amp;gt;next = t1-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; t1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pb = pb-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pb)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        A.SetTail(pb);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; B.GetHead();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    B.GetTail()-&amp;gt;next = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


    
    </summary>
    
    
      <category term="笔记" scheme="https://asea.fun/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ADT" scheme="https://asea.fun/tags/ADT/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记</title>
    <link href="https://asea.fun/post/71513ccb.html"/>
    <id>https://asea.fun/post/71513ccb.html</id>
    <published>2021-09-23T14:08:07.000Z</published>
    <updated>2021-09-27T06:44:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue核心"><a href="#Vue核心" class="headerlink" title="Vue核心"></a>Vue核心</h1><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>不写了，参考文档</p><p>引入vue.js开发版的时候，控制台会提示，这个提示可以关掉。</p><p><code>Vue.config.productionTip = false</code></p><p><code>el</code>也可以通过`.$mount(‘#root’)挂载</p><p><strong>后面用到了es6的简写，如果不了解es6语法的可以适当补充一下</strong></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>vue不能挂在到html和body上。</li><li>vue作用范围包括子元素</li><li>建议使用id选择器</li><li>一个vue实例对应一个容器，<strong>一对一</strong></li><li>插值里可以写js表达式，一个表达式可以生成一个值（变量，运算，三元，函数…）</li><li>data里面写多个同名属性，会覆盖，只有最后一个有用。</li><li>methods里面的最好不要写箭头函数，否则会导致this从vue变成了window。</li></ol><h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2><blockquote><p>大概是vue的MVVM的原理</p></blockquote><p><code>Object.defineProperty</code>可以用来给一个对象添加属性，此时添加的属性是具有封装性质的属性，这个属性是否可枚举，可改，可删除都是可以设置的，默认都是false。该函数的参数有三个，分别是对象，属性名，和配置对象。配置对象里可以设置<code>get</code>和<code>set</code>函数，来决定该属性的值从哪里获取。而<code>vue</code>将<code>data</code>对象里的东西保存在自己的<code>_data</code>里，然后当访问<code>_data</code>或者修改时，便会调用<code>get</code>和<code>set</code>函数，从而达到数据更新的目的。且只有<code>data</code>里面的才会数据代理</p><p>我的感觉时重载了<code>.</code>运算符，用户访问vm.name便会调用vm._data.name，但是<code>_data</code>里进行了数据劫持，并不直接提供，而是再度进行封装。总之js的基于对象不是基于类的思路，而是走了<strong>原型</strong>这条路。具体关于js的面向对象可以参考<a href="https://blog.csdn.net/cpongo3/article/details/89026265">这里</a>。</p><h2 id="认识指令"><a href="#认识指令" class="headerlink" title="认识指令"></a>认识指令</h2><blockquote><p>vue主要的一些指令，后面详细解读其原理和更多用法</p></blockquote><p><code>&lt;h2 v-text=&quot;message&quot;&gt;&lt;/h2&gt;</code> 替换所有</p><p>支持字符串拼接</p><p><code>v-html</code>会按照html渲染</p><p><code>v-on:</code> 、<code>@</code>，可以传参，可以简写<code>@click = &quot;isHot = !isHot&quot;</code></p><p><code>v-show``v-if</code> 前者只改变display属性</p><p><code>v-bind:src = &quot;xxx&quot;</code>、<code>:src = &quot;&#123;active:isActive&#125;&quot;</code>可以使用对象形式或者三元表达式</p><p><code>v-model</code>双向绑定，只能用于输入型元素，需要有value属性，另外，<code>v-model:value</code>可以简写为<code>v-model</code></p><p><code>v-for = &quot;(item, index) in arr&quot;</code></p><p><code>v-message</code>和某个变量双向绑定</p><p><code>v-cloak</code>一个特殊的属性，没有值，vue在接管以后会删掉这个属性。因此，可以利用css来防止因为网速慢而显示出<code>&#123;&#123;&#125;&#125;</code>这样的插值表达式。cloak意思为斗篷。利用css属性选择器<code>[cloak]:&#123;display: none&#125;</code>就行了。</p><p><code>v-once</code>动态渲染之后，即为静态数据。</p><p><code>v-pre</code>跳过该元素的渲染，如果确定该元素不需要vue，那么加<code>v-pre</code>效率更高</p><h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><blockquote><p>事件修饰符是在事件名称后直接<code>.</code>一些属性，属于一些简便的写法。下边举几个例子</p></blockquote><ol><li><p>可以使用事件修饰符<code>@keyup.enter=&quot;myFun&quot;</code>表示回车键，类似的有delete，esc，space，up，down，left等等。特殊的例如CapsLock要用caps-lock。另外tab本身再keydown的时候会切换焦点，所以要想绑定需要用keydown。还有几个比较特殊的键，ctrl，alt，win，shift，当他们与keyup绑定的时候，需要组合键（alt+1)才能出发，keydown正常。如果想用自己的别名，需要再js配置一下，例如给回车键起别名：<code>Vue.config.keyCodes.huiche = 13</code>。</p></li><li><p>想传参就加括号，不想传参爱写不写！但是写了如果传参，记得多传一个$event，别搞丢了事件。</p></li><li><p>再有，<code>event</code>有一个<code>preventDefault()</code>的方法，也可以通过<code>@click.prevent</code>实现。<code>e.target</code>是触发事件的对象</p></li><li><p>同理，为了阻止事件冒泡，<code>e.stopPropagation()</code>，也可以用<code>@click.stop</code>代替。一共有六个事件修饰符。</p></li><li><p>还有<code>.once</code>表示一次性。</p></li><li><p>还可以连着写！<code>@click.stop.prevent</code>，<code>@click.ctrl.y</code></p></li></ol><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><blockquote><p>计算属性，在Vue的机制里，会通过getter计算出新的属性，最后成为vm的一个属性值，最终的计算属性只是一个属性值，不是对象！具体用法参见下边的代码。通过自动调用getter和setter来达到目的。</p><p>需要注意的是，当第一次加载fullName和所依赖的数据如firstName发生改变的时候，fullName会重新调用。如果依赖的数据没有发生变化，得益于vue的缓存机制，fullName的get只会在最开始调用一次，所以性能由于methods。</p><p>当修改fullName的值时，set函数调用。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    fullName:&#123;</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="built_in">this</span>.lastName;<span class="comment">//这里的this已经被重新定向为vm，切记不要用箭头函数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算属性的简写"><a href="#计算属性的简写" class="headerlink" title="计算属性的简写"></a>计算属性的简写</h3><blockquote><p>下面再来说一下计算属性的简写形式。</p><p>当你的计算属性不涉及setter的时候才可以简写，简写代码见下方。</p><p>你会发现简写之后的形式，就相当于methods里面的一个函数。但是不同的是，computed里面的函数是Vue调用执行的，最后计算完后成为了vm的一个属性。所以插值引用时不能加括号，这点和直接调用methods里的方法是不同的，且methods里的没有缓存机制和计算属性的一些独有的优化特点。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    <span class="function"><span class="title">fullName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="built_in">this</span>.lastName;<span class="comment">//这是一种简写形式，但是fullName不能去主动调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="监视（侦听）属性"><a href="#监视（侦听）属性" class="headerlink" title="监视（侦听）属性"></a>监视（侦听）属性</h2><blockquote><p>监视属性，顾名思义就是当某些属性发生改变的时候，会触发handler。这里说的属性包括上边提到的计算属性。如果写了不存在的属性，那么新旧值都是undefined，不报错。写法如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">    isHot:&#123;</span><br><span class="line">        <span class="comment">//此处举两个配置项</span></span><br><span class="line">immediate: <span class="literal">true</span>, <span class="comment">//一上来就调用，此时oldValue是undefined</span></span><br><span class="line"><span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为了灵活，也可以通过vm的$watch来调用，但是必须在Vue对象实例化之后才能调用</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,&#123;</span><br><span class="line">    immediate: <span class="literal">true</span>,</span><br><span class="line">    <span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">        。。。</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="深度监视"><a href="#深度监视" class="headerlink" title="深度监视"></a>深度监视</h3><blockquote><p>我们常常遇到这样的问题：当我们要监视的数据不是一个简单的数据类型时（例如一个对象），那么当我们改变了对象的一个属性，对象是否变了呢？本质来说，对象的地址没有变，那么可以认为对象是没有变化的。于是如果我们想监视对象的某个属性就需要用到把上边提到的<code>isHot</code>换成<code>&#39;对象名.属性&#39;</code>这里的引号时必不可少的，具体参见es语法，此处不多赘述。</p><p>但是当我们想要监视这个对象的任一属性时，我们直接写该对象时不行的，因为<code>watch</code>默认不会深度监视，所以需要我们打开这个配置，如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">    一个对象:&#123;</span><br><span class="line">        deep: <span class="literal">true</span> <span class="comment">//打开深度监视</span></span><br><span class="line">        <span class="comment">//此处举两个配置项</span></span><br><span class="line">immediate: <span class="literal">true</span>, <span class="comment">//一上来就调用，此时oldValue是undefined</span></span><br><span class="line"><span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监视属性的简写"><a href="#监视属性的简写" class="headerlink" title="监视属性的简写"></a>监视属性的简写</h3><blockquote><p>简写模式和计算属性类似，都需要只有一个函数配置项，这里对于watch和$watch的简写举例说明</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">    <span class="function"><span class="title">isHot</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">      ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="监视与计算的对比"><a href="#监视与计算的对比" class="headerlink" title="监视与计算的对比"></a>监视与计算的对比</h3><blockquote><p>两者某些功能都可以实现，计算属性相对于监视来说不需要再data里面提前定义好属性，所以更加简洁。但是计算属性完全依赖于return的值，所以对于类似定时器等功能无法正常实现，但是监视就方便了。不过需要注意的时，定时函数为什么不写function呢，这就需要了解一下js高级里面的this了，对于function，谁调用的function，this就是谁。但是箭头函数时没有this的，这时this指的就是外层的this，很显然，外层的this就是vm。所以这里不写fuction。</p><p>总结：vm管理的函数需要用function，除非不需要用到this，而如果不是vm管理的函数（例如定时器，ajax回调，promise回调），用箭头函数。总之，目的就是让this指向vm。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wahch:&#123;</span><br><span class="line">    <span class="function"><span class="title">firstName</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.fullName = val + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.lathName</span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="样式绑定"><a href="#样式绑定" class="headerlink" title="样式绑定"></a>样式绑定</h2><blockquote><p>一个标签如果写多个class属性<code>class=&#39;xxx&#39; class=&#39;yyy&#39;</code>，默认只解析第一个。在vue中，我们可以写<code>class = &#39;xxx&#39; :class=&#39;yyy&#39;</code>，两者并不冲突，此时，前者时正常的属性，后者时通过<code>v-bind</code>绑定js表达式，最终由vue一起绑定到class。这里的表达式可以是字符串变量，数组变量和对象，具体格式如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串就不写了</span></span><br><span class="line"><span class="comment">//数组也不写了，直接解析里面所有的属性</span></span><br><span class="line"><span class="comment">//对象</span></span><br><span class="line">classObj&#123;</span><br><span class="line">    class1: <span class="literal">true</span>, <span class="comment">//这里的true绑定一个boolean变量，表示样式的开关</span></span><br><span class="line">    class2: flase</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="style绑定"><a href="#style绑定" class="headerlink" title="style绑定"></a>style绑定</h3><blockquote><p>在上边讲过了class的绑定，这里再说一下style的绑定（虽然用的很少），但是还是介绍一下</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">:style = <span class="string">&quot;&#123;fontSize: 20px&#125;&quot;</span> <span class="comment">//这里需要些样式对象，或者对象数组，注意font-size要写成fontSize</span></span><br></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p><code>v-show = &quot;js表达式&quot;</code></p><p><code>v-if</code></p><p><code>v-else-if</code>    如果上边的v-if满足，那么后面的v-else-if不判断。</p><p><code>v-else</code> 用法我就不用说了吧，猜也能猜到👵不过需要注意的是，通过v-if控制的几条不能被打断。</p><h3 id="v-if与-lt-template-gt"><a href="#v-if与-lt-template-gt" class="headerlink" title="v-if与&lt;template&gt;"></a><code>v-if</code>与<code>&lt;template&gt;</code></h3><blockquote><p>当我们需要个一些元素添加样式，又不想一个一个添加，又不想增加父元素，可以用如下的方法，效果实现了，且在dom里面没有template元素，<strong>template不能和v-show使用。</strong></p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span> = <span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hhh<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hhh<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><blockquote><ol><li>可以有两个形参，虽然不加括号也行，但是建议加上</li><li>key值Vue用来对比前后的虚拟dom的，如果变更以后的虚拟dom和旧的一样，那么就不再重新渲染，而是直接复用，节省效率。所以当你的列表需要变化，例如排序，增删，那么key就非常重要，默认key是index，你需要加一个:key = p.id之类的专用key，防止列表出现问题，尤其是包含input输入框的时候，容易出岔子。</li><li>遍历的对象不一定是数组，也可以是对象，也可以是字符串，具体不多解释，试试就知道了。</li></ol></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p, index) in persons&quot;</span> <span class="attr">:key</span> = <span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;p.name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数据监测"><a href="#数据监测" class="headerlink" title="数据监测"></a>数据监测</h2><blockquote><p>这是一块复杂的知识，但是如果不搞懂底层的逻辑，可能会在数据监测中遇到很多问题。首先，我们在<code>data</code>里面写的数据会被加载到vm的<code>_data</code>上，同时，这些属性也会在vm的根节点上，也就是说我们可以直接访问<code>vm.property</code>，然后通过调用get来访问<code>_data</code>里面的属性，<code>_data</code>里的属性同样需要getter，共有两层的getter。为什么要这样呢，前者是为了调用方便，不然每次多要写<code>_data</code>也太不爽了，后者是为了监测数据，你想，当你修改data里的某个数据时，vm如果不知道，那还怎么监测并重新解析数据呢。因此，需要用到<code>_data</code>里面的getter和setter，当你修改数据时，调用了<code>set</code>，从而实现检测的效果。</p></blockquote><p> 上边大概说明白了监测实质就是vue将你写在data里面的东西加工了。但是当加工以后，我们还想再往里面添加属性怎么办呢，这就需要深入探讨一下了。</p><p> 大概分为两种情况，一个是往一个<strong>对象</strong>里添加属性，一个是往<strong>数组</strong>里添加数据。</p><p> 前者，很容易想到<code>obj.name = &#39;jack&#39;</code>这样的例子，以为我们拿到对象节点就万事大吉，但是不然，这样添加的属性是没有监测效果的，也就是说没有对应的getter和setter，那么怎么办呢，vue提供了解决办法，你可以通过<code>Vue.set(obj, property, value)</code>来添加属性。</p><p> 后者，我们可以借鉴对象的方式，因为数组毕竟也是个对象，万物皆对象嘛，我们可以将property换成index即可。<code>Vue.set(arr, index, value)</code>。但同时，vue也对数组进行了专门的优化，首先数组里面的每个数据是没有对应的getter和setter的，那么当我们修改数组的数据时，vue怎么判断呢？其实，vue专门对数组的几个函数进行了修改，<code>push pop  shift unshift splice sort reverse</code>这几个函数是可以修改原数组的值的，当我们通过这几个函数来修改数组的时候，vue就可以检测到了。切记不要直接通过索引值来修改。</p><p>最后说一下细节问题，数组里面如果是对象，那么这个对象的属性是有getter、setter的。</p><h2 id="表单收集"><a href="#表单收集" class="headerlink" title="表单收集"></a>表单收集</h2><blockquote><p>我们知道，一想到表单收集，肯定就是<code>v-model</code>了，但是需要注意些特殊的坑，毕竟表单有单选，复选，单行，多行等。</p></blockquote><ol><li><code>&lt;input type = &#39;text&#39; v-model=&#39;account&#39;/&gt;</code>收集到的是输入的数据</li><li><code>&lt;input type = &#39;radio&#39; v-model=&#39;account&#39; value=&#39;sex&#39;/&gt;</code>单选框，收集到的是value，由于没有输入，默认是null，所以需要配置value属性。</li><li><code>&lt;input type = &#39;checkbox&#39; v-model=&#39;account&#39;/&gt;</code><ol><li>如果不配置input，默认手机checked属性，即布尔值</li><li>如果配置<ul><li>当v-model初始值不是数组，收集的还是checked</li><li>否则收集的是value组成的数组。</li></ul></li></ol></li><li>修饰符<ol><li>lazy：失去焦点再收集</li><li>number：收集类型转成数字</li><li>trim：去除前后空格</li></ol></li></ol><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><blockquote><p>其实vue指令本质不就是底层在操作dom嘛，所以你只需要自己写一个指令名，例如<code>v-hello</code>，当你在配置项里配置好hello，那么就可以用了。代码如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:</span><br><span class="line">    data:</span><br><span class="line">    directives&#123;</span><br><span class="line">    hello(element, binding)</span><br><span class="line">&#123;</span><br><span class="line">            element.innerText = binding.value <span class="comment">//就不用多说了吧，两个参数，一个是dom元素，一个是绑定对象，包括了表达式，值等等很多属性，我直呼vue太贴心了。</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="完整"><a href="#完整" class="headerlink" title="完整"></a>完整</h3><blockquote><p> 但是有一些特殊的需求，例如<code>el.focus()</code>，有些命令只能在元素插入到页面以后才能执行。这时候我们就要考虑到自定义指令的调用时机了。</p><p>上一个简写模式，只有在最开始绑定以及随后重新解析模板的时候才会调用，也就是没有inserted。并没有所谓的“元素插入页面以后调用”，那么就来看看完全体吧，上代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:</span><br><span class="line">    data:&#123;&#125;</span><br><span class="line">    directives&#123;</span><br><span class="line">    hello:</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="function"><span class="title">bind</span>(<span class="params">ele, bindind</span>)</span>&#123;&#125; <span class="comment">//绑定时调用</span></span><br><span class="line"><span class="function"><span class="title">inserted</span>(<span class="params">ele, bindind</span>)</span>&#123;&#125; <span class="comment">//插入以后调用</span></span><br><span class="line"><span class="function"><span class="title">update</span>(<span class="params">ele, binding</span>)</span>&#123;&#125; <span class="comment">//模板更新时调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol><li>vue默认会转成小写，所以命名不要驼峰命名，而是要用v-user-name这样的命名，具体叫啥，我没记住。</li><li>如果想写全局firective，就用<code>Vue.directive(&#39;hello&#39;, function()&#123;...&#125;)</code>，和全局的过滤器是一样的，但是什么是全局过滤器呢，我听了，但是不想写了。反正就是<code>filters filter</code>之类的，好像vue3被弃用了，听听算了。</li><li>this是<strong>window</strong></li></ol><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><blockquote><p>来了！重点来了。</p></blockquote><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:</span><br><span class="line">    data:&#123;&#125;</span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123; <span class="comment">//第一次加载并把元素挂载到页面以后</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><img src="https://pic.imgdb.cn/item/614ec6632ab3f51d918effba.jpg" alt="生命周期"></p><h3 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h3><ol><li>重点关注mounted和beforeDestroy。</li><li>在后者里修改数据不会再触发更新</li></ol><h2 id="一些片段"><a href="#一些片段" class="headerlink" title="一些片段"></a>一些片段</h2><blockquote><p>跟着教程敲的一些片段</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">&quot;sub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">      el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">      data:&#123;</span><br><span class="line">        num: 1</span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line"><span class="javascript">        add:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.num++;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        sub:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.num--;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span> = <span class="string">&quot;isShow&quot;</span>&gt;</span>嘿嘿嘿<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">&quot;toggle&quot;</span>&gt;</span>显示/隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">      el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">      data:&#123;</span><br><span class="line"><span class="javascript">        isShow: <span class="literal">true</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line"><span class="javascript">        toggle:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.isShow = !<span class="built_in">this</span>.isShow</span></span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><blockquote><p>axios回调函数里面的this已经改变，无法在会点函数内部通过this访问data，可以在回调之前拿一个变量保存一下this</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.get(url).then</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.post(url,data).then</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h1><blockquote><p>在常规编写中，为了复用，有了模块的概念，也就是分成多个js。而这里的组件化，是撒子呢。看下去</p></blockquote><h2 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h2><blockquote><p>虽然开发中不太常用，但这里还是写一些基本的用法</p></blockquote><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = Vue.extend(</span><br><span class="line">&#123;</span><br><span class="line">    template:<span class="string">`这里写html模板可以多行`</span>，</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//data这里不能写对象，而是写函数，因为要拷贝而不是指向同一个</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:</span><br><span class="line">    data:</span><br><span class="line">    components:&#123;</span><br><span class="line">    school: s <span class="comment">//注册组件</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="细节-2"><a href="#细节-2" class="headerlink" title="细节"></a>细节</h3><ol><li><p>命名</p><ul><li>一个单词可以首字母大写也可以不大写</li><li>多个单词可以（kebab-case)也可以大驼峰(CamelCase)，但是不在脚手架里，大驼峰是不支持的。</li></ul></li><li><p>标签可以写双标签<code>&lt;school&gt;&lt;/school&gt;</code>，也可以但标签<code>&lt;school/&gt;</code>，但是如果不在脚手架，但标签会导致后续组件无法渲染</p></li><li><p>简写</p><p>const school = Vue.extend(options) 可以简写为 const school = options</p><p>原理就是，如果你在传入的是一般对象，那么vue会自动调用extend</p></li></ol><h3 id="嵌套组件"><a href="#嵌套组件" class="headerlink" title="嵌套组件"></a>嵌套组件</h3><blockquote><p>把一个组件当成html，同时把子组件挂载到父组件上。顺序要注意，子组件要在前面。其实每个组件就是一个VueComponent实例，简称vc实例，vc和vm类似，this指向vc，vc是在vm的$children属性里。两个构造函数Vue和VueComponent类似，但是不一样，例如vc里面不能传el，再例如，data在vc里必须是函数，vm里可以是对象。而且正是由于vc是可以复用的，所以data不能写对象。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> b = Vue.extend(</span><br><span class="line">&#123;</span><br><span class="line">    template:<span class="string">``</span>， </span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> s = Vue.extend(</span><br><span class="line">&#123;</span><br><span class="line">    template:<span class="string">`这里写html模板可以多行&lt;b&gt;&lt;b/&gt;`</span>，<span class="comment">//挂在子组件</span></span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//data这里不能写对象，而是写函数，因为要拷贝而不是指向同一个</span></span><br><span class="line">&#125;</span><br><span class="line">components:&#123;</span><br><span class="line">        boy: b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:</span><br><span class="line">    data:</span><br><span class="line">    components:&#123;</span><br><span class="line">    school: s <span class="comment">//注册组件</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="关于原型"><a href="#关于原型" class="headerlink" title="关于原型"></a>关于原型</h3><blockquote><p>在Vue中做了一件事，那就是把VueComponent的原型的原型指向了Vue的原型，而不是Object。具体关于原型的理解，我是这么想的，一个构造函数，本身就是一个对象，他有一个属性是<code>prototype</code>，称为显示原型属性，这个属性里存放的东西可以理解为一个类的静态属性。在这个属性里的东西，所有由该构造函数new的对象通过<code>.__proto__</code>（隐式原型属性）共享。而Vue将VueComponent构造函数的<code>prototype</code>的<code>__proto__</code>的指向从Object修改成了Vue的原型对象，以至于组件可以访问Vue中的显示属性。如果还是不太理解，可以去补充一下js高级。js的面向对象和c++和java还是有还很大区别的。</p></blockquote><h2 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h2><blockquote><p>终于来了，后缀是.vue，简单说一下组件化的运行逻辑，首先入口是一个html和一个main.js，这个main.js不需要你手动引入，只需要在main.js引入Vue和app组件，然后里面配置好Vue实例，配置好需要的组件（其实只有一个app组件），挂载到对应的html文件上（render）即可。下面是一个组件（.vue）的模板，分为三块，template script style。另外public里面的html文件用到了jsp语法，自己学吧。html里面的<code>&lt;noscript&gt;</code>标签，表示不支持js的时候才解析里面的内容。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">        &#123;&#123;msg&#125;&#125; &#x2F;&#x2F;template下必须有一个根节点</span><br><span class="line">    &lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">    name: Student, &#x2F;&#x2F;为了让其它组件引入，需要export</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">... 没有就可以不写</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><blockquote><p>由于运行时vue缺少模板渲染，所以用render来替代</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">render: <span class="function"><span class="params">h</span> =&gt;</span> h(App); <span class="comment">//vue将会向h传递一个creatElement的函数，来创建元素，且不需要配置component。另外，h的形参传递组件例如App，则如上。如果传html代码，则h(&#x27;h1&#x27;,&#x27;Heloo&#x27;)。</span></span><br></pre></td></tr></table></figure><h3 id="修改默认配置"><a href="#修改默认配置" class="headerlink" title="修改默认配置"></a>修改默认配置</h3><blockquote><p>想查看Vue-cli的默认配置，只需要控制台<code>vue inspect &gt; output.js</code>，就可以导出所有的配置项目，生成一个js。该文件修改是无效的。如何修改呢？</p></blockquote><p>对于main.js src public index.html favicon.ico就别修改了，能够修改的可以去<a href="https://cli.vuejs.org/zh/config/">这里</a>参考一下。具体过程就是在根目录（和package.json同级）创建一个<code>vue.config.js</code>，参照官网的配置项修改。该文件暴露采用common.js，最后和webpack的配置整合。</p><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><blockquote><p>为了获取元素和组件，vue自定义的一个属性ref，如下当我们给一个元素或者组件加上ref属性以后，就可以通过<code>this.$refs.title</code>拿到这个元素或者组件。和id类似，但是对于组件，通过id拿到的组件是渲染之后的组件而不是组件本体。</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span> = <span class="string">&#x27;title&#x27;</span>&gt;</span></span><br><span class="line">    hhh</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="prop"><a href="#prop" class="headerlink" title="prop"></a>prop</h3><ol><li><p>功能：让组件接收外部传过来的数据（组件传参）</p></li><li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot; sex=&quot;hhh&quot;/&gt;</code>，这里如果是<code>:name=&quot;xxx&quot;</code>那么xxx会按照js表达式解析</p></li><li><p>接收数据：</p><ol><li>第一种方式（只接收）：<code>props:[&#39;name&#39;]</code></li><li>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></li><li>第三种方式（限制类型、限制必要性、指定默认值）：</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">   </span><br><span class="line">name:&#123;</span><br><span class="line">   </span><br><span class="line">type:<span class="built_in">String</span>, <span class="comment">//类型</span></span><br><span class="line">   </span><br><span class="line">required:<span class="literal">true</span>, <span class="comment">//必要性</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">default</span>:<span class="string">&#x27;老王&#x27;</span> <span class="comment">//默认值</span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Vue核心&quot;&gt;&lt;a href=&quot;#Vue核心&quot; class=&quot;headerlink&quot; title=&quot;Vue核心&quot;&gt;&lt;/a&gt;Vue核心&lt;/h1&gt;&lt;h2 id=&quot;快速入门&quot;&gt;&lt;a href=&quot;#快速入门&quot; class=&quot;headerlink&quot; title=&quot;快速入门&quot;&gt;&lt;/a&gt;快速入门&lt;/h2&gt;&lt;h3 id=&quot;入门&quot;&gt;&lt;a href=&quot;#入门&quot; class=&quot;headerlink&quot; title=&quot;入门&quot;&gt;&lt;/a&gt;入门&lt;/h3&gt;&lt;p&gt;不写了，参考文档&lt;/p&gt;
&lt;p&gt;引入vue.js开发版的时候，控制台会提示，这个提示可以关掉。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Vue.config.productionTip = false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;el&lt;/code&gt;也可以通过`.$mount(‘#root’)挂载&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;后面用到了es6的简写，如果不了解es6语法的可以适当补充一下&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;vue不能挂在到html和body上。&lt;/li&gt;
&lt;li&gt;vue作用范围包括子元素&lt;/li&gt;
&lt;li&gt;建议使用id选择器&lt;/li&gt;
&lt;li&gt;一个vue实例对应一个容器，&lt;strong&gt;一对一&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;插值里可以写js表达式，一个表达式可以生成一个值（变量，运算，三元，函数…）&lt;/li&gt;
&lt;li&gt;data里面写多个同名属性，会覆盖，只有最后一个有用。&lt;/li&gt;
&lt;li&gt;methods里面的最好不要写箭头函数，否则会导致this从vue变成了window。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://asea.fun/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Vue" scheme="https://asea.fun/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记</title>
    <link href="https://asea.fun/post/295082ac.html"/>
    <id>https://asea.fun/post/295082ac.html</id>
    <published>2021-09-22T04:16:06.000Z</published>
    <updated>2021-09-23T14:11:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><ol><li><p>服务端口默认<code>3306</code></p></li><li><p>安装的时候选择自动添加<code>path</code></p></li><li><p>编码格式<code>utf8</code></p></li><li><p>windows启动服务</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net start 服务名称（mysql）</span><br><span class="line">net stop 服务名称</span><br></pre></td></tr></table></figure></li></ol><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><ol><li><p>首先确保mysql服务已经打开，不确定话<code>net start mysql</code>试试</p></li><li><p><code>mysql -uroot -pxxxx</code></p><p>xxxx为你的密码，也可以不显示密码登录</p><p><code>mysql -uroot -p</code></p><p>然后输入密码（此时密码以*显示）即可登录。</p></li></ol><h3 id="密码重置（8-0-23）"><a href="#密码重置（8-0-23）" class="headerlink" title="密码重置（8.0.23）"></a>密码重置（8.0.23）</h3><blockquote><p>网上老的教程可能已经过时，8.0以上不支持<code>mysqld --skip-grant-tables</code></p></blockquote><ol><li><p>打开命令窗口cmd，输入命令：<code>net stop mysql</code>，停止MySQL服务，</p></li><li><p>开启跳过密码验证登录的MySQL服务，输入命令，然后不要关闭此窗口，命令如下：</p><p> <code>mysqld --console --skip-grant-tables --shared-memory</code></p></li><li><p>再打开一个新的cmd，无密码登录MySQL，输入登录命令：<code>mysql -u root -p</code>，然后回车即可</p><ol start="4"><li>密码置为空，命令如下：</li></ol><p><code>use mysql</code></p><p><code>update user set authentication_string=&#39;&#39; where user=&#39;root&#39;;</code></p><ol start="5"><li><p>退出，命令如下</p><p><code>quit</code></p></li></ol></li><li><p>关闭以<code>-console --skip-grant-tables --shared-memory</code>启动的MySQL服务（即关闭第一个打开的cmd窗口）</p><ol start="7"><li><p>打开cmd，输入：<code>net start mysql</code>启动MySQL服务。</p></li><li><p>步骤4密码已经置空，所以无密码状态登录MySQL，输入登录命令：mysql -u root -p，然后回车即可登录</p></li><li><p>修改密码，如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> 你的密码<span class="string">&#x27;;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>验证更改后密码正确登录</p></li><li><p>输入quit，退出当前登录，输入登录命令：<code>mysql -u root -p</code></p></li><li><p>输入密码，成功登录，到此，重置密码结束。</p></li></ol><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><blockquote><p>以<code>;</code>结尾</p></blockquote><p><code>show databases;</code></p><p><code>use test</code></p><p><code>create database test2;</code></p><p><code>quit\exit</code></p><p><code>show tables;</code></p><p><code>source D:\xxx\xxx\xxx.sql</code></p><p><code>select version();</code></p><p><code>select database();</code></p><p><code>\c</code>终止写了一半的语句</p><h2 id="SQL语句简介"><a href="#SQL语句简介" class="headerlink" title="SQL语句简介"></a>SQL语句简介</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol><li><p>DQL：查询（select）</p></li><li><p>DML：对表中的数据进行增删改，操作（insert delete update）</p><hr><p>以下是了解一下</p></li><li><p>DDL：定义，（create drop alter）操作表结构增删改</p></li><li><p>TCL：事务控制</p><ol><li>事务提交：commit</li><li>事务回滚：rollback</li></ol></li><li><p>DCL：控制（授权，撤销授权等）</p></li></ol><h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">desc tableName; //查询表的结构</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">form</span> dept;//查询一个子段</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,age <span class="keyword">from</span> dept;//查询多个字段</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tableName; //查询所有字段，效率低，可读性差</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> hhh <span class="keyword">from</span> dept;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">as</span> hhh <span class="keyword">from</span> dept;//起别名</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="string">&#x27;my hhh&#x27;</span> <span class="keyword">from</span> dept;//别名有空格加引号（单双都可，单最好用单引号，单引号是标准 ，如果别名是中文也要引号）</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, age*<span class="number">12</span> <span class="keyword">from</span> dept;//可以使用数学表达式</span><br><span class="line"><span class="keyword">select</span> 这里写个字符串或者数字（字面值） <span class="keyword">from</span> emp;//返回的是n个字符串或数字，了解一下（查看表的结构）</span><br></pre></td></tr></table></figure><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> dept <span class="keyword">where</span> age = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> dept <span class="keyword">where</span> age &lt;&gt; <span class="number">12</span>;//就是!=的意思</span><br><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">&#x27;smith&#x27;</span>;</span><br><span class="line"></span><br><span class="line">//常用的条件</span><br><span class="line">=</span><br><span class="line">&lt;&gt; !=</span><br><span class="line">&lt;</span><br><span class="line">&lt;=</span><br><span class="line">&gt;</span><br><span class="line">&gt;=</span><br><span class="line">between ... and ...//等同于下边  的</span><br><span class="line">&gt;= and &lt;= </span><br><span class="line">is null//null 不能用=</span><br><span class="line">is not null</span><br><span class="line">and</span><br><span class="line">or //and优先级大于or，可以加括号</span><br><span class="line">in//后面跟个python中的list</span><br><span class="line">not in</span><br><span class="line"></span><br><span class="line">//模糊查询</span><br><span class="line">like</span><br><span class="line">%表示任意多个字符</span><br><span class="line">_表示任意一个字符</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">like</span> <span class="string">&#x27;%T%&#x27;</span>;  //如果包含下划线等可以用\转义；</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">ename,sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">sal (<span class="keyword">asc</span>); //升序，也可以用别名排序</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">ename,sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">sal <span class="keyword">desc</span>; //降序</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">ename,sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">sal <span class="keyword">asc</span>, ename <span class="keyword">asc</span>; //多关键字排序</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">ename,sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line"><span class="number">2</span>; //按照第二列排序（不建议这么写）</span><br></pre></td></tr></table></figure><h3 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h3><blockquote><p>from，where，select，order顺序不能变</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename, sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> sal <span class="keyword">between</span> <span class="number">1000</span> <span class="keyword">and</span> <span class="number">2000</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h3 id="单行处理函数"><a href="#单行处理函数" class="headerlink" title="单行处理函数"></a>单行处理函数</h3><blockquote><p>一个输入对应一个输出</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">lower upper</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">lower</span>(ename) <span class="keyword">as</span> ename <span class="keyword">from</span> emp;//注意别名</span><br><span class="line"></span><br><span class="line">substr</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">substr</span>(enmae, <span class="number">1</span>, <span class="number">1</span>) <span class="keyword">as</span> ename <span class="keyword">from</span> emp;//起始下标，从1开始，后面是截取长度</span><br><span class="line"></span><br><span class="line">contact(&#x27;a&#x27;, &#x27;b&#x27;);//字符串拼接</span><br><span class="line"></span><br><span class="line">length(name);</span><br><span class="line"></span><br><span class="line">trim(name);//去除前后空白 ltrim， rtrim</span><br><span class="line"></span><br><span class="line">round(double, n);//保留n个小数（四舍五入）n如果是-1的话，嘿嘿你试试</span><br><span class="line"></span><br><span class="line">rand()</span><br><span class="line"></span><br><span class="line">ifnull(数据，值)//有null参与的运算结果都是null，所以用ifnull来把null替换成一个值，如ifnull(sal, 0);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> ename, job (<span class="keyword">case</span> job <span class="keyword">when</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="keyword">then</span> sal*<span class="number">1.1</span> <span class="keyword">when</span> <span class="string">&#x27;SALESMAN&#x27;</span> <span class="keyword">then</span> sal*<span class="number">1.5</span> <span class="keyword">else</span> sal) <span class="keyword">as</span> newsalary <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h3><blockquote><p>输入多行，输出一行，自动忽略null</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">不分组的话默认整张表是一组</span><br><span class="line"> max()</span><br><span class="line"> min()</span><br><span class="line"> sum()</span><br><span class="line"> avg() //不考虑null的行</span><br><span class="line"> count()</span><br><span class="line"> </span><br><span class="line"> count (*) from emp;//即总行数</span><br><span class="line"> </span><br></pre></td></tr></table></figure><ol><li>分组函数不能直接使用在where中      </li><li>分组函数可以连起来用</li></ol><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><ol><li><p>例如计算每个部门的工资和</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ...</span><br><span class="line"><span class="keyword">from</span> ...</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> ...</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>关键字的执行顺序</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> job,<span class="keyword">sum</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno;//当分组的时候，<span class="keyword">select</span>只能跟分组函数和用来分组的字段名。</span><br></pre></td></tr></table></figure><p>where不能用分组函数，只能用having，但是having不能单独用，且能用where尽量用where</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">from</span><br><span class="line">where</span><br><span class="line">group by //后面跟多个字段时，相当于把两个字段合成一个字段</span><br><span class="line">having</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br></pre></td></tr></table></figure><h3 id="一些关键字"><a href="#一些关键字" class="headerlink" title="一些关键字"></a>一些关键字</h3><p><code>distinct</code>去重</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> job,deptno <span class="keyword">from</span> emp;//表示job 和deptno当成一个字段来去重</span><br><span class="line"><span class="keyword">select</span> job, <span class="keyword">distinct</span> deptno <span class="keyword">from</span> emp;//错误写法</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span> (disinct job) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><blockquote><p>从一张表叫单表查询，多个表称为连接查询，分为SQL92,SQL99，重点学习99</p></blockquote><p>根据连接方式分类：</p><ul><li>内连接<ul><li>等值连接</li><li>非等值连接</li><li>自连接</li></ul></li><li>外连接<ul><li>左外连接（左连接）</li><li>右外连接（右连接）</li></ul></li><li>全连接（不讲）</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,dname <span class="keyword">from</span> emp,dept;//没有限制会匹配所有的（结果是两个行数乘积）笛卡尔积</span><br><span class="line"><span class="keyword">select</span> e.ename, d.dname <span class="keyword">from</span> emp e, dept d <span class="keyword">where</span> e,deptno = d.deptno;//注意from后面起的别名，以及.的应用</span><br></pre></td></tr></table></figure><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><h5 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//sql92语法</span><br><span class="line"><span class="keyword">select</span> e.ename, d.dname <span class="keyword">from</span> emp e, dept d <span class="keyword">where</span> e,deptno = d.deptno <span class="keyword">and</span> 其他条件;</span><br><span class="line"></span><br><span class="line">//sql99语法</span><br><span class="line"><span class="keyword">select</span> e.name, d.dname <span class="keyword">from</span> emp e (<span class="keyword">inner</span>) <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno = d.deptno <span class="keyword">where</span> 过滤条件；</span><br></pre></td></tr></table></figure><blockquote><p>注意，92的语法结构不清晰，因为表连接的条件和数据筛选条件放在一起，结构不清晰。99的on用来表连接条件，where用来筛选数据。结构清晰，92不用了！太tm老了！</p></blockquote><p><code>inner</code>可以省略，妈的，虽然可读性好，一眼就看出来了内连接，但是很麻烦，省略了吧</p><h5 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.ename, e.sal, s.grade</span><br><span class="line"><span class="keyword">from</span> emp e (<span class="keyword">inner</span>) <span class="keyword">join</span> salgrade s</span><br><span class="line"><span class="keyword">on</span> e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal; </span><br></pre></td></tr></table></figure><h5 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h5><blockquote><p>一张表看成两张表，分别起别名，最后会少一个，因为有个NULL！领导查不出来了！</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e1.ename, e2.ename</span><br><span class="line"><span class="keyword">from</span> emp e1 <span class="keyword">join</span> emp e2</span><br><span class="line"><span class="keyword">on</span> e1.mgr = e2.empno;</span><br></pre></td></tr></table></figure><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><h5 id="左、右连接"><a href="#左、右连接" class="headerlink" title="左、右连接"></a>左、右连接</h5><blockquote><p>在join前加left或者right，即转换为外连接，outer可以省略。以left为例，在on的基础上，如果join左边表某一条在右边中没有匹配，那么依然显示。因此，left使左边表成为主表，right相反。而内连接两个表是平等的。</p></blockquote><figure class="highlight"><table><tr><td class="code"><pre><span class="line">//对上边自连接的改进</span><br><span class="line">mysql&gt; select e1.ename, e2.ename</span><br><span class="line">    -&gt; from emp e1 left (outer) join emp e2</span><br><span class="line">    -&gt; on e1.mgr = e2.empno;</span><br></pre></td></tr></table></figure><h5 id="全连接"><a href="#全连接" class="headerlink" title="全连接"></a>全连接</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; select e1.ename, e2.ename</span><br><span class="line">    -&gt; from emp e1 full (outer) join emp e2</span><br><span class="line">    -&gt; on e1.mgr = e2.empno;</span><br></pre></td></tr></table></figure><h5 id="交叉连接"><a href="#交叉连接" class="headerlink" title="交叉连接"></a>交叉连接</h5><blockquote><p>用笛卡尔积，返回所有的匹配</p></blockquote><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; select e1.ename, e2.ename</span><br><span class="line">    -&gt; from emp e1 cross (outer) join emp e2</span><br></pre></td></tr></table></figure><h4 id="多张表的连接"><a href="#多张表的连接" class="headerlink" title="多张表的连接"></a>多张表的连接</h4><blockquote><p>内外join可以混合使用</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.ename, d.dname, e.sal, s.grade</span><br><span class="line"><span class="keyword">from</span> emp e </span><br><span class="line"><span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno = d.deptno</span><br><span class="line"><span class="keyword">join</span> salgrade s <span class="keyword">on</span> e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><blockquote><p>嵌套查询</p><p>把一个查询结果放在select、from、where后面</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; (<span class="keyword">select</span> <span class="keyword">min</span>(sal) <span class="keyword">from</span> emp);//不能直接在where里使用分组函数</span><br></pre></td></tr></table></figure><blockquote><p>当放在select后面时，了解一下</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal,(selct dname <span class="keyword">from</span> dept <span class="keyword">where</span> dept.depno = emp.depno) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><blockquote><p>可以将两个结果拼接起来，但是两个结果的列数应该一样，表头和第一个一样。oracle要求数据类型也要一样。</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ........</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> ........;</span><br></pre></td></tr></table></figure><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><blockquote><p>放在最后，限制取出数量 limit startIndex(缺省值0）, length</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">2</span>,<span class="number">3</span>; //第三到第五</span><br></pre></td></tr></table></figure><blockquote><p>常用来分页显示</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">0</span>,<span class="number">3</span>;</span><br><span class="line">//第一页</span><br><span class="line">limit 3,3;</span><br><span class="line">//第二页</span><br><span class="line">limit 6,3;</span><br><span class="line">//第三页</span><br><span class="line">limit 9,3;</span><br></pre></td></tr></table></figure><h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> talbe_name(</span><br><span class="line">字段名<span class="number">1</span> 数据类型，</span><br><span class="line">    字段名<span class="number">2</span> 数据类型</span><br><span class="line">)；</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_student(</span><br><span class="line"><span class="keyword">no</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    sex <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;m&#x27;</span>,//通过<span class="keyword">default</span>指定默认值，否则为<span class="literal">NULL</span></span><br><span class="line">    age <span class="built_in">int</span>(<span class="number">3</span>),</span><br><span class="line">    email <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">varchar 可变长度字符串，比较智能，会根据实际长度分配空间，最长255</span><br><span class="line">char 定长字符串，效率高，浪费空间，性别给我用char！最长255</span><br><span class="line">int 最长11</span><br><span class="line">bigint</span><br><span class="line">float</span><br><span class="line">double</span><br><span class="line">date 短日期</span><br><span class="line">datetime 长日期</span><br><span class="line">clob 字符大对象（最多可以存储4G的字符串，例如存储一个文章）charactor large object</span><br><span class="line">blob 二进制大对象 binary large object（插入的时候需要用到io流）</span><br></pre></td></tr></table></figure><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> t_student;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> t_student;//不会报错</span><br></pre></td></tr></table></figure><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><h3 id="增insert"><a href="#增insert" class="headerlink" title="增insert"></a>增insert</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(字段名<span class="number">1</span>， 字段名<span class="number">2</span>) <span class="keyword">values</span>(值<span class="number">1</span>， 值<span class="number">2</span>);//如果字段名和括号都不写，那么值需要一一对应。不建议不x</span><br></pre></td></tr></table></figure><h4 id="插入date类型"><a href="#插入date类型" class="headerlink" title="插入date类型"></a>插入date类型</h4><blockquote><p>假设有一个字段是date类型，那么怎么插入呢</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(<span class="keyword">id</span>, <span class="keyword">name</span>, birth) <span class="keyword">values</span>(<span class="number">2</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="keyword">str_to_date</span>(<span class="string">&#x27;1990-10-01&#x27;</span>,<span class="string">&#x27;%Y-%m-%d&#x27;</span>));</span><br></pre></td></tr></table></figure><p>以上语句需要注意的是：</p><ol><li><p><code>str_to_date()</code>第一个参数是字符串，第二个是对应的日期格式，分别有<code>%Y %m %d %h %i %s</code>注意大小写。</p></li><li><p>当要select的时候可以用<code>date_format()</code>来转换，如果不转换默认是上边的格式，即年-月-日。</p></li><li><p><strong>当字符串是年月日的类型时，可以直接传字符串</strong>。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(<span class="keyword">id</span>, <span class="keyword">name</span>, birth) <span class="keyword">values</span>(<span class="number">2</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;1990-10-01&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ol><h4 id="date与datetime"><a href="#date与datetime" class="headerlink" title="date与datetime"></a>date与datetime</h4><ol><li><code>datetime</code>包括年月日时分秒。</li><li>长日期默认格式是<code>%Y-&amp;m-%d %h:%i:%s</code></li><li>具体用法同<code>date</code></li><li><code>now()</code>获取当前系统时间，类型是<code>datetime</code></li></ol><h3 id="删delete"><a href="#删delete" class="headerlink" title="删delete"></a>删delete</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t_user</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span>;//不加会删除所有的</span><br></pre></td></tr></table></figure><h3 id="改update"><a href="#改update" class="headerlink" title="改update"></a>改update</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> t_user</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">&#x27;jack&#x27;</span>, birth = <span class="string">&#x27;2000-10-04&#x27;</span></span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span>;//不加条件会改所有的！</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基础配置&quot;&gt;&lt;a href=&quot;#基础配置&quot; class=&quot;headerlink&quot; title=&quot;基础配置&quot;&gt;&lt;/a&gt;基础配置&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;服务端口默认&lt;code&gt;3306&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装的时候选择自动添加&lt;code&gt;path&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编码格式&lt;code&gt;utf8&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;windows启动服务&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;net start 服务名称（mysql）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;net stop 服务名称&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;登录&quot;&gt;&lt;a href=&quot;#登录&quot; class=&quot;headerlink&quot; title=&quot;登录&quot;&gt;&lt;/a&gt;登录&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先确保mysql服务已经打开，不确定话&lt;code&gt;net start mysql&lt;/code&gt;试试&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;mysql -uroot -pxxxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;xxxx为你的密码，也可以不显示密码登录&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mysql -uroot -p&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后输入密码（此时密码以*显示）即可登录。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;密码重置（8-0-23）&quot;&gt;&lt;a href=&quot;#密码重置（8-0-23）&quot; class=&quot;headerlink&quot; title=&quot;密码重置（8.0.23）&quot;&gt;&lt;/a&gt;密码重置（8.0.23）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;网上老的教程可能已经过时，8.0以上不支持&lt;code&gt;mysqld --skip-grant-tables&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开命令窗口cmd，输入命令：&lt;code&gt;net stop mysql&lt;/code&gt;，停止MySQL服务，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;开启跳过密码验证登录的MySQL服务，输入命令，然后不要关闭此窗口，命令如下：&lt;/p&gt;
&lt;p&gt; &lt;code&gt;mysqld --console --skip-grant-tables --shared-memory&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再打开一个新的cmd，无密码登录MySQL，输入登录命令：&lt;code&gt;mysql -u root -p&lt;/code&gt;，然后回车即可&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;密码置为空，命令如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;use mysql&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;update user set authentication_string=&amp;#39;&amp;#39; where user=&amp;#39;root&amp;#39;;&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;&lt;p&gt;退出，命令如下&lt;/p&gt;
&lt;p&gt;&lt;code&gt;quit&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关闭以&lt;code&gt;-console --skip-grant-tables --shared-memory&lt;/code&gt;启动的MySQL服务（即关闭第一个打开的cmd窗口）&lt;/p&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;&lt;p&gt;打开cmd，输入：&lt;code&gt;net start mysql&lt;/code&gt;启动MySQL服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;步骤4密码已经置空，所以无密码状态登录MySQL，输入登录命令：mysql -u root -p，然后回车即可登录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改密码，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;root&amp;#x27;&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&amp;#x27;localhost&amp;#x27;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;WITH&lt;/span&gt; mysql_native_password &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; 你的密码&lt;span class=&quot;string&quot;&gt;&amp;#x27;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;验证更改后密码正确登录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;输入quit，退出当前登录，输入登录命令：&lt;code&gt;mysql -u root -p&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;输入密码，成功登录，到此，重置密码结束。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;以&lt;code&gt;;&lt;/code&gt;结尾&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;show databases;&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://asea.fun/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="notes" scheme="https://asea.fun/tags/notes/"/>
    
      <category term="mysql" scheme="https://asea.fun/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>《The_Computer_and_the_Brain》词汇</title>
    <link href="https://asea.fun/post/f857d47.html"/>
    <id>https://asea.fun/post/f857d47.html</id>
    <published>2021-09-14T09:13:08.000Z</published>
    <updated>2021-09-14T09:15:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="The-Computer-and-the-Brain"><a href="#The-Computer-and-the-Brain" class="headerlink" title="The_Computer_and_the_Brain"></a>The_Computer_and_the_Brain</h1><blockquote><p>也太难了…</p></blockquote><table><thead><tr><th align="center">Word</th><th align="center">释义</th></tr></thead><tbody><tr><td align="center">discuss</td><td align="center">讨论</td></tr><tr><td align="center">neurologist</td><td align="center">神经病学家</td></tr><tr><td align="center">psychiatrist</td><td align="center">精神病学家</td></tr><tr><td align="center">essential</td><td align="center">基本的、必要的</td></tr><tr><td align="center">privilege</td><td align="center">特权、优待</td></tr><tr><td align="center">analog</td><td align="center">模拟的</td></tr><tr><td align="center">represent</td><td align="center">代表</td></tr><tr><td align="center">quantity</td><td align="center">大量、数量</td></tr><tr><td align="center">pre-assegned</td><td align="center">预先指定的</td></tr><tr><td align="center">current</td><td align="center">电流</td></tr><tr><td align="center">voltage</td><td align="center">电压</td></tr><tr><td align="center">i.e.</td><td align="center">也就是</td></tr><tr><td align="center">predetermined</td><td align="center">预先决定的</td></tr><tr><td align="center">organs</td><td align="center">器官、机构</td></tr><tr><td align="center">perform</td><td align="center">执行</td></tr><tr><td align="center">representative</td><td align="center">典型的</td></tr><tr><td align="center">arithmetic</td><td align="center">数字，算数</td></tr><tr><td align="center">addition</td><td align="center">+</td></tr><tr><td align="center">subtraction</td><td align="center">-</td></tr><tr><td align="center">multiplication</td><td align="center">*</td></tr><tr><td align="center">division</td><td align="center">/</td></tr><tr><td align="center">parallel</td><td align="center">平行的</td></tr><tr><td align="center">antparallel</td><td align="center">反平行的</td></tr><tr><td align="center">componentry</td><td align="center">元件部分</td></tr><tr><td align="center">relevant</td><td align="center">相关的</td></tr><tr><td align="center">unusual</td><td align="center">不同寻常的</td></tr><tr><td align="center">remarkable</td><td align="center">卓越的</td></tr><tr><td align="center">rather</td><td align="center">相当</td></tr><tr><td align="center">attribute</td><td align="center">属性</td></tr><tr><td align="center">analyzer</td><td align="center">分析器</td></tr><tr><td align="center">proceed</td><td align="center">开始、继续进行</td></tr><tr><td align="center">gear</td><td align="center">齿轮、装置、工具</td></tr><tr><td align="center">axle</td><td align="center">车轴</td></tr><tr><td align="center">entirely</td><td align="center">完全地</td></tr><tr><td align="center">differential</td><td align="center">微分的，差别的、微分</td></tr><tr><td align="center">integrator</td><td align="center">积分器、积分电路</td></tr><tr><td align="center">integral</td><td align="center">积分的</td></tr><tr><td align="center">scheme</td><td align="center">计划、组合、方案</td></tr><tr><td align="center">threefold</td><td align="center">三倍的，有三部分的</td></tr><tr><td align="center">trick</td><td align="center">技巧</td></tr><tr><td align="center">implicit</td><td align="center">含蓄的</td></tr><tr><td align="center">particular</td><td align="center">详细的</td></tr><tr><td align="center">short-circuited</td><td align="center">短路的</td></tr><tr><td align="center">iteration</td><td align="center">迭代</td></tr><tr><td align="center">approximation</td><td align="center">近似</td></tr><tr><td align="center">justification</td><td align="center">理由、辩护</td></tr><tr><td align="center">economical</td><td align="center">经济的</td></tr><tr><td align="center">specifically</td><td align="center">特别的</td></tr><tr><td align="center">subtle</td><td align="center">微妙的、精细的</td></tr><tr><td align="center">efficient</td><td align="center">有效率的</td></tr><tr><td align="center">simpler</td><td align="center">更简单的</td></tr><tr><td align="center">extensive</td><td align="center">广泛的</td></tr><tr><td align="center">equation</td><td align="center">等式、相等</td></tr><tr><td align="center">primarily</td><td align="center">首先；主要的</td></tr><tr><td align="center">previously</td><td align="center">以前的</td></tr><tr><td align="center">decimal</td><td align="center">十进制、小数的</td></tr><tr><td align="center">conventional</td><td align="center">传统的</td></tr><tr><td align="center">represent</td><td align="center">表现为</td></tr><tr><td align="center">sequence</td><td align="center">顺序</td></tr><tr><td align="center">embodiments</td><td align="center">体现、化身</td></tr><tr><td align="center">suffice</td><td align="center">使满足</td></tr><tr><td align="center">inadequate</td><td align="center">不充分的</td></tr><tr><td align="center">adequate</td><td align="center">足够、充分</td></tr><tr><td align="center">hence</td><td align="center">因此</td></tr><tr><td align="center">see below</td><td align="center">见下文</td></tr><tr><td align="center">electrical pulse</td><td align="center">电脉冲</td></tr><tr><td align="center">positive polarity</td><td align="center">正极</td></tr><tr><td align="center">negative</td><td align="center">负极</td></tr><tr><td align="center">observation</td><td align="center">观察监视</td></tr><tr><td align="center">redundant</td><td align="center">冗余的</td></tr><tr><td align="center">simultanious</td><td align="center">同时</td></tr><tr><td align="center">stipulate</td><td align="center">保证</td></tr><tr><td align="center">correspond</td><td align="center">符合</td></tr><tr><td align="center">indication</td><td align="center">指出、迹象</td></tr><tr><td align="center">valid</td><td align="center">合法、有效</td></tr><tr><td align="center">electrical gating devices</td><td align="center">电门装置</td></tr><tr><td align="center">electromechanical</td><td align="center">机电的</td></tr><tr><td align="center">relays</td><td align="center">继电器</td></tr><tr><td align="center">crystal</td><td align="center">晶体</td></tr><tr><td align="center">diodes</td><td align="center">二极管</td></tr><tr><td align="center">ferromagnetic</td><td align="center">铁磁的</td></tr><tr><td align="center">transistor</td><td align="center">晶体管</td></tr><tr><td align="center">preferably</td><td align="center">最好是，更合意的</td></tr><tr><td align="center">cf. below</td><td align="center">参看下面</td></tr><tr><td align="center">temporal</td><td align="center">暂时的</td></tr><tr><td align="center">adjustable</td><td align="center">可调节的</td></tr><tr><td align="center">matters</td><td align="center">事件、影响</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;The-Computer-and-the-Brain&quot;&gt;&lt;a href=&quot;#The-Computer-and-the-Brain&quot; class=&quot;headerlink&quot; title=&quot;The_Computer_and_the_Brain&quot;&gt;&lt;/a&gt;The_Computer_and_the_Brain&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;也太难了…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;Word&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;释义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;discuss&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;讨论&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;neurologist&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;神经病学家&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;psychiatrist&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;精神病学家&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;essential&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;基本的、必要的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;privilege&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;特权、优待&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;analog&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;模拟的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;represent&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;代表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;quantity&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;大量、数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;pre-assegned&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;预先指定的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;current&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;电流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;voltage&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;电压&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;i.e.&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;也就是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;predetermined&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;预先决定的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;organs&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;器官、机构&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;perform&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;representative&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;典型的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;arithmetic&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;数字，算数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;addition&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;subtraction&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;multiplication&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;division&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;parallel&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;平行的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;antparallel&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;反平行的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;componentry&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;元件部分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;relevant&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;相关的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;unusual&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;不同寻常的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;remarkable&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;卓越的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;rather&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;相当&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;attribute&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;analyzer&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;分析器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;proceed&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;开始、继续进行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;gear&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;齿轮、装置、工具&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;axle&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;车轴&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;entirely&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;完全地&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;differential&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;微分的，差别的、微分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;integrator&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;积分器、积分电路&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;integral&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;积分的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;scheme&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;计划、组合、方案&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;threefold&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;三倍的，有三部分的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;trick&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;技巧&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;implicit&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;含蓄的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;particular&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;详细的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;short-circuited&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;短路的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;iteration&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;迭代&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;approximation&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;近似&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;justification&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;理由、辩护&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;economical&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;经济的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;specifically&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;特别的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;subtle&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;微妙的、精细的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;efficient&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;有效率的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;simpler&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;更简单的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;extensive&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;广泛的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;equation&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;等式、相等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;primarily&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;首先；主要的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;previously&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;以前的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;decimal&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;十进制、小数的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;conventional&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;传统的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;represent&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;表现为&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;sequence&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;顺序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;embodiments&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;体现、化身&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;suffice&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;使满足&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;inadequate&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;不充分的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;adequate&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;足够、充分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;hence&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;因此&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;see below&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;见下文&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;electrical pulse&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;电脉冲&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;positive polarity&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;正极&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;negative&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;负极&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;observation&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;观察监视&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;redundant&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;冗余的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;simultanious&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;同时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;stipulate&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;保证&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;correspond&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;符合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;indication&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;指出、迹象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;valid&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;合法、有效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;electrical gating devices&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;电门装置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;electromechanical&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;机电的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;relays&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;继电器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;crystal&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;晶体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;diodes&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;二极管&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;ferromagnetic&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;铁磁的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;transistor&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;晶体管&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;preferably&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;最好是，更合意的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;cf. below&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;参看下面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;temporal&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;暂时的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;adjustable&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;可调节的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;matters&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;事件、影响&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

    
    </summary>
    
    
      <category term="笔记" scheme="https://asea.fun/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vocabulary note" scheme="https://asea.fun/tags/vocabulary-note/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言</title>
    <link href="https://asea.fun/post/8e41db39.html"/>
    <id>https://asea.fun/post/8e41db39.html</id>
    <published>2021-09-13T11:34:25.000Z</published>
    <updated>2021-10-24T02:37:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><ol start="2"><li><p>a 汇编指令</p></li><li><p>r 查看寄存器</p><ul><li>r 寄存器</li></ul></li><li><p>d 查看内存</p><ul><li>d 段地址:偏移地址 （结尾偏移地址）</li></ul></li><li><p>t 执行指令</p></li><li><p>e 修改内存数据</p><ul><li><p>e 段地址:偏移地址 数据1 数据2 数据3…</p></li><li><p>e 段地址:偏移地址</p><p>数据 空格 数据 空格（逐个询问）</p></li></ul></li><li><p>g执行到结束</p></li></ol><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>通用：ax, bx, cx, dx, ip, sp </p><p>段：cs(control), ds(data)，ss(stack)</p><p><img src="https://pic.imgdb.cn/item/6151c0912ab3f51d91b47ad7.jpg" alt></p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><blockquote><p>系统会自动改动sp，但是不会检测是否越界，无论是栈顶还是栈底，没有这样的寄存器！pop和push只支持字数据</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">push ax &#x2F;&#x2F;ax中的数据送入栈，sp-&#x3D;2</span><br><span class="line">pop ax &#x2F;&#x2F;从栈顶取出数据送入ax，s注意pop以后sp会改动，但是原来的数据是依然存在的，只是不在栈中而已。</span><br></pre></td></tr></table></figure><h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><ol><li>当常量作为偏移地址的时候，最好加上段前缀，不然会当作把常量的值给寄存器 </li><li>在多个segment的程序中，start从code段开始，且不需要初始化cs，但是ds和ss是需要初始化的。</li><li>开始以后ds对应的就是程序的起始地址，ds+100H才是真正的data段起始地址</li></ol><h2 id="字符处理"><a href="#字符处理" class="headerlink" title="字符处理"></a>字符处理</h2><ol><li>大写字母+20H = 小写字母（ASCII）<ul><li>小写转大写 <code>and al, 11011111b</code></li><li>小写转大写<code>or al, 00100000b</code></li></ul></li></ol><h2 id="寻址"><a href="#寻址" class="headerlink" title="寻址"></a>寻址</h2><blockquote><p>bp,bx称为基址，si、di称为变址  idata是立即数 。要么单独用，要么基址变址，要么加个立即数，没有基址基址，没有变址变址，没有立即数立即数。注意bp默认是ss段</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax,[200+bx] </span><br><span class="line"></span><br><span class="line">mov ax,200[bx] </span><br><span class="line"></span><br><span class="line">mov ax,[bx].200 </span><br><span class="line"></span><br><span class="line">mov ax,[bx+si]</span><br><span class="line"></span><br><span class="line">mov ax,[bx].200[si]</span><br><span class="line"></span><br><span class="line">mov ax,\[bx][si].200</span><br><span class="line"></span><br><span class="line">mov ax,\[bx][si]</span><br><span class="line"></span><br><span class="line">mov ax,[bp+si] </span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6151bcce2ab3f51d91af7b5a.jpg" alt></p><h3 id="变址寄存器"><a href="#变址寄存器" class="headerlink" title="变址寄存器"></a>变址寄存器</h3><p>si di可以和bx类似的寻址用法，不同的是，si di只能作为16位来用，而bx可以拆开</p><h2 id="dup"><a href="#dup" class="headerlink" title="dup"></a>dup</h2><blockquote><p>伪指令，用来数据重复</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db 3 dup(0)</span><br><span class="line">db 3 dup(0,1,2)</span><br><span class="line">db 3 dup(&#39;abc&#39;, &#39;ACB&#39;)</span><br><span class="line">db 200 dup(0) ; 定义栈段</span><br></pre></td></tr></table></figure><h2 id="转移指令"><a href="#转移指令" class="headerlink" title="转移指令"></a>转移指令</h2><blockquote><p>首先认识一下offset，在程序中用s来作为标号（例如start之类的就是标号），<code>offset s</code>可以取出s的地址。</p></blockquote><p><img src="https://pic.imgdb.cn/item/6151d21a2ab3f51d91cef820.jpg" alt="转移"></p><h3 id="jmp"><a href="#jmp" class="headerlink" title="jmp"></a>jmp</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是z</span><br><span class="line">jmp 1000:3 &#x2F;&#x2F;cs为1000，ip为3</span><br><span class="line">jmp 4 &#x2F;&#x2F;修改ip为4</span><br></pre></td></tr></table></figure><h3 id="jcxz"><a href="#jcxz" class="headerlink" title="jcxz"></a>jcxz</h3><ol><li><p>有条件转移指令，当cx为0跳转，否则继续下一步。</p></li><li><p>短转移，机器码保存的是位移，范围是-128-127</p></li></ol><h3 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h3><ol><li><p>cx减一，然后判断cx是否为0，如果不是，则跳转，否则继续向下执行。</p></li><li><p>短转移，负数用补码</p></li><li><p>双重循环的时候需要注意，cx的值会被你改变了，所以可以用dx来保存cx的值，或者拿一个内存空间来保存cx，或者<strong>拿一个栈</strong>，push+pop来保存cx，建议用栈。</p></li></ol><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><ol><li>call + 标号（相对地址 16位）</li><li>将当前的ip或者cs ip压栈（pop cs pop ip)</li><li>跳转，最后通过ret返回</li><li><strong>call far ptr段间转移</strong></li><li>call + 寄存器</li><li>call word ptr ds:[0]</li><li>call dword ptr ds:[0]</li></ol><h3 id="ret"><a href="#ret" class="headerlink" title="ret"></a>ret</h3><ol><li>ret的本质是从栈内取出ip的值，所以即便没有call，也可以去ss sp指向的位置取数据，相当于<code>pop ip</code></li><li>retf段间转移<code>pop ip</code>然后<code>pop cs</code></li></ol><h2 id="寄存器冲突"><a href="#寄存器冲突" class="headerlink" title="寄存器冲突"></a>寄存器冲突</h2><p>模块化设计中，由于子程序可能修改原程序的寄存器，所以需要在开始时将寄存器入栈，最后再出栈。</p><h2 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h2><p>8086中，标志寄存器是16位的，但没有全用。。1，3，5，12-15没有用。</p><p><img src="https://pic.imgdb.cn/item/615d08c72ab3f51d91b26ea0.jpg" alt></p><p>会影响标志寄存器的：加减乘除与或（运算指令）</p><p>不影响的：mov push pop（传送指令）</p><h3 id="具体来看几个标志"><a href="#具体来看几个标志" class="headerlink" title="具体来看几个标志"></a>具体来看几个标志</h3><p>奇偶： 结果中1的个数为o数时，pf为1，否则为0</p><p>符号：将结果视为有符号数，若为负数，sf为1</p><p>进位：将数据视为无符号数，有进位或者借位的时候cf为1</p><p>溢出：将数据视为有符号数，若有溢出，则of为1</p><h2 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h2><h3 id="传送指令"><a href="#传送指令" class="headerlink" title="传送指令"></a>传送指令</h3><h4 id="MOV"><a href="#MOV" class="headerlink" title="MOV"></a>MOV</h4><p>MOV DST SRC</p><ol><li>dst不能是cs</li><li>dst不能同时为内存单元，也不能同时为段</li><li>立即数不能直接送段，要通过ax</li></ol><h4 id="XCHG"><a href="#XCHG" class="headerlink" title="XCHG"></a>XCHG</h4><p>XCHG OPER1,OPER2</p><ol><li>不影响标志位</li><li>不能用段寄存器</li><li>不能同时为内存单元</li></ol><h4 id="LEA"><a href="#LEA" class="headerlink" title="LEA"></a>LEA</h4><p>LEA REG,SRC 将偏移地址送入寄存器，也可以用mov ax,offset 标号，来传送地址</p><ol><li><p>不影响标志位</p></li><li><p>REG不能为段寄存器</p></li><li><p>SRC是寻址方式</p></li><li><p>32送16时，取低16位</p></li><li><p>16送32时，0扩展</p></li></ol><h4 id="LDS"><a href="#LDS" class="headerlink" title="LDS"></a>LDS</h4><p>LDS REG,SRC 将src处的内存单元里的数据送入reg（通常为si），并且把src+2的数据送入ds</p><h4 id="LES"><a href="#LES" class="headerlink" title="LES"></a>LES</h4><p>LES REG,SRC 同上，si换成di，ds换成es</p><h3 id="算术指令"><a href="#算术指令" class="headerlink" title="算术指令"></a>算术指令</h3><h4 id="加法指令"><a href="#加法指令" class="headerlink" title="加法指令"></a>加法指令</h4><p>add adc inc</p><ol><li><p>其中adc会加上cf，inc是加一</p></li><li><p>只有inc不影响标志位</p></li></ol><p>这里考虑一下双精度两个数的加法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add ax,cx</span><br><span class="line">adc dx,bx ;这里要用adc！</span><br></pre></td></tr></table></figure><h4 id="减法指令"><a href="#减法指令" class="headerlink" title="减法指令"></a>减法指令</h4><p>sub dst,src减法 </p><p>sbb dst,src带借位减法</p><p>dec opr减一   </p><p>以上几个和加法类似</p><hr><p>neg opr求补，求补码，相当于0-opr，所以neg可以求负数的绝对值</p><p>cmp opr1,opr2比较</p><p>需要注意的是，加法减法的dst和src要求和mov一样。另外，sbb和adc主要用于双精度，对于高位的运算</p><h4 id="乘法指令"><a href="#乘法指令" class="headerlink" title="乘法指令"></a>乘法指令</h4><p>MUL  无符号数</p><p>IMUL 带符号数</p><ol><li>只影响cf，of</li><li>对于mul，当乘积高一半是0时，cf、of都是0，否则都是1</li><li>对于imul，当乘积高一半时低一半的符号扩展时，cf、of是0，否则是1</li></ol><p>格式：</p><p>​    mul reg</p><p>​    mul 内存单元（需要加word ptr等指定数据类型）</p><p>​    不能是mul idata</p><p>结果：</p><p>​    存放在ax或dx、ax中</p><h4 id="除法指令"><a href="#除法指令" class="headerlink" title="除法指令"></a>除法指令</h4><p>基本同乘法</p><p>另外需要说一下符号扩展，由于被除数字长必须是除数两倍，所以需要符号扩展</p><p>指令：</p><p>​    cbw：al-&gt;ax</p><p>​    cwd：ax-&gt;dx,ax</p><p>扩展方式：</p><p>​    无符号数：高位置零</p><p>​    有符号数：高位是低位符号的扩展</p><p>​    <strong>其实也就是低位的最高位是0就补0，不然就补1</strong></p><p>注意：</p><p>​    不影响标志位</p><h3 id="定义数据指令"><a href="#定义数据指令" class="headerlink" title="定义数据指令"></a>定义数据指令</h3><p>数据标号     db、dw（单字，注意dword是双字）、dd（双字）、dq（四字）、dt（十个字节）     操作数1 操作数2….这里可以用dup具体用法上边写过了，另外直接对标号使用用的是地址</p><p>操作数可以是常数、或者表达式</p><p><strong>属性修改运算符</strong></p><p>说明：类型可以是BYTE、WORD、DWORD、NEAR、 FAR… </p><p>示例： DATA1 DB 26H DATA2 DW 5030H MOV AX, WORD PTR DATA1 ADD BYTE PTR DATA2, BL </p><p>上例中的： MOV AX，WORD PTR OPER1+1  MOV AL， BYTE PTR OPER2</p><h3 id="表达式赋值伪操作"><a href="#表达式赋值伪操作" class="headerlink" title="表达式赋值伪操作"></a>表达式赋值伪操作</h3><ol><li>等值语句EQU</li></ol><p>用来给表达式赋予一个名字</p><p>例： </p><p>⑴ PORT EQU 1234 </p><p>⑵ BUFF EQU PORT＋58 </p><p>⑶ MEM EQU DS:[BP＋20H]  </p><p>⑷ COUNT EQU CX </p><p>⑸ ABC EQU AAA</p><ol start="2"><li><p>等号语句</p><p>NUM=34</p><p>NUM=34+1</p></li></ol><blockquote><p>EQU不能重复定义，=可以</p></blockquote><h3 id="ORG"><a href="#ORG" class="headerlink" title="ORG"></a>ORG</h3><blockquote><p>如下，也就是将aa的数据存放在了偏移地址为20的内存中。</p></blockquote><p>org 20</p><p>aa dw 2</p><p>org 40</p><p>bb db,?</p><h3 id="属性返回置运算符"><a href="#属性返回置运算符" class="headerlink" title="属性返回置运算符"></a>属性返回置运算符</h3><h4 id="seg"><a href="#seg" class="headerlink" title="seg"></a>seg</h4><p>格式： SEG 变量/标号 n </p><p>功能：返回变量或标号的段基址 n </p><p>示例： MOV AX, SEG X1 MOV BX, SEG ARRAY  如果变量X1所在段的段基址为0915H，变量 ARRAY所在段的段基址为0947H，那么上面两条 指令汇编后就分别为： MOV AX, 0915H MOV BX, 0947H</p><h4 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h4><p>同上，返回偏移地址</p><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>返回变量或标号的类型属性值</p><p>如果该表达式是变量，则返回该变量的 以字节数表示的类型，DB为1，DW为 2 ，DD为4，DF为8…. </p><p>如果表达式是标号，则返回代表该标号 的数值类型，NEAR是-1，FAR为-2。 </p><p>如果表达式是常数，则应该回送0 </p><h4 id="length"><a href="#length" class="headerlink" title="length"></a>length</h4><blockquote><p>如果只有一个dup，则返回dup的个数，否则返回1？还是返回第一个？</p></blockquote><p>格式：length 变量</p><p>该指令仅加在变量前，对于变量中使用DUP 的情况，返回分配的单元数（例如 3 dup(?)）则返回3，否则仅返回其中一项数据的情况</p><h4 id="size"><a href="#size" class="headerlink" title="size"></a>size</h4><p>字节总数：type*length</p><h3 id="地址计数器"><a href="#地址计数器" class="headerlink" title="地址计数器"></a>地址计数器</h3><p>$</p><p>指令中表示该指令的首字节地址</p><p>数据中表示即将分配出去的地址值</p><h3 id="逻辑运算指令"><a href="#逻辑运算指令" class="headerlink" title="逻辑运算指令"></a>逻辑运算指令</h3><p>逻辑非指令：NOT OPR * OPR不能为立即数 </p><p>执行操作： (OPR) ¬ ¬ (OPR) * 不影响标志位</p><p> 逻辑与指令：AND DST, SRC </p><p>执行操作： (DST) ¬ (DST) Ù (SRC) </p><p>逻辑或指令：OR DST, SRC </p><p>执行操作： (DST) ¬ (DST) Ú (SRC) </p><p>异或指令： XOR DST, SRC </p><p>执行操作： (DST) ¬ (DST) “ (SRC) </p><p>测试指令： TEST OPR1, OPR2 （只改变标志寄存器的AND）</p><p>执行操作： (OPR1) Ù (OPR2) </p><h3 id="移位指令"><a href="#移位指令" class="headerlink" title="移位指令"></a>移位指令</h3><p>格式：例如SHL OPR, CNT（一个是操作数，一个是移位次数（二进制））</p><p>逻辑左移：SHL（最高位移入cf，低位补0）</p><p>逻辑右移：SHR（相反）</p><p>算数左移：SAL（同逻辑左移）</p><p>算数右移：SAR（最低为移入cf，最高位不变）</p><hr><p>循环移位指令</p><p>ROL,ROR（不带进位，类似于不带头节点的循环链表）</p><p>RCL,RCR（带进位，类似于带头节点的循环链表）</p><h2 id="dos调用"><a href="#dos调用" class="headerlink" title="dos调用"></a>dos调用</h2><h3 id="单字符输入"><a href="#单字符输入" class="headerlink" title="单字符输入"></a>单字符输入</h3><p>MOV AH,1H</p><p>INT 21H</p><p>送入的字符存放在AL</p><h3 id="单字符输出"><a href="#单字符输出" class="headerlink" title="单字符输出"></a>单字符输出</h3><p>MOV DL,’A’</p><p>MOV AH,2H</p><p>INT 21H</p><p>事先把字符送入DL</p><h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><p>大写字母二进制和小写字母的二进制不同在于，小写左数第三位是1，大写是0，所以可以通过AND,OR来转换，也可以通过加减20H。</p><h3 id="字符串输入"><a href="#字符串输入" class="headerlink" title="字符串输入"></a>字符串输入</h3><p>调用10号功能</p><p>首先定义缓冲区</p><p>BUFFER DB 10,?,10 DUP(?)</p><p>其中10代表最大字符数，？处系统会自动填入实际输入的字符数。若输入字符超过缓冲区能容纳的 个数，则系统忽略此字符并响铃警告。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV AX，SEG BUFFER</span><br><span class="line">MOV DS，AX</span><br><span class="line">MOV DX，OFFSET BUFFER</span><br><span class="line">MOV AH，10</span><br><span class="line">INT 21H</span><br></pre></td></tr></table></figure><h3 id="显示字符串"><a href="#显示字符串" class="headerlink" title="显示字符串"></a>显示字符串</h3><p>调用9号功能，要以$结尾</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DISPLAY DB ‘Very Good!’ , ‘$’</span><br><span class="line">……</span><br><span class="line">MOV AX，SEG DISPLAY</span><br><span class="line">MOV DS，AX</span><br><span class="line">LEA DX，DISPLAY</span><br><span class="line">MOV AH，9</span><br><span class="line">INT 21H</span><br></pre></td></tr></table></figure><h3 id="十进制加减运算"><a href="#十进制加减运算" class="headerlink" title="十进制加减运算"></a>十进制加减运算</h3><p>在计算机中采用BCD码来表示十进制数。BCD码就是使用四位二进制数表示一位十进制数。在8086/8088系统中，将BCD码分为两种格式： </p><ol><li><p>压缩型（组合型、装配型、PACKED） </p><p>一个字节表示两个BCD码，即两位十进制数，例如：0010 0011 表示十进制数的23</p></li><li><p>非压缩型（非组合型、拆散型、UNPACKED）。</p><p>一个字节的低四位表示一个BCD码， 而高四位对所表示的十进制数没有影响。 所以对于非压缩形，09h和’9‘代表的是一样的，因为高位的3忽略了。常为0000B或0011B。例如：0000 1001与0011 1001都是十进制数9的非组合型的BCD码。</p></li></ol><h4 id="压缩BCD的加法调整"><a href="#压缩BCD的加法调整" class="headerlink" title="压缩BCD的加法调整"></a>压缩BCD的加法调整</h4><p>压缩的BCD码加法调整 </p><p><strong>格式：</strong>DAA </p><p><strong>功能：</strong> </p><p>​    如果AL的低4位大于9，则将AL加6，并将辅助进位标志AF置1 （因为相当于16进制，9就相当于15，也就是把16进制的数转化为10进制）</p><p>​    如果AL的高4位大于9，将AL加60H，并将进位标志CF置1（同上，调整的是十位所以加了60h，上一个是06h）</p><p><strong>注意</strong>：</p><p>​    在执行DAA指令前，必须是用ADD或ADC完成了加 法操作，且加的结果放在AL中</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X DB 05H</span><br><span class="line">Y DB 07H</span><br><span class="line">……</span><br><span class="line">MOV AL，X</span><br><span class="line">ADD AL，Y；相加后，(AL)&#x3D;00001100&#x3D;0CH</span><br><span class="line">DAA ；加6调整后，(AL)&#x3D;00010010&#x3D;12H（压缩的BCD码）</span><br></pre></td></tr></table></figure><h4 id="压缩BCD的减法调整"><a href="#压缩BCD的减法调整" class="headerlink" title="压缩BCD的减法调整"></a>压缩BCD的减法调整</h4><p>压缩的BCD码减法调整 </p><p><strong>格式：</strong>DAS</p><p><strong>功能：</strong> </p><p>​    如果AL的低4位大于9，则将AL减6，并将辅助进位标志AF置1 （因为相当于16进制，9就相当于15，也就是把16进制的数转化为10进制）</p><p>​    如果AL的高4位大于9，将AL减60H，并将进位标志CF置1（同上，调整的是十位所以加了60h，上一个是06h）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">十进制计算62－38&#x3D;24</span><br><span class="line">W1 DB 62H  ；BCD码表示的十进制62</span><br><span class="line">W2 DB 38H</span><br><span class="line">……</span><br><span class="line">MOV AL，W1</span><br><span class="line">SUB AL，W2  ；相减后，(AL)&#x3D;2AH</span><br><span class="line">DAS        ；减6调整后，(AL)&#x3D;24H</span><br></pre></td></tr></table></figure><h4 id="非压缩BCD的加法调整"><a href="#非压缩BCD的加法调整" class="headerlink" title="非压缩BCD的加法调整"></a>非压缩BCD的加法调整</h4><p>非压缩的BCD码加法调整 </p><p><strong>格式：</strong>AAA</p><p><strong>功能：</strong> </p><p>​    如果AL的低4位大于9或者af=1（辅助进位标识），将AL加6、AH加1，AL的 高4位清零、CF、AF置1 由于非压缩的BCD码用1个字节表示1个十进制数， 所以调整后若加上30H就是该数值的ASCII码。因为0的ascii码是30h</p><p><strong>注意</strong>：</p><p>​    在AAA指令执行前，必须是使用ADD或ADC指令完成了 加法，且结果是在AL中。AAA指令对AL中内容进行校正</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例 十进制计算6+8&#x3D;14，用非压缩的BCD码表示并显示在屏幕上。</span><br><span class="line">T1 DB 06H</span><br><span class="line">T2 DB 08H</span><br><span class="line">……</span><br><span class="line">MOV AL，T1 ；(AL)&#x3D;00000110&#x3D;06H</span><br><span class="line">ADD AL，T2 ；(AL)&#x3D;00001110&#x3D;0EH</span><br><span class="line">AAA    ；调整后(AH)&#x3D;01H，(AL)&#x3D;04H</span><br><span class="line">ADD AX，3030H ；AH、AL分别加上30H，变成ASCII码</span><br><span class="line">MOV BX，AX ；用BX保存</span><br><span class="line">MOV DL，BH ；显示“1”</span><br><span class="line">MOV AH，2 ；2号显示功能</span><br><span class="line">INT 21H ；DOS中断调用</span><br><span class="line">MOV DL，BL ；显示“4”</span><br><span class="line">INT 21H</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="非压缩BCD的减法调整"><a href="#非压缩BCD的减法调整" class="headerlink" title="非压缩BCD的减法调整"></a>非压缩BCD的减法调整</h4><p>非压缩的BCD码减法调整 </p><p><strong>格式：</strong>AAS</p><p><strong>功能：</strong> </p><p>​    如果AL的低4位大于9，将AL减6、AH减1， AL的高4位清零、CF、AF置1</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例 十进制计算57－18&#x3D;39，用非压缩的BCD码表示。</span><br><span class="line">MOV AX,0507H</span><br><span class="line">MOV BX,0108H</span><br><span class="line">SUB AL,BL</span><br><span class="line">SUB AH,BH ；高位不用带借位减</span><br><span class="line">AAS       ；减法调整后(AX)&#x3D;0309H </span><br></pre></td></tr></table></figure><h4 id="非压缩BCD的乘法调整"><a href="#非压缩BCD的乘法调整" class="headerlink" title="非压缩BCD的乘法调整"></a>非压缩BCD的乘法调整</h4><p><strong>格式</strong>：AAM (ASCII Adjust Multiply) </p><p><strong>功能</strong>： 将乘积AX中的2个非压缩的BCD码调整。 AL除以0AH，得到的商送AH，余数送入 AL。即乘积的高位数在AH 、低位数在 AL中</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例 十进制乘法6×8&#x3D;48，用非压缩的BCD码表示，并显示。</span><br><span class="line">P1 DB 06H</span><br><span class="line">P2 DB 08H</span><br><span class="line">……</span><br><span class="line">MOV AL，P1 ；(AL)&#x3D;00000110&#x3D;06H</span><br><span class="line">IMUL P2 ；(AL)&#x3D;00110000&#x3D;30H</span><br><span class="line">AAM ；调整后(AH)&#x3D;04H，(AL)&#x3D;08H</span><br><span class="line">ADD AX，3030H ；AH、AL分别加上30H</span><br><span class="line">MOV BX，AX ；用BX保存</span><br><span class="line">MOV DL，BH ；显示“4”</span><br><span class="line">MOV AH，2</span><br><span class="line">INT 21H</span><br><span class="line">MOV DL，BL ；显示“8”</span><br><span class="line">INT 21H</span><br></pre></td></tr></table></figure><h4 id="非压缩BCD的除法调整"><a href="#非压缩BCD的除法调整" class="headerlink" title="非压缩BCD的除法调整"></a>非压缩BCD的除法调整</h4><p><strong>格式</strong>：AAD (ASCII Adjust Division) </p><p><strong>功能</strong>：在做除法之前，将被除数AX中的2 个非压缩的BCD码调整。 (AL)=(AL)+(AH)*10，AH清零。除法之 后，商在AL 、余数在AH中.</p><h2 id="考试复习"><a href="#考试复习" class="headerlink" title="考试复习"></a>考试复习</h2><h3 id="标号"><a href="#标号" class="headerlink" title="标号"></a>标号</h3><p>对于数据标号，即<code>a db 1,2,3</code>，则在代码段中的a就会被替换成data:[0]，前提是要在assume里面关联ds与data。被替换以后，你就懂了吧，它可以表示一个数据，也可以用来寻址<code>a[si]</code>也就是<code>cs:0[si]</code></p><h3 id="offset-1"><a href="#offset-1" class="headerlink" title="offset"></a>offset</h3><p>offset只能和数据标号搭配，而不能用复杂的例如ds:[bx]等。。offset取出的地址可以用来mov、add之类的。。</p><h3 id="寻址-1"><a href="#寻址-1" class="headerlink" title="寻址"></a>寻址</h3><p>push word ptr 20[bx+si-2]这里是可以写表达式的</p><h3 id="栈-1"><a href="#栈-1" class="headerlink" title="栈"></a>栈</h3><p>栈顶应该是sp-1吗</p><h3 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h3><p>XOR CX,CX</p><p>相当于mov cx,0，但是异或效率更高 </p><h3 id="标号-1"><a href="#标号-1" class="headerlink" title="标号"></a>标号</h3><p><a href="https://blog.csdn.net/u011555996/article/details/80114485">关于标号的一些问题</a></p><p>X1   DB  12H,  34H,  56H<br>        X2  DW  78H,  90H<br>        ADR1  DW X1<br>        ADR2  DW  X2</p><p>如上，ADR1和ADR2表示的是X1和X2的地址，即偏移地址，0000和0300。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;debug&quot;&gt;&lt;a href=&quot;#debug&quot; class=&quot;headerlink&quot; title=&quot;debug&quot;&gt;&lt;/a&gt;debug&lt;/h2&gt;&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;p&gt;a 汇编指令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;r 查看寄存器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;r 寄存器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;d 查看内存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;d 段地址:偏移地址 （结尾偏移地址）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t 执行指令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;e 修改内存数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;e 段地址:偏移地址 数据1 数据2 数据3…&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;e 段地址:偏移地址&lt;/p&gt;
&lt;p&gt;数据 空格 数据 空格（逐个询问）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g执行到结束&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;寄存器&quot;&gt;&lt;a href=&quot;#寄存器&quot; class=&quot;headerlink&quot; title=&quot;寄存器&quot;&gt;&lt;/a&gt;寄存器&lt;/h2&gt;&lt;p&gt;通用：ax, bx, cx, dx, ip, sp &lt;/p&gt;
&lt;p&gt;段：cs(control), ds(data)，ss(stack)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.imgdb.cn/item/6151c0912ab3f51d91b47ad7.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;系统会自动改动sp，但是不会检测是否越界，无论是栈顶还是栈底，没有这样的寄存器！pop和push只支持字数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;push ax &amp;#x2F;&amp;#x2F;ax中的数据送入栈，sp-&amp;#x3D;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pop ax &amp;#x2F;&amp;#x2F;从栈顶取出数据送入ax，s注意pop以后sp会改动，但是原来的数据是依然存在的，只是不在栈中而已。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;程序&quot;&gt;&lt;a href=&quot;#程序&quot; class=&quot;headerlink&quot; title=&quot;程序&quot;&gt;&lt;/a&gt;程序&lt;/h2&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://asea.fun/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="assembler" scheme="https://asea.fun/tags/assembler/"/>
    
  </entry>
  
  <entry>
    <title>数据结构新版</title>
    <link href="https://asea.fun/post/79666db.html"/>
    <id>https://asea.fun/post/79666db.html</id>
    <published>2021-09-12T03:00:45.000Z</published>
    <updated>2021-09-12T03:03:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ol><li><p>数据对象，数据元素和数据项</p></li><li><p>四类基本结构</p><ol><li>集合</li><li>线性结构</li><li>树形结构</li><li>图状结构</li></ol></li><li><p>逻辑结构分类</p><ol><li>线性结构<ul><li>线性表</li><li>栈</li><li>队列</li><li>数组、广义表</li><li>字符串</li></ul></li><li>非线性结构<ul><li>树、二叉树</li><li>图</li></ul></li></ol></li><li><p>存储结构分类</p><ol><li>顺序存储结构<ul><li>向量</li><li>一维数组</li></ul></li><li>非顺序存储结构（链式）<ul><li>链接表</li></ul></li></ol></li><li><p>数据类型</p><ol><li>原子类型</li><li>结构类型</li></ol></li><li><p>ADT（抽象数据类型）</p><p>​    （D,S,P)，分别表示数据对象，关系集，操作集。</p></li><li><p>算法</p><ol><li>特性<ul><li>有穷性</li><li>确定性</li><li>可行性</li><li>输入：0、多个</li><li>输出：1、多个</li></ul></li><li>设计要求<ul><li>正确性</li><li>可读性</li><li>健壮性</li><li>高效与低存储量</li></ul></li><li>描述工具<ul><li>自然语言</li><li>程序设计语言</li><li>流程图</li><li>伪码</li><li>类C√</li></ul></li></ol></li></ol><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>前驱、后继</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;数据对象，数据元素和数据项&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;四类基本结构&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;集合&lt;/li&gt;
&lt;li&gt;线性结构&lt;/li&gt;
&lt;li&gt;树形结构&lt;/li&gt;
&lt;li&gt;图状结构&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;逻辑结构分类&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;线性结构&lt;ul&gt;
&lt;li&gt;线性表&lt;/li&gt;
&lt;li&gt;栈&lt;/li&gt;
&lt;li&gt;队列&lt;/li&gt;
&lt;li&gt;数组、广义表&lt;/li&gt;
&lt;li&gt;字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非线性结构&lt;ul&gt;
&lt;li&gt;树、二叉树&lt;/li&gt;
&lt;li&gt;图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;存储结构分类&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;顺序存储结构&lt;ul&gt;
&lt;li&gt;向量&lt;/li&gt;
&lt;li&gt;一维数组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非顺序存储结构（链式）&lt;ul&gt;
&lt;li&gt;链接表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据类型&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;原子类型&lt;/li&gt;
&lt;li&gt;结构类型&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ADT（抽象数据类型）&lt;/p&gt;
&lt;p&gt;​    （D,S,P)，分别表示数据对象，关系集，操作集。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;算法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;特性&lt;ul&gt;
&lt;li&gt;有穷性&lt;/li&gt;
&lt;li&gt;确定性&lt;/li&gt;
&lt;li&gt;可行性&lt;/li&gt;
&lt;li&gt;输入：0、多个&lt;/li&gt;
&lt;li&gt;输出：1、多个&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设计要求&lt;ul&gt;
&lt;li&gt;正确性&lt;/li&gt;
&lt;li&gt;可读性&lt;/li&gt;
&lt;li&gt;健壮性&lt;/li&gt;
&lt;li&gt;高效与低存储量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;描述工具&lt;ul&gt;
&lt;li&gt;自然语言&lt;/li&gt;
&lt;li&gt;程序设计语言&lt;/li&gt;
&lt;li&gt;流程图&lt;/li&gt;
&lt;li&gt;伪码&lt;/li&gt;
&lt;li&gt;类C√&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;线性表&quot;&gt;&lt;a href=&quot;#线性表&quot; class=&quot;headerlink&quot; title=&quot;线性表&quot;&gt;&lt;/a&gt;线性表&lt;/h2&gt;&lt;p&gt;前驱、后继&lt;/p&gt;

    
    </summary>
    
    
      <category term="笔记" scheme="https://asea.fun/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
