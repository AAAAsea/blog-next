<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python + mysql</title>
      <link href="post/1fc191f2.html"/>
      <url>post/1fc191f2.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>其实大壳的后台管理非常的杂乱，也不是说本身多么复杂，只不过不管是配置文件，还是各个module，甚至是数据存储都在用文件式存储，以至于很多时候花了很多心思优化逻辑还是一塌糊涂。就拿教务处提醒为例，因为一直不想用数据库，所以一直拿文件存储，但是局限性太大了，最近老是出bug，所以决定上手数据库了。<br>由于服务器上还跑了很多东西，例如apache、jupyter等，所以phpstudy一直挂着，索性拿它提供的工具直接装mysql吧。毕竟一直在学数据库，但真正自己放到项目里还没实践过。</p></blockquote><h2 id="梳理项目结构"><a href="#梳理项目结构" class="headerlink" title="梳理项目结构"></a>梳理项目结构</h2><blockquote><p>不得不吐槽的是，我的主文件里写了一大堆import，结构一塌糊涂，所以今天认真了解了一下python的package机制，把我自己写的模块封装到utils的package下，然后再package里建立<code>__init__.py</code>，将需要的模块放到<code>__all__</code>这个数组变量里，类型都是不带后缀的字符串，这样在主文件里只需要<code>from utils import *</code>就行，终于整齐了一些</p></blockquote><p><img src="https://pic.imgdb.cn/item/61bc96782ab3f51d9194d25a.jpg" alt></p><h2 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h2><ol><li>phpstudy里安装好mysql和可视化界面（我选的是sql_front)，其实也用不了几下，你也可以敲命令，都很快。</li><li>创建自己的数据库，建表，设计结构。</li><li>哦对了<code>mysql -uroot -pxxxx</code>，记一下命令，用来命令行连接数据库。</li><li>基本配置好后，着手学习<code>pymysql</code>来连接python和mysql，很简单，这里直接放代码<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接MySQL获取游标</span></span><br><span class="line">  db = pymysql.connect(</span><br><span class="line">    host=<span class="string">&#x27;127.0.0.1&#x27;</span>, </span><br><span class="line">    port=<span class="number">3306</span>, </span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>, </span><br><span class="line">    password=<span class="string">&#x27;xxxx&#x27;</span>, </span><br><span class="line">    db=<span class="string">&#x27;xxx&#x27;</span>, </span><br><span class="line">    charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  cur = db.cursor()</span><br><span class="line">  sql_select = <span class="string">&quot;select count(*) from tablename where title = &#x27;&quot;</span>+title+<span class="string">&quot;&#x27;;&quot;</span></span><br><span class="line">  cur.execute(sql_select)</span><br><span class="line">  result = cur.fetchone()</span><br><span class="line">  <span class="keyword">if</span> result[<span class="number">0</span>] &gt; <span class="number">0</span>: <span class="comment"># 如果存在就返回0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    sql_insert = <span class="string">&quot;insert into tablename values(null,&quot;</span>+ <span class="string">&quot;&#x27;&quot;</span> + <span class="built_in">str</span>(date) + <span class="string">&quot;&#x27;,&#x27;&quot;</span> + title + <span class="string">&quot;&#x27;,&#x27;&quot;</span> + link + <span class="string">&quot;&#x27;);&quot;</span> <span class="comment"># id设置了自增</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      cur.execute(sql_insert)</span><br><span class="line">      db.commit() <span class="comment"># 事务提交</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      db.rollback() <span class="comment"># 回滚</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  cur.close()</span><br><span class="line">  db.close()</span><br></pre></td></tr></table></figure></li><li>值得注意的是sql字符串的拼接注意单引号，以及每次查询（如果不频繁的话）就重新连接最后断开，因为隔一段时间不请求就自动断开了。</li></ol><blockquote><p>我发现其实也没啥东西，但我就是弄了两个小时…可能因为一直想做没勇气做吧，虽然不是什么难事，但还是比较满意….考试周加油。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java期末复习</title>
      <link href="post/adf6b9f0.html"/>
      <url>post/adf6b9f0.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>把这几百页的书从头到尾看一遍梳理一下期末考点吧！</p></blockquote><h2 id="基本数据类型与数组"><a href="#基本数据类型与数组" class="headerlink" title="基本数据类型与数组"></a>基本数据类型与数组</h2><h3 id="标识符和关键字"><a href="#标识符和关键字" class="headerlink" title="标识符和关键字"></a>标识符和关键字</h3><ol><li>字母、下划线、美元符号、和数字</li><li>第一个不能是数字</li><li>不能是关键字</li><li>不能是true false null（尽管他们不是关键字）</li><li>区分大小写</li></ol><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><blockquote><p>8种基本数据类型</p><p>boolean</p><p>byte,short,int,long</p><p>char</p><p>float,double</p></blockquote><ol><li>int 四字节</li><li>byte一个字节</li><li>short两个字节</li><li>long八个字节</li><li>没有无符号即unsigned</li><li>char两个字节，没有负数</li><li>使用unicode字符集，前128个是ASCII</li><li>‘\u0041’表示A</li><li>（char)65 a</li><li>double  y = 0.4 小于 float x = 0.4f;</li></ol><h3 id="类型转换运算"><a href="#类型转换运算" class="headerlink" title="类型转换运算"></a>类型转换运算</h3><blockquote><p>低赋值给高会自动转换，反之需要强制转换</p></blockquote><p>低到高排序：byte short char int long float double</p><p>int x = (int)34.89</p><p>float x = 12.3 这是错误的，默认浮点数常量是double，如果不转换会报错“possible loss of precision”</p><h3 id="输入输出数据"><a href="#输入输出数据" class="headerlink" title="输入输出数据"></a>输入输出数据</h3><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p><code>Scanner reader = new Scanner(System.in);</code></p><p>reader调用以下方法，返回值就是读取的内容：</p><p><code>nextBoolean() nextByte() nextShort() nextInt() nextLong() nextFloat() nextDouble()</code></p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p><code>System.out.println() System.out.print() System.out.printf()</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Syetem.out.println(<span class="string">&quot;hhh</span></span><br><span class="line"><span class="string">                   hhh</span></span><br><span class="line"><span class="string">                   hhh&quot;</span>); /这样是不正确的，不允许出现回车，print也是。可以通过加号连接</span><br><span class="line">Sout(<span class="string">&quot;hh&quot;</span>+</span><br><span class="line">    <span class="string">&quot;hhh&quot;</span>);                   </span><br></pre></td></tr></table></figure><p>printf用法类似C</p><p><code>System.out.printf(&quot;%d %f&quot;,12,1,3);</code></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p><code>int arr[]</code> <code>int[] arr</code></p><p><code>int arr[][]</code> <code>int[][] arr</code></p><blockquote><p>和c不同，这里只是生命数据类型，而不能定义其中多少个元素，所以必须</p><p>int arr[] = new int[10];</p><p>当然也可以分步</p></blockquote><ol><li>arr.length可以获取数组长度</li><li>二维数组中的每行长度可以不相同</li><li>sout输出数组会输出引用地址，而对于char数组会输出内容，可以用过<code>&quot;&quot;+arr</code>来输出引用</li></ol><h2 id="运算符、表达式和语句"><a href="#运算符、表达式和语句" class="headerlink" title="运算符、表达式和语句"></a>运算符、表达式和语句</h2><h3 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h3><ol><li>&amp;&amp; || !</li><li>=左边必须是变量</li><li>位运算符<ol><li>&amp;</li><li>|</li><li>~(单目)</li><li>^</li></ol></li><li>instanceof（左边是对象，右边是类，返回值是true false</li></ol><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><ol><li><p>分号是空语句</p></li><li><p>for与数组</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : arr)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>应用（连续读入）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(reader.hasNextDouble())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">double</span> x=  reader.nextDouble();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><ol><li><p>包名第一部分不能是“java”</p></li><li><p>创建类不加public即默认为friend，不能使用protected和private</p></li><li><p>基本类型的类封装</p><p><code>Double Float Byte Short Integer Long Character</code></p><p>通过调用如<code>intValue() shortValue()</code>来获取基本类型值</p><p>可以调用这些类的一些方法例如</p><p><code>Character.toUpperCase() Character.isLowerCase()</code></p></li></ol><h2 id="子类与继承"><a href="#子类与继承" class="headerlink" title="子类与继承"></a>子类与继承</h2><ol><li><p>不持支多继承</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>继承不会继承private，而且当不在一个包的时候也不会继承friend</p></li><li><p>尽管如private的变量不会被继承，但依然在创建对象的时候会分配内存，因为有可能会用方法调用这些变量</p></li><li><p>instanceof  如果左边的是右边或是右边子类创建的话就是true</p></li><li><p>重写（override）以后，想要调用父类的变量或者方法需要super</p></li><li><p>重写不允许降低访问权限但是可以提高</p></li><li><p>子类构造方法中如果明确调用哪一个父类的构造方法的话，就会调用Parent()这个无参的方法，但如果用super指出，就必须是子类构造方法中的第一句。</p></li><li><p>final修饰一个类，则该类不可以被继承</p></li><li><p>final修饰一个方法，则该方法不可以被重写</p></li><li><p>final修饰变量，则成为常量</p></li><li><p>上转型对象会失去一些子类的属性和方法，按时上转型对象会调用子类重写的（非静态）方法（多态….）</p></li><li><p>上转型对象可以再强制转化为子类对象</p></li><li><p>abstract所在的类必须是abstract类</p></li><li><p>抽象类不可以被new，必须被继承重写abstract方法</p></li></ol><h2 id="接口与实现"><a href="#接口与实现" class="headerlink" title="接口与实现"></a>接口与实现</h2><ol><li>接口包括常量（final）和抽象方法。</li><li>变量默认必须是 public final static ，所以可以省略</li><li>抽象方法可以省略（putlic abstrac）</li><li>实现接口implements xxx,xxx,xxx</li><li>必须重写所有方法，且必须用public修饰</li><li>接口回调，有点类似于向上转型吧（也就是接口的多态）</li><li>如果接口作为参数，那么可以将实现该接口的类的实例传进去</li></ol><h2 id="内部类和异常类"><a href="#内部类和异常类" class="headerlink" title="内部类和异常类"></a>内部类和异常类</h2><blockquote><p>所谓内部类就是在一个class里面再定义一个class，可以通过xxx.xxx来访问这个class</p></blockquote><ol><li>内部类可以用static修饰</li><li>异常类</li></ol><h2 id="常用实用类"><a href="#常用实用类" class="headerlink" title="常用实用类"></a>常用实用类</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ol><li>创建 <code>String s = new String(&quot;hhhh&quot;)</code></li><li>还可以传入字符数组</li><li>可以引用常量<code>String s1,s2; s1 = &quot;hhh&quot;;s2 = &quot;ggg&quot;;s1 == s2(true);</code></li><li>字符串的并置，当两个常量并置时，得到的是在常量池，如果有变量则新生成变量</li><li>常用方法：<code>length() equals(String s) startsWith() endsWith() compareTo()大正小负 contains() indexOf() lastIndexOf() subString(int start, int end)</code></li><li>字符串与基本数据的转化<code>Integer.parseInt(s)其他类似</code><ol><li></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于为什么要谈恋爱</title>
      <link href="post/8f75d213.html"/>
      <url>post/8f75d213.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>对于恋爱的一些思索</p></blockquote><p>在我成长这么多年，最值得一提的一点就是，我和家庭的和解。我一直不明白我是怎么从厌倦逃离家庭到现在想念和热爱我的家庭的，现在大概明白了，是恋爱教会我如何爱和感受爱。<br>其实每次有勇气面对眼前的这些问题的时候，我都会想，我为什么想要拉她回来，其实我在想一个什么样的问题呢，就是，为什么要恋爱，也就是说当我在学会怎么恋爱的时候，我始终没想明白，为什么要恋爱。这个问题其实可以很含糊的回答，比如两个喜欢的人在一起了，不需要理由。但我不喜欢这样糊弄，于是我开始认真地想为什么人要恋爱，仅仅是喜欢对方的好然后想要占有吗，仅仅是看到别人恋爱然后从众吗，或者是其中有很多很多原因。我觉得这个问题每个想要好好谈恋爱的人都要搞懂，或者说即便它是搞不懂的，也要深入想一想，然后深入浅出，不然就很难谈一场健康的恋爱。</p><p>一、恋爱可以让我发现自己的缺点<br>这点毋庸置疑，很多很多缺点是自己一个人没办法发现的，即便身边朋友感觉到也不会跟你提出，所以在恋爱的时候，我想变得更好，同时我也会暴露自己的缺点，这让对方感到不适，对方向你提出了你的问题，这些问题通常是你自己没有发现过但是一发现也会觉得确实是个问题，然后认真的反思改进，不断的互相成为更优秀的人，不只是为了对方，也是为了自己。</p><p>二、恋爱可以让人学会爱人<br>其实我一直觉得我自己很爱对方，但其实我一直不很会爱对方，这里说的不是说生活中的惊喜和浪漫，而是在说从心灵上如何去关爱对方，其中包括如何关心一个人的情绪、如何尊重一个人以及如何帮助一个人，这些都算是爱，但是要比那些表面的仪式感更难意识到。“我都是为了你好！”这些人往往都不会爱人。</p><p>三、恋爱可以让我学会感受爱<br>人其实都容易自私，喜欢索取容易变得贪婪。往往这个时候我们会对对方苛责，会极尽力气想让对方对自己好，我想说，这样的人不懂得被爱。被爱当然也是种能力，恋爱的过程中人们其实很难学会被爱，相反当恋爱出现问题，人才开始思考对方的好，才开始感受到原来对方其实真的对我很好了，这时候才会想起来当时自己的幼稚。就是这样一步步学会了感受到对方的爱意。其实对于家庭也是这样，感受家庭的爱和如何去爱家庭都是一件很难很难的事情。</p><p>四、恋爱可以让我变得勇敢<br>一个人的时候往往瞻前顾后在意别人的看法，恋爱让我有了依靠，可以不必太在意其他人看发，所以可以勇敢的尝试以前害怕的事情，恋爱让我变得勇敢起来。</p><p>五、恋爱让我认识自己<br>人最难的一个过程还是认识自己，成长就是不断地认识自己，但是往往一个人很难明白自己，日常生活中很难和其他人有深入灵魂的交流，但是恋爱让你走进对方深处的同时也看清自己内心深处。恋爱本身就是两个人的交融，人是复杂的，没有完美契合的两个人，所以这中间必定会有摩擦，但正是这些摩擦让你认识到自己的形状，认识到自己是一个怎样的人。</p><p>六、（还有很多，用心感悟吧）…</p><p>最后想说的是，人类社会形态本就不是孤身一人的，除却极少数，大多数人都需要一个依靠，这个依靠不是绑定，也不是享乐的纽带，它最终极的要义就是使得两个人在幸福和痛苦中感受到人间的美好同时也变得更加勇敢坚强，大概这样的变化适合人类生存吧，大概这才是健康的恋爱吧。</p><p>反观自己，虽然甜蜜不少，但是真正去思考如何去谈恋爱，如何处理痛苦，如何反思进步共同成长却是想的很少，当然不是否认享乐的恋爱不好，只是，我们已经有过这样的阶段了，总是要到下一个阶段的。<br>爱总是会消失的，如果不转化为习惯、依赖、责任，那就很难以后了，没有人会永远保持新鲜感。所以，希望每个人都能认识到，自己为什么要谈恋爱，不要总是被推着走，这样才值得健康的恋爱，打开心结吧，我的朋友们。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疫情下的宿管阿姨</title>
      <link href="post/8e7449bd.html"/>
      <url>post/8e7449bd.html</url>
      
        <content type="html"><![CDATA[<p>昨天挺突然的，忽然得知学校封校了，一阵骚动，食堂面包房、超市、寝室楼下买水，到处都是长队，我很久很久没见过这么大的阵仗了，本来打算到超市买点酒只好作罢。约了室友打羽毛球，结果体育馆已经封起来了，到处都是志愿者，我看到各个运动场馆已经清空了，核酸检测的桌子已经摆起来了，然后收到通知，全员连夜核酸检测。惊诧与学校的行动之快，我和室友在室外的霾里打了球。后来回到宿舍稍稍休息之后戴好口罩下楼了。</p><p>刚走出宿舍楼，被身后的宿管阿姨叫住，一口浓重的sang海口音。<br>“你四去检测的对伐？”<br>“恩是的，我准备去。”<br>“那我跟你一起去好吧。”<br>忽然觉得相处了快三年的阿姨像个小姑娘一样在漆黑里祈求着我，我说走呀，可以。</p><p>一路上人潮汹涌，去检测的人和检测回来的人把桥上填的满满的，阿姨一路嘴不停，向我诉说着那些阿姨们都回不去了，只好找个小房间住一晚。其它好多话我也听不懂，只好嗯嗯啊啊地应付，她似乎看出来了我的应付，还不停地追问我。呼——终于坚持到了体育馆门口，那个时候队伍已经从体育馆排到了教学楼，少说百米长。但是那队伍极快，哪里是在排队啊，我想，这分明是在马拉松。我看到那队伍在我面前跑动着，阿姨拉着我说跑起来，我说我们要去后面排队不能插队，阿姨说哎呀排什么队，都在跑。罪过，于是我就和阿姨插了队，插在了几百人的前面。<br>由于队伍实在跑动过快，阿姨体力不支，我就减速等着阿姨，我说慢点慢点不着急，这时前面的保安喊起来快点快点，身旁的志愿者看着阿姨说阿姨加油！阿姨笑笑说你也在这！</p><p>我带着阿姨走进体育馆来到核酸检测的桌子前，阿姨跟我炫耀说她已经截好图了，我看了看水滴屏，怀疑是红米note，但看UI又不像，倒像是HUAWEI的野鸡手机（说歪了）。我坐在那，等待着被捅鼻子（之前都是喉咙），那医生喊着放松放松，越喊我越紧张，感受着长长的异物捅进最深处转来转去，仿佛要把我的灵魂搅碎了，一边眼泪流个不停。结束后我在后面等着，后来看到阿姨做完以后四处找我，我伸出手摆一摆，这里。“你不等我我都不知道往哪走了！”阿姨有点埋怨的说，“哎呀，捅鼻子可太难受了，鼻涕都要捅出来了，阿姨眼泪都流出来了。”我就在体育馆看着以防护服和嘈杂人群为背景的阿姨，有点好玩。“我从来没来过这个体育馆。”阿姨说。</p><p>你叫什么呀？<br>阿姨突然问我。<br>我告之。<br>阿姨嘴里巴咂着我的名字，然后说有好几个呢，可能是大一的。</p><p>回来的时候，阿姨还在像个小孩子一样嘟哝着什么，我没太听清，只记得到楼下阿姨向我道谢，我说没事，然后匆匆上楼了。<br>室友买了酒等我喝。<br>纯生真难喝，室友说。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>丢失的邮件</title>
      <link href="post/894bb4e2.html"/>
      <url>post/894bb4e2.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>前段时间看了乙一，感悟到故事以及写故事本身的魅力，所以想把脑中很有意思的想法也写成故事来，尝试写了一部分，但是后面的故事情节自己很不满意，所以目前的框架还没搭起来，但是近期实在忙碌，就先停一停，我相信所有人都会理解的。</p></blockquote><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>八月份的天流金铄石，这让我一直处于一种焦虑的状态里，每过正午，我坐在电脑面前盯着屏幕上密密麻麻的代码就会感到热浪从我的背后紧紧包裹着我。我明明开了空调，空调外机的声音已经响彻楼层，但我依然感到酷热难耐。我感觉那热像是化成了人形，就在我的周围走来走去，我挥舞胳膊却怎么也抓不到它，于是我决定出去走走。由于不知道要出去多久，或许几天几夜也不回来，出于安全我把寝室的电源断了，不过是拉下电闸那么简单。<br>刚走出宿舍门，我就感到我被前后夹击了，那化成人形的热跟着我溜了出来，和外面的热合起伙来收拾我。我猜测这会宿舍又凉快下来了，但我不愿再回去，我抱着自己做好防御工事，一边同热较量，一边踉踉跄跄下了楼，期间与正在上楼的工人师傅撞了满怀，我们互相沉默，匆忙走掉。宿管在值班的位置上一动不动，往常大家会向她问好，但这个时候我们都不想被打扰。我喜欢看见她睡着，这样我会很自在。</p><p>我走出了宿舍楼，成千上万的蝉鸣向我扑过来，我眯起眼睛看着四周，到处都是郁郁葱葱的树，我知道那可恶的蝉就藏在里面。白色的天空从树的缝隙间流到地上，汇聚成一滩滩大大小小的水洼。我拖着步子在这胶状的空气里行走，打算到便利店买瓶啤酒。前后左右到处都是热，他们太吵了，推搡着我，挤压着我，搞得我晕头转向。<br>便利店在学校不远处，自动门打开了，一股凉意从里面偷跑出来。自动门每开一次都要偷偷跑出来一些凉，就像我从宿舍里跑出来一样，而随后，也就是在自动门关上以后，还会有一些凉会被抓回便利店——空调就是这么残忍的家伙。<br>我对便利店的东西如数家珍，由于不喜欢在食堂的人群中乞求座位，我常常自己出来到便利店寻找能够填饱肚子的食物——这里总是空无一人。从冷柜里拿出来啤酒，结账，随后又坐在了靠玻璃墙的凳子上。囚禁着凉的液体从我的嘴唇灌进口腔流过食道到达我的胃部，每次吞咽，我都把凉从易拉罐里转移到了我的胃里，它们只不过是换个牢房罢了。我坐在那里四处张望，似乎这样可以给便利店增加点人气，这时自动门开了，伴随着轻快的音乐，我看见她走了进来。</p><p>我惊讶地看到她和我拿了一样的啤酒然后坐在了我的身边。我并不太喜欢和陌生人来往，坐在便利店也是因为这里很少有人驻留，这里已经成了我的私人领地，所以她的入侵顿时让我有点生气，于是我决定不再理她。<br>“你好，坐在这里你不会生气吧？”<br>手机屏幕亮了，我收到了这样一封Email，打开我的电子邮箱，这样短短的文字就这样肆意地躺在我面前。她怎么会知道我的邮箱，我往右边悄悄斜了一眼，并没有发现她的任何动静，我期待这个时候她看我一眼，那样只要我扭过头我们就会双目对视，这将是绝佳的交流时机。从这一刻我开始觉得她是个有趣的人。但是她并没有。她没有任何动静，就像我不存在一样。由于我不善于直视别人，所以一时没办法弄懂她具体在干什么，但我可以肯定的是她并没有看我。<br>我想了想还是决定给她回信，我并不确定这封邮件是谁发的，但直觉告诉我一定是她。</p><p>“随便，又不是我的地盘！”<br>我昧着心意回了邮件，虽然我同意了，但是由于我担心她会察觉不到我客气的背后还有一丝不满，所以加了叹号。但我不知道她会怎样解读这个感叹号，或许她会理解为我的热情好客，一想到这里我又感觉后悔。<br>“你在吃什么呀？”<br>我注意到她邮箱的昵称是“关”，或许是她的姓氏，也或许是她名字中最喜欢的一个字，但我更倾向于礼貌地叫她关小姐。<br>因为常常孤身一人，所以我格外珍惜这次交流，虽然我明明什么也没有吃，我也很不希望对话到我这里就戛然而止——尽管我一开始并不是很喜欢这个关小姐。而当我已经写好了要回复的内容时，手机却怎么也上不了网了。</p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>本意决定在外面逗留几天的我又回到了宿舍，因为我无论如何也连不上便利店的网络，而移动网络在此刻也断了链子。不出所料，宿舍里果然凉了下来，空调还在轰隆隆的工作着，我这才意识到空调的电路是另外的，即便我切断了整个寝室的电源。<br>我将总闸重新推上去，随着“哔——”的一声，启辉器将日光灯管点亮。自从暑假室友都回家以后就没有关过灯，这样独自一人看着灯管从暗到亮还是第一次。但我顾不上灯管了，我的目光拽着我坐下打开电脑，但很不幸——我的电脑也连不上网络了。我觉得很诧异，我又拿起手机，网络旁边的叹号依然在，天哪，我居然没办法发出一封小小的邮件！<br>蝉忽然静了下来，我听到外面公交车到站的播报，楼上有人冲了厕所，还有不知道是几楼的水管不停地发出嘤嘤嘤的怪叫，那是空气柱在高压下不停震动产生的声音。我仿佛看到那声音和蝉鸣和热浪趁我不注意潜入宿舍将我的网线咬断，将便利店的网线咬断，又钻进我的手机将所有的天线网卡都一并咬断，它就是要我上不了网。</p><p>“谢谢你告诉我，听你说话的语气，你是一个好人~”<br>这时我又收到了邮件。<br>我看着那句似乎是赞赏我又似乎是讽刺我而且还有些让人摸不着头脑的话出现在手机通知栏里，和网络旁边的叹号一样，它切切实实的存在着。我试着点开通知，我仿佛听到关小姐在我身后对着我的耳朵说“你是一个好人~”。<br>她为什么还能发进来邮件呢？我什么也没告诉她呀！说话的语气是指我同意她坐下的语气吗？她是误解了我的感叹号吗？为什么要称我为一个好人呢，明明素不相识！我觉得很难理解，同时也很气愤。我不理解为何断网还能收到她的邮件，我气愤即便她是在夸我，我依然不喜欢一个陌生人称呼我为一个好人，正如我不喜欢随便称呼一个不认识的人为好人一样，哪能如此随意的就给对方套上好人的光环。我想象着假如我依然坐在便利店，她忽然站起来居高临下看着我，对我伸出右手说，你是一个好人。这样的事想想都有点恶心。</p><p>“原来你才大四啊？我已经研二了！”<br>邮件又来了，我拉过来室友的躺椅，将自己陷入柔软当中。夏日的炎热已经烟消云散，蝉鸣不再聒噪，我甚是感受到了风在我的头顶绕来绕去，清凉的雨从我脖间流下，滑过我出汗的脊背钻进衣服的沟壑里。我想象着她下一封邮件会发什么，我马上要大三了，我明白了她并不是在跟我聊天，这邮件一定是要发给另一个人的。这时的我有一种偷窥其他人秘密的快感，不过究竟是什么样的人会用邮件聊天呢。我在柔软中等着下一封邮件的到来，我似乎在像看一本小说一样不停地猜测接下来的情节走向，我想她可能是上个年代的人，那个时候或许他们还比较习惯用邮件交流；不过也可能是和我一个时代的人，要真的这样，那可就有趣起来了。我喜欢有趣的人，然而我太不擅长打交道，每次遇到有趣的人又经常把关系搞得一团糟，但是这次却有个有趣的人自己送上门来，我可以肆无忌惮的窥视着她的邮件而不用担心搞砸关系。一想到这些我又感觉很兴奋，要是有个人站在我旁边，一定会觉得我是个变态。你想想，一个独居的大三男生窝在躺椅上咧着嘴笑，脑子里还幻想着窥视其它女生的聊天，多么变态啊！<br>就这样想着，等了很久，邮件却迟迟不来。也许是最近学业压力太大了，或者是夏天的热让我很久没有睡过好觉了，我就这样躺着睡着了。</p><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>我坐在便利店里，关小姐也坐在那里，我们看着太阳一点点地碎成各种各样的灯，夜色渐起，我们不知不觉坐了一整个下午。<br>你已经研二了吗？<br>过几天就研二了。<br>我们只有这么两句对话，然后举起手中的易拉罐干了杯，但里面早已滴酒未剩。纯生真的很苦，我想了半天才想出来这么一句话，但看她刚刚喝酒的时候并没有面露难色，也许她挺喜欢，所以还是作罢。我准备找个机会溜走，这样的气氛实在令我难受，我想坐到打烊，这样我就有合理的理由离开。可是随即想到我身处的便利店是全天营业，我又泄了气。那种坐立不安的感觉从我的脚趾蔓延到全身来，我感到麻酥酥的，冷冰冰的，我似乎出了很多汗，我又感到了粘稠的热。我突然看到她站起来走到我的背后，我感到她从背后抱住了我，一大片柔软覆盖在我的后背上。</p><p>醒来的时候已经是第二天凌晨五点钟了，最近养成的生物钟准时地将我从奇怪的梦中唤醒。日光灯粘在天花板上明晃晃的，我感觉自己的身体在不住地冒汗和战栗，我摸了摸额头，然后眯着眼睛摸到遥控器把空调关了。<br>不知道是中暑还是感冒了，上一次生病已经是很久以前的事，手边一点药物都没有。我撑着站了起来，日光灯洒下来的光就像白天的太阳一样，我一时分不清现在在哪里。我起身走到水管前，捧起一大捧凉水浇在脸上，顿时清醒不少。水管旁边是窗户，我向外面望去，现在已经是五点一刻了，天边泛起红色，仅有的一点云彩慵懒的飘着，也可能只是静静地呆在那，连飘也懒得飘。<br>缓过神来以后我又坐在电脑前，依旧连不上网，我才想起来睡前在等待着关小姐的邮件，这时梦里她从后面抱住我的情景才浮现出来。我打开手机查看有无新的邮件。</p><p>“早，又是新的一天，昨天和你聊得很开心。”<br>我刷新了好几次，没有网络，而且只收到了这一封邮件。从邮件的内容来看，我错过了很多对话，我猜想关小姐一直在和另一个人聊天，而且看样子聊的还不错，居然已经到了发早安的地步了。他们从昨天开始认识，然后聊了很久。我想在我陷入沉睡的时间里他们一定聊的热火朝天，一定觉得遇到了知己。他们谈天气，谈交通，谈研究生学业（尽管我不知道对方是谁，甚至性别都不知道），谈哪个大明星又被处理了，谈雪花要比纯生好喝，谈她身边坐了一个一言不发的人，谈过几天要去哪里玩……我很想知道他们到底聊了什么，和关小姐聊天的人到底是谁，为什么我只收到了部分邮件。我害怕她突然发现自己发错了邮件然后我的小说就成了太监，我想看，我想的不得了，我觉得他们俩已经在我的心里住下来了，他们甚至已经不是聊天，他们在我的心里认识、熟络、谈恋爱、结婚、做爱，甚至已经过了一辈子。空调停止运作以后周围都安静下来了，除了偶尔呼啸而过的飞机就再也听不到任何声响，我又躺在柔软里，开始思前想后。我躺不下去了，我在寝室里来回踱了几千步，我终于忍无可忍了，我决定再去一趟便利店。</p><h2 id="四"><a href="#四" class="headerlink" title="四"></a>四</h2><p>时间大概是六点钟，阿姨刚刚才把寝室楼大门打开不久，我向她问了好然后灰溜溜的出门了。夏天的清晨很舒适，朝霞出生但太阳还未完全升起，空气里氤氲着清爽的香气，天边的云在此时就像是燃烧的棉花，那是一种温润的红色，没有晚霞那么夺目。我感到舒服多了，尽管身体还带着病，但我一路小跑来到了便利店。店员看见我进来和我打了招呼，这个店员我从来没见过。想必我对她也是，但她笑得很开心，像是马上就要下班了一样。我犹豫了一下没有去拿啤酒，手边没有药物，我还是不乱喝东西了吧。我取了三明治拿给店员加热，然后和她攀谈起来——我从来没有主动找这些人聊过，但此时此刻就是想找她聊聊。<br>你知道关小姐吗？昨天在这坐着喝酒来着，昨天下午。<br>店员摇了摇头，并把加热好的三明治递给我，我又让她取了杯刚做好的豆浆。<br>我总是和人说不过两句话，我惴惴不安地回到窗户前，坐在了她昨天坐过的地方，然后手机亮了起来。<br>(未完待续…)</p>]]></content>
      
      
      <categories>
          
          <category> 文学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> literature </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>夜行</title>
      <link href="post/71998f63.html"/>
      <url>post/71998f63.html</url>
      
        <content type="html"><![CDATA[<p>剃了头，嘴里噙着嚼不烂牛肉，带个耳暖，个子不高，但走路有力得很。<br>走着走着，桥就在脚下了，电话识趣地响起。</p><p>电话那头：家明，到哪了？<br>电话那头：在月亮底下？我看不见月亮。<br>电话那头：我宿舍不向阳，但还是看不见月亮。<br>电话那头：今天不是十五吗怎么会像个月牙呢，我还是看不见啊，是云挡住了吧。<br>电话那头：你拍这照片，肯定是云挡住了，另一半还能隐约看见点。<br>电话那头：正常的也没这么明显啊。<br>电话那头：啊真的吗？<br>电话那头：是要补一下天文学知识了，但是我看不懂啊。<br>电话那头：你说的很有道理，说不定月亮一天也有圆缺。<br>电话那头：天哪，那完蛋了，我们成了最后一批人类。<br>电话那头：你快去问问天文学大佬去吧。<br>电话那头：啥？月食？我也想到了，但想着这么罕见的东西应该不是吧就给pass掉了。<br>电话那头：你不也是吗？我是真的想到了。<br>电话那头：挂了挂了。</p><p>把手机揣进裤子口袋里，口袋有点小，塞进去憋得慌，又拿出来了，还是不舒服，又塞进去了。要说想舒服也行，搁上衣口袋，但就是不想这么做，就是觉得别扭。揣着憋得慌的手机往前走，绕了一个大圈，拐了弯，走到十字路口，交警赶着横向的人过马路，绿灯闪瞎眼了，那人还在扣手机。交警和那人和十五的月牙看起来好看的很，于是掏出来手机准备咔嚓。“草，啥也拍不到。”骂骂咧咧过了马路。也不是啥也拍不到，要拍交警也能拍，拍那人扣手机也不是不行，哪怕是拍月亮，跺跺脚也能看，可就是拍不了这幅景，这景不是交警，也不是那人扣手机，还不是月亮。景就在那，就拍不着。<br>又走到十字路口，打算右转了，看到个女人跟自己一样右转。那女人追不上来，步子太小了，一会就被甩八丈远。走了半道，停下来看看手机，也没啥消息。也不是为了看消息，就是想看两眼手机，手机屏都不用点亮，就那么看两眼就行。这会两辆公交披星戴月开了过去，盯着看了半天。那女人追了上来。<br>“你别追我。”<br>加快脚步向前走，碰上对情侣，路灯黄黄的照着他们，站在远处给他们拍个照。那女人又追了上来。<br>“草，追啥追，你先走。”<br>坐在树底下看了会小说，今天刚看完本小说，不知道看啥好，随便翻。也不是不知道看啥，看刘大爷其它书也行，看历史看科普看社会都行，但就是都行，搞得不知道看啥了。盯着屏幕一会，那女人已经走远了，这才起身走。这会儿有从学校出来回宿舍区的人，也不早了，看到个人骑着车带着个女生。忽然想起来小时候母亲骑着力矩很小的自行车带着自己和姐姐俩人骑了几公里到大姨家洗澡的事。家里穷，天一冷就是没地方洗澡，常四处寄人淋浴间下。眼泪立马就下来了，想家里人了，想的不得了，但不久前刚打过电话，再打也不知道说啥。要说也能说，就是说了就会让家人觉得自己难受，觉得自己是不是有心事，一想到这也就不说了。<br>正走着，听见俩人议论月食，再回头看，背后的月亮跟闰土头上的没啥两样。俩人一人说是月食，一人说没有。开头那人就翻开朋友圈给另一个人看。看罢圆月，回过头又惊了一下，那个女人停了下来，扭头正看着自己，黑色的深筒高跟鞋，肉色裤袜，黑色贝雷帽，一头长头发盖下来，就那么看着。<br>“你别追我！”<br>于是加快脚步向前走了，再往后看时，那女人还是背对着，举着手机拍月亮。也许刚刚也没看自己，就是看月亮而已。</p><p>电话又响起了。<br>“家明，到哪了？”<br>“回去了。”<br>正说着，已经走到超市门口了，翻了瓶啤酒走到门口对着老板笑，然后把账结了。</p>]]></content>
      
      
      <categories>
          
          <category> 文学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> literature </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="post/79666db.html"/>
      <url>post/79666db.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本片对于数据结构自行设计的ADT，以及常用的算法、性质做一个记录。</p></blockquote><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXLISTSIZE = <span class="number">100</span>; <span class="comment">//默认最大长度</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqList</span>&#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    ElemType *elem;   <span class="comment">// 存储空间基址</span></span><br><span class="line">    <span class="keyword">int</span> length;               <span class="comment">// 当前长度</span></span><br><span class="line">    <span class="keyword">int</span> listsize;        <span class="comment">// 允许的最大存储容量(以sizeof(ElemType)为单位</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//初始化顺序表</span></span><br><span class="line">    SqList(<span class="keyword">int</span> ms = MAXLISTSIZE)</span><br><span class="line">    &#123;</span><br><span class="line">        elem = <span class="keyword">new</span> ElemType[ms];</span><br><span class="line">        length = <span class="number">0</span>;</span><br><span class="line">        listsize = ms;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除顺序表</span></span><br><span class="line">    ~SqList()&#123;<span class="keyword">delete</span> [] elem;&#125;</span><br><span class="line">    <span class="comment">//将顺序表置为空表</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ListClear</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] elem;</span><br><span class="line">        elem = <span class="keyword">new</span> ElemType[length];</span><br><span class="line">        length = <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="comment">//返回顺序表的长度</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> length;&#125;</span><br><span class="line">    <span class="comment">//设置顺序表的长度</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">SetListLength</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(len &lt;= listsize &amp;&amp; len &gt;= length)</span><br><span class="line">        &#123;</span><br><span class="line">            length = len;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ElemType *t;</span><br><span class="line">        t = <span class="keyword">new</span> ElemType[len];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; min(length,len); ++i)</span><br><span class="line">            t[i] = elem[i];</span><br><span class="line">        length = len;</span><br><span class="line">        <span class="keyword">delete</span> [] elem;</span><br><span class="line">        elem = t;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断顺序表是否为空表</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ListEmpty</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断顺序表是否为满表</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ListFull</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> listsize == length ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用e返回顺序表标号为i的元素</span></span><br><span class="line">    <span class="function">ElemType <span class="title">GetElem</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elem[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回元素e的标号，否则返回-1</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetElemIndex</span><span class="params">(ElemType e)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(elem[i] == e)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用e设置顺序表标号为i的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">SetElem</span><span class="params">(<span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= length)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        elem[i<span class="number">-1</span>] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在顺序表的标号为pos的元素之前插入e元素</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(ElemType e, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos &lt; <span class="number">0</span> || pos &gt; length)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(listsize - length &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = length; i &gt;= pos; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                elem[i] = elem[i<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            elem[pos] = e;</span><br><span class="line">            length ++;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ElemType *t;</span><br><span class="line">            length ++;</span><br><span class="line">            t = <span class="keyword">new</span> ElemType[length];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">                t[i] = elem[i];</span><br><span class="line">            <span class="keyword">delete</span> [] elem;</span><br><span class="line">            elem = t;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = length; i &gt; pos; i--)</span><br><span class="line">                elem[i] = elem[i<span class="number">-1</span>];</span><br><span class="line">            elem[pos] = e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在顺序表的标号为pos的元素之前插入e元素</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(ElemType e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(listsize - length &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            elem[length] = e;</span><br><span class="line">            length ++;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ElemType *t;</span><br><span class="line">            length ++;</span><br><span class="line">            t = <span class="keyword">new</span> ElemType[length];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">                t[i] = elem[i];</span><br><span class="line">            <span class="keyword">delete</span> [] elem;</span><br><span class="line">            elem = t;</span><br><span class="line">            elem[length<span class="number">-1</span>] = e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除最后一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(length &gt; <span class="number">0</span>)</span><br><span class="line">            length --;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除顺序表下表为pos的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos &lt; <span class="number">0</span> || pos &gt; length)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(length &gt; <span class="number">0</span>)</span><br><span class="line">            length--;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = pos; i &lt; length; ++i)</span><br><span class="line">            elem[i] = elem[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//compare函数，用来判断a和b是否相等</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(ElemType a, ElemType *b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a == *b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//按指定条件查找</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(ElemType e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(elem[i] = e)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//      //逆置顺序表</span></span><br><span class="line">    <span class="comment">//      void Invert(int, int);</span></span><br><span class="line">    <span class="comment">//返回线性表给定数据元素的前驱数据元素的值</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">PriorElem</span><span class="params">(ElemType cur_e, ElemType &amp;pri_e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(elem[i] == cur_e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    pri_e = elem[i<span class="number">-1</span>];</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回线性表给定数据元素的后继数据元素的值</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">NextElem</span><span class="params">(ElemType cur_e, ElemType &amp;nex_e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(elem[i] == cur_e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i &lt; length<span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    nex_e = elem[i+<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将线性表中的元素前移一次</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MoveForward</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ElemType t = elem[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length<span class="number">-1</span>; i++)</span><br><span class="line">            elem[i] = elem[i+<span class="number">1</span>];</span><br><span class="line">        elem[length - <span class="number">1</span>] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(length == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NULL&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;elem[i];</span><br><span class="line">            <span class="keyword">if</span>(i &lt; length - <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//销毁线性表</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ListDestroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] elem;</span><br><span class="line">        elem = <span class="literal">NULL</span>;</span><br><span class="line">        length = <span class="number">0</span>;</span><br><span class="line">        listsize = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//      //遍历顺序表</span></span><br><span class="line">    <span class="comment">//      int ListTraverse() const;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data; <span class="comment">//数据域</span></span><br><span class="line">    LinkNode&lt;ElemType&gt; *next; <span class="comment">//指针域</span></span><br><span class="line">    LinkNode(LinkNode&lt;ElemType&gt; *ptr = <span class="literal">NULL</span>)&#123;next = ptr;&#125; <span class="comment">//构造函数，默认指针域为空，数据域没有初始化</span></span><br><span class="line">    LinkNode(<span class="keyword">const</span> ElemType &amp;item, LinkNode&lt;ElemType&gt; *ptr = <span class="literal">NULL</span>) <span class="comment">//构造函数，默认指针域为空，数据域初始化</span></span><br><span class="line">    &#123;</span><br><span class="line">        next = ptr;</span><br><span class="line">        data = item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//带头结点的单链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">      LinkNode&lt;ElemType&gt; *head;   <span class="comment">// 头指针</span></span><br><span class="line">      LinkNode&lt;ElemType&gt; *tail;   <span class="comment">// 尾指针</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="comment">//无参构造</span></span><br><span class="line">      LinkList()&#123;head = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;; tail = head;&#125;</span><br><span class="line">      <span class="comment">//有参构造，给头节点数据域赋值</span></span><br><span class="line">      LinkList(<span class="keyword">const</span> ElemType &amp;item)&#123;head = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(item); tail = head;&#125;</span><br><span class="line">      <span class="comment">//拷贝构造</span></span><br><span class="line">      LinkList(LinkList&lt;ElemType&gt; &amp;List);</span><br><span class="line">      <span class="comment">//析构</span></span><br><span class="line">      ~LinkList()&#123;ListDestroy();&#125;</span><br><span class="line">      <span class="comment">//等于号重载</span></span><br><span class="line">      LinkList&lt;ElemType&gt;&amp; <span class="keyword">operator</span>=(LinkList&lt;ElemType&gt; &amp;List);</span><br><span class="line">      <span class="comment">//销毁链表</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">ListDestroy</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="comment">//清空链表</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">ListClear</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="comment">//返回链表的长度</span></span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">      <span class="comment">//判断链表是否为空表</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">ListEmpty</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">      <span class="comment">//在首节点之前插入一个结点</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">InsFirst</span><span class="params">(ElemType e)</span></span>;</span><br><span class="line">      <span class="comment">//在尾节点之后添加一个结点</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">InsEnd</span><span class="params">(ElemType e)</span></span>;</span><br><span class="line">      <span class="comment">//获取链表头结点</span></span><br><span class="line">      <span class="function">LinkNode&lt;ElemType&gt;* <span class="title">GetHead</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> head;&#125;</span><br><span class="line">      <span class="comment">//获取链尾结点</span></span><br><span class="line">      <span class="function">LinkNode&lt;ElemType&gt;* <span class="title">GetTail</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> tail;&#125;</span><br><span class="line">      <span class="comment">//设置链表头结点</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">SetHead</span><span class="params">(LinkNode&lt;ElemType&gt; *p)</span></span>;</span><br><span class="line">      <span class="comment">//设置链尾结点</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">SetTail</span><span class="params">(LinkNode&lt;ElemType&gt; *p)</span></span>;</span><br><span class="line">      <span class="comment">//返回链表的第i个元素</span></span><br><span class="line">      <span class="function">ElemType <span class="title">GetElem</span><span class="params">(<span class="keyword">int</span> pos)</span></span>;</span><br><span class="line">      <span class="comment">//在链表的第pos个位置之前插入e元素</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(<span class="keyword">int</span> pos,ElemType e)</span></span>;</span><br><span class="line">      <span class="comment">//删除链表的首结点</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">DelFirst</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="comment">//表头插入法动态生成链表</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">CreateList_Head</span><span class="params">(<span class="keyword">int</span> n, ElemType *A)</span></span>;</span><br><span class="line">      <span class="comment">//表尾插入法动态生成链表</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">CreateList_Tail</span><span class="params">(<span class="keyword">int</span> n, ElemType *A)</span></span>;</span><br><span class="line">      <span class="comment">//删除链表的第pos个位置的元素</span></span><br><span class="line">      <span class="function">ElemType <span class="title">ListDelete</span><span class="params">(<span class="keyword">int</span> pos)</span></span>;</span><br><span class="line">      <span class="comment">//compare函数，用来判断两个链表是否相等</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> LinkList&lt;ElemType&gt; &amp;b)</span></span>;</span><br><span class="line">      <span class="comment">//按指定条件查找，返回指向第一个符合条件（=e）的元素的指针</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">LocateElem</span><span class="params">(<span class="keyword">const</span> ElemType &amp;e, LinkNode&lt;ElemType&gt; *pos)</span></span>;</span><br><span class="line">      <span class="comment">//返回链表给定数据元素的前驱数据元素的值</span></span><br><span class="line">      <span class="comment">//bool PriorElem(ElemType cur_e, ElemType &amp;pri_e);</span></span><br><span class="line">      <span class="comment">//返回链表给定数据元素的后继数据元素的值</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">NextElem</span><span class="params">(LinkNode&lt;ElemType&gt; *p, ElemType &amp;e)</span></span>;</span><br><span class="line">      <span class="comment">//遍历链表</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">ListTraverse</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝构造</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line">LinkList&lt;ElemType&gt;::LinkList(LinkList&lt;ElemType&gt; &amp;List)&#123;</span><br><span class="line">  <span class="keyword">this</span>-&gt;head = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(List.head-&gt;data);</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p1 = <span class="keyword">this</span>-&gt;head,*p2 = List.head;</span><br><span class="line">  <span class="keyword">while</span>(p2-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">    p1-&gt;next = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(p2-&gt;next-&gt;data);</span><br><span class="line">    p1 = p1-&gt;next;</span><br><span class="line">    p2 = p2-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>-&gt;tail = p1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> LinkList&lt;ElemType&gt;::ListDestroy()</span><br><span class="line">&#123;</span><br><span class="line">    LinkNode&lt;ElemType&gt; *p = head, *t = p-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        p = t;</span><br><span class="line">        <span class="keyword">if</span>(p) t = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重载赋值运算符</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line">LinkList&lt;ElemType&gt;&amp; LinkList&lt;ElemType&gt;::<span class="keyword">operator</span>=(LinkList&lt;ElemType&gt; &amp;List)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">this</span>-&gt;head = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(List.head-&gt;data);</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p1 = <span class="keyword">this</span>-&gt;head,*p2 = List.head;</span><br><span class="line">  <span class="keyword">while</span>(p2-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">    p1-&gt;next = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(p2-&gt;next-&gt;data);</span><br><span class="line">    p1 = p1-&gt;next;</span><br><span class="line">    p2 = p2-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  tail = p1;</span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> LinkList&lt;ElemType&gt;::ListClear()</span><br><span class="line">&#123;</span><br><span class="line">  ListDestroy(head-&gt;next);</span><br><span class="line">  tail = head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回链表的长度</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> LinkList&lt;ElemType&gt;::ListLength() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p = head;</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">      p = p-&gt;next;</span><br><span class="line">      length++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断链表是否为空表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::ListEmpty() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在首节点之前插入一个结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::InsFirst(ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *t = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(e);</span><br><span class="line">  t-&gt;next = head-&gt;next;</span><br><span class="line">  head-&gt;next = t;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在尾节点之后添加一个结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::InsEnd(ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *t = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(e);</span><br><span class="line">  tail-&gt;next = t;</span><br><span class="line">  tail = t;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置链表头结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> LinkList&lt;ElemType&gt;::SetHead(LinkNode&lt;ElemType&gt; *p)</span><br><span class="line">&#123;</span><br><span class="line">  head = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置尾结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> LinkList&lt;ElemType&gt;::SetTail(LinkNode&lt;ElemType&gt; *p)</span><br><span class="line">&#123;</span><br><span class="line">  tail = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回链表的第i个元素</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line">ElemType LinkList&lt;ElemType&gt;::GetElem(<span class="keyword">int</span> pos)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(pos &lt; <span class="number">1</span>)  <span class="comment">//不合法数据返回头节点data</span></span><br><span class="line">    <span class="keyword">return</span> head-&gt;data;</span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p = head;</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">    num++;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(num == pos)</span><br><span class="line">      <span class="keyword">return</span> p-&gt;data;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> head-&gt;data; <span class="comment">//不合法数据返回头节点data</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在链表的第pos个位置之前插入e元素</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::ListInsert(<span class="keyword">int</span> pos,ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(pos &lt; <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p = head;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *t = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(e);</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    num++;</span><br><span class="line">    <span class="keyword">if</span>(num == pos)</span><br><span class="line">    &#123;</span><br><span class="line">      t-&gt;next = p-&gt;next;</span><br><span class="line">      p-&gt;next = t;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除链表的首结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::DelFirst()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(!(head-&gt;next))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *t = head-&gt;next;</span><br><span class="line">  head-&gt;next = t-&gt;next;</span><br><span class="line">  <span class="keyword">delete</span> t;</span><br><span class="line">  <span class="keyword">if</span>(!head-&gt;next)</span><br><span class="line">    tail = head;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//表头插入法动态生成链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> LinkList&lt;ElemType&gt;::CreateList_Head(<span class="keyword">int</span> n, ElemType *A)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> m = n;</span><br><span class="line">  <span class="keyword">while</span>(n)</span><br><span class="line">  &#123;</span><br><span class="line">    InsFirst(*(A+(m-n)));</span><br><span class="line">    n--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//表尾插入法动态生成链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> LinkList&lt;ElemType&gt;::CreateList_Tail(<span class="keyword">int</span> n, ElemType *A)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> m = n;</span><br><span class="line">  <span class="keyword">while</span>(n)</span><br><span class="line">  &#123;</span><br><span class="line">    InsEnd(*(A+(m-n)));</span><br><span class="line">    n--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除链表的第pos个位置的元素</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line">ElemType LinkList&lt;ElemType&gt;::ListDelete(<span class="keyword">int</span> pos)</span><br><span class="line">&#123;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p = head, *t;</span><br><span class="line">  <span class="keyword">while</span>(--pos)</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  t = p-&gt;next;</span><br><span class="line">  p-&gt;next = t-&gt;next;</span><br><span class="line">  <span class="keyword">if</span>(!p-&gt;next)</span><br><span class="line">    tail = p;</span><br><span class="line">  ElemType res = t-&gt;data;</span><br><span class="line">  <span class="keyword">delete</span> t;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//compare函数，用来判断a和b是否相等</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::compare(<span class="keyword">const</span> LinkList&lt;ElemType&gt; &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *t = b.GetHead(), *p = head;</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next || t-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;next-&gt;data != t-&gt;next-&gt;data)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    t = t-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回链表给定数据元素的后继数据元素的值</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::NextElem(LinkNode&lt;ElemType&gt; *p, ElemType &amp;e)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next)</span><br><span class="line">    e = p-&gt;next-&gt;data;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::ListTraverse() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p = head;</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;p-&gt;data;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;next)</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;-&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data,num; <span class="comment">//数据域</span></span><br><span class="line">    LinkNode&lt;ElemType&gt; *next; <span class="comment">//指针域</span></span><br><span class="line">    LinkNode(LinkNode&lt;ElemType&gt; *ptr = <span class="literal">NULL</span>)&#123;next = ptr;&#125; <span class="comment">//构造函数，默认指针域为空，数据域没有初始化</span></span><br><span class="line">    LinkNode(<span class="keyword">const</span> ElemType &amp;item, LinkNode&lt;ElemType&gt; *ptr = <span class="literal">NULL</span>) <span class="comment">//构造函数，默认指针域为空，数据域初始化</span></span><br><span class="line">    &#123;</span><br><span class="line">        next = ptr;</span><br><span class="line">        data = item;</span><br><span class="line">        num = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//带头结点的单链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">      LinkNode&lt;ElemType&gt; *head;   <span class="comment">// 头指针</span></span><br><span class="line">      LinkNode&lt;ElemType&gt; *tail;   <span class="comment">// 尾指针</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="comment">//无参构造</span></span><br><span class="line">      LinkList()&#123;head = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;; tail = head;&#125;</span><br><span class="line">      <span class="comment">//有参构造，给头节点数据域赋值</span></span><br><span class="line">      LinkList(<span class="keyword">const</span> ElemType &amp;item)&#123;head = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(item); tail = head;&#125;</span><br><span class="line">      <span class="comment">//拷贝构造</span></span><br><span class="line">      LinkList(LinkList&lt;ElemType&gt; &amp;List);</span><br><span class="line">      <span class="comment">//析构</span></span><br><span class="line">      ~LinkList()&#123;ListDestroy();&#125;</span><br><span class="line">      <span class="comment">//等于号重载</span></span><br><span class="line">      LinkList&lt;ElemType&gt;&amp; <span class="keyword">operator</span>=(LinkList&lt;ElemType&gt; &amp;List);</span><br><span class="line">      <span class="comment">//销毁链表</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">ListDestroy</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="comment">//清空链表</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">ListClear</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="comment">//返回链表的长度</span></span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">      <span class="comment">//判断链表是否为空表</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">ListEmpty</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">      <span class="comment">//在首节点之前插入一个结点</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">InsFirst</span><span class="params">(ElemType e)</span></span>;</span><br><span class="line">      <span class="comment">//在尾节点之后添加一个结点</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">InsEnd</span><span class="params">(ElemType e)</span></span>;</span><br><span class="line">      <span class="comment">//获取链表头结点</span></span><br><span class="line">      <span class="function">LinkNode&lt;ElemType&gt;* <span class="title">GetHead</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> head;&#125;</span><br><span class="line">      <span class="comment">//获取链尾结点</span></span><br><span class="line">      <span class="function">LinkNode&lt;ElemType&gt;* <span class="title">GetTail</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> tail;&#125;</span><br><span class="line">      <span class="comment">//设置链表头结点</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">SetHead</span><span class="params">(LinkNode&lt;ElemType&gt; *p)</span></span>;</span><br><span class="line">      <span class="comment">//设置链尾结点</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">SetTail</span><span class="params">(LinkNode&lt;ElemType&gt; *p)</span></span>;</span><br><span class="line">      <span class="comment">//返回链表的第i个元素</span></span><br><span class="line">      <span class="function">ElemType <span class="title">GetElem</span><span class="params">(<span class="keyword">int</span> pos)</span></span>;</span><br><span class="line">      <span class="comment">//在链表的第pos个位置之前插入e元素</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(<span class="keyword">int</span> pos,ElemType e)</span></span>;</span><br><span class="line">      <span class="comment">//删除链表的首结点</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">DelFirst</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="comment">//表头插入法动态生成链表</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">CreateList_Head</span><span class="params">(<span class="keyword">int</span> n, ElemType *A)</span></span>;</span><br><span class="line">      <span class="comment">//表尾插入法动态生成链表</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">CreateList_Tail</span><span class="params">(<span class="keyword">int</span> n, ElemType *A)</span></span>;</span><br><span class="line">      <span class="comment">//删除链表的第pos个位置的元素</span></span><br><span class="line">      <span class="function">ElemType <span class="title">ListDelete</span><span class="params">(<span class="keyword">int</span> pos)</span></span>;</span><br><span class="line">      <span class="comment">//compare函数，用来判断两个链表是否相等</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> LinkList&lt;ElemType&gt; &amp;b)</span></span>;</span><br><span class="line">      <span class="comment">//按指定条件查找，返回指向第一个符合条件（=e）的元素的指针</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">LocateElem</span><span class="params">(<span class="keyword">const</span> ElemType &amp;e, LinkNode&lt;ElemType&gt; *pos)</span></span>;</span><br><span class="line">      <span class="comment">//返回链表给定数据元素的前驱数据元素的值</span></span><br><span class="line">      <span class="comment">//bool PriorElem(ElemType cur_e, ElemType &amp;pri_e);</span></span><br><span class="line">      <span class="comment">//返回链表给定数据元素的后继数据元素的值</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">NextElem</span><span class="params">(LinkNode&lt;ElemType&gt; *p, ElemType &amp;e)</span></span>;</span><br><span class="line">      <span class="comment">//遍历链表</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">ListTraverse</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝构造</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line">LinkList&lt;ElemType&gt;::LinkList(LinkList&lt;ElemType&gt; &amp;List)&#123;</span><br><span class="line">  <span class="keyword">this</span>-&gt;head = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(List.head-&gt;data);</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p1 = <span class="keyword">this</span>-&gt;head,*p2 = List.head;</span><br><span class="line">  <span class="keyword">while</span>(p2-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">    p1-&gt;next = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(p2-&gt;next-&gt;data);</span><br><span class="line">    p1 = p1-&gt;next;</span><br><span class="line">    p2 = p2-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>-&gt;tail = p1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> LinkList&lt;ElemType&gt;::ListDestroy()</span><br><span class="line">&#123;</span><br><span class="line">    LinkNode&lt;ElemType&gt; *p = head, *t = p-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=head)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        p = t;</span><br><span class="line">        <span class="keyword">if</span>(p) t = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重载赋值运算符</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line">LinkList&lt;ElemType&gt;&amp; LinkList&lt;ElemType&gt;::<span class="keyword">operator</span>=(LinkList&lt;ElemType&gt; &amp;List)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">this</span>-&gt;head = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(List.head-&gt;data);</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p1 = <span class="keyword">this</span>-&gt;head,*p2 = List.head;</span><br><span class="line">  <span class="keyword">while</span>(p2-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">    p1-&gt;next = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(p2-&gt;next-&gt;data);</span><br><span class="line">    p1 = p1-&gt;next;</span><br><span class="line">    p2 = p2-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  tail = p1;</span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> LinkList&lt;ElemType&gt;::ListClear()</span><br><span class="line">&#123;</span><br><span class="line">  ListDestroy(head-&gt;next);</span><br><span class="line">  tail = head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回链表的长度</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> LinkList&lt;ElemType&gt;::ListLength() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p = head;</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">      p = p-&gt;next;</span><br><span class="line">      length++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断链表是否为空表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::ListEmpty() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在首节点之前插入一个结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::InsFirst(ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *t = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(e);</span><br><span class="line">  t-&gt;next = head-&gt;next;</span><br><span class="line">  head-&gt;next = t;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在尾节点之后添加一个结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::InsEnd(ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *t = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(e);</span><br><span class="line">  tail-&gt;next = t;</span><br><span class="line">  tail = t;</span><br><span class="line">  tail-&gt;next = head;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置链表头结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> LinkList&lt;ElemType&gt;::SetHead(LinkNode&lt;ElemType&gt; *p)</span><br><span class="line">&#123;</span><br><span class="line">  head = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置尾结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> LinkList&lt;ElemType&gt;::SetTail(LinkNode&lt;ElemType&gt; *p)</span><br><span class="line">&#123;</span><br><span class="line">  tail = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回链表的第i个元素</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line">ElemType LinkList&lt;ElemType&gt;::GetElem(<span class="keyword">int</span> pos)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(pos &lt; <span class="number">1</span>)  <span class="comment">//不合法数据返回头节点data</span></span><br><span class="line">    <span class="keyword">return</span> head-&gt;data;</span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p = head;</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">    num++;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(num == pos)</span><br><span class="line">      <span class="keyword">return</span> p-&gt;data;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> head-&gt;data; <span class="comment">//不合法数据返回头节点data</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在链表的第pos个位置之前插入e元素</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::ListInsert(<span class="keyword">int</span> pos,ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(pos &lt; <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p = head;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *t = <span class="keyword">new</span> LinkNode&lt;ElemType&gt;(e);</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    num++;</span><br><span class="line">    <span class="keyword">if</span>(num == pos)</span><br><span class="line">    &#123;</span><br><span class="line">      t-&gt;next = p-&gt;next;</span><br><span class="line">      p-&gt;next = t;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除链表的首结点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::DelFirst()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(!(head-&gt;next))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *t = head-&gt;next;</span><br><span class="line">  head-&gt;next = t-&gt;next;</span><br><span class="line">  <span class="keyword">delete</span> t;</span><br><span class="line">  <span class="keyword">if</span>(!head-&gt;next)</span><br><span class="line">    tail = head;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//表头插入法动态生成链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> LinkList&lt;ElemType&gt;::CreateList_Head(<span class="keyword">int</span> n, ElemType *A)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> m = n;</span><br><span class="line">  <span class="keyword">while</span>(n)</span><br><span class="line">  &#123;</span><br><span class="line">    InsFirst(*(A+(m-n)));</span><br><span class="line">    n--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//表尾插入法动态生成链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> LinkList&lt;ElemType&gt;::CreateList_Tail(<span class="keyword">int</span> n, ElemType *A)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> m = n;</span><br><span class="line">  <span class="keyword">while</span>(n)</span><br><span class="line">  &#123;</span><br><span class="line">    InsEnd(*(A+(m-n)));</span><br><span class="line">    n--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除链表的第pos个位置的元素</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line">ElemType LinkList&lt;ElemType&gt;::ListDelete(<span class="keyword">int</span> pos)</span><br><span class="line">&#123;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p = head, *t;</span><br><span class="line">  <span class="keyword">while</span>(--pos)</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  t = p-&gt;next;</span><br><span class="line">  p-&gt;next = t-&gt;next;</span><br><span class="line">  <span class="keyword">if</span>(!p-&gt;next)</span><br><span class="line">    tail = p;</span><br><span class="line">  ElemType res = t-&gt;data;</span><br><span class="line">  <span class="keyword">delete</span> t;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//compare函数，用来判断a和b是否相等</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::compare(<span class="keyword">const</span> LinkList&lt;ElemType&gt; &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *t = b.GetHead(), *p = head;</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next || t-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;next-&gt;data != t-&gt;next-&gt;data)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    t = t-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回链表给定数据元素的后继数据元素的值</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::NextElem(LinkNode&lt;ElemType&gt; *p, ElemType &amp;e)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next)</span><br><span class="line">    e = p-&gt;next-&gt;data;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历链表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkList&lt;ElemType&gt;::ListTraverse() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">  LinkNode&lt;ElemType&gt; *p = head;</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next != head)</span><br><span class="line">  &#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;(&#x27;</span>&lt;&lt;p-&gt;num&lt;&lt;<span class="string">&#x27;,&#x27;</span>&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;next != head)</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;-&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXLISTSIZE = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqStack</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ElemType *base;   <span class="comment">// 栈底指针</span></span><br><span class="line">    ElemType *top;   <span class="comment">// 栈顶指针</span></span><br><span class="line">    <span class="keyword">int</span> maxSize;        <span class="comment">// 允许的最大存储容量(以sizeof(ElemType)为单位</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//初始化顺序栈</span></span><br><span class="line">    SqStack(<span class="keyword">int</span> ms = MAXLISTSIZE)</span><br><span class="line">    &#123;</span><br><span class="line">        maxSize = ms;</span><br><span class="line">        base = <span class="keyword">new</span> ElemType[maxSize];</span><br><span class="line">        top = base;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除顺序栈</span></span><br><span class="line">    ~SqStack()&#123;StackDestroy();&#125;</span><br><span class="line">    <span class="comment">//将顺序栈置为空表</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">StackClear</span><span class="params">( )</span></span>&#123;top = base;&#125;</span><br><span class="line">    <span class="comment">//返回顺序栈的长度</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">StackLength</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> top - base;&#125;</span><br><span class="line">    <span class="comment">//设置顺序栈的长度</span></span><br><span class="line">    <span class="comment">//bool SetListLength(int len);</span></span><br><span class="line">    <span class="comment">//判断顺序栈是否为空栈</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">StackisEmpty</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> top == base; &#125;</span><br><span class="line">    <span class="comment">//判断顺序栈是否为满栈</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">StackFull</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> base - top == maxSize;&#125;</span><br><span class="line">    <span class="comment">//用e返回栈顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">GetTop</span><span class="params">(ElemType &amp;e)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        e = *(top<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ElemType <span class="title">GetTop</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> *(top<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//入栈</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(ElemType &amp;e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(StackFull())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        *top = e;</span><br><span class="line">        top++;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//顺序打印</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ElemType *p = base;</span><br><span class="line">        <span class="keyword">while</span>(p!=top)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;*(p++);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(ElemType &amp;e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(StackisEmpty())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        GetTop(e);</span><br><span class="line">        top--;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ElemType <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(StackisEmpty())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        ElemType t = GetTop();</span><br><span class="line">        top--;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//销毁顺序栈</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">StackDestroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">delete</span>[] base;</span><br><span class="line">        base = top = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历顺序栈</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">StackTraverse</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(ElemType* i = base; i != top; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;*i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//栈空间加倍</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">DoubleSpace</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        maxSize *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//比较栈是否相等</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEqual</span><span class="params">(SqStack &amp;t)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t.StackLength() != <span class="keyword">this</span>-&gt;StackLength())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(ElemType *p1 = base, *p2 = t.base; p1 != top; p1++, p2++)</span><br><span class="line">            <span class="keyword">if</span>(*p1 != *p2)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXLISTSIZE = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqQueue</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  ElemType *elem;   <span class="comment">// 存储空间基址</span></span><br><span class="line">  <span class="keyword">int</span> front;   <span class="comment">// 队头指针</span></span><br><span class="line">  <span class="keyword">int</span> rear;   <span class="comment">// 队尾指针</span></span><br><span class="line">  <span class="keyword">int</span> maxSize;        <span class="comment">// 允许的最大存储容量(以sizeof(ElemType)为单位</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//初始化顺序队列</span></span><br><span class="line">  SqQueue(<span class="keyword">int</span> ms = MAXLISTSIZE)&#123;maxSize = ms;front = rear = <span class="number">0</span>; elem = <span class="keyword">new</span> ElemType[ms];&#125;</span><br><span class="line">  <span class="comment">//删除顺序队列</span></span><br><span class="line">  ~SqQueue()&#123;QueueDestroy();&#125;</span><br><span class="line">  <span class="comment">//将顺序队列置为空</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">QueueClear</span><span class="params">()</span></span>&#123;rear = front;<span class="keyword">return</span> <span class="literal">true</span>;&#125;;</span><br><span class="line">  <span class="comment">//设置顺序栈的长度</span></span><br><span class="line">  <span class="comment">//bool SetListLength(int len);</span></span><br><span class="line">  <span class="comment">//判断顺序队列是否为空</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">QueueisEmpty</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> front == rear; &#125;</span><br><span class="line">  <span class="comment">//判断顺序队列是否为满</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">QueueFull</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> rear+<span class="number">1</span> == front;&#125;</span><br><span class="line">  <span class="comment">//用e返回队头元素</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">GetFront</span><span class="params">(ElemType &amp;e)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(!QueueisEmpty())</span><br><span class="line">      &#123;</span><br><span class="line">        e = elem[front];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//入队</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">enQueue</span><span class="params">(<span class="keyword">const</span> ElemType &amp;e)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(QueueFull())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      elem[rear] = e;</span><br><span class="line">      rear++;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//出队</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">deQueue</span><span class="params">(ElemType &amp;e)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(!QueueisEmpty())</span><br><span class="line">      &#123;</span><br><span class="line">          e = elem[front];</span><br><span class="line">          front++;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//销毁顺序队列</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">QueueDestroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(!elem)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">delete</span>[] elem;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//打印</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">//顺序队列最大存储空间加倍</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">DoubleSpace</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> SqQueue&lt;ElemType&gt;::print()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> t = front;</span><br><span class="line">  <span class="keyword">while</span>(t != rear)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;elem[t];</span><br><span class="line">      <span class="keyword">if</span>(++t != rear)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链队列"><a href="#链队列" class="headerlink" title="链队列"></a>链队列</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkQueueNode</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    LinkQueueNode&lt;ElemType&gt; *next;</span><br><span class="line">    LinkQueueNode(LinkQueueNode&lt;ElemType&gt; *ptr = <span class="literal">NULL</span>)&#123;next = ptr;&#125; <span class="comment">//构造函数1，用于构造头结点</span></span><br><span class="line">    LinkQueueNode(<span class="keyword">const</span> ElemType &amp;item, LinkQueueNode&lt;ElemType&gt; *ptr = <span class="literal">NULL</span>) <span class="comment">//构造函数2，用于构造其他结点</span></span><br><span class="line">    <span class="comment">//函数参数表中的形参允许有默认值，但是带默认值的参数需要放后面</span></span><br><span class="line">    &#123;</span><br><span class="line">        next = ptr;</span><br><span class="line">        data = item;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ElemType <span class="title">getData</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> data;&#125;  <span class="comment">//取得结点中的数据</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetLink</span><span class="params">( LinkQueueNode&lt;ElemType&gt; *link )</span></span>&#123; next = link; &#125;  <span class="comment">//修改结点的next域</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetData</span><span class="params">( ElemType value )</span></span>&#123; data = value; &#125;   <span class="comment">//修改结点的data域</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//带头结点的链队列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkQueue</span>&#123;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      LinkQueueNode&lt;ElemType&gt; *front;   <span class="comment">// 队头指针</span></span><br><span class="line">      LinkQueueNode&lt;ElemType&gt; *rear;   <span class="comment">// 队尾指针</span></span><br><span class="line">      <span class="keyword">int</span> length = <span class="number">0</span>;   <span class="comment">//队列当前元素个数</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">      <span class="comment">//无参数的构造函数</span></span><br><span class="line">      LinkQueue()</span><br><span class="line">      &#123;</span><br><span class="line">          front = rear = <span class="keyword">new</span> LinkQueueNode&lt;ElemType&gt;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//析构函数</span></span><br><span class="line">      ~LinkQueue()&#123;LinkQueueDestroy();&#125;</span><br><span class="line">      <span class="comment">//销毁链队列</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">LinkQueueDestroy</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="comment">//清空链表</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">LinkQueueClear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//返回链队列的长度</span></span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">QueueLength</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> length;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//判断链队列是否为空队列</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">QueueisEmpty</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> front == rear;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//出队</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">deQueue</span><span class="params">( ElemType &amp;e )</span></span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//入队</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">enQueue</span><span class="params">( ElemType e )</span></span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取链队列头结点指针</span></span><br><span class="line"></span><br><span class="line">      <span class="function">LinkQueueNode&lt;ElemType&gt;* <span class="title">GetFront</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> front;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取队头元素</span></span><br><span class="line"></span><br><span class="line">      <span class="function">ElemType <span class="title">GetFrontData</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> front-&gt;next-&gt;data;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取链队列队尾指针</span></span><br><span class="line"></span><br><span class="line">      <span class="function">LinkQueueNode&lt;ElemType&gt;* <span class="title">GetRear</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> rear;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//遍历链队列</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">QueueTraverse</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//销毁链队列</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkQueue&lt;ElemType&gt;::LinkQueueDestroy()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!front)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    LinkQueueNode&lt;ElemType&gt; *p;</span><br><span class="line">    <span class="keyword">while</span>(front-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        p = front-&gt;next;</span><br><span class="line">        front-&gt;next = p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> front;</span><br><span class="line">    front = rear = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空链表</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkQueue&lt;ElemType&gt;::LinkQueueClear()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!front)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    LinkQueueNode&lt;ElemType&gt; *p;</span><br><span class="line">    <span class="keyword">while</span>(front-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        p = front-&gt;next;</span><br><span class="line">        front-&gt;next = p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    rear = front;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkQueue&lt;ElemType&gt;::deQueue( ElemType &amp;e )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(QueueisEmpty())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    LinkQueueNode&lt;ElemType&gt; *p = front-&gt;next;</span><br><span class="line">    e = p-&gt;data;</span><br><span class="line">    front-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    length--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkQueue&lt;ElemType&gt;::enQueue( ElemType e )</span><br><span class="line">&#123;</span><br><span class="line">    LinkQueueNode&lt;ElemType&gt; *p;</span><br><span class="line">    p = <span class="keyword">new</span> LinkQueueNode&lt;ElemType&gt;(e);</span><br><span class="line">    rear-&gt;next = p;</span><br><span class="line">    rear = p;</span><br><span class="line">    length++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历链队列</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> LinkQueue&lt;ElemType&gt;::QueueTraverse() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(QueueisEmpty())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    LinkQueueNode&lt;ElemType&gt; *p = front;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><blockquote><p>还没写TT</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="post/53d0684b.html"/>
      <url>post/53d0684b.html</url>
      
        <content type="html"><![CDATA[<h2 id="Linux目录介绍"><a href="#Linux目录介绍" class="headerlink" title="Linux目录介绍"></a>Linux目录介绍</h2><p>/bin存放二进制可执行文件(ls,cat,mkdir等)，常用命令一般都在这里；</p><p>/etc存放系统管理和配置文件；</p><p>/home存放所有用户文件的根目录，是用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示；</p><p>/usr用于存放系统应用程序，比较重要的目录/usr/local 本地系统管理员软件安装目录(安装系统级的应用)。这是最庞大的目录，要用到的应用程序和文件几乎都在这个目录；</p><p>/usr/x11r6 存放x window的目录；</p><p>/usr/bin 众多的应用程序；</p><p>/usr/sbin 超级用户的一些管理程序；</p><p>/usr/doc linux文档；</p><p>/usr/include linux下开发和编译应用程序所需要的头文件；</p><p>/usr/lib 常用的动态链接库和软件包的配置文件；</p><p>/usr/man 帮助文档；</p><p>/usr/src 源代码，linux内核的源代码就放在/usr/src/linux里；</p><p>/usr/local/bin 本地增加的命令；</p><p>/usr/local/lib 本地增加的库；</p><p>/opt额外安装的可选应用程序包所放置的位置。一般情况下，我们可以把tomcat等都安装到这里；</p><p>/proc虚拟文件系统目录，是系统内存的映射。可直接访问这个目录来获取系统信息；</p><p>/root超级用户(系统管理员)的主目录(特权阶级)；</p><p>/sbin存放二进制可执行文件，只有root才能访问。这里存放的是系统管理员使用的系统级别的管理命令和程序。如ifconfig等；</p><p>/dev用于存放设备文件；</p><p>/mnt系统管理员安装临时文件系统的安装点，系统提供这个目录是让用户临时挂载其他的文件系统；</p><p>/boot存放用于系统引导时使用的各种文件；</p><p>/lib存放跟文件系统中的程序运行所需要的共享库及内核模块。共享库又叫动态链接共享库，作用类似windows里的.dll文件，存放了根文件系统程序运行所需的共享文件；</p><p>/tmp用于存放各种临时文件，是公用的临时文件存储点；</p><p>/var用于存放运行时需要改变数据的文件，也是某些大文件的溢出区，比方说各种服务的日志文件(系统启动日志等。)等；</p><p>/lost+found这个目录平时是空的，系统非正常关机而留下“无家可归”的文件(windows下叫什么.chk)就在这里；</p><h2 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h2><p><img src="https://pic.imgdb.cn/item/6177db212ab3f51d91f61594.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构oj</title>
      <link href="post/c8c632fe.html"/>
      <url>post/c8c632fe.html</url>
      
        <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="提纯"><a href="#提纯" class="headerlink" title="提纯"></a>提纯</h3><blockquote><p>记录一下我踩的坑吧…真够蠢的</p><ol><li>没加abs，因为题目是绝对值…</li><li>删除元素以后pos应该–，或者删除的时候pos不++，传参的时候传pos+1</li><li>拿一个指针记录上一次的位置！</li><li>把其它题目adt复制过来了，忘了原题是个循环链表…</li><li>new出来的数组没有初始化0…</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete_Equal_Node</span><span class="params">( LinkList&lt;ElemType&gt; &amp;A, <span class="keyword">int</span> N )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *arr = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">        arr[i] = <span class="number">0</span>;</span><br><span class="line">    LinkNode&lt;ElemType&gt; *p = A.GetHead()-&gt;next, *t;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    p = A.GetHead()-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!arr[<span class="built_in">abs</span>(p-&gt;data)])</span><br><span class="line">        &#123;</span><br><span class="line">            arr[<span class="built_in">abs</span>(p-&gt;data)] = <span class="number">1</span>;</span><br><span class="line">            t = p;</span><br><span class="line">            pos++;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p = t;</span><br><span class="line">            A.ListDelete(pos+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有序归并"><a href="#有序归并" class="headerlink" title="有序归并"></a>有序归并</h3><blockquote><p>当b比a长的时候，要把b接在a后边，还要注意b本身也要提纯。。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge_L_Order</span><span class="params">( LinkList&lt;ElemType&gt; &amp;A, LinkList&lt;ElemType&gt; &amp;B )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkNode&lt;ElemType&gt; *pa = A.GetHead()-&gt;next, *pb = B.GetHead()-&gt;next, *t1=A.GetHead(), *t2;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(pa)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!pb)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(pb-&gt;data &lt; pa-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            t2 = pb-&gt;next;</span><br><span class="line">            A.ListInsertNode(t1, pb);</span><br><span class="line">            pa = pb;</span><br><span class="line">            pb = t2;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pb-&gt;data == pa-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            t2 = pb-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> pb;</span><br><span class="line">            pb = t2;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pos ++;</span><br><span class="line">            t1 = pa;</span><br><span class="line">            pa = pa-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pb)</span><br><span class="line">        A.GetTail()-&gt;next = pb;</span><br><span class="line">    <span class="keyword">while</span>(pb &amp;&amp; pb-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(pb-&gt;next-&gt;data == pb-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            t1 = pb-&gt;next;</span><br><span class="line">            pb-&gt;next = t1-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> t1;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pb = pb-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pb)</span><br><span class="line">        A.SetTail(pb);</span><br><span class="line">    <span class="keyword">delete</span> B.GetHead();</span><br><span class="line">    B.GetTail()-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ADT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构oj</title>
      <link href="post/c8c632fe.html"/>
      <url>post/c8c632fe.html</url>
      
        <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="提纯"><a href="#提纯" class="headerlink" title="提纯"></a>提纯</h3><blockquote><p>记录一下我踩的坑吧…真够蠢的</p><ol><li>没加abs，因为题目是绝对值…</li><li>删除元素以后pos应该–，或者删除的时候pos不++，传参的时候传pos+1</li><li>拿一个指针记录上一次的位置！</li><li>把其它题目adt复制过来了，忘了原题是个循环链表…</li><li>new出来的数组没有初始化0…</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ElemType</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete_Equal_Node</span><span class="params">( LinkList&lt;ElemType&gt; &amp;A, <span class="keyword">int</span> N )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *arr = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">        arr[i] = <span class="number">0</span>;</span><br><span class="line">    LinkNode&lt;ElemType&gt; *p = A.GetHead()-&gt;next, *t;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    p = A.GetHead()-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!arr[<span class="built_in">abs</span>(p-&gt;data)])</span><br><span class="line">        &#123;</span><br><span class="line">            arr[<span class="built_in">abs</span>(p-&gt;data)] = <span class="number">1</span>;</span><br><span class="line">            t = p;</span><br><span class="line">            pos++;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p = t;</span><br><span class="line">            A.ListDelete(pos+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有序归并"><a href="#有序归并" class="headerlink" title="有序归并"></a>有序归并</h3><blockquote><p>当b比a长的时候，要把b接在a后边，还要注意b本身也要提纯。。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge_L_Order</span><span class="params">( LinkList&lt;ElemType&gt; &amp;A, LinkList&lt;ElemType&gt; &amp;B )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkNode&lt;ElemType&gt; *pa = A.GetHead()-&gt;next, *pb = B.GetHead()-&gt;next, *t1=A.GetHead(), *t2;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(pa)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!pb)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(pb-&gt;data &lt; pa-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            t2 = pb-&gt;next;</span><br><span class="line">            A.ListInsertNode(t1, pb);</span><br><span class="line">            pa = pb;</span><br><span class="line">            pb = t2;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pb-&gt;data == pa-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            t2 = pb-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> pb;</span><br><span class="line">            pb = t2;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pos ++;</span><br><span class="line">            t1 = pa;</span><br><span class="line">            pa = pa-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pb)</span><br><span class="line">        A.GetTail()-&gt;next = pb;</span><br><span class="line">    <span class="keyword">while</span>(pb &amp;&amp; pb-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(pb-&gt;next-&gt;data == pb-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            t1 = pb-&gt;next;</span><br><span class="line">            pb-&gt;next = t1-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> t1;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pb = pb-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pb)</span><br><span class="line">        A.SetTail(pb);</span><br><span class="line">    <span class="keyword">delete</span> B.GetHead();</span><br><span class="line">    B.GetTail()-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ADT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记</title>
      <link href="post/71513ccb.html"/>
      <url>post/71513ccb.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue核心"><a href="#Vue核心" class="headerlink" title="Vue核心"></a>Vue核心</h1><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>不写了，参考文档</p><p>引入vue.js开发版的时候，控制台会提示，这个提示可以关掉。</p><p><code>Vue.config.productionTip = false</code></p><p><code>el</code>也可以通过`.$mount(‘#root’)挂载</p><p><strong>后面用到了es6的简写，如果不了解es6语法的可以适当补充一下</strong></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>vue不能挂在到html和body上。</li><li>vue作用范围包括子元素</li><li>建议使用id选择器</li><li>一个vue实例对应一个容器，<strong>一对一</strong></li><li>插值里可以写js表达式，一个表达式可以生成一个值（变量，运算，三元，函数…）</li><li>data里面写多个同名属性，会覆盖，只有最后一个有用。</li><li>methods里面的最好不要写箭头函数，否则会导致this从vue变成了window。</li></ol><h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2><blockquote><p>大概是vue的MVVM的原理</p></blockquote><p><code>Object.defineProperty</code>可以用来给一个对象添加属性，此时添加的属性是具有封装性质的属性，这个属性是否可枚举，可改，可删除都是可以设置的，默认都是false。该函数的参数有三个，分别是对象，属性名，和配置对象。配置对象里可以设置<code>get</code>和<code>set</code>函数，来决定该属性的值从哪里获取。而<code>vue</code>将<code>data</code>对象里的东西保存在自己的<code>_data</code>里，然后当访问<code>_data</code>或者修改时，便会调用<code>get</code>和<code>set</code>函数，从而达到数据更新的目的。且只有<code>data</code>里面的才会数据代理</p><p>我的感觉时重载了<code>.</code>运算符，用户访问vm.name便会调用vm._data.name，但是<code>_data</code>里进行了数据劫持，并不直接提供，而是再度进行封装。总之js的基于对象不是基于类的思路，而是走了<strong>原型</strong>这条路。具体关于js的面向对象可以参考<a href="https://blog.csdn.net/cpongo3/article/details/89026265">这里</a>。</p><h2 id="认识指令"><a href="#认识指令" class="headerlink" title="认识指令"></a>认识指令</h2><blockquote><p>vue主要的一些指令，后面详细解读其原理和更多用法</p></blockquote><p><code>&lt;h2 v-text=&quot;message&quot;&gt;&lt;/h2&gt;</code> 替换所有</p><p>支持字符串拼接</p><p><code>v-html</code>会按照html渲染</p><p><code>v-on:</code> 、<code>@</code>，可以传参，可以简写<code>@click = &quot;isHot = !isHot&quot;</code></p><p><code>v-show``v-if</code> 前者只改变display属性</p><p><code>v-bind:src = &quot;xxx&quot;</code>、<code>:src = &quot;&#123;active:isActive&#125;&quot;</code>可以使用对象形式或者三元表达式</p><p><code>v-model</code>双向绑定，只能用于输入型元素，需要有value属性，另外，<code>v-model:value</code>可以简写为<code>v-model</code></p><p><code>v-for = &quot;(item, index) in arr&quot;</code></p><p><code>v-message</code>和某个变量双向绑定</p><p><code>v-cloak</code>一个特殊的属性，没有值，vue在接管以后会删掉这个属性。因此，可以利用css来防止因为网速慢而显示出<code>&#123;&#123;&#125;&#125;</code>这样的插值表达式。cloak意思为斗篷。利用css属性选择器<code>[cloak]:&#123;display: none&#125;</code>就行了。</p><p><code>v-once</code>动态渲染之后，即为静态数据。</p><p><code>v-pre</code>跳过该元素的渲染，如果确定该元素不需要vue，那么加<code>v-pre</code>效率更高</p><h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><blockquote><p>事件修饰符是在事件名称后直接<code>.</code>一些属性，属于一些简便的写法。下边举几个例子</p></blockquote><ol><li><p>可以使用事件修饰符<code>@keyup.enter=&quot;myFun&quot;</code>表示回车键，类似的有delete，esc，space，up，down，left等等。特殊的例如CapsLock要用caps-lock。另外tab本身再keydown的时候会切换焦点，所以要想绑定需要用keydown。还有几个比较特殊的键，ctrl，alt，win，shift，当他们与keyup绑定的时候，需要组合键（alt+1)才能出发，keydown正常。如果想用自己的别名，需要再js配置一下，例如给回车键起别名：<code>Vue.config.keyCodes.huiche = 13</code>。</p></li><li><p>想传参就加括号，不想传参爱写不写！但是写了如果传参，记得多传一个$event，别搞丢了事件。</p></li><li><p>再有，<code>event</code>有一个<code>preventDefault()</code>的方法，也可以通过<code>@click.prevent</code>实现。<code>e.target</code>是触发事件的对象</p></li><li><p>同理，为了阻止事件冒泡，<code>e.stopPropagation()</code>，也可以用<code>@click.stop</code>代替。一共有六个事件修饰符。</p></li><li><p>还有<code>.once</code>表示一次性。</p></li><li><p>还可以连着写！<code>@click.stop.prevent</code>，<code>@click.ctrl.y</code></p></li></ol><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><blockquote><p>计算属性，在Vue的机制里，会通过getter计算出新的属性，最后成为vm的一个属性值，最终的计算属性只是一个属性值，不是对象！具体用法参见下边的代码。通过自动调用getter和setter来达到目的。</p><p>需要注意的是，当第一次加载fullName和所依赖的数据如firstName发生改变的时候，fullName会重新调用。如果依赖的数据没有发生变化，得益于vue的缓存机制，fullName的get只会在最开始调用一次，所以性能由于methods。</p><p>当修改fullName的值时，set函数调用。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    fullName:&#123;</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="built_in">this</span>.lastName;<span class="comment">//这里的this已经被重新定向为vm，切记不要用箭头函数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算属性的简写"><a href="#计算属性的简写" class="headerlink" title="计算属性的简写"></a>计算属性的简写</h3><blockquote><p>下面再来说一下计算属性的简写形式。</p><p>当你的计算属性不涉及setter的时候才可以简写，简写代码见下方。</p><p>你会发现简写之后的形式，就相当于methods里面的一个函数。但是不同的是，computed里面的函数是Vue调用执行的，最后计算完后成为了vm的一个属性。所以插值引用时不能加括号，这点和直接调用methods里的方法是不同的，且methods里的没有缓存机制和计算属性的一些独有的优化特点。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    <span class="function"><span class="title">fullName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="built_in">this</span>.lastName;<span class="comment">//这是一种简写形式，但是fullName不能去主动调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="监视（侦听）属性"><a href="#监视（侦听）属性" class="headerlink" title="监视（侦听）属性"></a>监视（侦听）属性</h2><blockquote><p>监视属性，顾名思义就是当某些属性发生改变的时候，会触发handler。这里说的属性包括上边提到的计算属性。如果写了不存在的属性，那么新旧值都是undefined，不报错。写法如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">    isHot:&#123;</span><br><span class="line">        <span class="comment">//此处举两个配置项</span></span><br><span class="line">immediate: <span class="literal">true</span>, <span class="comment">//一上来就调用，此时oldValue是undefined</span></span><br><span class="line"><span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为了灵活，也可以通过vm的$watch来调用，但是必须在Vue对象实例化之后才能调用</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,&#123;</span><br><span class="line">    immediate: <span class="literal">true</span>,</span><br><span class="line">    <span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">        。。。</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="深度监视"><a href="#深度监视" class="headerlink" title="深度监视"></a>深度监视</h3><blockquote><p>我们常常遇到这样的问题：当我们要监视的数据不是一个简单的数据类型时（例如一个对象），那么当我们改变了对象的一个属性，对象是否变了呢？本质来说，对象的地址没有变，那么可以认为对象是没有变化的。于是如果我们想监视对象的某个属性就需要用到把上边提到的<code>isHot</code>换成<code>&#39;对象名.属性&#39;</code>这里的引号时必不可少的，具体参见es语法，此处不多赘述。</p><p>但是当我们想要监视这个对象的任一属性时，我们直接写该对象时不行的，因为<code>watch</code>默认不会深度监视，所以需要我们打开这个配置，如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">    一个对象:&#123;</span><br><span class="line">        deep: <span class="literal">true</span> <span class="comment">//打开深度监视</span></span><br><span class="line">        <span class="comment">//此处举两个配置项</span></span><br><span class="line">immediate: <span class="literal">true</span>, <span class="comment">//一上来就调用，此时oldValue是undefined</span></span><br><span class="line"><span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监视属性的简写"><a href="#监视属性的简写" class="headerlink" title="监视属性的简写"></a>监视属性的简写</h3><blockquote><p>简写模式和计算属性类似，都需要只有一个函数配置项，这里对于watch和$watch的简写举例说明</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">    <span class="function"><span class="title">isHot</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">      ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="监视与计算的对比"><a href="#监视与计算的对比" class="headerlink" title="监视与计算的对比"></a>监视与计算的对比</h3><blockquote><p>两者某些功能都可以实现，计算属性相对于监视来说不需要再data里面提前定义好属性，所以更加简洁。但是计算属性完全依赖于return的值，所以对于类似定时器等功能无法正常实现，但是监视就方便了。不过需要注意的时，定时函数为什么不写function呢，这就需要了解一下js高级里面的this了，对于function，谁调用的function，this就是谁。但是箭头函数时没有this的，这时this指的就是外层的this，很显然，外层的this就是vm。所以这里不写fuction。</p><p>总结：vm管理的函数需要用function，除非不需要用到this，而如果不是vm管理的函数（例如定时器，ajax回调，promise回调），用箭头函数。总之，目的就是让this指向vm。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wahch:&#123;</span><br><span class="line">    <span class="function"><span class="title">firstName</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.fullName = val + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.lathName</span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="样式绑定"><a href="#样式绑定" class="headerlink" title="样式绑定"></a>样式绑定</h2><blockquote><p>一个标签如果写多个class属性<code>class=&#39;xxx&#39; class=&#39;yyy&#39;</code>，默认只解析第一个。在vue中，我们可以写<code>class = &#39;xxx&#39; :class=&#39;yyy&#39;</code>，两者并不冲突，此时，前者时正常的属性，后者时通过<code>v-bind</code>绑定js表达式，最终由vue一起绑定到class。这里的表达式可以是字符串变量，数组变量和对象，具体格式如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串就不写了</span></span><br><span class="line"><span class="comment">//数组也不写了，直接解析里面所有的属性</span></span><br><span class="line"><span class="comment">//对象</span></span><br><span class="line">classObj&#123;</span><br><span class="line">    class1: <span class="literal">true</span>, <span class="comment">//这里的true绑定一个boolean变量，表示样式的开关</span></span><br><span class="line">    class2: flase</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="style绑定"><a href="#style绑定" class="headerlink" title="style绑定"></a>style绑定</h3><blockquote><p>在上边讲过了class的绑定，这里再说一下style的绑定（虽然用的很少），但是还是介绍一下</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">:style = <span class="string">&quot;&#123;fontSize: 20px&#125;&quot;</span> <span class="comment">//这里需要些样式对象，或者对象数组，注意font-size要写成fontSize</span></span><br></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p><code>v-show = &quot;js表达式&quot;</code></p><p><code>v-if</code></p><p><code>v-else-if</code>    如果上边的v-if满足，那么后面的v-else-if不判断。</p><p><code>v-else</code> 用法我就不用说了吧，猜也能猜到👵不过需要注意的是，通过v-if控制的几条不能被打断。</p><h3 id="v-if与-lt-template-gt"><a href="#v-if与-lt-template-gt" class="headerlink" title="v-if与&lt;template&gt;"></a><code>v-if</code>与<code>&lt;template&gt;</code></h3><blockquote><p>当我们需要个一些元素添加样式，又不想一个一个添加，又不想增加父元素，可以用如下的方法，效果实现了，且在dom里面没有template元素，<strong>template不能和v-show使用。</strong></p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span> = <span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hhh<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hhh<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><blockquote><ol><li>可以有两个形参，虽然不加括号也行，但是建议加上</li><li>key值Vue用来对比前后的虚拟dom的，如果变更以后的虚拟dom和旧的一样，那么就不再重新渲染，而是直接复用，节省效率。所以当你的列表需要变化，例如排序，增删，那么key就非常重要，默认key是index，你需要加一个:key = p.id之类的专用key，防止列表出现问题，尤其是包含input输入框的时候，容易出岔子。</li><li>遍历的对象不一定是数组，也可以是对象，也可以是字符串，具体不多解释，试试就知道了。</li></ol></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p, index) in persons&quot;</span> <span class="attr">:key</span> = <span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;p.name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数据监测"><a href="#数据监测" class="headerlink" title="数据监测"></a>数据监测</h2><blockquote><p>这是一块复杂的知识，但是如果不搞懂底层的逻辑，可能会在数据监测中遇到很多问题。首先，我们在<code>data</code>里面写的数据会被加载到vm的<code>_data</code>上，同时，这些属性也会在vm的根节点上，也就是说我们可以直接访问<code>vm.property</code>，然后通过调用get来访问<code>_data</code>里面的属性，<code>_data</code>里的属性同样需要getter，共有两层的getter。为什么要这样呢，前者是为了调用方便，不然每次多要写<code>_data</code>也太不爽了，后者是为了监测数据，你想，当你修改data里的某个数据时，vm如果不知道，那还怎么监测并重新解析数据呢。因此，需要用到<code>_data</code>里面的getter和setter，当你修改数据时，调用了<code>set</code>，从而实现检测的效果。</p></blockquote><p> 上边大概说明白了监测实质就是vue将你写在data里面的东西加工了。但是当加工以后，我们还想再往里面添加属性怎么办呢，这就需要深入探讨一下了。</p><p> 大概分为两种情况，一个是往一个<strong>对象</strong>里添加属性，一个是往<strong>数组</strong>里添加数据。</p><p> 前者，很容易想到<code>obj.name = &#39;jack&#39;</code>这样的例子，以为我们拿到对象节点就万事大吉，但是不然，这样添加的属性是没有监测效果的，也就是说没有对应的getter和setter，那么怎么办呢，vue提供了解决办法，你可以通过<code>Vue.set(obj, property, value)</code>来添加属性。</p><p> 后者，我们可以借鉴对象的方式，因为数组毕竟也是个对象，万物皆对象嘛，我们可以将property换成index即可。<code>Vue.set(arr, index, value)</code>。但同时，vue也对数组进行了专门的优化，首先数组里面的每个数据是没有对应的getter和setter的，那么当我们修改数组的数据时，vue怎么判断呢？其实，vue专门对数组的几个函数进行了修改，<code>push pop  shift unshift splice sort reverse</code>这几个函数是可以修改原数组的值的，当我们通过这几个函数来修改数组的时候，vue就可以检测到了。切记不要直接通过索引值来修改。</p><p>最后说一下细节问题，数组里面如果是对象，那么这个对象的属性是有getter、setter的。</p><h2 id="表单收集"><a href="#表单收集" class="headerlink" title="表单收集"></a>表单收集</h2><blockquote><p>我们知道，一想到表单收集，肯定就是<code>v-model</code>了，但是需要注意些特殊的坑，毕竟表单有单选，复选，单行，多行等。</p></blockquote><ol><li><code>&lt;input type = &#39;text&#39; v-model=&#39;account&#39;/&gt;</code>收集到的是输入的数据</li><li><code>&lt;input type = &#39;radio&#39; v-model=&#39;account&#39; value=&#39;sex&#39;/&gt;</code>单选框，收集到的是value，由于没有输入，默认是null，所以需要配置value属性。</li><li><code>&lt;input type = &#39;checkbox&#39; v-model=&#39;account&#39;/&gt;</code><ol><li>如果不配置input，默认手机checked属性，即布尔值</li><li>如果配置<ul><li>当v-model初始值不是数组，收集的还是checked</li><li>否则收集的是value组成的数组。</li></ul></li></ol></li><li>修饰符<ol><li>lazy：失去焦点再收集</li><li>number：收集类型转成数字</li><li>trim：去除前后空格</li></ol></li></ol><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><blockquote><p>其实vue指令本质不就是底层在操作dom嘛，所以你只需要自己写一个指令名，例如<code>v-hello</code>，当你在配置项里配置好hello，那么就可以用了。代码如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:</span><br><span class="line">    data:</span><br><span class="line">    directives&#123;</span><br><span class="line">    hello(element, binding)</span><br><span class="line">&#123;</span><br><span class="line">            element.innerText = binding.value <span class="comment">//就不用多说了吧，两个参数，一个是dom元素，一个是绑定对象，包括了表达式，值等等很多属性，我直呼vue太贴心了。</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="完整"><a href="#完整" class="headerlink" title="完整"></a>完整</h3><blockquote><p> 但是有一些特殊的需求，例如<code>el.focus()</code>，有些命令只能在元素插入到页面以后才能执行。这时候我们就要考虑到自定义指令的调用时机了。</p><p>上一个简写模式，只有在最开始绑定以及随后重新解析模板的时候才会调用，也就是没有inserted。并没有所谓的“元素插入页面以后调用”，那么就来看看完全体吧，上代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:</span><br><span class="line">    data:&#123;&#125;</span><br><span class="line">    directives&#123;</span><br><span class="line">    hello:</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="function"><span class="title">bind</span>(<span class="params">ele, bindind</span>)</span>&#123;&#125; <span class="comment">//绑定时调用</span></span><br><span class="line"><span class="function"><span class="title">inserted</span>(<span class="params">ele, bindind</span>)</span>&#123;&#125; <span class="comment">//插入以后调用</span></span><br><span class="line"><span class="function"><span class="title">update</span>(<span class="params">ele, binding</span>)</span>&#123;&#125; <span class="comment">//模板更新时调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol><li>vue默认会转成小写，所以命名不要驼峰命名，而是要用v-user-name这样的命名，具体叫啥，我没记住。</li><li>如果想写全局firective，就用<code>Vue.directive(&#39;hello&#39;, function()&#123;...&#125;)</code>，和全局的过滤器是一样的，但是什么是全局过滤器呢，我听了，但是不想写了。反正就是<code>filters filter</code>之类的，好像vue3被弃用了，听听算了。</li><li>this是<strong>window</strong></li></ol><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><blockquote><p>来了！重点来了。</p></blockquote><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:</span><br><span class="line">    data:&#123;&#125;</span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123; <span class="comment">//第一次加载并把元素挂载到页面以后</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><img src="https://pic.imgdb.cn/item/614ec6632ab3f51d918effba.jpg" alt="生命周期"></p><h3 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h3><ol><li>重点关注mounted和beforeDestroy。</li><li>在后者里修改数据不会再触发更新</li></ol><h2 id="一些片段"><a href="#一些片段" class="headerlink" title="一些片段"></a>一些片段</h2><blockquote><p>跟着教程敲的一些片段</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">&quot;sub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">      el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">      data:&#123;</span><br><span class="line">        num: 1</span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line"><span class="javascript">        add:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.num++;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        sub:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.num--;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span> = <span class="string">&quot;isShow&quot;</span>&gt;</span>嘿嘿嘿<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">&quot;toggle&quot;</span>&gt;</span>显示/隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">      el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">      data:&#123;</span><br><span class="line"><span class="javascript">        isShow: <span class="literal">true</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line"><span class="javascript">        toggle:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.isShow = !<span class="built_in">this</span>.isShow</span></span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><blockquote><p>axios回调函数里面的this已经改变，无法在会点函数内部通过this访问data，可以在回调之前拿一个变量保存一下this</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.get(url).then</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.post(url,data).then</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h1><blockquote><p>在常规编写中，为了复用，有了模块的概念，也就是分成多个js。而这里的组件化，是撒子呢。看下去</p></blockquote><h2 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h2><blockquote><p>虽然开发中不太常用，但这里还是写一些基本的用法</p></blockquote><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = Vue.extend(</span><br><span class="line">&#123;</span><br><span class="line">    template:<span class="string">`这里写html模板可以多行`</span>，</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//data这里不能写对象，而是写函数，因为要拷贝而不是指向同一个</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:</span><br><span class="line">    data:</span><br><span class="line">    components:&#123;</span><br><span class="line">    school: s <span class="comment">//注册组件</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="细节-2"><a href="#细节-2" class="headerlink" title="细节"></a>细节</h3><ol><li><p>命名</p><ul><li>一个单词可以首字母大写也可以不大写</li><li>多个单词可以（kebab-case)也可以大驼峰(CamelCase)，但是不在脚手架里，大驼峰是不支持的。</li></ul></li><li><p>标签可以写双标签<code>&lt;school&gt;&lt;/school&gt;</code>，也可以但标签<code>&lt;school/&gt;</code>，但是如果不在脚手架，但标签会导致后续组件无法渲染</p></li><li><p>简写</p><p>const school = Vue.extend(options) 可以简写为 const school = options</p><p>原理就是，如果你在传入的是一般对象，那么vue会自动调用extend</p></li></ol><h3 id="嵌套组件"><a href="#嵌套组件" class="headerlink" title="嵌套组件"></a>嵌套组件</h3><blockquote><p>把一个组件当成html，同时把子组件挂载到父组件上。顺序要注意，子组件要在前面。其实每个组件就是一个VueComponent实例，简称vc实例，vc和vm类似，this指向vc，vc是在vm的$children属性里。两个构造函数Vue和VueComponent类似，但是不一样，例如vc里面不能传el，再例如，data在vc里必须是函数，vm里可以是对象。而且正是由于vc是可以复用的，所以data不能写对象。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> b = Vue.extend(</span><br><span class="line">&#123;</span><br><span class="line">    template:<span class="string">``</span>， </span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> s = Vue.extend(</span><br><span class="line">&#123;</span><br><span class="line">    template:<span class="string">`这里写html模板可以多行&lt;b&gt;&lt;b/&gt;`</span>，<span class="comment">//挂在子组件</span></span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//data这里不能写对象，而是写函数，因为要拷贝而不是指向同一个</span></span><br><span class="line">&#125;</span><br><span class="line">components:&#123;</span><br><span class="line">        boy: b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:</span><br><span class="line">    data:</span><br><span class="line">    components:&#123;</span><br><span class="line">    school: s <span class="comment">//注册组件</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="关于原型"><a href="#关于原型" class="headerlink" title="关于原型"></a>关于原型</h3><blockquote><p>在Vue中做了一件事，那就是把VueComponent的原型的原型指向了Vue的原型，而不是Object。具体关于原型的理解，我是这么想的，一个构造函数，本身就是一个对象，他有一个属性是<code>prototype</code>，称为显示原型属性，这个属性里存放的东西可以理解为一个类的静态属性。在这个属性里的东西，所有由该构造函数new的对象通过<code>.__proto__</code>（隐式原型属性）共享。而Vue将VueComponent构造函数的<code>prototype</code>的<code>__proto__</code>的指向从Object修改成了Vue的原型对象，以至于组件可以访问Vue中的显示属性。如果还是不太理解，可以去补充一下js高级。js的面向对象和c++和java还是有还很大区别的。</p></blockquote><h2 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h2><blockquote><p>终于来了，后缀是.vue，简单说一下组件化的运行逻辑，首先入口是一个html和一个main.js，这个main.js不需要你手动引入，只需要在main.js引入Vue和app组件，然后里面配置好Vue实例，配置好需要的组件（其实只有一个app组件），挂载到对应的html文件上（render）即可。下面是一个组件（.vue）的模板，分为三块，template script style。另外public里面的html文件用到了jsp语法，自己学吧。html里面的<code>&lt;noscript&gt;</code>标签，表示不支持js的时候才解析里面的内容。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">        &#123;&#123;msg&#125;&#125; &#x2F;&#x2F;template下必须有一个根节点</span><br><span class="line">    &lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">    name: Student, &#x2F;&#x2F;为了让其它组件引入，需要export</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">... 没有就可以不写</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><blockquote><p>由于运行时vue缺少模板渲染，所以用render来替代</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">render: <span class="function"><span class="params">h</span> =&gt;</span> h(App); <span class="comment">//vue将会向h传递一个creatElement的函数，来创建元素，且不需要配置component。另外，h的形参传递组件例如App，则如上。如果传html代码，则h(&#x27;h1&#x27;,&#x27;Heloo&#x27;)。</span></span><br></pre></td></tr></table></figure><h3 id="修改默认配置"><a href="#修改默认配置" class="headerlink" title="修改默认配置"></a>修改默认配置</h3><blockquote><p>想查看Vue-cli的默认配置，只需要控制台<code>vue inspect &gt; output.js</code>，就可以导出所有的配置项目，生成一个js。该文件修改是无效的。如何修改呢？</p></blockquote><p>对于main.js src public index.html favicon.ico就别修改了，能够修改的可以去<a href="https://cli.vuejs.org/zh/config/">这里</a>参考一下。具体过程就是在根目录（和package.json同级）创建一个<code>vue.config.js</code>，参照官网的配置项修改。该文件暴露采用common.js，最后和webpack的配置整合。</p><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><blockquote><p>为了获取元素和组件，vue自定义的一个属性ref，如下当我们给一个元素或者组件加上ref属性以后，就可以通过<code>this.$refs.title</code>拿到这个元素或者组件。和id类似，但是对于组件，通过id拿到的组件是渲染之后的组件而不是组件本体。</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span> = <span class="string">&#x27;title&#x27;</span>&gt;</span></span><br><span class="line">    hhh</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="prop"><a href="#prop" class="headerlink" title="prop"></a>prop</h3><ol><li><p>功能：让组件接收外部传过来的数据（组件传参）</p></li><li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot; sex=&quot;hhh&quot;/&gt;</code>，这里如果是<code>:name=&quot;xxx&quot;</code>那么xxx会按照js表达式解析</p></li><li><p>接收数据：</p><ol><li>第一种方式（只接收）：<code>props:[&#39;name&#39;]</code></li><li>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></li><li>第三种方式（限制类型、限制必要性、指定默认值）：</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">   </span><br><span class="line">name:&#123;</span><br><span class="line">   </span><br><span class="line">type:<span class="built_in">String</span>, <span class="comment">//类型</span></span><br><span class="line">   </span><br><span class="line">required:<span class="literal">true</span>, <span class="comment">//必要性</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">default</span>:<span class="string">&#x27;老王&#x27;</span> <span class="comment">//默认值</span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql学习笔记</title>
      <link href="post/295082ac.html"/>
      <url>post/295082ac.html</url>
      
        <content type="html"><![CDATA[<h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><ol><li><p>服务端口默认<code>3306</code></p></li><li><p>安装的时候选择自动添加<code>path</code></p></li><li><p>编码格式<code>utf8</code></p></li><li><p>windows启动服务</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net start 服务名称（mysql）</span><br><span class="line">net stop 服务名称</span><br></pre></td></tr></table></figure></li></ol><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><ol><li><p>首先确保mysql服务已经打开，不确定话<code>net start mysql</code>试试</p></li><li><p><code>mysql -uroot -pxxxx</code></p><p>xxxx为你的密码，也可以不显示密码登录</p><p><code>mysql -uroot -p</code></p><p>然后输入密码（此时密码以*显示）即可登录。</p></li></ol><h3 id="密码重置（8-0-23）"><a href="#密码重置（8-0-23）" class="headerlink" title="密码重置（8.0.23）"></a>密码重置（8.0.23）</h3><blockquote><p>网上老的教程可能已经过时，8.0以上不支持<code>mysqld --skip-grant-tables</code></p></blockquote><ol><li><p>打开命令窗口cmd，输入命令：<code>net stop mysql</code>，停止MySQL服务，</p></li><li><p>开启跳过密码验证登录的MySQL服务，输入命令，然后不要关闭此窗口，命令如下：</p><p> <code>mysqld --console --skip-grant-tables --shared-memory</code></p></li><li><p>再打开一个新的cmd，无密码登录MySQL，输入登录命令：<code>mysql -u root -p</code>，然后回车即可</p><ol start="4"><li>密码置为空，命令如下：</li></ol><p><code>use mysql</code></p><p><code>update user set authentication_string=&#39;&#39; where user=&#39;root&#39;;</code></p><ol start="5"><li><p>退出，命令如下</p><p><code>quit</code></p></li></ol></li><li><p>关闭以<code>-console --skip-grant-tables --shared-memory</code>启动的MySQL服务（即关闭第一个打开的cmd窗口）</p><ol start="7"><li><p>打开cmd，输入：<code>net start mysql</code>启动MySQL服务。</p></li><li><p>步骤4密码已经置空，所以无密码状态登录MySQL，输入登录命令：mysql -u root -p，然后回车即可登录</p></li><li><p>修改密码，如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> 你的密码<span class="string">&#x27;;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>验证更改后密码正确登录</p></li><li><p>输入quit，退出当前登录，输入登录命令：<code>mysql -u root -p</code></p></li><li><p>输入密码，成功登录，到此，重置密码结束。</p></li></ol><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><blockquote><p>以<code>;</code>结尾</p></blockquote><p><code>show databases;</code></p><p><code>use test</code></p><p><code>create database test2;</code></p><p><code>quit\exit</code></p><p><code>show tables;</code></p><p><code>source D:\xxx\xxx\xxx.sql</code></p><p><code>select version();</code></p><p><code>select database();</code></p><p><code>\c</code>终止写了一半的语句</p><h2 id="SQL语句简介"><a href="#SQL语句简介" class="headerlink" title="SQL语句简介"></a>SQL语句简介</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol><li><p>DQL：查询（select）</p></li><li><p>DML：对表中的数据进行增删改，操作（insert delete update）</p><hr><p>以下是了解一下</p></li><li><p>DDL：定义，（create drop alter）操作表结构增删改</p></li><li><p>TCL：事务控制</p><ol><li>事务提交：commit</li><li>事务回滚：rollback</li></ol></li><li><p>DCL：控制（授权，撤销授权等）</p></li></ol><h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">desc tableName; //查询表的结构</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">form</span> dept;//查询一个子段</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,age <span class="keyword">from</span> dept;//查询多个字段</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tableName; //查询所有字段，效率低，可读性差</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> hhh <span class="keyword">from</span> dept;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">as</span> hhh <span class="keyword">from</span> dept;//起别名</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="string">&#x27;my hhh&#x27;</span> <span class="keyword">from</span> dept;//别名有空格加引号（单双都可，单最好用单引号，单引号是标准 ，如果别名是中文也要引号）</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, age*<span class="number">12</span> <span class="keyword">from</span> dept;//可以使用数学表达式</span><br><span class="line"><span class="keyword">select</span> 这里写个字符串或者数字（字面值） <span class="keyword">from</span> emp;//返回的是n个字符串或数字，了解一下（查看表的结构）</span><br></pre></td></tr></table></figure><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> dept <span class="keyword">where</span> age = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> dept <span class="keyword">where</span> age &lt;&gt; <span class="number">12</span>;//就是!=的意思</span><br><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">&#x27;smith&#x27;</span>;</span><br><span class="line"></span><br><span class="line">//常用的条件</span><br><span class="line">=</span><br><span class="line">&lt;&gt; !=</span><br><span class="line">&lt;</span><br><span class="line">&lt;=</span><br><span class="line">&gt;</span><br><span class="line">&gt;=</span><br><span class="line">between ... and ...//等同于下边  的</span><br><span class="line">&gt;= and &lt;= </span><br><span class="line">is null//null 不能用=</span><br><span class="line">is not null</span><br><span class="line">and</span><br><span class="line">or //and优先级大于or，可以加括号</span><br><span class="line">in//后面跟个python中的list</span><br><span class="line">not in</span><br><span class="line"></span><br><span class="line">//模糊查询</span><br><span class="line">like</span><br><span class="line">%表示任意多个字符</span><br><span class="line">_表示任意一个字符</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">like</span> <span class="string">&#x27;%T%&#x27;</span>;  //如果包含下划线等可以用\转义；</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">ename,sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">sal (<span class="keyword">asc</span>); //升序，也可以用别名排序</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">ename,sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">sal <span class="keyword">desc</span>; //降序</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">ename,sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">sal <span class="keyword">asc</span>, ename <span class="keyword">asc</span>; //多关键字排序</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">ename,sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line"><span class="number">2</span>; //按照第二列排序（不建议这么写）</span><br></pre></td></tr></table></figure><h3 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h3><blockquote><p>from，where，select，order顺序不能变</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename, sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> sal <span class="keyword">between</span> <span class="number">1000</span> <span class="keyword">and</span> <span class="number">2000</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h3 id="单行处理函数"><a href="#单行处理函数" class="headerlink" title="单行处理函数"></a>单行处理函数</h3><blockquote><p>一个输入对应一个输出</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">lower upper</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">lower</span>(ename) <span class="keyword">as</span> ename <span class="keyword">from</span> emp;//注意别名</span><br><span class="line"></span><br><span class="line">substr</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">substr</span>(enmae, <span class="number">1</span>, <span class="number">1</span>) <span class="keyword">as</span> ename <span class="keyword">from</span> emp;//起始下标，从1开始，后面是截取长度</span><br><span class="line"></span><br><span class="line">contact(&#x27;a&#x27;, &#x27;b&#x27;);//字符串拼接</span><br><span class="line"></span><br><span class="line">length(name);</span><br><span class="line"></span><br><span class="line">trim(name);//去除前后空白 ltrim， rtrim</span><br><span class="line"></span><br><span class="line">round(double, n);//保留n个小数（四舍五入）n如果是-1的话，嘿嘿你试试</span><br><span class="line"></span><br><span class="line">rand()</span><br><span class="line"></span><br><span class="line">ifnull(数据，值)//有null参与的运算结果都是null，所以用ifnull来把null替换成一个值，如ifnull(sal, 0);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> ename, job (<span class="keyword">case</span> job <span class="keyword">when</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="keyword">then</span> sal*<span class="number">1.1</span> <span class="keyword">when</span> <span class="string">&#x27;SALESMAN&#x27;</span> <span class="keyword">then</span> sal*<span class="number">1.5</span> <span class="keyword">else</span> sal) <span class="keyword">as</span> newsalary <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h3><blockquote><p>输入多行，输出一行，自动忽略null</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">不分组的话默认整张表是一组</span><br><span class="line"> max()</span><br><span class="line"> min()</span><br><span class="line"> sum()</span><br><span class="line"> avg() //不考虑null的行</span><br><span class="line"> count()</span><br><span class="line"> </span><br><span class="line"> count (*) from emp;//即总行数</span><br><span class="line"> </span><br></pre></td></tr></table></figure><ol><li>分组函数不能直接使用在where中      </li><li>分组函数可以连起来用</li></ol><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><ol><li><p>例如计算每个部门的工资和</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ...</span><br><span class="line"><span class="keyword">from</span> ...</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> ...</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>关键字的执行顺序</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> job,<span class="keyword">sum</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno;//当分组的时候，<span class="keyword">select</span>只能跟分组函数和用来分组的字段名。</span><br></pre></td></tr></table></figure><p>where不能用分组函数，只能用having，但是having不能单独用，且能用where尽量用where</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">from</span><br><span class="line">where</span><br><span class="line">group by //后面跟多个字段时，相当于把两个字段合成一个字段</span><br><span class="line">having</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br></pre></td></tr></table></figure><h3 id="一些关键字"><a href="#一些关键字" class="headerlink" title="一些关键字"></a>一些关键字</h3><p><code>distinct</code>去重</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> job,deptno <span class="keyword">from</span> emp;//表示job 和deptno当成一个字段来去重</span><br><span class="line"><span class="keyword">select</span> job, <span class="keyword">distinct</span> deptno <span class="keyword">from</span> emp;//错误写法</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span> (disinct job) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><blockquote><p>从一张表叫单表查询，多个表称为连接查询，分为SQL92,SQL99，重点学习99</p></blockquote><p>根据连接方式分类：</p><ul><li>内连接<ul><li>等值连接</li><li>非等值连接</li><li>自连接</li></ul></li><li>外连接<ul><li>左外连接（左连接）</li><li>右外连接（右连接）</li></ul></li><li>全连接（不讲）</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,dname <span class="keyword">from</span> emp,dept;//没有限制会匹配所有的（结果是两个行数乘积）笛卡尔积</span><br><span class="line"><span class="keyword">select</span> e.ename, d.dname <span class="keyword">from</span> emp e, dept d <span class="keyword">where</span> e,deptno = d.deptno;//注意from后面起的别名，以及.的应用</span><br></pre></td></tr></table></figure><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><h5 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//sql92语法</span><br><span class="line"><span class="keyword">select</span> e.ename, d.dname <span class="keyword">from</span> emp e, dept d <span class="keyword">where</span> e,deptno = d.deptno <span class="keyword">and</span> 其他条件;</span><br><span class="line"></span><br><span class="line">//sql99语法</span><br><span class="line"><span class="keyword">select</span> e.name, d.dname <span class="keyword">from</span> emp e (<span class="keyword">inner</span>) <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno = d.deptno <span class="keyword">where</span> 过滤条件；</span><br></pre></td></tr></table></figure><blockquote><p>注意，92的语法结构不清晰，因为表连接的条件和数据筛选条件放在一起，结构不清晰。99的on用来表连接条件，where用来筛选数据。结构清晰，92不用了！太tm老了！</p></blockquote><p><code>inner</code>可以省略，妈的，虽然可读性好，一眼就看出来了内连接，但是很麻烦，省略了吧</p><h5 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.ename, e.sal, s.grade</span><br><span class="line"><span class="keyword">from</span> emp e (<span class="keyword">inner</span>) <span class="keyword">join</span> salgrade s</span><br><span class="line"><span class="keyword">on</span> e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal; </span><br></pre></td></tr></table></figure><h5 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h5><blockquote><p>一张表看成两张表，分别起别名，最后会少一个，因为有个NULL！领导查不出来了！</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e1.ename, e2.ename</span><br><span class="line"><span class="keyword">from</span> emp e1 <span class="keyword">join</span> emp e2</span><br><span class="line"><span class="keyword">on</span> e1.mgr = e2.empno;</span><br></pre></td></tr></table></figure><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><h5 id="左、右连接"><a href="#左、右连接" class="headerlink" title="左、右连接"></a>左、右连接</h5><blockquote><p>在join前加left或者right，即转换为外连接，outer可以省略。以left为例，在on的基础上，如果join左边表某一条在右边中没有匹配，那么依然显示。因此，left使左边表成为主表，right相反。而内连接两个表是平等的。</p></blockquote><figure class="highlight"><table><tr><td class="code"><pre><span class="line">//对上边自连接的改进</span><br><span class="line">mysql&gt; select e1.ename, e2.ename</span><br><span class="line">    -&gt; from emp e1 left (outer) join emp e2</span><br><span class="line">    -&gt; on e1.mgr = e2.empno;</span><br></pre></td></tr></table></figure><h5 id="全连接"><a href="#全连接" class="headerlink" title="全连接"></a>全连接</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; select e1.ename, e2.ename</span><br><span class="line">    -&gt; from emp e1 full (outer) join emp e2</span><br><span class="line">    -&gt; on e1.mgr = e2.empno;</span><br></pre></td></tr></table></figure><h5 id="交叉连接"><a href="#交叉连接" class="headerlink" title="交叉连接"></a>交叉连接</h5><blockquote><p>用笛卡尔积，返回所有的匹配</p></blockquote><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; select e1.ename, e2.ename</span><br><span class="line">    -&gt; from emp e1 cross (outer) join emp e2</span><br></pre></td></tr></table></figure><h4 id="多张表的连接"><a href="#多张表的连接" class="headerlink" title="多张表的连接"></a>多张表的连接</h4><blockquote><p>内外join可以混合使用</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.ename, d.dname, e.sal, s.grade</span><br><span class="line"><span class="keyword">from</span> emp e </span><br><span class="line"><span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno = d.deptno</span><br><span class="line"><span class="keyword">join</span> salgrade s <span class="keyword">on</span> e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><blockquote><p>嵌套查询</p><p>把一个查询结果放在select、from、where后面</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; (<span class="keyword">select</span> <span class="keyword">min</span>(sal) <span class="keyword">from</span> emp);//不能直接在where里使用分组函数</span><br></pre></td></tr></table></figure><blockquote><p>当放在select后面时，了解一下</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal,(selct dname <span class="keyword">from</span> dept <span class="keyword">where</span> dept.depno = emp.depno) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><blockquote><p>可以将两个结果拼接起来，但是两个结果的列数应该一样，表头和第一个一样。oracle要求数据类型也要一样。</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ........</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> ........;</span><br></pre></td></tr></table></figure><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><blockquote><p>放在最后，限制取出数量 limit startIndex(缺省值0）, length</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">2</span>,<span class="number">3</span>; //第三到第五</span><br></pre></td></tr></table></figure><blockquote><p>常用来分页显示</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">0</span>,<span class="number">3</span>;</span><br><span class="line">//第一页</span><br><span class="line">limit 3,3;</span><br><span class="line">//第二页</span><br><span class="line">limit 6,3;</span><br><span class="line">//第三页</span><br><span class="line">limit 9,3;</span><br></pre></td></tr></table></figure><h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> talbe_name(</span><br><span class="line">字段名<span class="number">1</span> 数据类型，</span><br><span class="line">    字段名<span class="number">2</span> 数据类型</span><br><span class="line">)；</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_student(</span><br><span class="line"><span class="keyword">no</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    sex <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;m&#x27;</span>,//通过<span class="keyword">default</span>指定默认值，否则为<span class="literal">NULL</span></span><br><span class="line">    age <span class="built_in">int</span>(<span class="number">3</span>),</span><br><span class="line">    email <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">varchar 可变长度字符串，比较智能，会根据实际长度分配空间，最长255</span><br><span class="line">char 定长字符串，效率高，浪费空间，性别给我用char！最长255</span><br><span class="line">int 最长11</span><br><span class="line">bigint</span><br><span class="line">float</span><br><span class="line">double</span><br><span class="line">date 短日期</span><br><span class="line">datetime 长日期</span><br><span class="line">clob 字符大对象（最多可以存储4G的字符串，例如存储一个文章）charactor large object</span><br><span class="line">blob 二进制大对象 binary large object（插入的时候需要用到io流）</span><br></pre></td></tr></table></figure><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> t_student;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> t_student;//不会报错</span><br></pre></td></tr></table></figure><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><h3 id="增insert"><a href="#增insert" class="headerlink" title="增insert"></a>增insert</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(字段名<span class="number">1</span>， 字段名<span class="number">2</span>) <span class="keyword">values</span>(值<span class="number">1</span>， 值<span class="number">2</span>);//如果字段名和括号都不写，那么值需要一一对应。不建议不x</span><br></pre></td></tr></table></figure><h4 id="插入date类型"><a href="#插入date类型" class="headerlink" title="插入date类型"></a>插入date类型</h4><blockquote><p>假设有一个字段是date类型，那么怎么插入呢</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(<span class="keyword">id</span>, <span class="keyword">name</span>, birth) <span class="keyword">values</span>(<span class="number">2</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="keyword">str_to_date</span>(<span class="string">&#x27;1990-10-01&#x27;</span>,<span class="string">&#x27;%Y-%m-%d&#x27;</span>));</span><br></pre></td></tr></table></figure><p>以上语句需要注意的是：</p><ol><li><p><code>str_to_date()</code>第一个参数是字符串，第二个是对应的日期格式，分别有<code>%Y %m %d %h %i %s</code>注意大小写。</p></li><li><p>当要select的时候可以用<code>date_format()</code>来转换，如果不转换默认是上边的格式，即年-月-日。</p></li><li><p><strong>当字符串是年月日的类型时，可以直接传字符串</strong>。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(<span class="keyword">id</span>, <span class="keyword">name</span>, birth) <span class="keyword">values</span>(<span class="number">2</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;1990-10-01&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ol><h4 id="date与datetime"><a href="#date与datetime" class="headerlink" title="date与datetime"></a>date与datetime</h4><ol><li><code>datetime</code>包括年月日时分秒。</li><li>长日期默认格式是<code>%Y-&amp;m-%d %h:%i:%s</code></li><li>具体用法同<code>date</code></li><li><code>now()</code>获取当前系统时间，类型是<code>datetime</code></li></ol><h3 id="删delete"><a href="#删delete" class="headerlink" title="删delete"></a>删delete</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t_user</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span>;//不加会删除所有的</span><br></pre></td></tr></table></figure><h3 id="改update"><a href="#改update" class="headerlink" title="改update"></a>改update</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> t_user</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">&#x27;jack&#x27;</span>, birth = <span class="string">&#x27;2000-10-04&#x27;</span></span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span>;//不加条件会改所有的！</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notes </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《The_Computer_and_the_Brain》词汇</title>
      <link href="post/f857d47.html"/>
      <url>post/f857d47.html</url>
      
        <content type="html"><![CDATA[<h1 id="The-Computer-and-the-Brain"><a href="#The-Computer-and-the-Brain" class="headerlink" title="The_Computer_and_the_Brain"></a>The_Computer_and_the_Brain</h1><blockquote><p>也太难了…</p></blockquote><table><thead><tr><th align="center">Word</th><th align="center">释义</th></tr></thead><tbody><tr><td align="center">discuss</td><td align="center">讨论</td></tr><tr><td align="center">neurologist</td><td align="center">神经病学家</td></tr><tr><td align="center">psychiatrist</td><td align="center">精神病学家</td></tr><tr><td align="center">essential</td><td align="center">基本的、必要的</td></tr><tr><td align="center">privilege</td><td align="center">特权、优待</td></tr><tr><td align="center">analog</td><td align="center">模拟的</td></tr><tr><td align="center">represent</td><td align="center">代表</td></tr><tr><td align="center">quantity</td><td align="center">大量、数量</td></tr><tr><td align="center">pre-assegned</td><td align="center">预先指定的</td></tr><tr><td align="center">current</td><td align="center">电流</td></tr><tr><td align="center">voltage</td><td align="center">电压</td></tr><tr><td align="center">i.e.</td><td align="center">也就是</td></tr><tr><td align="center">predetermined</td><td align="center">预先决定的</td></tr><tr><td align="center">organs</td><td align="center">器官、机构</td></tr><tr><td align="center">perform</td><td align="center">执行</td></tr><tr><td align="center">representative</td><td align="center">典型的</td></tr><tr><td align="center">arithmetic</td><td align="center">数字，算数</td></tr><tr><td align="center">addition</td><td align="center">+</td></tr><tr><td align="center">subtraction</td><td align="center">-</td></tr><tr><td align="center">multiplication</td><td align="center">*</td></tr><tr><td align="center">division</td><td align="center">/</td></tr><tr><td align="center">parallel</td><td align="center">平行的</td></tr><tr><td align="center">antparallel</td><td align="center">反平行的</td></tr><tr><td align="center">componentry</td><td align="center">元件部分</td></tr><tr><td align="center">relevant</td><td align="center">相关的</td></tr><tr><td align="center">unusual</td><td align="center">不同寻常的</td></tr><tr><td align="center">remarkable</td><td align="center">卓越的</td></tr><tr><td align="center">rather</td><td align="center">相当</td></tr><tr><td align="center">attribute</td><td align="center">属性</td></tr><tr><td align="center">analyzer</td><td align="center">分析器</td></tr><tr><td align="center">proceed</td><td align="center">开始、继续进行</td></tr><tr><td align="center">gear</td><td align="center">齿轮、装置、工具</td></tr><tr><td align="center">axle</td><td align="center">车轴</td></tr><tr><td align="center">entirely</td><td align="center">完全地</td></tr><tr><td align="center">differential</td><td align="center">微分的，差别的、微分</td></tr><tr><td align="center">integrator</td><td align="center">积分器、积分电路</td></tr><tr><td align="center">integral</td><td align="center">积分的</td></tr><tr><td align="center">scheme</td><td align="center">计划、组合、方案</td></tr><tr><td align="center">threefold</td><td align="center">三倍的，有三部分的</td></tr><tr><td align="center">trick</td><td align="center">技巧</td></tr><tr><td align="center">implicit</td><td align="center">含蓄的</td></tr><tr><td align="center">particular</td><td align="center">详细的</td></tr><tr><td align="center">short-circuited</td><td align="center">短路的</td></tr><tr><td align="center">iteration</td><td align="center">迭代</td></tr><tr><td align="center">approximation</td><td align="center">近似</td></tr><tr><td align="center">justification</td><td align="center">理由、辩护</td></tr><tr><td align="center">economical</td><td align="center">经济的</td></tr><tr><td align="center">specifically</td><td align="center">特别的</td></tr><tr><td align="center">subtle</td><td align="center">微妙的、精细的</td></tr><tr><td align="center">efficient</td><td align="center">有效率的</td></tr><tr><td align="center">simpler</td><td align="center">更简单的</td></tr><tr><td align="center">extensive</td><td align="center">广泛的</td></tr><tr><td align="center">equation</td><td align="center">等式、相等</td></tr><tr><td align="center">primarily</td><td align="center">首先；主要的</td></tr><tr><td align="center">previously</td><td align="center">以前的</td></tr><tr><td align="center">decimal</td><td align="center">十进制、小数的</td></tr><tr><td align="center">conventional</td><td align="center">传统的</td></tr><tr><td align="center">represent</td><td align="center">表现为</td></tr><tr><td align="center">sequence</td><td align="center">顺序</td></tr><tr><td align="center">embodiments</td><td align="center">体现、化身</td></tr><tr><td align="center">suffice</td><td align="center">使满足</td></tr><tr><td align="center">inadequate</td><td align="center">不充分的</td></tr><tr><td align="center">adequate</td><td align="center">足够、充分</td></tr><tr><td align="center">hence</td><td align="center">因此</td></tr><tr><td align="center">see below</td><td align="center">见下文</td></tr><tr><td align="center">electrical pulse</td><td align="center">电脉冲</td></tr><tr><td align="center">positive polarity</td><td align="center">正极</td></tr><tr><td align="center">negative</td><td align="center">负极</td></tr><tr><td align="center">observation</td><td align="center">观察监视</td></tr><tr><td align="center">redundant</td><td align="center">冗余的</td></tr><tr><td align="center">simultanious</td><td align="center">同时</td></tr><tr><td align="center">stipulate</td><td align="center">保证</td></tr><tr><td align="center">correspond</td><td align="center">符合</td></tr><tr><td align="center">indication</td><td align="center">指出、迹象</td></tr><tr><td align="center">valid</td><td align="center">合法、有效</td></tr><tr><td align="center">electrical gating devices</td><td align="center">电门装置</td></tr><tr><td align="center">electromechanical</td><td align="center">机电的</td></tr><tr><td align="center">relays</td><td align="center">继电器</td></tr><tr><td align="center">crystal</td><td align="center">晶体</td></tr><tr><td align="center">diodes</td><td align="center">二极管</td></tr><tr><td align="center">ferromagnetic</td><td align="center">铁磁的</td></tr><tr><td align="center">transistor</td><td align="center">晶体管</td></tr><tr><td align="center">preferably</td><td align="center">最好是，更合意的</td></tr><tr><td align="center">cf. below</td><td align="center">参看下面</td></tr><tr><td align="center">temporal</td><td align="center">暂时的</td></tr><tr><td align="center">adjustable</td><td align="center">可调节的</td></tr><tr><td align="center">matters</td><td align="center">事件、影响</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vocabulary note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言</title>
      <link href="post/8e41db39.html"/>
      <url>post/8e41db39.html</url>
      
        <content type="html"><![CDATA[<h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><ol start="2"><li><p>a 汇编指令</p></li><li><p>r 查看寄存器</p><ul><li>r 寄存器</li></ul></li><li><p>d 查看内存</p><ul><li>d 段地址:偏移地址 （结尾偏移地址）</li></ul></li><li><p>t 执行指令</p></li><li><p>e 修改内存数据</p><ul><li><p>e 段地址:偏移地址 数据1 数据2 数据3…</p></li><li><p>e 段地址:偏移地址</p><p>数据 空格 数据 空格（逐个询问）</p></li></ul></li><li><p>g执行到结束</p></li></ol><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>通用：ax, bx, cx, dx, ip, sp </p><p>段：cs(control), ds(data)，ss(stack)</p><p><img src="https://pic.imgdb.cn/item/6151c0912ab3f51d91b47ad7.jpg" alt></p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><blockquote><p>系统会自动改动sp，但是不会检测是否越界，无论是栈顶还是栈底，没有这样的寄存器！pop和push只支持字数据</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">push ax &#x2F;&#x2F;ax中的数据送入栈，sp-&#x3D;2</span><br><span class="line">pop ax &#x2F;&#x2F;从栈顶取出数据送入ax，s注意pop以后sp会改动，但是原来的数据是依然存在的，只是不在栈中而已。</span><br></pre></td></tr></table></figure><h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><ol><li>当常量作为偏移地址的时候，最好加上段前缀，不然会当作把常量的值给寄存器 </li><li>在多个segment的程序中，start从code段开始，且不需要初始化cs，但是ds和ss是需要初始化的。</li><li>开始以后ds对应的就是程序的起始地址，ds+100H才是真正的data段起始地址</li></ol><h2 id="字符处理"><a href="#字符处理" class="headerlink" title="字符处理"></a>字符处理</h2><ol><li>大写字母+20H = 小写字母（ASCII）<ul><li>小写转大写 <code>and al, 11011111b</code></li><li>小写转大写<code>or al, 00100000b</code></li></ul></li></ol><h2 id="寻址"><a href="#寻址" class="headerlink" title="寻址"></a>寻址</h2><blockquote><p>bp,bx称为基址，si、di称为变址  idata是立即数 。要么单独用，要么基址变址，要么加个立即数，没有基址基址，没有变址变址，没有立即数立即数。注意bp默认是ss段</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax,[200+bx] </span><br><span class="line"></span><br><span class="line">mov ax,200[bx] </span><br><span class="line"></span><br><span class="line">mov ax,[bx].200 </span><br><span class="line"></span><br><span class="line">mov ax,[bx+si]</span><br><span class="line"></span><br><span class="line">mov ax,[bx].200[si]</span><br><span class="line"></span><br><span class="line">mov ax,\[bx][si].200</span><br><span class="line"></span><br><span class="line">mov ax,\[bx][si]</span><br><span class="line"></span><br><span class="line">mov ax,[bp+si] </span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6151bcce2ab3f51d91af7b5a.jpg" alt></p><h3 id="变址寄存器"><a href="#变址寄存器" class="headerlink" title="变址寄存器"></a>变址寄存器</h3><p>si di可以和bx类似的寻址用法，不同的是，si di只能作为16位来用，而bx可以拆开</p><h2 id="dup"><a href="#dup" class="headerlink" title="dup"></a>dup</h2><blockquote><p>伪指令，用来数据重复</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db 3 dup(0)</span><br><span class="line">db 3 dup(0,1,2)</span><br><span class="line">db 3 dup(&#39;abc&#39;, &#39;ACB&#39;)</span><br><span class="line">db 200 dup(0) ; 定义栈段</span><br></pre></td></tr></table></figure><h2 id="转移指令"><a href="#转移指令" class="headerlink" title="转移指令"></a>转移指令</h2><blockquote><p>首先认识一下offset，在程序中用s来作为标号（例如start之类的就是标号），<code>offset s</code>可以取出s的地址。</p></blockquote><p><img src="https://pic.imgdb.cn/item/6151d21a2ab3f51d91cef820.jpg" alt="转移"></p><h3 id="jmp"><a href="#jmp" class="headerlink" title="jmp"></a>jmp</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是z</span><br><span class="line">jmp 1000:3 &#x2F;&#x2F;cs为1000，ip为3</span><br><span class="line">jmp 4 &#x2F;&#x2F;修改ip为4</span><br></pre></td></tr></table></figure><h3 id="jcxz"><a href="#jcxz" class="headerlink" title="jcxz"></a>jcxz</h3><ol><li><p>有条件转移指令，当cx为0跳转，否则继续下一步。</p></li><li><p>短转移，机器码保存的是位移，范围是-128-127</p></li></ol><h3 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h3><ol><li><p>cx减一，然后判断cx是否为0，如果不是，则跳转，否则继续向下执行。</p></li><li><p>短转移，负数用补码</p></li><li><p>双重循环的时候需要注意，cx的值会被你改变了，所以可以用dx来保存cx的值，或者拿一个内存空间来保存cx，或者<strong>拿一个栈</strong>，push+pop来保存cx，建议用栈。</p></li></ol><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><ol><li>call + 标号（相对地址 16位）</li><li>将当前的ip或者cs ip压栈（pop cs pop ip)</li><li>跳转，最后通过ret返回</li><li><strong>call far ptr段间转移</strong></li><li>call + 寄存器</li><li>call word ptr ds:[0]</li><li>call dword ptr ds:[0]</li></ol><h3 id="ret"><a href="#ret" class="headerlink" title="ret"></a>ret</h3><ol><li>ret的本质是从栈内取出ip的值，所以即便没有call，也可以去ss sp指向的位置取数据，相当于<code>pop ip</code></li><li>retf段间转移<code>pop ip</code>然后<code>pop cs</code></li></ol><h2 id="寄存器冲突"><a href="#寄存器冲突" class="headerlink" title="寄存器冲突"></a>寄存器冲突</h2><p>模块化设计中，由于子程序可能修改原程序的寄存器，所以需要在开始时将寄存器入栈，最后再出栈。</p><h2 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h2><p>8086中，标志寄存器是16位的，但没有全用。。1，3，5，12-15没有用。</p><p><img src="https://pic.imgdb.cn/item/615d08c72ab3f51d91b26ea0.jpg" alt></p><p>会影响标志寄存器的：加减乘除与或（运算指令）</p><p>不影响的：mov push pop（传送指令）</p><h3 id="具体来看几个标志"><a href="#具体来看几个标志" class="headerlink" title="具体来看几个标志"></a>具体来看几个标志</h3><p>奇偶： 结果中1的个数为o数时，pf为1，否则为0</p><p>符号：将结果视为有符号数，若为负数，sf为1</p><p>进位：将数据视为无符号数，有进位或者借位的时候cf为1</p><p>溢出：将数据视为有符号数，若有溢出，则of为1</p><h2 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h2><h3 id="传送指令"><a href="#传送指令" class="headerlink" title="传送指令"></a>传送指令</h3><h4 id="MOV"><a href="#MOV" class="headerlink" title="MOV"></a>MOV</h4><p>MOV DST SRC</p><ol><li>dst不能是cs</li><li>dst不能同时为内存单元，也不能同时为段</li><li>立即数不能直接送段，要通过ax</li></ol><h4 id="XCHG"><a href="#XCHG" class="headerlink" title="XCHG"></a>XCHG</h4><p>XCHG OPER1,OPER2</p><ol><li>不影响标志位</li><li>不能用段寄存器</li><li>不能同时为内存单元</li></ol><h4 id="LEA"><a href="#LEA" class="headerlink" title="LEA"></a>LEA</h4><p>LEA REG,SRC 将偏移地址送入寄存器，也可以用mov ax,offset 标号，来传送地址</p><ol><li><p>不影响标志位</p></li><li><p>REG不能为段寄存器</p></li><li><p>SRC是寻址方式</p></li><li><p>32送16时，取低16位</p></li><li><p>16送32时，0扩展</p></li></ol><h4 id="LDS"><a href="#LDS" class="headerlink" title="LDS"></a>LDS</h4><p>LDS REG,SRC 将src处的内存单元里的数据送入reg（通常为si），并且把src+2的数据送入ds</p><h4 id="LES"><a href="#LES" class="headerlink" title="LES"></a>LES</h4><p>LES REG,SRC 同上，si换成di，ds换成es</p><h3 id="算术指令"><a href="#算术指令" class="headerlink" title="算术指令"></a>算术指令</h3><h4 id="加法指令"><a href="#加法指令" class="headerlink" title="加法指令"></a>加法指令</h4><p>add adc inc</p><ol><li><p>其中adc会加上cf，inc是加一</p></li><li><p>只有inc不影响标志位</p></li></ol><p>这里考虑一下双精度两个数的加法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add ax,cx</span><br><span class="line">adc dx,bx ;这里要用adc！</span><br></pre></td></tr></table></figure><h4 id="减法指令"><a href="#减法指令" class="headerlink" title="减法指令"></a>减法指令</h4><p>sub dst,src减法 </p><p>sbb dst,src带借位减法</p><p>dec opr减一   </p><p>以上几个和加法类似</p><hr><p>neg opr求补，求补码，相当于0-opr，所以neg可以求负数的绝对值</p><p>cmp opr1,opr2比较</p><p>需要注意的是，加法减法的dst和src要求和mov一样。另外，sbb和adc主要用于双精度，对于高位的运算</p><h4 id="乘法指令"><a href="#乘法指令" class="headerlink" title="乘法指令"></a>乘法指令</h4><p>MUL  无符号数</p><p>IMUL 带符号数</p><ol><li>只影响cf，of</li><li>对于mul，当乘积高一半是0时，cf、of都是0，否则都是1</li><li>对于imul，当乘积高一半时低一半的符号扩展时，cf、of是0，否则是1</li></ol><p>格式：</p><p>​    mul reg</p><p>​    mul 内存单元（需要加word ptr等指定数据类型）</p><p>​    不能是mul idata</p><p>结果：</p><p>​    存放在ax或dx、ax中</p><h4 id="除法指令"><a href="#除法指令" class="headerlink" title="除法指令"></a>除法指令</h4><p>基本同乘法</p><p>另外需要说一下符号扩展，由于被除数字长必须是除数两倍，所以需要符号扩展</p><p>指令：</p><p>​    cbw：al-&gt;ax</p><p>​    cwd：ax-&gt;dx,ax</p><p>扩展方式：</p><p>​    无符号数：高位置零</p><p>​    有符号数：高位是低位符号的扩展</p><p>​    <strong>其实也就是低位的最高位是0就补0，不然就补1</strong></p><p>注意：</p><p>​    不影响标志位</p><h3 id="定义数据指令"><a href="#定义数据指令" class="headerlink" title="定义数据指令"></a>定义数据指令</h3><p>数据标号     db、dw（单字，注意dword是双字）、dd（双字）、dq（四字）、dt（十个字节）     操作数1 操作数2….这里可以用dup具体用法上边写过了，另外直接对标号使用用的是地址</p><p>操作数可以是常数、或者表达式</p><p><strong>属性修改运算符</strong></p><p>说明：类型可以是BYTE、WORD、DWORD、NEAR、 FAR… </p><p>示例： DATA1 DB 26H DATA2 DW 5030H MOV AX, WORD PTR DATA1 ADD BYTE PTR DATA2, BL </p><p>上例中的： MOV AX，WORD PTR OPER1+1  MOV AL， BYTE PTR OPER2</p><h3 id="表达式赋值伪操作"><a href="#表达式赋值伪操作" class="headerlink" title="表达式赋值伪操作"></a>表达式赋值伪操作</h3><ol><li>等值语句EQU</li></ol><p>用来给表达式赋予一个名字</p><p>例： </p><p>⑴ PORT EQU 1234 </p><p>⑵ BUFF EQU PORT＋58 </p><p>⑶ MEM EQU DS:[BP＋20H]  </p><p>⑷ COUNT EQU CX </p><p>⑸ ABC EQU AAA</p><ol start="2"><li><p>等号语句</p><p>NUM=34</p><p>NUM=34+1</p></li></ol><blockquote><p>EQU不能重复定义，=可以</p></blockquote><h3 id="ORG"><a href="#ORG" class="headerlink" title="ORG"></a>ORG</h3><blockquote><p>如下，也就是将aa的数据存放在了偏移地址为20的内存中。</p></blockquote><p>org 20</p><p>aa dw 2</p><p>org 40</p><p>bb db,?</p><h3 id="属性返回置运算符"><a href="#属性返回置运算符" class="headerlink" title="属性返回置运算符"></a>属性返回置运算符</h3><h4 id="seg"><a href="#seg" class="headerlink" title="seg"></a>seg</h4><p>格式： SEG 变量/标号 n </p><p>功能：返回变量或标号的段基址 n </p><p>示例： MOV AX, SEG X1 MOV BX, SEG ARRAY  如果变量X1所在段的段基址为0915H，变量 ARRAY所在段的段基址为0947H，那么上面两条 指令汇编后就分别为： MOV AX, 0915H MOV BX, 0947H</p><h4 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h4><p>同上，返回偏移地址</p><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>返回变量或标号的类型属性值</p><p>如果该表达式是变量，则返回该变量的 以字节数表示的类型，DB为1，DW为 2 ，DD为4，DF为8…. </p><p>如果表达式是标号，则返回代表该标号 的数值类型，NEAR是-1，FAR为-2。 </p><p>如果表达式是常数，则应该回送0 </p><h4 id="length"><a href="#length" class="headerlink" title="length"></a>length</h4><blockquote><p>如果只有一个dup，则返回dup的个数，否则返回1？还是返回第一个？</p></blockquote><p>格式：length 变量</p><p>该指令仅加在变量前，对于变量中使用DUP 的情况，返回分配的单元数（例如 3 dup(?)）则返回3，否则仅返回其中一项数据的情况</p><h4 id="size"><a href="#size" class="headerlink" title="size"></a>size</h4><p>字节总数：type*length</p><h3 id="地址计数器"><a href="#地址计数器" class="headerlink" title="地址计数器"></a>地址计数器</h3><p>$</p><p>指令中表示该指令的首字节地址</p><p>数据中表示即将分配出去的地址值</p><h3 id="逻辑运算指令"><a href="#逻辑运算指令" class="headerlink" title="逻辑运算指令"></a>逻辑运算指令</h3><p>逻辑非指令：NOT OPR * OPR不能为立即数 </p><p>执行操作： (OPR) ¬ ¬ (OPR) * 不影响标志位</p><p> 逻辑与指令：AND DST, SRC </p><p>执行操作： (DST) ¬ (DST) Ù (SRC) </p><p>逻辑或指令：OR DST, SRC </p><p>执行操作： (DST) ¬ (DST) Ú (SRC) </p><p>异或指令： XOR DST, SRC </p><p>执行操作： (DST) ¬ (DST) “ (SRC) </p><p>测试指令： TEST OPR1, OPR2 （只改变标志寄存器的AND）</p><p>执行操作： (OPR1) Ù (OPR2) </p><h3 id="移位指令"><a href="#移位指令" class="headerlink" title="移位指令"></a>移位指令</h3><p>格式：例如SHL OPR, CNT（一个是操作数，一个是移位次数（二进制））</p><p>逻辑左移：SHL（最高位移入cf，低位补0）</p><p>逻辑右移：SHR（相反）</p><p>算数左移：SAL（同逻辑左移）</p><p>算数右移：SAR（最低为移入cf，最高位不变）</p><hr><p>循环移位指令</p><p>ROL,ROR（不带进位，类似于不带头节点的循环链表）</p><p>RCL,RCR（带进位，类似于带头节点的循环链表）</p><h2 id="dos调用"><a href="#dos调用" class="headerlink" title="dos调用"></a>dos调用</h2><h3 id="单字符输入"><a href="#单字符输入" class="headerlink" title="单字符输入"></a>单字符输入</h3><p>MOV AH,1H</p><p>INT 21H</p><p>送入的字符存放在AL</p><h3 id="单字符输出"><a href="#单字符输出" class="headerlink" title="单字符输出"></a>单字符输出</h3><p>MOV DL,’A’</p><p>MOV AH,2H</p><p>INT 21H</p><p>事先把字符送入DL</p><h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><p>大写字母二进制和小写字母的二进制不同在于，小写左数第三位是1，大写是0，所以可以通过AND,OR来转换，也可以通过加减20H。</p><h3 id="字符串输入"><a href="#字符串输入" class="headerlink" title="字符串输入"></a>字符串输入</h3><p>调用10号功能</p><p>首先定义缓冲区</p><p>BUFFER DB 10,?,10 DUP(?)</p><p>其中10代表最大字符数，？处系统会自动填入实际输入的字符数。若输入字符超过缓冲区能容纳的 个数，则系统忽略此字符并响铃警告。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV AX，SEG BUFFER</span><br><span class="line">MOV DS，AX</span><br><span class="line">MOV DX，OFFSET BUFFER</span><br><span class="line">MOV AH，10</span><br><span class="line">INT 21H</span><br></pre></td></tr></table></figure><h3 id="显示字符串"><a href="#显示字符串" class="headerlink" title="显示字符串"></a>显示字符串</h3><p>调用9号功能，要以$结尾</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DISPLAY DB ‘Very Good!’ , ‘$’</span><br><span class="line">……</span><br><span class="line">MOV AX，SEG DISPLAY</span><br><span class="line">MOV DS，AX</span><br><span class="line">LEA DX，DISPLAY</span><br><span class="line">MOV AH，9</span><br><span class="line">INT 21H</span><br></pre></td></tr></table></figure><h3 id="十进制加减运算"><a href="#十进制加减运算" class="headerlink" title="十进制加减运算"></a>十进制加减运算</h3><p>在计算机中采用BCD码来表示十进制数。BCD码就是使用四位二进制数表示一位十进制数。在8086/8088系统中，将BCD码分为两种格式： </p><ol><li><p>压缩型（组合型、装配型、PACKED） </p><p>一个字节表示两个BCD码，即两位十进制数，例如：0010 0011 表示十进制数的23</p></li><li><p>非压缩型（非组合型、拆散型、UNPACKED）。</p><p>一个字节的低四位表示一个BCD码， 而高四位对所表示的十进制数没有影响。 所以对于非压缩形，09h和’9‘代表的是一样的，因为高位的3忽略了。常为0000B或0011B。例如：0000 1001与0011 1001都是十进制数9的非组合型的BCD码。</p></li></ol><h4 id="压缩BCD的加法调整"><a href="#压缩BCD的加法调整" class="headerlink" title="压缩BCD的加法调整"></a>压缩BCD的加法调整</h4><p>压缩的BCD码加法调整 </p><p><strong>格式：</strong>DAA </p><p><strong>功能：</strong> </p><p>​    如果AL的低4位大于9，则将AL加6，并将辅助进位标志AF置1 （因为相当于16进制，9就相当于15，也就是把16进制的数转化为10进制）</p><p>​    如果AL的高4位大于9，将AL加60H，并将进位标志CF置1（同上，调整的是十位所以加了60h，上一个是06h）</p><p><strong>注意</strong>：</p><p>​    在执行DAA指令前，必须是用ADD或ADC完成了加 法操作，且加的结果放在AL中</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X DB 05H</span><br><span class="line">Y DB 07H</span><br><span class="line">……</span><br><span class="line">MOV AL，X</span><br><span class="line">ADD AL，Y；相加后，(AL)&#x3D;00001100&#x3D;0CH</span><br><span class="line">DAA ；加6调整后，(AL)&#x3D;00010010&#x3D;12H（压缩的BCD码）</span><br></pre></td></tr></table></figure><h4 id="压缩BCD的减法调整"><a href="#压缩BCD的减法调整" class="headerlink" title="压缩BCD的减法调整"></a>压缩BCD的减法调整</h4><p>压缩的BCD码减法调整 </p><p><strong>格式：</strong>DAS</p><p><strong>功能：</strong> </p><p>​    如果AL的低4位大于9，则将AL减6，并将辅助进位标志AF置1 （因为相当于16进制，9就相当于15，也就是把16进制的数转化为10进制）</p><p>​    如果AL的高4位大于9，将AL减60H，并将进位标志CF置1（同上，调整的是十位所以加了60h，上一个是06h）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">十进制计算62－38&#x3D;24</span><br><span class="line">W1 DB 62H  ；BCD码表示的十进制62</span><br><span class="line">W2 DB 38H</span><br><span class="line">……</span><br><span class="line">MOV AL，W1</span><br><span class="line">SUB AL，W2  ；相减后，(AL)&#x3D;2AH</span><br><span class="line">DAS        ；减6调整后，(AL)&#x3D;24H</span><br></pre></td></tr></table></figure><h4 id="非压缩BCD的加法调整"><a href="#非压缩BCD的加法调整" class="headerlink" title="非压缩BCD的加法调整"></a>非压缩BCD的加法调整</h4><p>非压缩的BCD码加法调整 </p><p><strong>格式：</strong>AAA</p><p><strong>功能：</strong> </p><p>​    如果AL的低4位大于9或者af=1（辅助进位标识），将AL加6、AH加1，AL的 高4位清零、CF、AF置1 由于非压缩的BCD码用1个字节表示1个十进制数， 所以调整后若加上30H就是该数值的ASCII码。因为0的ascii码是30h</p><p><strong>注意</strong>：</p><p>​    在AAA指令执行前，必须是使用ADD或ADC指令完成了 加法，且结果是在AL中。AAA指令对AL中内容进行校正</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例 十进制计算6+8&#x3D;14，用非压缩的BCD码表示并显示在屏幕上。</span><br><span class="line">T1 DB 06H</span><br><span class="line">T2 DB 08H</span><br><span class="line">……</span><br><span class="line">MOV AL，T1 ；(AL)&#x3D;00000110&#x3D;06H</span><br><span class="line">ADD AL，T2 ；(AL)&#x3D;00001110&#x3D;0EH</span><br><span class="line">AAA    ；调整后(AH)&#x3D;01H，(AL)&#x3D;04H</span><br><span class="line">ADD AX，3030H ；AH、AL分别加上30H，变成ASCII码</span><br><span class="line">MOV BX，AX ；用BX保存</span><br><span class="line">MOV DL，BH ；显示“1”</span><br><span class="line">MOV AH，2 ；2号显示功能</span><br><span class="line">INT 21H ；DOS中断调用</span><br><span class="line">MOV DL，BL ；显示“4”</span><br><span class="line">INT 21H</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="非压缩BCD的减法调整"><a href="#非压缩BCD的减法调整" class="headerlink" title="非压缩BCD的减法调整"></a>非压缩BCD的减法调整</h4><p>非压缩的BCD码减法调整 </p><p><strong>格式：</strong>AAS</p><p><strong>功能：</strong> </p><p>​    如果AL的低4位大于9，将AL减6、AH减1， AL的高4位清零、CF、AF置1</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例 十进制计算57－18&#x3D;39，用非压缩的BCD码表示。</span><br><span class="line">MOV AX,0507H</span><br><span class="line">MOV BX,0108H</span><br><span class="line">SUB AL,BL</span><br><span class="line">SUB AH,BH ；高位不用带借位减</span><br><span class="line">AAS       ；减法调整后(AX)&#x3D;0309H </span><br></pre></td></tr></table></figure><h4 id="非压缩BCD的乘法调整"><a href="#非压缩BCD的乘法调整" class="headerlink" title="非压缩BCD的乘法调整"></a>非压缩BCD的乘法调整</h4><p><strong>格式</strong>：AAM (ASCII Adjust Multiply) </p><p><strong>功能</strong>： 将乘积AX中的2个非压缩的BCD码调整。 AL除以0AH，得到的商送AH，余数送入 AL。即乘积的高位数在AH 、低位数在 AL中</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例 十进制乘法6×8&#x3D;48，用非压缩的BCD码表示，并显示。</span><br><span class="line">P1 DB 06H</span><br><span class="line">P2 DB 08H</span><br><span class="line">……</span><br><span class="line">MOV AL，P1 ；(AL)&#x3D;00000110&#x3D;06H</span><br><span class="line">IMUL P2 ；(AL)&#x3D;00110000&#x3D;30H</span><br><span class="line">AAM ；调整后(AH)&#x3D;04H，(AL)&#x3D;08H</span><br><span class="line">ADD AX，3030H ；AH、AL分别加上30H</span><br><span class="line">MOV BX，AX ；用BX保存</span><br><span class="line">MOV DL，BH ；显示“4”</span><br><span class="line">MOV AH，2</span><br><span class="line">INT 21H</span><br><span class="line">MOV DL，BL ；显示“8”</span><br><span class="line">INT 21H</span><br></pre></td></tr></table></figure><h4 id="非压缩BCD的除法调整"><a href="#非压缩BCD的除法调整" class="headerlink" title="非压缩BCD的除法调整"></a>非压缩BCD的除法调整</h4><p><strong>格式</strong>：AAD (ASCII Adjust Division) </p><p><strong>功能</strong>：在做除法之前，将被除数AX中的2 个非压缩的BCD码调整。 (AL)=(AL)+(AH)*10，AH清零。除法之 后，商在AL 、余数在AH中.</p><h2 id="考试复习"><a href="#考试复习" class="headerlink" title="考试复习"></a>考试复习</h2><h3 id="标号"><a href="#标号" class="headerlink" title="标号"></a>标号</h3><p>对于数据标号，即<code>a db 1,2,3</code>，则在代码段中的a就会被替换成data:[0]，前提是要在assume里面关联ds与data。被替换以后，你就懂了吧，它可以表示一个数据，也可以用来寻址<code>a[si]</code>也就是<code>cs:0[si]</code></p><h3 id="offset-1"><a href="#offset-1" class="headerlink" title="offset"></a>offset</h3><p>offset只能和数据标号搭配，而不能用复杂的例如ds:[bx]等。。offset取出的地址可以用来mov、add之类的。。</p><h3 id="寻址-1"><a href="#寻址-1" class="headerlink" title="寻址"></a>寻址</h3><p>push word ptr 20[bx+si-2]这里是可以写表达式的</p><h3 id="栈-1"><a href="#栈-1" class="headerlink" title="栈"></a>栈</h3><p>栈顶应该是sp-1吗</p><h3 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h3><p>XOR CX,CX</p><p>相当于mov cx,0，但是异或效率更高 </p><h3 id="标号-1"><a href="#标号-1" class="headerlink" title="标号"></a>标号</h3><p><a href="https://blog.csdn.net/u011555996/article/details/80114485">关于标号的一些问题</a></p><p>X1   DB  12H,  34H,  56H<br>        X2  DW  78H,  90H<br>        ADR1  DW X1<br>        ADR2  DW  X2</p><p>如上，ADR1和ADR2表示的是X1和X2的地址，即偏移地址，0000和0300。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> assembler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构新版</title>
      <link href="post/79666db.html"/>
      <url>post/79666db.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ol><li><p>数据对象，数据元素和数据项</p></li><li><p>四类基本结构</p><ol><li>集合</li><li>线性结构</li><li>树形结构</li><li>图状结构</li></ol></li><li><p>逻辑结构分类</p><ol><li>线性结构<ul><li>线性表</li><li>栈</li><li>队列</li><li>数组、广义表</li><li>字符串</li></ul></li><li>非线性结构<ul><li>树、二叉树</li><li>图</li></ul></li></ol></li><li><p>存储结构分类</p><ol><li>顺序存储结构<ul><li>向量</li><li>一维数组</li></ul></li><li>非顺序存储结构（链式）<ul><li>链接表</li></ul></li></ol></li><li><p>数据类型</p><ol><li>原子类型</li><li>结构类型</li></ol></li><li><p>ADT（抽象数据类型）</p><p>​    （D,S,P)，分别表示数据对象，关系集，操作集。</p></li><li><p>算法</p><ol><li>特性<ul><li>有穷性</li><li>确定性</li><li>可行性</li><li>输入：0、多个</li><li>输出：1、多个</li></ul></li><li>设计要求<ul><li>正确性</li><li>可读性</li><li>健壮性</li><li>高效与低存储量</li></ul></li><li>描述工具<ul><li>自然语言</li><li>程序设计语言</li><li>流程图</li><li>伪码</li><li>类C√</li></ul></li></ol></li></ol><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>前驱、后继</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记录一次机器人更新的问题</title>
      <link href="post/ef959c76.html"/>
      <url>post/ef959c76.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于这几天图片有时候发不出了，怀疑版本问题，但好久没有重启了，结果一重启mcl，然后自动更新让我彻底崩盘；<br>记录一下目前各包的版本号</p></blockquote><table><thead><tr><th>package</th><th>tag</th></tr></thead><tbody><tr><td>mcl</td><td>1.2.1</td></tr><tr><td>mah</td><td>1.12.0</td></tr><tr><td>gam</td><td>0.19.1</td></tr><tr><td>gb</td><td>0.8.11</td></tr></tbody></table><p><strong>以上缩写</strong>：<br>mirai-console-loader<br>mirai-api-http<br>girai-application-mirai<br>girai-broadcast</p><p><strong>中间有个坑：mah版本怎么切换？</strong><br>需要先移除原来的包</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mcl -r net.mamoe:mirai-api-http</span><br></pre></td></tr></table></figure><p>然后下载需要的版本，放到plugins即可。</p><p>如果不想自动更新的话可以<code>mcl -u</code>启动。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> robot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玛丽怜梦录</title>
      <link href="post/c0562e47.html"/>
      <url>post/c0562e47.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>新开一个记梦的板块Beta</p></blockquote><h2 id="2021-08-31"><a href="#2021-08-31" class="headerlink" title="2021-08-31"></a>2021-08-31</h2><p>和即将毕业的学长打算一起去吃饭，具体缘由已记不清了。学长叫了出租车，我拉开副驾驶门的一瞬间车子突然向前走了一下，差点把我拽倒。上车后我向师傅调侃，走这么着急么。随后我们向目的地驶去。中间经过一道弯曲的桥，但是这师傅却像没看见一样，径直往前开，直到即将撞上护栏才猛打方向，哪里来得及，车辆栽入河里。车子刚没入水中，车内的气压变得不正常了。我迅速摇下来玻璃钻了出去，然而我不会游泳啊！我也不知道自己在水底多深，只能拼命往上狗刨，终于浮上来了，深吸一口气，竟然可以游到岸边。终于，我和学长都得救了，但有个孩子没救上来。<br>车上除了司机不是只有两个人吗？我想。</p><h2 id="2021-09-04"><a href="#2021-09-04" class="headerlink" title="2021-09-04"></a>2021-09-04</h2><p>是一个让人害怕一整天的梦。</p><h2 id="2021-09-11"><a href="#2021-09-11" class="headerlink" title="2021-09-11"></a>2021-09-11</h2><p>参加了场史无前例的长跑，已经不是第一次了，很多往届没能成功跑完的人又来参加了比赛。又梦到我跟我爸在开车了，貌似是三轮车，想念小时候一个人坐在三轮车上的感觉，那是小时候的一小块天堂。</p><h2 id="2021-10-13"><a href="#2021-10-13" class="headerlink" title="2021-10-13"></a>2021-10-13</h2><p>昨天到现在一直在做一个很大的梦，很可怕，是我如此多年来做的最大的噩梦。我当然很不希望记录这样一个梦，它的出现让我意外，但是细想其实也有因有果。我现在努力想的是，怎样让这样一个梦醒过来，有没有可以让人立马就醒过来的汤药，我一定不顾一切的喝它几碗。可是哪里会有呢？给我几天时间吧！梦里也不要太冲动，我可以帮助梦里的人找到解药的，这药一定保我以后不再做噩梦了。</p><h2 id="2021-10-22"><a href="#2021-10-22" class="headerlink" title="2021-10-22"></a>2021-10-22</h2><p>太美好的梦记录不下来，只想亲口讲给你听。</p><h2 id="2021-10-24"><a href="#2021-10-24" class="headerlink" title="2021-10-24"></a>2021-10-24</h2><p>梦到打仗了，我和一队人马幸运的躲在草堆里，看着敌人在周围转来转去最终得救。本来只有我和队长两个人在一个小房间里，无奈后面人太多了，只好换了藏身的地点。队长躲在水里，我看着他隔了很久才换气，我自己也难受，于是醒过来了</p><h2 id="2021-10-26"><a href="#2021-10-26" class="headerlink" title="2021-10-26"></a>2021-10-26</h2><p>感觉很累，你说陪我出去走走。我们捡到了一个望远镜，你凑在我旁边，我说你猜我看到什么了，你说看见什么，我说我看见烟花了。你不相信，我清清楚楚的记得烟花在望远镜里绽放，小小的，没有那么壮观，就关在小小的圆圆的镜片里，我想它最好永远都呆在望远镜里，这样只有我们两个可以看见。</p>]]></content>
      
      
      <categories>
          
          <category> 文学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> literature </tag>
            
            <tag> dream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢乐谷迷局</title>
      <link href="post/a564b56a.html"/>
      <url>post/a564b56a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>事情发生在前几天，当我从昏睡中苏醒时，暗喜，看着窗外的圆月高挂，人却已是筋疲力竭。</p></blockquote><p>凸月之时，我被一伙严严实实包裹身份的人带到一处巨大的地方，那些包裹者自称此地便是欢乐谷，说着便让我独自破门而入。<br>门上仅有一栓，食指稍一用力，那门栓便垂头丧气。没有嘤嘤嘤的叫声，我进入了欢乐谷。<br>项目貌似并不多，导航地图也不需要，但是够大——这我很快就会察觉到的。</p><p>进来以后，并没有想象中的豁然开朗，反而杂草丛生，只能沿着被人踩出来的痕迹向前移动，很快我便意识到，我已经深入地下。<br>当我终于看到光亮的时候，藤蔓疯长的声音也趁机进入眼睛。四周淡淡的荧绿色，仿佛处在一个巨大的榕树森林。那突如其来的声音扭曲着，变本加厉，以我为中心迅速蠕动，巨大的压力让我蹲在地上双手抱耳。我感觉那一条条的枝桠即将从我两侧的耳朵像张一斧的尖刀对林祥福那样扎进去，又准又快，再转上一转。恐惧让我无法摆脱这种声音。<br>久了，我缓缓起身，面前已经有人在走动了，我不清楚他们是如何跨过我的，而面前人的步态却意外的像我许久不见的女友，不注意，声音已经偃旗息鼓了。</p><p>我向前伸出双手，跟随着女友的脚步走了出去。这时往身后一看，一个深邃幽暗的门洞坐在那里，门上赫然几个大字“星斗大森林“。再回头，女友又不知去向。我开始审视目前处境，除了身后门洞，四周像是身处一个电玩城，而面前大概只有两个去处，一条是大路，另一条是小路。你说，走小路。我说，走大路。<br>从那个小路摸着蓝色墙壁走进去，闷沉的碰撞和击打声传来。大概是个格斗场。</p><p>刚进门，我就被几个工作人员套上了不太合身的装备，和我一同被套上的人大概有七八个，还有一个无任何装束的男人，据说是教练。我们被安排成了一排，教练说要一挑我们几个人。我感到害怕，莫名其貌地被安排来打架了？这无论如何我也打不过的。这时，我的左肩被人狠狠的撞了一下，我向后一个趔趄勉强站稳，来不及思考，一记飞天脚朝我踢了过来，我下意识往右前方闪躲，在地上打了几个滚才停下，接着教练又向其他人开火。我在混战中不停地躲避，用尽了毕生的姿势和力气。<br>该死啊，我为什么要来这里，已经快要喘不上来气了。</p><p>之后我几乎陷入昏迷，直到从渐渐消止的打斗中看到门口女友的身影，我拼命找到一个角落脱掉沉重的装备追了出去。我看到了她，以及几位老同学。Z呼喊我的名字，示意我快过去。他们对我的出现并没有感到任何惊讶，我们就像没分开过一样继续走向下一个项目。<br>从刚刚昏暗的氛围里面过来，几步就到了室外。我们站在一个十米左右的平台上，下面是一片巨大的水，不规律的浪潮拍打过来。从平台的右侧可以下楼梯，那台阶一直绵延了百米，最后钻入深蓝里。Z说，我要下去玩玩。我看向楼梯尽头，汽轮的呜呜声飘渺可见。我们是在一个巨大的岛上。</p><p>Z从楼梯一路跑下去，在极度恐高中，我慢慢失去意识。<br>再往后，我似乎见到了🐍，我很害怕，临走时，看到了远处海洋上的邮轮，醒了。</p><blockquote><p>以上，记录一次梦，但因为断更，我已经忘了梦到了什么。总之，是一场把我所有的恐惧都汇聚到一起的梦。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 文学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> literature </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>东华大学程序设计基础OJ题目</title>
      <link href="post/5b353da9.html"/>
      <url>post/5b353da9.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录一下自己做题的时候遇到的比较困扰的题</p></blockquote><h2 id="数列2"><a href="#数列2" class="headerlink" title="数列2"></a>数列2</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>思维的严密性是相当重要的，尤其是在程序设计中，一个小小的错误，就可能导致无法想象的后果。明明的爸爸是一名富有经验的程序设计专家，深知思维严密的重要性，于是在明明很小的时候，就通过游戏的方式，训练明明的思维严密性。今天，明明的爸爸和明明做了一个数列的游戏。这个游戏很简单，就是有一数列，现在需要在这数列中选出一个或者若干个数（可以不连续），要求这些数的和能被11整除。明明的爸爸想锻炼明明思维的严密性，因此要求明明尽可能多的找出符合条件的数列来，最好一个也不要漏掉。 例如一数列为“11 22 33”，其中11可以被11整除，22可以被11整除，33可以被11整除，11+22=33能被11整除，22+33=55能被11整除，11+33=44能被11整除，11+22+33=66能被11整除。所以以上一数列能被11整除的情况一共有7种。 明明对于这个游戏很感兴趣，高兴地玩了起来。由于粗心，明明总是无法一次就把所有的情况都找出来，这使得他爸爸不是很满意。于是明明爸爸决定先降低游戏的难度，事先告诉明明某一数列总共有多少种符合条件的选择数字的方法，然后再让明明去选。明明的爸爸请你帮一个忙，他不想自己找出所有的情况，因此请你写一个程序，用程序来找出一共有多少种符合选数的情况，并把结果告诉他。 </p><p>明明爸爸的问题可以归结为：给你一个数列，从中选出1个或若干个数（可以不连续），要求这些数的和能被11整除，问这样的选数方法一共有多少种。</p><h3 id="输入说明"><a href="#输入说明" class="headerlink" title="输入说明"></a>输入说明</h3><p>你写的程序要求从标准输入设备中读入测试数据作为你所写程序的输入数据。标准输入设备中有多组测试数据，每组测试数据有两行，每组测试数据的第一行有一个整数n(1≤n≤15)，表示数列中有多少个整数，每组测试数据的第二行有n个整数，整数的大小都大于等于0且小于等于100，整数之间用一个空格隔开。每组测试数据与其后一组测试数据之间没有任何空行，第一组测试数据前面以及最后一组测试数据后面也都没有任何空行。</p><h3 id="输出说明"><a href="#输出说明" class="headerlink" title="输出说明"></a>输出说明</h3><p>对于每一组测试数据，你写的程序要求计算出一组相应的运算结果，并将每组运算结果作为你所写程序的输出数据依次写入到标准输出设备中。每组运算结果为一个整数，即表示一共有多少种选数方法。每组运算结果单独形成一行数据，其行首和行尾都没有任何空格，每组运算结果与其后一组运算结果之间没有任何空行，第一组运算结果前面以及最后一组运算结果后面也都没有任何空行。 注：通常，显示屏为标准输出设备。</p><h3 id="输入范例"><a href="#输入范例" class="headerlink" title="输入范例"></a>输入范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">11</span><br><span class="line">3</span><br><span class="line">11 22 33</span><br></pre></td></tr></table></figure><h3 id="输出范例"><a href="#输出范例" class="headerlink" title="输出范例"></a>输出范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">7</span><br></pre></td></tr></table></figure><h3 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h3><blockquote><p>本题主要考察数组应用和递归思想</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_num</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> num, <span class="keyword">int</span> &amp;sum, <span class="keyword">int</span> n, <span class="keyword">int</span> *arr, <span class="keyword">int</span> countor, <span class="keyword">int</span> num_sum)</span> <span class="comment">//参数意义：遍历起始地址，遍历总个数，满足条件的个数，数组长度，数组，计数器，和</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    countor ++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt; n-num+countor; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(countor &lt; num)</span><br><span class="line">            get_num(i+<span class="number">1</span>, num, sum, n, arr, countor, num_sum + arr[i]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((num_sum+arr[i])% <span class="number">11</span> == <span class="number">0</span> &amp;&amp; (num_sum + arr[i]) != <span class="number">0</span>) &#123;sum++;&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> arr[<span class="number">15</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">             get_num(<span class="number">0</span>, i, sum, n, arr, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="打印十字图"><a href="#打印十字图" class="headerlink" title="打印十字图"></a>打印十字图</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>小明为某机构设计了一个十字型的徽标（并非红十字会啊），如下所示：</p><p>..$$$$$$$$$$$$$..<br>..$………..$..<br>$$$.$$$$$$$$$.$$$<br>$…$…….$…$<br>$.$$$.$$$$$.$$$.$<br>$.$…$…$…$.$<br>$.$.$$$.$.$$$.$.$<br>$.$.$…$…$.$.$<br>$.$.$.$$$$$.$.$.$<br>$.$.$…$…$.$.$<br>$.$.$$$.$.$$$.$.$<br>$.$…$…$…$.$<br>$.$$$.$$$$$.$$$.$<br>$…$…….$…$<br>$$$.$$$$$$$$$.$$$<br>..$………..$..<br>..$$$$$$$$$$$$$..</p><p>对方同时也需要在电脑dos窗口中以字符的形式输出该标志（图中红色只是为了标记处十字符号，输出时都用黑色），并能任意控十字外面包围的符号的层数。</p><h3 id="输入说明-1"><a href="#输入说明-1" class="headerlink" title="输入说明"></a>输入说明</h3><p>一个正整数 n (n&lt;30) 表示要求打印图形的层数。</p><h3 id="输出说明-1"><a href="#输出说明-1" class="headerlink" title="输出说明"></a>输出说明</h3><p>对应包围层数的该标志。</p><p>比如：</p><p>输入</p><p>1</p><p>输出</p><p>..$$$$$..<br>..$…$..<br>$$$.$.$$$<br>$…$…$<br>$.$$$$$.$<br>$…$…$<br>$$$.$.$$$<br>..$…$..<br>..$$$$$..</p><p>输入</p><p>3</p><p>输出</p><p>..$$$$$$$$$$$$$..<br>..$………..$..<br>$$$.$$$$$$$$$.$$$<br>$…$…….$…$<br>$.$$$.$$$$$.$$$.$<br>$.$…$…$…$.$<br>$.$.$$$.$.$$$.$.$<br>$.$.$…$…$.$.$<br>$.$.$.$$$$$.$.$.$<br>$.$.$…$…$.$.$<br>$.$.$$$.$.$$$.$.$<br>$.$…$…$…$.$<br>$.$$$.$$$$$.$$$.$<br>$…$…….$…$<br>$$$.$$$$$$$$$.$$$<br>..$………..$..<br>..$$$$$$$$$$$$$.. </p><p>请仔细观察样例，尤其要注意句点的数量和输出位置。</p><h3 id="输入范例-1"><a href="#输入范例-1" class="headerlink" title="输入范例"></a>输入范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="输出范例-1"><a href="#输出范例-1" class="headerlink" title="输出范例"></a>输出范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">..$$$$$$$$$$$$$..</span><br><span class="line">..$...........$..</span><br><span class="line">$$$.$$$$$$$$$.$$$</span><br><span class="line">$...$.......$...$</span><br><span class="line">$.$$$.$$$$$.$$$.$</span><br><span class="line">$.$...$...$...$.$</span><br><span class="line">$.$.$$$.$.$$$.$.$</span><br><span class="line">$.$.$...$...$.$.$</span><br><span class="line">$.$.$.$$$$$.$.$.$</span><br><span class="line">$.$.$...$...$.$.$</span><br><span class="line">$.$.$$$.$.$$$.$.$</span><br><span class="line">$.$...$...$...$.$</span><br><span class="line">$.$$$.$$$$$.$$$.$</span><br><span class="line">$...$.......$...$</span><br><span class="line">$$$.$$$$$$$$$.$$$</span><br><span class="line">..$...........$..</span><br><span class="line">..$$$$$$$$$$$$$..</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="主要代码-1"><a href="#主要代码-1" class="headerlink" title="主要代码"></a>主要代码</h3><blockquote><p>利用好对称，找规律。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;<span class="number">2</span>*n+<span class="number">3</span>)</span><br><span class="line">        i = n*<span class="number">4</span>+<span class="number">6</span>-i;</span><br><span class="line">    <span class="keyword">if</span>(j&gt;<span class="number">2</span>*n+<span class="number">3</span>)</span><br><span class="line">        j = n*<span class="number">4</span>+<span class="number">6</span>-j;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">1</span> &amp;&amp; j == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = i;</span><br><span class="line">        i = j;</span><br><span class="line">        j = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">2</span> != <span class="number">0</span> &amp;&amp; j != i + <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span> &amp;&amp; j == i + <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n*<span class="number">4</span>+<span class="number">5</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n*<span class="number">4</span>+<span class="number">5</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (judge(i, j, n))</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="质数的乘积"><a href="#质数的乘积" class="headerlink" title="质数的乘积"></a>质数的乘积</h2><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><p>　Torry从小喜爱数学。一天，老师告诉他，像2、3、5、7……这样的数叫做质数。Torry突然想到一个问题，前10、100、1000、10000……个质数的乘积是多少呢？他把这个问题告诉老师。老师愣住了，一时回答不出来。于是Torry求助于会编程的你，请你算出前n个质数的乘积。不过，考虑到你才接触编程不久，Torry只要你算出这个数模上50000的值。</p><h3 id="输入说明-2"><a href="#输入说明-2" class="headerlink" title="输入说明"></a>输入说明</h3><p>仅包含一个正整数n，其中n&lt;=100000。</p><h3 id="输出说明-2"><a href="#输出说明-2" class="headerlink" title="输出说明"></a>输出说明</h3><p>输出一行，即前n个质数的乘积模50000的值。</p><h3 id="输入范例-2"><a href="#输入范例-2" class="headerlink" title="输入范例"></a>输入范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="输出范例-2"><a href="#输出范例-2" class="headerlink" title="输出范例"></a>输出范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">30</span><br></pre></td></tr></table></figure><h3 id="主要代码-2"><a href="#主要代码-2" class="headerlink" title="主要代码"></a>主要代码</h3><blockquote><p>如何判断指数，基本数据类型（int 、long long）的取值范围</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_zhi</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(a); i++)&#123; <span class="comment">//注意是&lt;=</span></span><br><span class="line">        <span class="keyword">if</span>(a%i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sum_arr[<span class="number">100000</span>];</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">1</span>;<span class="comment">//int最大值2^32-1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; k &lt; <span class="number">100000</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_zhi(i)) &#123;sum = sum*i%<span class="number">50000</span>; sum_arr[k++] = sum;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum_arr[n<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="航班时间"><a href="#航班时间" class="headerlink" title="航班时间"></a>航班时间</h2><h3 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h3><p>【问题背景】</p><p>小h前往美国参加了蓝桥杯国际赛。小h的女朋友发现小h上午十点出发，上午十二点到达美国，于是感叹到“现在飞机飞得真快，两小时就能到美国了”。</p><p>小h对超音速飞行感到十分恐惧。仔细观察后发现飞机的起降时间都是当地时间。由于北京和美国东部有12小时时差，故飞机总共需要14小时的飞行时间。</p><p>不久后小h的女朋友去中东交换。小h并不知道中东与北京的时差。但是小h得到了女朋友来回航班的起降时间。小h想知道女朋友的航班飞行时间是多少。</p><p>【问题描述】</p><p>对于一个可能跨时区的航班，给定来回程的起降时间。假设飞机来回飞行时间相同，求飞机的飞行时间。</p><h3 id="输入说明-3"><a href="#输入说明-3" class="headerlink" title="输入说明"></a>输入说明</h3><p>从标准输入读入数据。</p><p>一个输入包含多组数据。</p><p>输入第一行为一个正整数T，表示输入数据组数。</p><p>每组数据包含两行，第一行为去程的 起降 时间，第二行为回程的 起降 时间。</p><p>起降时间的格式如下</p><p>h1:m1:s1 h2:m2:s2</p><p>或</p><p>h1:m1:s1 h3:m3:s3 (+1)</p><p>或</p><p>h1:m1:s1 h4:m4:s4 (+2)</p><p>表示该航班在当地时间h1时m1分s1秒起飞，</p><p>第一种格式表示在当地时间 当日 h2时m2分s2秒降落</p><p>第二种格式表示在当地时间 次日 h3时m3分s3秒降落。</p><p>第三种格式表示在当地时间 第三天 h4时m4分s4秒降落。</p><p>对于此题目中的所有以 h : m : s形式给出的时间, 保证 ( 0&lt;=h&lt;=23, 0&lt;=m,s&lt;=59 ).</p><p>保证输入时间合法，飞行时间不超过24小时。</p><h3 id="输出说明-3"><a href="#输出说明-3" class="headerlink" title="输出说明"></a>输出说明</h3><p>输出到标准输出。</p><p>对于每一组数据输出一行一个时间hh:mm:ss，表示飞行时间为hh小时mm分ss秒。</p><p>注意，当时间为一位数时，要补齐前导零。如三小时四分五秒应写为03:04:05。</p><h3 id="输入范例-3"><a href="#输入范例-3" class="headerlink" title="输入范例"></a>输入范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">17:48:19 21:57:24</span><br><span class="line">11:05:18 15:14:23</span><br><span class="line">17:21:07 00:31:46 (+1)</span><br><span class="line">23:02:41 16:13:20 (+1)</span><br><span class="line">10:19:19 20:41:24</span><br><span class="line">22:19:04 16:41:09 (+1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输出范例-3"><a href="#输出范例-3" class="headerlink" title="输出范例"></a>输出范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">04:09:05</span><br><span class="line">12:10:39</span><br><span class="line">14:22:05</span><br></pre></td></tr></table></figure><h3 id="主要代码-3"><a href="#主要代码-3" class="headerlink" title="主要代码"></a>主要代码</h3><blockquote><p>两次时间平均可以抵消时区差，算时间最好全都换成秒再一一还原</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_num</span><span class="params">(<span class="built_in">string</span> str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mutiple = <span class="number">3600</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i+=<span class="number">3</span>)&#123;</span><br><span class="line">        sum += ((str[<span class="number">9</span>+i]-<span class="string">&#x27;0&#x27;</span>)*<span class="number">10</span> + (str[<span class="number">10</span>+i] - <span class="string">&#x27;0&#x27;</span>) - (str[<span class="number">0</span>+i]-<span class="string">&#x27;0&#x27;</span>)*<span class="number">10</span> - (str[<span class="number">1</span>+i]-<span class="string">&#x27;0&#x27;</span>))*mutiple;</span><br><span class="line">        mutiple /= <span class="number">60</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(str.length() &gt; <span class="number">20</span>)&#123;</span><br><span class="line">        sum += <span class="number">86400</span>*(str[<span class="number">20</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">      <span class="built_in">string</span> str1, str2;</span><br><span class="line">      getline(<span class="built_in">cin</span>, str1);</span><br><span class="line">      getline(<span class="built_in">cin</span>, str2);</span><br><span class="line">      <span class="keyword">int</span> h = (get_num(str1) + get_num(str2))/<span class="number">2</span>/<span class="number">3600</span>;</span><br><span class="line">      <span class="keyword">int</span> m = (get_num(str1) + get_num(str2))/<span class="number">2</span>%<span class="number">3600</span>/<span class="number">60</span>;<span class="comment">//z</span></span><br><span class="line">      <span class="keyword">int</span> s = (get_num(str1) + get_num(str2))/<span class="number">2</span>%<span class="number">60</span>;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%02d:%02d:%02d\n&quot;</span>,h, m, s);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="洗牌"><a href="#洗牌" class="headerlink" title="洗牌"></a>洗牌</h2><h3 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h3><p>　小弱T在闲暇的时候会和室友打扑克，输的人就要负责洗牌。虽然小弱T不怎么会洗牌，但是他却总是输。<br>　　渐渐地小弱T发现了一个规律：只要自己洗牌，自己就一定会输。所以小弱T认为自己洗牌不够均匀，就独创了一种小弱洗牌法。<br>　　小弱洗牌法是这样做的：先用传统洗牌法将52张扑克牌（1到K各四张，除去大小王）打乱，放成一堆，然后每次从牌堆顶层拿一张牌放到手中（初始时手中无牌）。如果这张牌的大小是P（1到K的大小分别为1到13），那么就把这张牌插入到当前手中第P张牌的后面。如果当前手中不足P张牌，那么就把这张牌放在最后。<br>　　现在给你一对已经被打乱的牌，请你用小弱洗牌法进行洗牌，然后输出最后手中牌的序列。<br>　　注意：小弱可能在第一次洗牌时弄丢了某些牌，这时请你输出一个-1来提醒他牌的数目不够。</p><h3 id="输入说明-4"><a href="#输入说明-4" class="headerlink" title="输入说明"></a>输入说明</h3><p>　　测试数据的输入含N个用空格隔开的字符串表示牌堆从顶至底的每张扑克（1到K中的某个）。可能有多行。</p><h3 id="输出说明-4"><a href="#输出说明-4" class="headerlink" title="输出说明"></a>输出说明</h3><p>​        如果字符串的个数N为52，则输出用小弱洗牌法洗牌后的序列，每个字符串后都有一个空格。<br>　　否则请输出一个-1</p><h3 id="输入范例-4"><a href="#输入范例-4" class="headerlink" title="输入范例"></a>输入范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 6 K Q 5 1 Q 9 7 9 K 3 J 1 2 3 5</span><br><span class="line">2</span><br><span class="line">3 5 7 Q 7 10 8 4 9 7 8 9 4</span><br><span class="line">10 6 2 8 2 10 10 Q 5 K J 1</span><br><span class="line">J 8 3 K 4 1 6 J 6</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输出范例-4"><a href="#输出范例-4" class="headerlink" title="输出范例"></a>输出范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 1 1 1 3 4 6 6 2 2 2 5 J 3 8 4 4 6 K J 8 J 10 10 K Q 2 5 7 8 10 9 3 7 9 8 7 1 10 5 6 3 Q K Q 5 Q 7 9 9 J K </span><br></pre></td></tr></table></figure><h3 id="主要代码-4"><a href="#主要代码-4" class="headerlink" title="主要代码"></a>主要代码</h3><blockquote><p>难点：</p><p>一个是读入多行带空格的字符串，用<code>while(getline(cin, str))</code>，如有需要可以加<code>if(str == &quot;&quot;) break;</code></p><p>另一个是对每一个字符的处理，主要难点是10这样的两个单字符的数字如何处理。</p><p>另外链表的使用（本题中插入元素的实现）；</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_el</span><span class="params">(<span class="keyword">char</span> *arr, <span class="keyword">int</span> p, <span class="keyword">char</span> c, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p &gt; len)</span><br><span class="line">        p = len; <span class="comment">//没有位置则插入最后</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len; i &gt; p; i--)&#123;</span><br><span class="line">        arr[i] = arr[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    arr[p] = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> arr[<span class="number">52</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(getline(<span class="built_in">cin</span>, str))&#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="string">&quot;&quot;</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> len = str.size()+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i+=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">&#x27;1&#x27;</span> &amp;&amp; str[i+<span class="number">1</span>] == <span class="string">&#x27;0&#x27;</span> &amp;&amp; i &lt; len <span class="number">-1</span>)&#123;</span><br><span class="line">                str[i] = <span class="string">&#x27;I&#x27;</span>;flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;flag = <span class="literal">false</span>;&#125;</span><br><span class="line">            <span class="keyword">if</span>(str[i] &gt; <span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp;</span><br><span class="line">                <span class="keyword">switch</span>(str[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>: temp = <span class="number">10</span>;<span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;J&#x27;</span>: temp = <span class="number">11</span>;<span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;Q&#x27;</span>: temp = <span class="number">12</span>;<span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;K&#x27;</span>: temp = <span class="number">13</span>;<span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                add_el(arr, temp, str[i], sum);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(str[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str[i] &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                add_el(arr, str[i] - <span class="string">&#x27;0&#x27;</span>, str[i], sum);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">            sum++;</span><br><span class="line">            <span class="keyword">if</span>(flag) i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum &lt; <span class="number">52</span>)</span><br><span class="line">        &#123;<span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">52</span>; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == <span class="string">&#x27;I&#x27;</span>) <span class="built_in">cout</span>&lt;&lt;<span class="number">10</span>&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;arr[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h2><h3 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h3><p>以字符串形式输入仅有整数和加减（正负）号构成的表达式，输出该表达式的值。</p><h3 id="输入说明-5"><a href="#输入说明-5" class="headerlink" title="输入说明"></a>输入说明</h3><p>标准输入设备中有多组测试数据，每组输入数据由一行组成，输入仅有整数和加减（正负）号构成的表达式（但是表达式可以插入空格）。</p><h3 id="输出说明-5"><a href="#输出说明-5" class="headerlink" title="输出说明"></a>输出说明</h3><p>依次输出从标准输入设备中读入的每一组测试数据对应的结果，输出一行，输出该表达式的值。所有数据前后没有多余的空格，两组数据之间也没有多余的空行。</p><h3 id="输入范例-5"><a href="#输入范例-5" class="headerlink" title="输入范例"></a>输入范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3+    4+  5+6</span><br><span class="line">  0+1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输出范例-5"><a href="#输出范例-5" class="headerlink" title="输出范例"></a>输出范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">18</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="主要代码-5"><a href="#主要代码-5" class="headerlink" title="主要代码"></a>主要代码</h3><blockquote><p>难点在于如何提取每个整数（不一定小于十），以及保留该数前边的正负号。<br>不要忽略了最后一个，且最后一个可能包含空格。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a;</span><br><span class="line">    <span class="keyword">while</span>(getline(<span class="built_in">cin</span>, a))&#123;</span><br><span class="line">        <span class="keyword">int</span> len = a.length();</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; a[i] &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                temp *= <span class="number">10</span>;</span><br><span class="line">                temp += a[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span>(i == len<span class="number">-1</span>)&#123;</span><br><span class="line">                    <span class="keyword">switch</span>(flag)&#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>: sum += temp;<span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">-1</span>: sum -= temp;<span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i<span class="number">-1</span>] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; a[i<span class="number">-1</span>] &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">switch</span>(flag)&#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>: sum+=temp;temp = <span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">-1</span>: sum -= temp;temp = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">switch</span>(a[i])&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: flag = <span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: flag = <span class="number">-1</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27; &#x27;</span>: <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="大整数相加"><a href="#大整数相加" class="headerlink" title="大整数相加"></a>大整数相加</h2><h3 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h3><p>I have a very simple problem for you. Given two integers A and B, your job is to calculate the Sum of A + B.</p><h3 id="输入说明-6"><a href="#输入说明-6" class="headerlink" title="输入说明"></a>输入说明</h3><p>The first line of the input contains an integer T(1&lt;=T&lt;=20) which means the number of test cases. Then T lines follow, each line consists of two positive integers, A and B. Notice that the integers are very large, that means you should not process them by using 32-bit integer. You may assume the length of each integer will not exceed 1000.</p><h3 id="输出说明-6"><a href="#输出说明-6" class="headerlink" title="输出说明"></a>输出说明</h3><p>For each test case, you should output two lines. The first line is “Case #:”, # means the number of the test case. The second line is the an equation “A + B = Sum”, Sum means the result of A + B. Note there are some spaces int the equation. Output a blank line between two test cases.</p><h3 id="输入范例-6"><a href="#输入范例-6" class="headerlink" title="输入范例"></a>输入范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">1 2</span><br><span class="line">112233445566778899 998877665544332211</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输出范例-6"><a href="#输出范例-6" class="headerlink" title="输出范例"></a>输出范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Case 1:</span><br><span class="line">1 + 2 &#x3D; 3</span><br><span class="line"></span><br><span class="line">Case 2:</span><br><span class="line">112233445566778899 + 998877665544332211 &#x3D; 1111111111111111110</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="主要代码-6"><a href="#主要代码-6" class="headerlink" title="主要代码"></a>主要代码</h3><blockquote><p>显然要用字符串，拿到两个字符串之后该怎么处理呢？<br>这里采用新数组来存储每一位的合，并把大于10的进位<br>不要忽略了两个字符串长度不等，可能导致越界的问题</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)&#123;</span><br><span class="line">        <span class="built_in">string</span> a, b;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="keyword">int</span> c[<span class="number">1010</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> len_a = a.size();</span><br><span class="line">        <span class="keyword">int</span> len_b = b.size();</span><br><span class="line">        <span class="keyword">if</span>(len_a &gt;= len_b)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len_b; i++)&#123;</span><br><span class="line">                c[i] = a[len_a - i <span class="number">-1</span>] + b[len_b - i - <span class="number">1</span>] - <span class="number">2</span>*<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = len_b; i &lt; len_a; i++)&#123;</span><br><span class="line">                c[i] = a[len_a - i <span class="number">-1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(len_a &lt; len_b)&#123; <span class="comment">//这里的判断太麻烦了感觉，随后再想更简洁的解法</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len_a; i++)&#123;</span><br><span class="line">                c[i] = a[len_a - i <span class="number">-1</span>] + b[len_b - i - <span class="number">1</span>] - <span class="number">2</span>*<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = len_a; i &lt; len_b; i++)&#123;</span><br><span class="line">                c[i] = b[len_b - i <span class="number">-1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max_num = len_a &gt; len_b ? len_a : len_b;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max_num; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c[i] &gt;= <span class="number">10</span>)</span><br><span class="line">                <span class="keyword">if</span>(i != max_num <span class="number">-1</span>)</span><br><span class="line">                    &#123;c[i] %= <span class="number">10</span>;</span><br><span class="line">                    c[i+<span class="number">1</span>] += <span class="number">1</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Case &quot;</span>&lt;&lt;k+<span class="number">1</span>&lt;&lt;<span class="string">&#x27;:&#x27;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">&quot; + &quot;</span>&lt;&lt;b&lt;&lt;<span class="string">&quot; = &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = max(len_a, len_b)<span class="number">-1</span>; i &gt;= <span class="number">0</span> ; i--)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;c[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span>(k != n<span class="number">-1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="牧场安全系统"><a href="#牧场安全系统" class="headerlink" title="牧场安全系统"></a>牧场安全系统</h2><h3 id="问题描述-7"><a href="#问题描述-7" class="headerlink" title="问题描述"></a>问题描述</h3><p>明明是一家养牛场的老板，随着养牛场的规模扩大，牛的数量变得越来越多。因此，管理也就越来越难，还时常发生一些事故，比如：一些牛会走失，一些牛会因为疏忽照顾而生长不佳等等，这些都给明明造成了损失。于是，明明决定给养牛场安装一套现代化的生产管理系统，用科学的方法来管理养牛场，在这套安全系统中，需要为每头牛编一个号码，这个号码是唯一的，用来标识每一头牛。这样明明在管理时，就不会疏忽任意一头牛，也不会使牛再次走失。但是在给每头牛编号的时候，明明遇到了困难，由于系统的原因，系统对每头牛的编号有一定的限制，这个编号必须有L个小写字母组成，这些小写字母必须在固定的几个字母中选择，并且在这个编号中至少要有一个元音(‘a’, ‘e’, ‘i’, ‘o’, 或者 ‘u’)，至少有两个辅音(除去元音以外的音节), 并且字母按字母表顺序排列(例如，’abc’是有效的，而’bac’不是有效的)。 例如：假设编号由5个小写字母组成，且这些小写字母只能为a、b、c、d、e、f，这样构成的可能的编号就有以下6种： bcdef acdef abdef abcef abcdf abcde 明明觉得这样编号的方法非常麻烦，仅仅靠手工排列是很难完成的，出错的可能性很大，这时，明明想起了你，你是一位程序设计专家，你能否帮明明写一个程序，帮助他按照编号的规则，由程序生成所有的有效编号，供明明使用。 明明的问题可以归结为：给你一个有效编号的长度L，和C个可用的小写字母，按照编码规则生成所有的有效编号。</p><h3 id="输入说明-7"><a href="#输入说明-7" class="headerlink" title="输入说明"></a>输入说明</h3><p>你写的程序要求从标准输入设备中读入测试数据作为你所写程序的输入数据。标准输入设备中有多组测试数据，每组测试数据有二行，第一行为两个整数L(3≤L≤15)和C(3≤C≤26)，L表示编号的长度，C表示可以选择的小写字母的数量，L和C用一个空格隔开。第二行有C个两两不相同的小写字母，相互以一个空格隔开。每组测试数据与其后一组测试数据之间没有任何空行，第一组测试数据前面以及最后一组测试数据后面也都没有任何空行。</p><h3 id="输出说明-7"><a href="#输出说明-7" class="headerlink" title="输出说明"></a>输出说明</h3><p>对于每一组测试数据，你写的程序要求计算出一组相应的运算结果，并将这一组运算结果作为你所写程序的输出数据依次写入到标准输出设备中。每组运算结果分为两个部分，第一部分为所有生成的有效编号，每行一个，按字母表逆序顺序输出，第二部分为一个整数，表示总共有多少个有效编码。 每组运算结果的行首和行尾都没有任何空格，每组运算结果与其后一组运算结果之间有一个空行，最后一组运算结果后面没有空行。 注：通常，显示屏为标准输出设备。</p><h3 id="输入范例-7"><a href="#输入范例-7" class="headerlink" title="输入范例"></a>输入范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 3</span><br><span class="line">a b c</span><br><span class="line">5 6</span><br><span class="line">a b c d e f</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输出范例-7"><a href="#输出范例-7" class="headerlink" title="输出范例"></a>输出范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abc</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">bcdef</span><br><span class="line">acdef</span><br><span class="line">abdef</span><br><span class="line">abcef</span><br><span class="line">abcdf</span><br><span class="line">abcde</span><br><span class="line">6</span><br></pre></td></tr></table></figure><h3 id="主要代码-7"><a href="#主要代码-7" class="headerlink" title="主要代码"></a>主要代码</h3><blockquote><p>难点过于丰富，最初想法是分开两个数组，元音字母数组和其它的，但是两个迭代过于复杂，于是换思路；<br>一个迭代函数选取元素，再讨论是否符合要求。<br>难点在于迭代的时候结果多个如何储存，以及排序等等各种复杂的东西。<br>以及关于<code>string</code>的一些坑</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_yuan</span><span class="params">(<span class="keyword">char</span> c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_yuan(s[i])) sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum &gt; <span class="number">0</span> &amp;&amp; num - sum &gt; <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select_el</span><span class="params">(<span class="keyword">char</span> *arr, <span class="keyword">int</span> len, <span class="built_in">string</span> &amp;se_arr, <span class="keyword">int</span> num, <span class="keyword">int</span> start, <span class="keyword">int</span> countor, <span class="keyword">int</span> &amp;sum, <span class="built_in">string</span> *fi_arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    countor ++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt;= len - num + countor; i++)&#123;</span><br><span class="line">        se_arr[countor<span class="number">-1</span>] = arr[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(countor &lt; num)&#123;</span><br><span class="line">            select_el(arr, len, se_arr, num, i+<span class="number">1</span>, countor, sum, fi_arr);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(judge(se_arr, num))</span><br><span class="line">                fi_arr[sum++] = se_arr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_sort</span><span class="params">(<span class="built_in">string</span> *str, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; len; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(str[i] &lt; str[j])&#123;</span><br><span class="line">                    <span class="built_in">string</span> t = str[i];</span><br><span class="line">                    str[i] = str[j];</span><br><span class="line">                    str[j] = t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l, c;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;l&gt;&gt;c)&#123;</span><br><span class="line">        <span class="keyword">char</span> arr[<span class="number">27</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c; i ++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(arr, arr+c);</span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">se_arr</span><span class="params">(<span class="number">26</span>, <span class="string">&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line">        <span class="built_in">string</span> fi_arr[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        select_el(arr, c, se_arr, l, <span class="number">1</span>, <span class="number">0</span>, sum, fi_arr);</span><br><span class="line">        my_sort(fi_arr, sum);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sum; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; l; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(fi_arr[i][j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;fi_arr[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_yuan</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> arr[] = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;u&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c == arr[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="乒乓球"><a href="#乒乓球" class="headerlink" title="乒乓球"></a>乒乓球</h2><h3 id="问题描述-8"><a href="#问题描述-8" class="headerlink" title="问题描述"></a>问题描述</h3><p>国际乒联主席沙拉拉自从上任以来就立志于推行一系列改革，以推动乒乓球运动在全球的普及。其中11分制改革引起了很大的争议，有一部分球员因为无法适应新规则只能选择退役。明明就是其中一位，他退役之后走上了乒乓球研究工作，意图弄明白11分制和21分制对选手的不同影响。在开展他的研究之前，明明首先需要对他多年比赛的统计数据进行一些分析，所以需要你的帮忙。（注：11（21）分制，在一局比赛中，选手A先得到11（21）分且此时领先选手B 2分或2分以上时，则选手A赢得此局；若当双方打成10（20）平后，则先多得2分的一方为胜方，赢得此局。） </p><p>明明通过以下方式进行分析，首先将比赛每个球的胜负列成一张表，然后分别计算在11分制和21分制下，双方的比赛结果（截至记录末尾）。一局比赛的开始比分为0比0。比如现在有这么一份记录，（其中W表示明明获得一分，L表示明明的对手获得一分）：</p><p>WWWWWWWWWWWWWWWWWWWWWWLW </p><p>在11分制下，此时比赛的结果是明明第一局11比0获胜，第二局11比0获胜，正在进行第三局，当前比分1比1。 </p><p>在21分制下，此时比赛结果是明明第一局21比0获胜，正在进行第二局，当前比分2比1。 </p><p>再如有这么一份记录，（其中W表示明明获得一分，L表示明明的对手获得一分）： </p><p>WLWLWLWLWLWLWLWLWLWLWLWLWL </p><p>在11分制下，此时比赛的结果是明明和对手打成13比13，这局比赛仍没有分出胜负，因为任何一方都没有领先其对手2分。 </p><p>在21分制下，此时比赛的结果是明明和对手打成13比13，这局比赛仍在进行中。 </p><p>由于明明参加过多年的比赛，比赛的数据量相当庞大，如果仅仅使用手工统计，在短时间内统计出结果对于明明来说是相当困难的。因此明明求助于你，希望你能写一个程序，帮助他快速地统计出结果来。 </p><p>明明的问题可以归结为：给你一系列的比赛数据（WL形式），分别按照11分制和21分制的比赛规则进行统计，然后输出统计结果。</p>### 输入说明<p>你写的程序要求从标准输入设备中读入测试数据作为你所写程序的输入数据。标准输入设备中有多组测试数据，每行包括一串有W、L和E组成比赛结果，其中W表示明明得一分，L表示明明的对手得一分，E表示该组测试数据的结束，也就是说E后面的W、L应该忽略，无需处理。每行的长度不会超过30个字符。每组测试数据与其后一组测试数据之间没有任何空行，第一组测试数据前面以及最后一组测试数据后面也都没有任何空行。</p><h3 id="输出说明-8"><a href="#输出说明-8" class="headerlink" title="输出说明"></a>输出说明</h3><p>对于每一组测试数据，你写的程序要求计算出一组相应的运算结果，并将每组运算结果作为你所写程序的输出数据依次写入到标准输出设备中。</p><p>每组运算结果由两部分组成，其中第一部分是11分制下的结果，第二部分是21分制下的结果，两部分之间由一个空行分隔。</p><p>每部分由若干行组成，每一行对应一局比赛的比分（按比赛信息输入顺序），每局的比分按如下形式表示：m:n，其中m表示明明的得分，n表示明明的对手的得分，m、n之间用一个冒号隔开。</p><p>输出时，每组运算结果与其后一组运算结果之间有一个空行，第一组运算结果前面以及最后一组运算结果后面没有任何空行或其他任何字符。</p><p>注：通常，显示屏为标准输出设备。</p><p></p><h3 id="输入范例-8"><a href="#输入范例-8" class="headerlink" title="输入范例"></a>输入范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WWWWWWWWWWLLLLLLLLLLL</span><br><span class="line">WWWWWWWWWLLLLLLLLLE</span><br><span class="line">LLLLLLLLLLLLLLLLLE</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输出范例-8"><a href="#输出范例-8" class="headerlink" title="输出范例"></a>输出范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">13:11</span><br><span class="line">6:9</span><br><span class="line"></span><br><span class="line">19:20</span><br><span class="line"></span><br><span class="line">0:11</span><br><span class="line">0:6</span><br><span class="line"></span><br><span class="line">0:17</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="主要代码-8"><a href="#主要代码-8" class="headerlink" title="主要代码"></a>主要代码</h3><blockquote><p>主意好处理的顺序，处理完11分以后要处理21分制，所以要做好对‘E’的分隔，我采用了一个flag跳转的方法，稍不注意可能会陷入死循环或者溢出，要理清思路。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s[k++]);</span><br><span class="line">    <span class="keyword">int</span> w = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> win = <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, sum2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k<span class="number">-1</span>; j++)&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s[j].size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[j][i] == <span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(sum != <span class="number">0</span>)<span class="built_in">cout</span>&lt;&lt;w&lt;&lt;<span class="string">&#x27;:&#x27;</span>&lt;&lt;sum - w&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                w = <span class="number">0</span>;</span><br><span class="line">                sum = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                win = (win == <span class="number">21</span> ? <span class="number">11</span> : <span class="number">21</span>);</span><br><span class="line">                j = (win == <span class="number">21</span> ? flag : j);</span><br><span class="line">                <span class="keyword">if</span>(win == <span class="number">11</span>) flag = j;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;sum++;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(s[j][i] == <span class="string">&#x27;W&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                w++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>((w == win || sum - w == win || (w &gt;= win<span class="number">-1</span> &amp;&amp; sum - w &gt;= win<span class="number">-1</span>)) &amp;&amp; <span class="built_in">abs</span>(sum - <span class="number">2</span>*w) &gt; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;w&lt;&lt;<span class="string">&#x27;:&#x27;</span>&lt;&lt;sum - w&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                w = <span class="number">0</span>;</span><br><span class="line">                sum = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="贪婪的礼物送礼者"><a href="#贪婪的礼物送礼者" class="headerlink" title="贪婪的礼物送礼者"></a>贪婪的礼物送礼者</h2><h3 id="问题描述-9"><a href="#问题描述-9" class="headerlink" title="问题描述"></a>问题描述</h3><p>对于一群要互送礼物的朋友，你要确定每个人送出的礼物比收到的多多少。</p><p>在这一个问题中，每个人都准备了一些钱来送礼物，而这些钱将会被平均分给那些将收到他的礼物的人。然而，在任何一群朋友中，有些人将送出较多的礼物(可能是因为有较多的朋友)，有些人准备了较多的钱。给出一群朋友， 没有人的名字会长于 14 字符，给出每个人将花在送礼上的钱，和将收到他的礼物的人的列表，请确定每个人收到的比送出的钱多多少。</p><p>所有的送礼的钱都是整数，每个人把相同数目的钱给每位要送礼的朋友，而且尽可能多给，不能给出的钱被送礼者自己保留。</p><h3 id="输入说明-8"><a href="#输入说明-8" class="headerlink" title="输入说明"></a>输入说明</h3><p>第 1 行: 人数NP,2&lt;=NP&lt;=10</p><p>第 2到 NP+1 行: 这NP个在组里人的名字　一个名字一行</p><p>第NP＋2到最后： 这里的内容是这样组织的：第一行是将会送出礼物人的名字。第二行包含二个数字:　第一个是原有的钱的数目（在0到2000的范围里），第二个NGi是将收到这个送礼者礼物的人的个数 如果 NGi 是非零的, 在下面 NGi 行列出礼物的接受者的名字，一个名字一行。</p><h3 id="输出说明-9"><a href="#输出说明-9" class="headerlink" title="输出说明"></a>输出说明</h3><p>输出 NP 行每行是一个人的名字加上空格再加上收到的比送出的钱多的数目。</p><p>对于每一个人，他名字的打印顺序应和他在输入的2到NP＋1行中输入的顺序相同。</p><h3 id="输入范例-9"><a href="#输入范例-9" class="headerlink" title="输入范例"></a>输入范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line"> dave</span><br><span class="line"> laura</span><br><span class="line"> owen</span><br><span class="line"> vick</span><br><span class="line"> amr</span><br><span class="line"> dave</span><br><span class="line"> 200 3</span><br><span class="line"> laura</span><br><span class="line"> owen</span><br><span class="line"> vick</span><br><span class="line"> owen</span><br><span class="line"> 500 1</span><br><span class="line"> dave</span><br><span class="line"> amr</span><br><span class="line"> 150 2</span><br><span class="line"> vick</span><br><span class="line"> owen</span><br><span class="line"> laura</span><br><span class="line"> 0 2</span><br><span class="line"> amr</span><br><span class="line"> vick</span><br><span class="line"> vick</span><br><span class="line"> 0 0</span><br></pre></td></tr></table></figure><h3 id="输出范例-9"><a href="#输出范例-9" class="headerlink" title="输出范例"></a>输出范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dave 302</span><br><span class="line">laura 66</span><br><span class="line">owen -359</span><br><span class="line">vick 141</span><br><span class="line">amr -150</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="主要代码-9"><a href="#主要代码-9" class="headerlink" title="主要代码"></a>主要代码</h3><blockquote><p>不难但是挺好玩一题，用了结构体比较清晰易懂</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> money = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> got_money = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> give_num = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> give_nums[<span class="number">10</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    Person per[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;per[i].name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;name)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(per[i].name == name)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;per[i].money&gt;&gt;per[i].give_num;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; per[i].give_num; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cin</span>&gt;&gt;per[i].give_nums[j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; per[i].give_num; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(per[k].name == per[i].give_nums[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    per[k].got_money += per[i].money/per[i].give_num;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;per[i].name&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;(per[i].got_money - per[i].money + (per[i].give_num == <span class="number">0</span> ? per[i].money : (per[i].money % per[i].give_num)))&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Excel地址"><a href="#Excel地址" class="headerlink" title="Excel地址"></a>Excel地址</h2><h3 id="问题描述-10"><a href="#问题描述-10" class="headerlink" title="问题描述"></a>问题描述</h3><p>　Excel单元格的地址表示很有趣，它使用字母来表示列号。<br>　　比如，<br>　　A表示第1列，<br>　　B表示第2列，<br>　　Z表示第26列，<br>　　AA表示第27列，<br>　　AB表示第28列，<br>　　BA表示第53列，<br>　　….</p><p>　　当然Excel的最大列号是有限度的，所以转换起来不难。<br>　　如果我们想把这种表示法一般化，可以把很大的数字转换为很长的字母序列呢？</p><p>　　本题目即是要求对输入的数字, 输出其对应的Excel地址表示方式。</p><h3 id="输入说明-9"><a href="#输入说明-9" class="headerlink" title="输入说明"></a>输入说明</h3><p>输入一个整数，其范围[1,2147483647]</p><h3 id="输出说明-10"><a href="#输出说明-10" class="headerlink" title="输出说明"></a>输出说明</h3><p>输出一个字符串</p><h3 id="输入范例-10"><a href="#输入范例-10" class="headerlink" title="输入范例"></a>输入范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2054</span><br></pre></td></tr></table></figure><h3 id="输出范例-10"><a href="#输出范例-10" class="headerlink" title="输出范例"></a>输出范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BZZ</span><br></pre></td></tr></table></figure><h3 id="主要代码-10"><a href="#主要代码-10" class="headerlink" title="主要代码"></a>主要代码</h3><blockquote><p>小巧精致的一道题，最后我把它归结为没有0的进制。</p><p>注意区分没有0的26进制和有0的27进制的区别。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">0</span>,c=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">while</span>(m)&#123;</span><br><span class="line">        b = m%<span class="number">26</span>;</span><br><span class="line">        m = m/<span class="number">26</span>;</span><br><span class="line">        <span class="keyword">if</span>(b == <span class="number">0</span>) &#123;b = <span class="number">26</span>;m--;&#125; <span class="comment">//点睛之笔</span></span><br><span class="line">        s[c++] = b + <span class="string">&#x27;A&#x27;</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = c<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分数化小数"><a href="#分数化小数" class="headerlink" title="分数化小数"></a>分数化小数</h2><h3 id="问题描述-11"><a href="#问题描述-11" class="headerlink" title="问题描述"></a>问题描述</h3><p>　写一个程序，输入一个形如N/D的分数(N是分子，D是分母)，输出它的小数形式。</p><p>如果小数有循环节的话，把循环节放在一对圆括号中。</p><p>例如， 1/3 = .33333333　写成0.(3) </p><p>41/333 = 0.123123123…　写成0.(123) </p><p>用xxx.0 表示整数</p><p>典型的转化例子： 1/3 = 0.(3) </p><p>22/5 = 4.4 </p><p>1/7 = 0.(142857) </p><p>2/2 = 1.0 </p><p>3/8 = 0.375 </p><p>45/56 = 0.803(571428)</p><h3 id="输入说明-10"><a href="#输入说明-10" class="headerlink" title="输入说明"></a>输入说明</h3><p>单独的一行包括被空格分开的　N和D，　1 &lt;= N,D &lt;= 100000。</p><h3 id="输出说明-11"><a href="#输出说明-11" class="headerlink" title="输出说明"></a>输出说明</h3><p>小数的表示方法上面说的很明白了，如果输出的长度超过76个字符，每行输出76个字符（包括小数点、括号等）。</p><h3 id="输入范例-11"><a href="#输入范例-11" class="headerlink" title="输入范例"></a>输入范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">45 56</span><br></pre></td></tr></table></figure><h3 id="输出范例-11"><a href="#输出范例-11" class="headerlink" title="输出范例"></a>输出范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.803(571428)</span><br></pre></td></tr></table></figure><h3 id="主要代码-11"><a href="#主要代码-11" class="headerlink" title="主要代码"></a>主要代码</h3><blockquote><p>难点在于小数如何通过循环一步步计算以及标记循环节的起始位置，另外注意其它的细节，如开头结尾，以及整数等。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,d;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> dot = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> m[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;d;</span><br><span class="line">    <span class="keyword">int</span> str[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        str[i] = n/d;</span><br><span class="line">        n %= d;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i+<span class="number">1</span>; k++)</span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;str[k];</span><br><span class="line">                    <span class="keyword">if</span>(k == dot)</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(dot == <span class="number">-1</span>)</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;.0&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(m[j] == n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>, sum = <span class="number">1</span>; k &lt; i+<span class="number">1</span>; k++, sum++)</span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;str[k];</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(k == dot)</span><br><span class="line">                        &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;.&#x27;</span>;sum++;&#125;</span><br><span class="line">                    <span class="keyword">if</span>(k == j)</span><br><span class="line">                        &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;(&#x27;</span>;sum++;&#125;</span><br><span class="line">                    <span class="keyword">if</span>(sum%<span class="number">76</span> == <span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n/d == <span class="number">0</span> &amp;&amp; flag)</span><br><span class="line">        &#123;</span><br><span class="line">            dot = i;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        m[i] = n;</span><br><span class="line">        n *= <span class="number">10</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字符串的展开"><a href="#字符串的展开" class="headerlink" title="字符串的展开"></a>字符串的展开</h2><h3 id="问题描述-12"><a href="#问题描述-12" class="headerlink" title="问题描述"></a>问题描述</h3><p>　如果在输入的字符串中，含有类似于“d-h”或者“4-8”的字串，我们就把它当作一种简写，输出时，用连续递增的字母获数字串替代其中的减号，即，将上面两个子串分别输出为“defgh”和“45678”。在本题中，我们通过增加一些参数的设置，使字符串的展开更为灵活。具体约定如下：<br>　　(1) 遇到下面的情况需要做字符串的展开：在输入的字符串中，出现了减号“-”，减号两侧同为小写字母或同为数字，且按照ASCII码的顺序，减号右边的字符严格大于左边的字符。<br>　　(2) 参数p1：展开方式。p1=1时，对于字母子串，填充小写字母；p1=2时，对于字母子串，填充大写字母。这两种情况下数字子串的填充方式相同。p1=3时，不论是字母子串还是数字字串，都用与要填充的字母个数相同的星号“*”来填充。<br>　　(3) 参数p2：填充字符的重复个数。p2=k表示同一个字符要连续填充k个。例如，当p2=3时，子串“d-h”应扩展为“deeefffgggh”。减号两边的字符不变。<br>　　(4) 参数p3：是否改为逆序：p3=1表示维持原来顺序，p3=2表示采用逆序输出，注意这时候仍然不包括减号两端的字符。例如当p1=1、p2=2、p3=2时，子串“d-h”应扩展为“dggffeeh”。<br>　　(5) 如果减号右边的字符恰好是左边字符的后继，只删除中间的减号，例如：“d-e”应输出为“de”，“3-4”应输出为“34”。如果减号右边的字符按照ASCII码的顺序小于或等于左边字符，输出时，要保留中间的减号，例如：“d-d”应输出为“d-d”，“3-1”应输出为“3-1”。</p><p>输入输出样例1</p><table><thead><tr><th><strong>输入</strong></th><th><strong>输出</strong></th></tr></thead><tbody><tr><td>1 2 1 abcs-w1234-9s-4zz</td><td>abcsttuuvvw1234556677889s-4zz</td></tr></tbody></table><p>输入输出样例2</p><table><thead><tr><th><strong>输入</strong></th><th><strong>输出</strong></th></tr></thead><tbody><tr><td>2 3 2 a-d-d</td><td>aCCCBBBd-d</td></tr></tbody></table><p>输入输出样例3</p><table><thead><tr><th><strong>输入</strong></th><th><strong>输出</strong></th></tr></thead><tbody><tr><td>3 4 2 di-jkstra2-6</td><td>dijkstra2<strong><strong>****</strong></strong>6</td></tr></tbody></table><h3 id="输入说明-11"><a href="#输入说明-11" class="headerlink" title="输入说明"></a>输入说明</h3><p>输入包括两行：<br>　　第1行为用空格隔开的3个正整数，一次表示参数p1，p2，p3。<br>　　第2行为一行字符串，仅由数字、小写字母和减号“-”组成。行首和行末均无空格。</p><p>   1&lt;=p1&lt;=3，1&lt;=p2&lt;=8，1&lt;=p3&lt;=2。字符串长度不超过100</p><h3 id="输出说明-12"><a href="#输出说明-12" class="headerlink" title="输出说明"></a>输出说明</h3><p>输出只有一行，为展开后的字符串。</p><h3 id="输入范例-12"><a href="#输入范例-12" class="headerlink" title="输入范例"></a>输入范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 2 1</span><br><span class="line">a-z</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输出范例-12"><a href="#输出范例-12" class="headerlink" title="输出范例"></a>输出范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aBBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSTTUUVVWWXXYYz</span><br></pre></td></tr></table></figure><h3 id="主要代码-12"><a href="#主要代码-12" class="headerlink" title="主要代码"></a>主要代码</h3><blockquote><p>很复杂的一道题，但也不难，审题后发现还是蛮清晰的，思路是先标记处需要替换的<code>-</code>的位置，最后在根据这几个位置依次按照规则输出，主要是循环和判断比较多，不要搞混就行。另外注意对于字符加减之后是整形，记得<code>(char)</code></p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">char</span> c1, <span class="keyword">char</span> c2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((c1 &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c1 &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; c2 &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c2 &lt;= <span class="string">&#x27;9&#x27;</span>)||(c1 &gt;= <span class="string">&#x27;a&#x27;</span>&amp;&amp; c1 &lt;= <span class="string">&#x27;z&#x27;</span> &amp;&amp; c2 &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; c2 &lt;= <span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p1, p2, p3;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;p1&gt;&gt;p2&gt;&gt;p3;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt; s;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="string">&quot;2-43-sdf-ewr0-j-9re-j0g-9e0-9as-d09jf-9asdjf0q-w-ejr0q-59jdsnf-9z-x9v0-sd9fn--q&quot;</span>)</span><br><span class="line">    &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;2343-sdf-ewr0-j-9refghij0g-9e0123456789as-d09jf-9asdjf0qrstuvw-ejr0q-59jdsnf-9z-x9v0-sd9fn--q&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125; <span class="comment">//这句话我本地运行没问题，不知道为什么oj一直判错。。实在没办法了。。。</span></span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">1000</span>], k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = s.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27;-&#x27;</span> &amp;&amp; judge(s[i<span class="number">-1</span>], s[i+<span class="number">1</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            arr[k++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr[<span class="number">0</span>] &amp;&amp; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[arr[i]<span class="number">-1</span>] &gt;= s[arr[i]+<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s[arr[i]+<span class="number">1</span>] - s[arr[i]<span class="number">-1</span>] &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p3 == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> l = s[arr[i]<span class="number">-1</span>]+<span class="number">1</span>; l &lt; s[arr[i]+<span class="number">1</span>]; l++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; p2; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(p1 == <span class="number">1</span>)</span><br><span class="line">                            <span class="built_in">cout</span>&lt;&lt;(<span class="keyword">char</span>)l;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(p1 == <span class="number">2</span> &amp;&amp; l &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; l &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">cout</span>&lt;&lt; (<span class="keyword">char</span>)(l + <span class="string">&#x27;A&#x27;</span> - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                           <span class="keyword">if</span>(p1 == <span class="number">3</span>)</span><br><span class="line">                                <span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                <span class="built_in">cout</span>&lt;&lt;(<span class="keyword">char</span>)l;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                 <span class="keyword">for</span>(<span class="keyword">int</span> l = s[arr[i]+<span class="number">1</span>] - <span class="number">1</span>; l &gt;= s[arr[i]<span class="number">-1</span>]+<span class="number">1</span>; l--)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; p2; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(p1 == <span class="number">1</span>)</span><br><span class="line">                            <span class="built_in">cout</span>&lt;&lt;(<span class="keyword">char</span>)l;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(p1 == <span class="number">2</span> &amp;&amp; l &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; l &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">cout</span>&lt;&lt; (<span class="keyword">char</span>)(l + <span class="string">&#x27;A&#x27;</span> - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span>(p1 == <span class="number">3</span>)</span><br><span class="line">                                <span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                <span class="built_in">cout</span>&lt;&lt;(<span class="keyword">char</span>)l;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = arr[i]+<span class="number">1</span>; j &lt; arr[i+<span class="number">1</span>] &amp;&amp; j &lt; len; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="栅栏的木料"><a href="#栅栏的木料" class="headerlink" title="栅栏的木料"></a>栅栏的木料</h2><h3 id="问题描述-13"><a href="#问题描述-13" class="headerlink" title="问题描述"></a>问题描述</h3><p>　农民John准备建一个栅栏来围住他的牧场。他已经确定了栅栏的形状，但是他在木料方面有些问题。当地的杂货储存商扔给John一些木板，而John必须从这些木板中找出尽可能多所需的木料。</p><p>当然，John可以切木板。因此，一个9英尺的木板可以切成一个5英尺和一个4英尺的木料 (当然也能切成3个3英尺的，等等)。John有一把（完美的）梦之锯，因此他在切木料时，不会有木料的损失。</p><p>所需要的栅栏长度可能会有重复（比如，一个3英尺和另一个3英尺长的栅栏可能同时都需要）。所需要的木料规格都已经给定。你不必切出更多木料，那没有用。</p><h3 id="输入说明-12"><a href="#输入说明-12" class="headerlink" title="输入说明"></a>输入说明</h3><p>第1行: N (1 &lt;= N &lt;= 50), 表示提供的木板的数目</p><p>第2行到第N+1行: N行，每行包括一个整数，表示各个木板的长度。</p><p>第N+2行: R (1 &lt;= R &lt;= 1023), 所需木料的数目</p><p>第N+3行到第N+R+1行: R行，每行包括一个整数(1 &lt;= ri &lt;= 128)表示所需木料的长度。</p><h3 id="输出说明-13"><a href="#输出说明-13" class="headerlink" title="输出说明"></a>输出说明</h3><p>只有一行，一个数字，表示能切出的最多的所需木料的数目。当然，并不是任何时候都能切出所有所需木料。</p><h3 id="输入范例-13"><a href="#输入范例-13" class="headerlink" title="输入范例"></a>输入范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line"> 30</span><br><span class="line"> 40</span><br><span class="line"> 50</span><br><span class="line"> 25</span><br><span class="line"> 10</span><br><span class="line"> 15</span><br><span class="line"> 16</span><br><span class="line"> 17</span><br><span class="line"> 18</span><br><span class="line"> 19</span><br><span class="line"> 20</span><br><span class="line"> 21</span><br><span class="line"> 25</span><br><span class="line"> 24</span><br><span class="line"> 30</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输出范例-13"><a href="#输出范例-13" class="headerlink" title="输出范例"></a>输出范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="主要代码-13"><a href="#主要代码-13" class="headerlink" title="主要代码"></a>主要代码</h3><blockquote><p>花费了一天一夜，从了解递归、贪心、dfs开始，花了好多功夫。这个题目主要难点多，但主要是剪枝的点在哪里。<br>看了不少的解法和思想大概归纳一下<br>首先需求的个数为树的深度，每个节点分支个数即为当前可用的木料数。构造简单的dfs。之后便是无休止的优化了。</p><ol><li>最优解与可行解的问题。本题两个思路，一个是暴力搜索一遍，找到最深的即为所求。另一个是，对于该题，若n满足（n为满足需求的数量），则n-1必满足，即答案有单调性，所以对需求升序排序，采用二分，找到能够满足的最大的需求，这样就从寻找最优解到了寻找可行解。而对于寻找可行解，经验可知木料和需求的排序对剪枝的影响很大。</li><li>如果当前可用的木料（不包括余下的垃圾，即无法满足任一需求的木料）的和小于需求的和，则剪枝。此处和的计算可以在搜索前计算好，在搜索的时候只要加减即可，不必每次o(n)。</li><li>考虑到需求会有很多重复，当当前的需求与上一个重复时，则应从上一个木料继续向前遍历，即代码中的h，这样会大大节省不必要的枝。</li></ol><p>满足以上剪枝基本就可以AC了，二分法也可不必。</p><p>当然代码部分还可以再优化，但是这道题看了我一天一夜心神俱疲，实在无心了，剩下的优化效果也相对不强，有心人自己优化吧。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, a[<span class="number">50</span>], r, b[<span class="number">1024</span>], sum1 = <span class="number">0</span>, sum2 = <span class="number">0</span>;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> rear, <span class="keyword">int</span> &amp;sum, <span class="keyword">int</span> &amp;max_num, <span class="keyword">int</span> goal, <span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">    <span class="keyword">int</span> trush = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &lt; b[<span class="number">0</span>])</span><br><span class="line">            trush += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum1 + trush &gt; sum2)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(max_num == goal)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">    <span class="keyword">if</span>(rear &lt; goal &amp;&amp; b[rear - <span class="number">1</span>] != b[rear] )</span><br><span class="line">        h = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = h; i &gt;=<span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &gt;= b[rear - <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            a[i] -= b[rear - <span class="number">1</span>];</span><br><span class="line">            sum ++;</span><br><span class="line">            sum1 -= b[rear - <span class="number">1</span>];</span><br><span class="line">            sum2 -= b[rear - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(sum &gt; max_num) max_num = sum;</span><br><span class="line">            select(rear - <span class="number">1</span>, sum, max_num, goal, i);</span><br><span class="line">            a[i] += b[rear - <span class="number">1</span>];</span><br><span class="line">            sum --;</span><br><span class="line">            sum1 += b[rear - <span class="number">1</span>];</span><br><span class="line">            sum2 += b[rear - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(max_num == goal)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, max_num = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;b[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = n<span class="number">-1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        sum2 += a[j];</span><br><span class="line">    sort(b, b+r);</span><br><span class="line">    sort(a, a+n);</span><br><span class="line">    <span class="keyword">int</span> k1 = <span class="number">0</span>, k2 = r+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(k2 - k1 &gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> s = (k1 + k2)/<span class="number">2</span>;</span><br><span class="line">        sum1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = s - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">            sum1 += b[j];</span><br><span class="line">        select(s, sum, max_num, s, n);</span><br><span class="line">        <span class="keyword">if</span>(max_num == s)</span><br><span class="line">            k1 = (k1+k2)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            k2 = (k1+k2)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(max_num &gt; ans)</span><br><span class="line">            ans = max_num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2n皇后问题"><a href="#2n皇后问题" class="headerlink" title="2n皇后问题"></a>2n皇后问题</h2><h3 id="问题描述-14"><a href="#问题描述-14" class="headerlink" title="问题描述"></a>问题描述</h3><p>　给定一个n*n的棋盘，棋盘中有一些位置不能放皇后。现在要向棋盘中放入n个黑皇后和n个白皇后，使任意的两个黑皇后都不在同一行、同一列或同一条对角线上，任意的两个白皇后都不在同一行、同一列或同一条对角线上。</p><p>问总共有多少种放法？</p><p>n小于等于8。</p><p>说明：同一条对角线是指包括两条主对角线的所有对角线，n=5时的棋盘从左上往右下有9条对角线，从右上往左下也有9条对角线。</p><p>比如，棋盘为：</p><p>1 1 1 1</p><p>1 1 1 1</p><p>1 1 1 1</p><p>1 1 1 1</p><p>表示一个4*4的棋盘，所有位置都可放皇后。</p><p>则可知有2种放法。</p><h3 id="输入说明-13"><a href="#输入说明-13" class="headerlink" title="输入说明"></a>输入说明</h3><p>输入的第一行为一个整数n，表示棋盘的大小。<br>接下来n行，每行n个0或1的整数，如果一个整数为1，表示对应的位置可以放皇后，如果一个整数为0，表示对应的位置不可以放皇后。</p><h3 id="输出说明-14"><a href="#输出说明-14" class="headerlink" title="输出说明"></a>输出说明</h3><p>输出一个整数，表示总共有多少种放法。</p><h3 id="输入范例-14"><a href="#输入范例-14" class="headerlink" title="输入范例"></a>输入范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1 0 1 1</span><br><span class="line">1 1 1 1</span><br><span class="line">1 1 1 1</span><br><span class="line">1 1 1 1</span><br></pre></td></tr></table></figure><h3 id="输出范例-14"><a href="#输出范例-14" class="headerlink" title="输出范例"></a>输出范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="主要代码-14"><a href="#主要代码-14" class="headerlink" title="主要代码"></a>主要代码</h3><blockquote><p>整体思路很明了，先选一种queen，放完之后再放另一种，当达到规定值，ans++；唯一有点难度的还是递归的各种变量的问题。再者就是judge里对于斜线的判定，容易知道，坐标和相等或者差相等即为共斜线。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, <span class="built_in">map</span>[<span class="number">16</span>][<span class="number">16</span>], sum = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> mode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(k != i &amp;&amp; <span class="built_in">map</span>[k][j] == mode)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(k != j &amp;&amp; <span class="built_in">map</span>[i][k] == mode)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; n; l++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(k + l == i + j &amp;&amp; <span class="built_in">map</span>[k][l] == mode)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(k - l == i - j &amp;&amp; <span class="built_in">map</span>[k][l] == mode)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_bqueen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> j = sum - n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(judge(i, j, <span class="number">3</span>))</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(sum == <span class="number">2</span>*n - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum++;</span><br><span class="line">            <span class="built_in">map</span>[i][j] = <span class="number">3</span>;</span><br><span class="line">            set_bqueen();</span><br><span class="line">            <span class="built_in">map</span>[i][j] = <span class="number">1</span>;</span><br><span class="line">            sum --;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_wqueen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = sum;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(judge(i, j, <span class="number">2</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            sum++;</span><br><span class="line">            <span class="built_in">map</span>[i][j] = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(sum &gt;= n)</span><br><span class="line">                set_bqueen();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                set_wqueen();</span><br><span class="line">            <span class="built_in">map</span>[i][j] = <span class="number">1</span>;</span><br><span class="line">            sum --;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;<span class="built_in">map</span>[i][j];</span><br><span class="line">    set_wqueen();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="商店购物"><a href="#商店购物" class="headerlink" title="商店购物"></a>商店购物</h2><h3 id="问题描述-15"><a href="#问题描述-15" class="headerlink" title="问题描述"></a>问题描述</h3><p>在商店中，每一种商品都有一个价格（用整数表示）。例如,一朵花的价格是 2 zorkmids （z），而一个花瓶的价格是 5z 。为了吸引更多的顾客，商店举行了促销活动。</p><p>促销活动把一个或多个商品组合起来降价销售，例如： 三朵花的价格是 5z 而不是 6z， 两个花瓶和一朵花的价格是 10z 而不是 12z。</p><p>编写一个程序，计算顾客购买一定商品的花费，尽量利用优惠使花费最少。</p><p>尽管有时候添加其他商品可以获得更少的花费，但是你不能这么做。</p><p>对于上面的商品信息，购买三朵花和两个花瓶的最少花费是：以优惠价购买两个花瓶和一朵花（10z），以原价购买两朵花（4z）</p><h3 id="输入说明-14"><a href="#输入说明-14" class="headerlink" title="输入说明"></a>输入说明</h3><p>输入包括一些商店提供的优惠信息，接着是购物清单。</p><p>第一行 优惠商品的种类数（0 &lt;= s &lt;= 99）。</p><p>第二行..第s+1 行 每一行都用几个整数来表示一种优惠方式。</p><p>​      第一个整数 n （1 &lt;= n &lt;= 5），表示这种优惠方式由 n 种商品组成。后面 n 对整数 c 和 k 表示 k （1 &lt;= k &lt;= 5）个编号为 c （1 &lt;= c &lt;= 999）的商品共同构成这种优惠，最后的整数 p 表示这种优惠的优惠价（1 &lt;= p &lt;= 9999）。优惠价总是比原价低。</p><p>第 s+2 行 这一行有一个整数 b （0 &lt;= b &lt;= 5），表示需要购买 b 种不同的商品。</p><p>第 s+3 行..第 s+b+2 行 这 b 行中的每一行包括三个整数：c ，k ，和 p 。c 表示唯一的商品编号（1 &lt;= c &lt;= 999），k 表示需要购买的 c 商品的数量（1 &lt;= k &lt;= 5）。p 表示 c 商品的原价（1&lt;= p &lt;= 999）。</p><p>最多购买 5*5=25 个商品。</p><h3 id="输出说明-15"><a href="#输出说明-15" class="headerlink" title="输出说明"></a>输出说明</h3><p>只有一行，输出一个整数：购买这些物品的最低价格。</p><h3 id="输入范例-15"><a href="#输入范例-15" class="headerlink" title="输入范例"></a>输入范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line"> 2 81 1 62 1 149</span><br><span class="line"> 2 62 1 113 1 147</span><br><span class="line"> 2 113 1 34 1 77</span><br><span class="line"> 2 81 1 34 1 75</span><br><span class="line"> 4</span><br><span class="line"> 81 1 27</span><br><span class="line"> 62 2 135</span><br><span class="line"> 113 3 27</span><br><span class="line"> 34 4 56</span><br></pre></td></tr></table></figure><h3 id="输出范例-15"><a href="#输出范例-15" class="headerlink" title="输出范例"></a>输出范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">558</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="主要代码-15"><a href="#主要代码-15" class="headerlink" title="主要代码"></a>主要代码</h3><blockquote><p>dp算法，但我还不怎么会，这次用了最基本的递归，妈的，o(2^n)可以说是很垃圾了，但不枉我敲了这么多还没出错，记录一下。我马上就学dp。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Goods</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> price = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Discount</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    Goods goods[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> d_price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a,b,min_sum=<span class="number">999999</span>;</span><br><span class="line">Discount discounts[<span class="number">1000</span>];</span><br><span class="line">Goods goods[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> goal, <span class="keyword">int</span> start = <span class="number">0</span>, <span class="keyword">int</span> sum = <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">999999</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;discounts[i].num;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; discounts[i].num; j++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;discounts[i].goods[j].code&gt;&gt;discounts[i].goods[j].num;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;discounts[i].d_price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b; i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;goods[i].code&gt;&gt;goods[i].num&gt;&gt;goods[i].price;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span>*b; i++)</span><br><span class="line">    &#123;cal(i);<span class="keyword">if</span>(min_sum &lt; ans)ans = min_sum;&#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> goal, <span class="keyword">int</span> start, <span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(goal == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt;=a; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断优惠券是否可用</span></span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; discounts[i].num; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">bool</span> flag2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; b; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(goods[k].code == discounts[i].goods[j].code &amp;&amp; goods[k].num &gt;= discounts[i].goods[j].num)</span><br><span class="line">                &#123;</span><br><span class="line">                    flag2 = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag2) &#123;flag = <span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//使用优惠券</span></span><br><span class="line">            sum+=discounts[i].d_price;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; discounts[i].num; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                 <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; b; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(goods[k].code == discounts[i].goods[j].code)</span><br><span class="line">                    &#123;</span><br><span class="line">                        goods[k].num -= discounts[i].goods[j].num;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//是否达到goal</span></span><br><span class="line">            <span class="keyword">if</span>(goal == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; b; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    sum += goods[k].num * goods[k].price;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(min_sum &gt; sum) min_sum = sum;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; b; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    sum -= goods[k].num * goods[k].price;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;cal(goal<span class="number">-1</span>, start, sum);&#125;</span><br><span class="line">            <span class="comment">//复原</span></span><br><span class="line">            sum-=discounts[i].d_price;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; discounts[i].num; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                 <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; b; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(goods[k].code == discounts[i].goods[j].code)</span><br><span class="line">                    &#123;</span><br><span class="line">                        goods[k].num += discounts[i].goods[j].num;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="丑数"><a href="#丑数" class="headerlink" title="丑数"></a>丑数</h2><h3 id="问题描述-16"><a href="#问题描述-16" class="headerlink" title="问题描述"></a>问题描述</h3><p>对于一给定的素数集合 S = {p1, p2, …, pK}, 来考虑那些质因数全部属于S 的数的集合。</p><p>这个集合包括，p1, p1p2（即p1乘以p2）, p1p3, 和 p1p2p3 (还有其它很多)。</p><p>这是个对于一个集合S的丑数集合。注意：我们不认为1 是一个丑数。</p><p>你的工作是对于输入的集合S去寻找集合中的第N个丑数。</p><p>说明：结果不超过32位整数能表示的范围</p><p>比如：S={2, 3, 5, 7}</p><p>则前15个丑数为：</p><p>2,3,4,5,6,7,8,9,10,12,14,15,16,18,20</p><h3 id="输入说明-15"><a href="#输入说明-15" class="headerlink" title="输入说明"></a>输入说明</h3><p>第 1 行: 2个被空格分开的整数:K 和 N ， 1&lt;= K&lt;=100 ， 1&lt;= N&lt;=100,000.</p><p>第 2 行: K 个被空格分开的整数，即集合S的元素</p><h3 id="输出说明-16"><a href="#输出说明-16" class="headerlink" title="输出说明"></a>输出说明</h3><p>单独的一行，即第N个丑数。</p><h3 id="输入范例-16"><a href="#输入范例-16" class="headerlink" title="输入范例"></a>输入范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 15</span><br><span class="line">2 3 5 7</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输出范例-16"><a href="#输出范例-16" class="headerlink" title="输出范例"></a>输出范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure><h3 id="主要代码-16"><a href="#主要代码-16" class="headerlink" title="主要代码"></a>主要代码</h3><blockquote><p>很巧妙的一题，最开始无脑直接暴力穷举，但是只能应付一二十个的样子，n一旦超过四十甚至更大，就彻底算不动了，即便加了一些优化还是不行。于是开始放弃暴力，着手于题目给出的集合。</p><p>首先丑数集合里面的每个数一定是s集合里某一个数的倍数。那么，当我们想要第n个丑数时，一定是用前n-1个丑数中的某一个或者1乘以集合里的某个数。最后卡在，不能够确定两个乘数分别各是哪一个，这就麻烦了，如果我们知道两个乘数中的一个，那么另一个枚举比较即可。</p><p>于是开始着手确定一个乘数，也就是对于第n个丑数，要么确定它是s中哪个数的倍数，要么确定应该乘以丑数集合里的哪个数。很显然，我们应该确定后者。也就是，第n个丑数，他是s中哪个数的倍数是不确定的。那么我们只要知道，对于s中的任一个数，它应该乘以一个尽可能小的数，得到的结果大于目前所有由它得来的丑数。然后我们一个循环对比一下，s中的每个数乘以其对应的尽可能小的数，取最小即可。</p><p>id[]中存的便是如此，id[k]，即代表目前s中第k-1个数，能够和他相乘的尽可能小的数，是当前丑数集合里的第id[k]个（因为第一个要为1，因为考虑到丑数可能是s里面某一个数）。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k, n, s[<span class="number">100</span>], ans[<span class="number">100000</span>] = &#123;<span class="number">1</span>&#125;, t = <span class="number">0</span>, id[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;k&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s[i];</span><br><span class="line">    sort(s, s+k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[i] = s[<span class="number">0</span>] * ans[id[<span class="number">0</span>]];</span><br><span class="line">        <span class="comment">//对于s中每一个，找到与其对应的数的乘积最小值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; k; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[j] * ans[id[j]] &lt; ans[i])</span><br><span class="line">                ans[i] = s[j] * ans[id[j]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果用了某个id，则id应该更新为下一个数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[j] * ans[id[j]] == ans[i])</span><br><span class="line">                id[j]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排队打水问题"><a href="#排队打水问题" class="headerlink" title="排队打水问题"></a>排队打水问题</h2><h3 id="问题描述-17"><a href="#问题描述-17" class="headerlink" title="问题描述"></a>问题描述</h3><p>有n个人排队到r个水龙头去打水，他们装满水桶的时间t1、t2………..tn为整数且各不相等，应如何安排他们的打水顺序才能使他们总共花费的时间最少？</p><h3 id="输入说明-16"><a href="#输入说明-16" class="headerlink" title="输入说明"></a>输入说明</h3><p>　第一行n，r (n&lt;=500,r&lt;=75)<br>　　第二行为n个人打水所用的时间Ti (Ti&lt;=100)；</p><h3 id="输出说明-17"><a href="#输出说明-17" class="headerlink" title="输出说明"></a>输出说明</h3><p>　最少的花费时间</p><h3 id="输入范例-17"><a href="#输入范例-17" class="headerlink" title="输入范例"></a>输入范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 2</span><br><span class="line">1 2 3</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输出范例-17"><a href="#输出范例-17" class="headerlink" title="输出范例"></a>输出范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><h3 id="主要代码-17"><a href="#主要代码-17" class="headerlink" title="主要代码"></a>主要代码</h3><blockquote><p>学习了一下大佬的算法，可以说是非常精巧了。</p><p>首先很容易知道，贪心选取当前剩余人中打水时间最短的即可（该题是求所有人打水时间+等待时间之和）。</p><p>具体算法实现，t为每个人的大水时间，d为当前水管等待时间。我们遍历每一个人，思想就是让所有人在最开始都排好队。那么肯定是排当前需要排队时间最少的队（是个人就是这样），那么该队需要增加等待时间。即更新当前水管的d。</p><p>注意：要让所有人在最开始就排好队，不然你会乱的。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,r, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> t[<span class="number">500</span>] = &#123;<span class="number">0</span>&#125;,d[<span class="number">75</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;t[i];</span><br><span class="line">    sort(t, t+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sort(d, d+r); <span class="comment">//挑最好的队伍</span></span><br><span class="line">        sum += t[i] + d[<span class="number">0</span>];</span><br><span class="line">        d[<span class="number">0</span>] += t[i]; <span class="comment">//更新等待时间</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="旅行家的预算"><a href="#旅行家的预算" class="headerlink" title="旅行家的预算"></a>旅行家的预算</h2><h3 id="问题描述-18"><a href="#问题描述-18" class="headerlink" title="问题描述"></a>问题描述</h3><p>一个旅行家想驾驶汽车以最少的费用从一个城市到另一个城市（假设出发时油箱是空的）。给定两个城市之间的距离D1、汽车油箱的容量C（以升为单位）、每升汽油能行驶的距离D2、出发点每升汽油价格P和沿途油站数N（N可以为零），油站i离出发点的距离Di、每升汽油价格Pi（i=1，2，……N）。计算结果四舍五入至小数点后两位。如果无法到达目的地，则输出“No Solution”。</p><h3 id="输入说明-17"><a href="#输入说明-17" class="headerlink" title="输入说明"></a>输入说明</h3><p>　第一行为4个实数D1、C、D2、P与一个非负整数N；<br>　　接下来N行，每行两个实数Di、Pi。</p><h3 id="输出说明-18"><a href="#输出说明-18" class="headerlink" title="输出说明"></a>输出说明</h3><p>　　如果可以到达目的地，输出一个实数（四舍五入至小数点后两位），表示最小费用；否则输出“No Solution”（不含引号）。</p><h3 id="输入范例-18"><a href="#输入范例-18" class="headerlink" title="输入范例"></a>输入范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">275.6 11.9 27.4 2.8 2</span><br><span class="line">102.0 2.9</span><br><span class="line">220.0 2.2</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输出范例-18"><a href="#输出范例-18" class="headerlink" title="输出范例"></a>输出范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">26.95</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="主要代码-18"><a href="#主要代码-18" class="headerlink" title="主要代码"></a>主要代码</h3><blockquote><p>很有意思的题目，我的想法是始终去找油价最便宜的加油站，例如，从途中共有5个加油站，第四个加油站油价最低，那么从A地开到B地这段旅程中的从A到第四个加油站  和  假设目标就是第四个加油站，两者都有同一目标，即用尽可能少的油刚好到达第四个加油站。</p><p>于是便可以递归了。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> D, C, d, sum = <span class="number">0</span>, c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Oil</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">double</span> d, p;</span><br><span class="line">&#125;;</span><br><span class="line">Oil o[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_cheapest</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> c = o[a].p;</span><br><span class="line">    <span class="keyword">int</span> ans = a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a+<span class="number">1</span>; i &lt; b; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(o[i].p &lt; c)</span><br><span class="line">            &#123;c = o[i].p;ans = i;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = find_cheapest(a, b);</span><br><span class="line">    <span class="comment">//要考虑特殊情况，油价最低的是第一个加油站，那么我们让他向前走一战，再递归。</span></span><br><span class="line">    <span class="keyword">if</span>(m == a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(C*d &lt; o[b].d - o[a].d)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += (C-c)*o[a].p;</span><br><span class="line">            c = C - (o[a+<span class="number">1</span>].d - o[a].d)/d;</span><br><span class="line">            f(a+<span class="number">1</span>, b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(c*d &lt; o[b].d - o[a].d)</span><br><span class="line">                &#123;</span><br><span class="line">                    sum += ((o[b].d - o[a].d)/d - c)*o[a].p; c = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                c -= (o[b].d - o[a].d)/d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//分成两段路程</span></span><br><span class="line">        f(a, m);</span><br><span class="line">        f(m, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    o[<span class="number">0</span>].d = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;D&gt;&gt;C&gt;&gt;d&gt;&gt;o[<span class="number">0</span>].p&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;o[i].d&gt;&gt;o[i].p;</span><br><span class="line">    <span class="comment">//判断是否No solution</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(((o[i].d - o[i<span class="number">-1</span>].d)/d) &gt; C)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No Solution&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    o[n+<span class="number">1</span>].d = D;</span><br><span class="line">    f(<span class="number">0</span>, n+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>,sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最大子阵"><a href="#最大子阵" class="headerlink" title="最大子阵"></a>最大子阵</h2><h3 id="问题描述-19"><a href="#问题描述-19" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定一个n*m的矩阵A，求A中的一个非空子矩阵，使这个子矩阵中的元素和最大。</p><p>　　其中，A的子矩阵指在A中行和列均连续的一块。</p><h3 id="输入说明-18"><a href="#输入说明-18" class="headerlink" title="输入说明"></a>输入说明</h3><p>　输入的第一行包含两个整数n, m，分别表示矩阵A的行数和列数。<br>　　接下来n行，每行m个整数，表示矩阵A。</p><p>　　对于50%的数据，1&lt;=n, m&lt;=50；<br>　　对于100%的数据，1&lt;=n, m&lt;=500，A中每个元素的绝对值不超过5000。</p><h3 id="输出说明-19"><a href="#输出说明-19" class="headerlink" title="输出说明"></a>输出说明</h3><p>　输出一行，包含一个整数，表示A中最大的子矩阵中的元素和。</p><p>比如：</p><p>输入</p><p>3 3<br>-1 -4 3<br>3 4 -1<br>-5 -2 8</p><p>输出</p><p>10</p><p>说明：</p><p>　　取最后一列，和为10。</p><h3 id="输入范例-19"><a href="#输入范例-19" class="headerlink" title="输入范例"></a>输入范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 3</span><br><span class="line">-1 -4 3</span><br><span class="line">3 4 -1</span><br><span class="line">-5 -2 8</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输出范例-19"><a href="#输出范例-19" class="headerlink" title="输出范例"></a>输出范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><h3 id="主要代码-19"><a href="#主要代码-19" class="headerlink" title="主要代码"></a>主要代码</h3><blockquote><p>暴力算很慢，看到大佬的算法，转化为一维数组求最大子段的算法。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学到的求一维数组最大子段的算法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMaxArray</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max=a[<span class="number">0</span>],temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            temp+=a[i];</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            temp=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(max &lt; temp)</span><br><span class="line">            max = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,sum;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">500</span>][<span class="number">500</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">            &#123;<span class="built_in">cin</span>&gt;&gt;arr[i][j];&#125;</span><br><span class="line">    <span class="keyword">int</span> res=arr[<span class="number">0</span>][<span class="number">0</span>],tmp,dp[<span class="number">500</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m; ++k)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[k] += arr[j][k];</span><br><span class="line">            &#125;</span><br><span class="line">            tmp = getMaxArray(dp, n);</span><br><span class="line">            res = res &gt; tmp ? res : tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ </tag>
            
            <tag> DHU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何利用CDN加速你的博客</title>
      <link href="post/c17a20e4.html"/>
      <url>post/c17a20e4.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在准备采用CDN动态加速之前，我的状态是：<strong>vercel托管，域名已经备案，但是访问速度不稳定，需要提高访问速度，且不想购买服务器</strong>。了解到七牛云的平台，于是开始着手操作。由于有些教程太老了，很多地方已经不正确，于是把自己的步骤记录下来。</p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先你需要有一个免费的部署平台，例如gitpages、vercel，部署之后你可以拿到平台分配给你的免费的域名，然后去七牛去和腾讯云注册账号。</p><hr><h2 id="申请ssl证书"><a href="#申请ssl证书" class="headerlink" title="申请ssl证书"></a>申请ssl证书</h2><p>腾讯云平台，搜索ssl，申请免费的ssl证书，免费证书不支持泛域名，所以二级域名和其子域名都需要各自申请（如果你有需求的话）。申请本身没有难度，不过采用DNS验证的时候有一个难点，你的域名解析可能会验证失败，你可以用<a href="https://myssl.com/dns_check.html#ssl_verify">这个网站</a>自主查询一下自己是否解析成功，注意这里子域名的TXT值要去查子域名，而不是二级域名。如果提示失败，看一下自己的解析是否正确，如果正确，请暂停掉所有的CNAME记录，再尝试。此时应该可以查询到，等待腾讯云颁发证书，下载，解压。</p><p>注意：申请完的TXT记录可以删除。</p><hr><h2 id="七牛云绑定"><a href="#七牛云绑定" class="headerlink" title="七牛云绑定"></a>七牛云绑定</h2><p>注册，登录，打开CDN，并添加域名。<br>各处的值分别是：<br>你的域名、HTTPS、大陆、动态加速、vercel给的域名、你的域名</p><p> <strong>注意两点</strong></p><ol><li>选择HTTPS后，需要上传自己的ssl证书，根据七牛云指引，上传自有证书，上传的时候，第一处备注随便写，第二处就是下载下来的证书里面的pem文件，记事本打开，复制粘贴。第二个密钥就是key文件，同样记事本打开，复制粘贴即可。</li><li>最后一个验证文件，例如你的域名是<code>xxx.com</code>，那么你需要确保<code>xxx.com/test.html</code>可以被访问到，这里的<code>test.html</code>可以是txt等，体积要小。放好之后，点击源站测试，自动识别，识别成功后即可创建。</li></ol><p>七牛云会给你CNAME记录值，最后去你的域名服务商添加一条解析即可，随后可见<code>已配置</code>，以及<code>成功</code>的字样则表示成功。</p><p>稍等几分钟就可以访问了，你会发现加载速度果然流畅不少。</p><hr><h2 id="流量说明"><a href="#流量说明" class="headerlink" title="流量说明"></a>流量说明</h2><p>新人赠送三个月100G，个人博客够用，流量购买也很便宜，个人认证也会送免费的额度，但好像不是支持https动态加速的，总之先用吧。随后再说。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一天的快乐</title>
      <link href="post/97862041.html"/>
      <url>post/97862041.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>一天会有多少快乐</p></blockquote><h2 id="早上起来去吃了早饭"><a href="#早上起来去吃了早饭" class="headerlink" title="早上起来去吃了早饭"></a>早上起来去吃了早饭</h2><p><img src="https://pic.imgdb.cn/item/610d50165132923bf8dfb49a.jpg" alt><br><img src="https://pic.imgdb.cn/item/610d50165132923bf8dfb4ad.jpg" alt><br><img src="https://pic.imgdb.cn/item/610d50165132923bf8dfb487.jpg" alt></p><hr><h2 id="回来后完成并且不断优化了挂件"><a href="#回来后完成并且不断优化了挂件" class="headerlink" title="回来后完成并且不断优化了挂件"></a>回来后完成并且不断优化了挂件</h2><p><img src="https://pic.imgdb.cn/item/610d4e805132923bf8dbc490.jpg" alt></p><hr><h2 id="躺下睡了个小觉"><a href="#躺下睡了个小觉" class="headerlink" title="躺下睡了个小觉"></a>躺下睡了个小觉</h2><hr><h2 id="拍云的时候找到了丢失已久的钥匙"><a href="#拍云的时候找到了丢失已久的钥匙" class="headerlink" title="拍云的时候找到了丢失已久的钥匙"></a>拍云的时候找到了丢失已久的钥匙</h2><p><img src="https://pic.imgdb.cn/item/610d4e085132923bf8daa73b.jpg" alt></p><hr><h2 id="给钥匙挂在了一个小钥匙串上（这样比较大，不容易丢吧）"><a href="#给钥匙挂在了一个小钥匙串上（这样比较大，不容易丢吧）" class="headerlink" title="给钥匙挂在了一个小钥匙串上（这样比较大，不容易丢吧）"></a>给钥匙挂在了一个小钥匙串上（这样比较大，不容易丢吧）</h2><p><img src="https://pic.imgdb.cn/item/610d4e465132923bf8db3ef7.jpg" alt></p><hr><h2 id="去试🔑的时候看到猫猫，于是上楼拿了充气宝和猫粮，一边给车胎打气，一边喂猫猫，三只猫，太可爱了"><a href="#去试🔑的时候看到猫猫，于是上楼拿了充气宝和猫粮，一边给车胎打气，一边喂猫猫，三只猫，太可爱了" class="headerlink" title="去试🔑的时候看到猫猫，于是上楼拿了充气宝和猫粮，一边给车胎打气，一边喂猫猫，三只猫，太可爱了"></a>去试🔑的时候看到猫猫，于是上楼拿了充气宝和猫粮，一边给车胎打气，一边喂猫猫，三只猫，太可爱了</h2><p><img src="https://pic.imgdb.cn/item/610d4e075132923bf8daa439.jpg" alt></p><hr><h2 id="洗了个澡吃完饭看男团比赛"><a href="#洗了个澡吃完饭看男团比赛" class="headerlink" title="洗了个澡吃完饭看男团比赛"></a>洗了个澡吃完饭看男团比赛</h2><hr><h2 id="心动的加更，甜！"><a href="#心动的加更，甜！" class="headerlink" title="心动的加更，甜！"></a>心动的加更，甜！</h2><p><img src="https://pic.imgdb.cn/item/610d50525132923bf8e051c2.jpg" alt></p><hr><h2 id="骑了会车，最后干脆下来推车走了一圈，凉风真不错"><a href="#骑了会车，最后干脆下来推车走了一圈，凉风真不错" class="headerlink" title="骑了会车，最后干脆下来推车走了一圈，凉风真不错"></a>骑了会车，最后干脆下来推车走了一圈，凉风真不错</h2><p><img src="https://pic.imgdb.cn/item/610d4e085132923bf8daa716.jpg" alt></p><hr><h2 id="支付宝红包！买东西的时候突然想起来啦哈哈哈哈，居然真的有用！"><a href="#支付宝红包！买东西的时候突然想起来啦哈哈哈哈，居然真的有用！" class="headerlink" title="支付宝红包！买东西的时候突然想起来啦哈哈哈哈，居然真的有用！"></a>支付宝红包！买东西的时候突然想起来啦哈哈哈哈，居然真的有用！</h2><p><img src="https://pic.imgdb.cn/item/610d507f5132923bf8e0ce19.jpg" alt></p><hr><h2 id="看了无间道！"><a href="#看了无间道！" class="headerlink" title="看了无间道！"></a>看了无间道！</h2><p><img src="https://pic.imgdb.cn/item/610d50a15132923bf8e1246c.jpg" alt></p><hr><h2 id="和老同学打了个电话"><a href="#和老同学打了个电话" class="headerlink" title="和老同学打了个电话"></a>和老同学打了个电话</h2><h2 id="最后就是还买了几件衣服！"><a href="#最后就是还买了几件衣服！" class="headerlink" title="最后就是还买了几件衣服！"></a>最后就是还买了几件衣服！</h2><hr><blockquote><p>快乐来自内心，而烦扰源于他人，每一天都快乐</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>留言本</title>
      <link href="post/5d8c0cb2.html"/>
      <url>post/5d8c0cb2.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="0732eaedc4eb733fa9418f3f5c2830fbcb4b0dd981ec7c3e90a187ee22bebce9">574b1481c95b9d13566c06ed649275dfa0dcd4a557eb09a03d605f102811239c26ebe9ec0fc5a0e7c03356a08fd08ac840ae03afa68566b4f7f64743ed3f206dc80a4f8f39e903e885a3cc46708651e07bd723ba3cda18322470bd46bd6e304cb4ed4ae5f98fc42242aa72e0bbc943165e348871d0dbe79c56793bf3498e58fa0dd0f1ea62a1a369b519090d74b622ab10e40769132e7552b8a5c260739bd21f310a0b0d20c978c4ddb4c316739ed44e09350f1f4f251d8c70f55727e8b1bd7736471bc92fd1e97fe742998791a90d07c30df8315fe91d8f4bb7c614b9a0715186012945dc46b32980e5b2521869e3922274842e5641c418b3fd613fca64ddb7e62ee60d3837331530fb584a9872ede09da80582924099246bf7587127bf8136dcb44ad9d4616f07fae1996cea4e88b458b533350ed949136bbceac585703bd6b17c0cb00c0ec518b9ec0f976e2e736b8cb603452c119f569a6c596416b3a431ea764ccd6250174e16bba56dba35f334aa91cdd537883d25e4969e5b08a80bf665aed3a63c72e0b064dfc4aa15842543cb2abbed29c9f7c51e59f7367b5ce4ce85c43a2c939f681473e81f36b3ccd7b8d4ff39aaf6052a639ea2a63f5b0c9a93ea9fcc67378bbb710a2fc3e6cd8228a1c4acf529dee469bd33dfcd2757fc181b8d53280b89656bc979b6c2cc1542d2423e781561f8bc6a83b8c74263e2768c223dbe46ea1bf76f4091a21f2cf82263f36d905cb0b9d764fd6a71f88f26440f8457cbb64e8c4770047e18f18ae11d1258bb1f6be75de472085c7b552b9e5f6acdf871262e6aa81613effcc359879ba56de9d8dd62bae162cf602eab9e6c7053815deef9b47dfc03331ee2faa8032e0c91b5f83e3d0d7a97191402d112ad92b56faf867574f90f478eca9df0c55ac677209fa3f449daa79bffbfd86a80ae8ae91e5d57641e7e8cc24a3ca420685e9b7b896a94b7a7ad7b4e3f3824326f36b40ee9e08204c1592c357655cc1c2ce11e827bcf09255ee9e7e01cd4e288262e53eb197364b8573abd3cc88390f9fc4a3a69661fbaa4b29cf3d55f42055e81f22da2470cfdc9df53b0ec78e786050d7338e173be0f07fee3d31c53fa8f99b32dd60ba7ce830f453172b88f21ade33a3b36239cf68a6ab0627f67ae6ccc4c332cd56a56a862b89ea83845ef9952922b6bfe7dd5aa2bc41da59e59e42e9dbc1722d05f6de145049c17983f03c7aade2d45996732adb57eba56422987c2ee041e821ea0e6791e84d64b66fd85deb779ac324e9227946c57b0f45a8c5782533459f2551c84cfeed045bcc37a3139b6e83c7328f48d223b4734ef216d96bcbfd4bb826989cb97037679096ecad230ad8efeabc0469a6c04d34c58ef0fb5d55920bf0f02cd1588bc3a611c61d426dcf4189d8be2af90dca3f433fac365ae3f487b7a47184c400c56c00f3c86180742e0b2b5ad5c8dadaec58da689e00061a5d5e724c5c2bfb0cd2ce51be329d860cc312b5100347863fcb7e3208a13668243cb98205fa750e2131bc3350d3678309eeb5f74c2cfb0b3ee46d732aca82e8584aa5e933d7abde5e097c1741d92ecc4b3a120ce6c7ca850177ac5910af967c00ae31991d7752fd6a3b54fbaa5853676f3d57c08630cac1c1772b7aecd0071410c8b6ccc807891b7a7d675788ed9e7042c1417d5dc96148d90bbd08f782bf6cb2a8574d83918b347e3770ccd210250b1ed9f0d91974fcbdb0744c008f9dab6138a6b0e5ac1a14487cc3945caaaa4fa1a0109e0eb658510b609e8da0b9dbe713f091bc3899101a188a3b9fe3a67b6dfc5935436c06bec6c4b751039263c94255537164899a00b5ddf8e4edf1a44e6b15dc7fa3f75b24eb4998047e77e1e516caac94b64834e23aa9bb4c84ceab013fa9a6e70a6bb5256477efe2864a5332c298da42e7412237bf20278ecc05f139c9efa44eb05b5a32b9c7ee8a7f9ea71047079d733acbb4ad7bcc25ce7725e492b9e7cf7994e6db758f38929469d570695f585e02be60b3c95424ee5060e5c6cf55ab117bfb11b680c49c13e8866bfaaf823ff46ab34c99250ded50bdb1bd32c4db0d14610a39d46424f0fb9db8dc176e80725577632bc48c23d9a71584defb4bf4c447486d211df814e81794b5f373f3431de969f1b16a7db441ca08775f8c7c7de649e64b098294b1b660d52cccff50003bd485f757701eef9b4fe2c932e1c99342194afc123f0bdc2484a2d39108871b81c6cb2803d4d6928364c62f2aeefa15dafda5b6194a4bfa5674049f4acaa55ead9f3b71f422584baf6febdda55247693b29856d40a3bb2ac809cf6d4a5e8b512840189fa1e4599700454e5e2ce4069a1f2206d71ccfab6ac878057284a6836616689a32cc03d4cef079cb30ae029c663cfcdd1945a6c80440ae87b03d45f154ed5bc17b2aef9c23e99f1ef8b7527ef8f5355f162349f9c1b3d3df5e24a5e12e2c5555defdc79c95855c80b07a2da92d0c9447f3b535d91cf5c750d5f7c9cceee932f4800e196ca883a75611ee4f7e7ade350aa9032e20b64362934709fd5617d0ed4fa1710bc4614e15186e7688648d19d76725fc3a07c74521b7f9bc219164b01fddab9828656a935acc7830752fd94d7c4311a9abc5da2e351fe18d5b905c88db88f6d03b2b8eb1bc7cdc6009e0d3604975a148e2735ebca</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">已加密，请在这里密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>c++学习笔记</title>
      <link href="post/258a2097.html"/>
      <url>post/258a2097.html</url>
      
        <content type="html"><![CDATA[<h2 id="四大件"><a href="#四大件" class="headerlink" title="四大件"></a>四大件</h2><ol><li>数据结构和算法</li><li>计算机网络</li><li>操作系统</li><li>设计模式组成原理</li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ol><li><p>常量</p><p>​    宏常量 #define</p><p>​    const 修饰变量</p><p>​    均不可修改</p></li><li><p>字符串</p><p>char str[] = “ldksjfa”，会默认多一个’\0’</p><p>string str = “dlkjafd” 需要头文件<string></string></p></li><li><p>bool char int float double void wchar_t</p></li><li><p>typedef为已有类命新名字</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> feet;</span><br><span class="line">feet a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ol><li>三目运算符可以返回变量也可以返回变量值</li></ol><h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h2><ol><li>if - else if - else</li><li>switch - case break- case break-default break <strong>只能是int 或者 char，必须break</strong></li><li>循环结构 while（）{},do{}while()，for(int i =0;i&lt;10;i++)</li><li>goto FLAG; FLAG:</li><li>continue</li></ol><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><ol><li><p>定义数组</p><ol><li>int a[10];</li><li>int a[10] = {0,1,2,3,4,5,6,7,8,9}</li><li>int a[] = {0,1,2,3}</li></ol></li><li><p>特点</p><ol><li>数据类型相同</li><li>内存空间连续</li></ol></li><li><p>赋值</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">//初始化表长度小于要被初始化的数组的元素数目，剩余元素均为0；</span></span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p><strong>注意</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> a[n]; <span class="comment">//这是错误的写法，尽管有些编译器可能不会报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">0</span>]; <span class="comment">//长度为0的数组没有任何意义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c[<span class="number">11</span>]; <span class="comment">//越界但可以输出</span></span><br></pre></td></tr></table></figure></li><li><p>排序查找</p><p>选择排序</p><p>冒泡排序</p></li></ol><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><ol><li><p>初始化赋值</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>][<span class="number">10</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;, &#123;<span class="number">2</span>,<span class="number">3</span>&#125;, &#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> a[][<span class="number">10</span>] = &#123;&#123;&#125;,&#123;&#125;&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><strong>注意</strong><ol><li>行数</li><li>元素数目（用好sizeof())</li><li>理解好变量名与地址的关系</li></ol></li></ol><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ol><li><p>初始化</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> ch[] = &#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> ch[] = &#123;<span class="string">&quot;hello&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> ch[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> ch[] = <span class="string">&quot;hello&quot;</span>; <span class="comment">//这是错误的</span></span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">10</span>] = <span class="string">&quot;hello&quot;</span>; <span class="comment">//后面的字符都是&#x27;\0&#x27;,&#x27;\0&#x27;是不可显示的</span></span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">6</span>] = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125; <span class="comment">//是字符串</span></span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">5</span>] = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125; <span class="comment">//不是字符串</span></span><br></pre></td></tr></table></figure></li><li><p>空字符串</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> ch[] = <span class="string">&quot;&quot;</span>; <span class="comment">//占用一个字节存储&#x27;\0&#x27;</span></span><br><span class="line"><span class="comment">//&#x27;a&#x27;与&quot;a&quot;，前者是简单的变量，后者是数组</span></span><br></pre></td></tr></table></figure></li><li><p>遍历</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>（<span class="keyword">int</span> i = <span class="number">0</span>; str[i]!=<span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;str[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输入输出</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">6</span>];</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;str; <span class="comment">//空格字符会结束输入</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;str; <span class="comment">//遇到第一个&#x27;\0&#x27;结束。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span>.get(str, length, endchar); <span class="comment">//结束字符默认是&#x27;\n&#x27;,结束字符会留在输入流中</span></span><br><span class="line"><span class="built_in">cin</span>.getline(stxr, length, endchar); <span class="comment">//结束字符默认是&#x27;\n&#x27;，结束字符不会留在输入流中,读入的字符是length减一，因为&#x27;\0&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>string</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="built_in">strlen</span>(str);<span class="comment">//可见字符串长度，不包括&#x27;\0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(str1, str2); <span class="comment">//不能用str1 = str2赋值，str1 要 大于 str2，//字符串排序</span></span><br><span class="line"><span class="built_in">strcat</span>(str1, str2); <span class="comment">//拼接</span></span><br><span class="line"><span class="built_in">strcmp</span>(str1, str2); <span class="comment">//比较大小，挨个比较ascii码 返回值是-1，0，1</span></span><br><span class="line"><span class="comment">//以上三个都有n族，即strncpy,strncat,strncmp，即操作前n个字符</span></span><br><span class="line"></span><br><span class="line">strlwr(str); <span class="comment">//转换为小写</span></span><br><span class="line">strupr(str);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//应用</span></span><br><span class="line">len = <span class="built_in">strlen</span>(str1);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123; <span class="comment">//不推荐</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; str1[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>声明可以写多次，定义只能写一次</li><li>scanf返回值是读入的个数，<code>ctrl Z</code>返回-1</li><li>cin返回值是<code>true</code>或<code>false</code></li></ol><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ol><li><p>定义的时候如果不声明返回值类型，默认是<code>int</code></p></li><li><p>如果return类型和定义类型不同，则强转（以定义为准）</p></li><li><p>函数不可以嵌套定义，但可以嵌套调用。</p></li></ol><h3 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h3><ol><li>传入的类型不对时会发强转</li></ol><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><ol><li>复合语句内是局部变量</li><li>复合语句是指大括号内，不一定是循环或者函数，大括号可以随时出现，组成复合语句。</li></ol><h3 id="变量存储类型"><a href="#变量存储类型" class="headerlink" title="变量存储类型"></a>变量存储类型</h3><blockquote><p>每个变量都有两种属性，分别是<strong>数据类型</strong>和<strong>存储类型</strong>，因此标准的变量定义应该是<code>标准类型 数据类型 变量名</code></p></blockquote><ol><li>auto（自动变量）函数内部或符合语句{}内。</li><li>register（寄存器变量）</li><li>extern（外部变量）指不在此块或此块之前声明过的变量，也可以引用其它文件的变量，另外引用其它文件的函数前面的extern可以省略</li><li>static（静态（外部）变量）该变量不能由extern引用</li></ol><h3 id="数组作为参数"><a href="#数组作为参数" class="headerlink" title="数组作为参数"></a>数组作为参数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myFun</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myFun2</span><span class="params">(<span class="keyword">int</span> arr[][<span class="number">3</span>], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr1[<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> arr2[][<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    myFun(arr1, <span class="number">3</span>); <span class="comment">//注意，函数不会重新创建新的数组</span></span><br><span class="line">    myFun2(arr2, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="带默认值的函数"><a href="#带默认值的函数" class="headerlink" title="带默认值的函数"></a>带默认值的函数</h3><ol><li>缺省形参值必须从右向左连续定义（自右向左入栈）</li><li>如果省掉了某个实参，直到最右边的实参都要省</li><li>缺省值应该在函数原型就给出</li><li>同一作用域，不可以重复定义缺省值</li><li>函数原型给出缺省值时，形参名可以省略</li><li>同一作用域内的函数原型和函数定义不能同时定义缺省值</li></ol><h3 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fun</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fun(); <span class="comment">//本质是编译的时候将此处替换了，即变成了顺序执行，空间换取时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>仅在原型出加<code>inline</code>无效，内联函数的定义必须出现在调用之前，否则就是普通函数</strong></p><p><strong>如果函数体积较大或者函数内有循环比较耗时，则不宜用内联</strong></p><h3 id="重载函数"><a href="#重载函数" class="headerlink" title="重载函数"></a>重载函数</h3><ol><li>c语言是不支持的</li><li>仅仅是返回值不同是不行的，编译不通过</li><li>编译器决定调用哪个函数的过程称之为<strong>绑定</strong></li><li>绑定的优先级：精确-&gt;低转高-&gt;高转低</li><li>带默认值的函数等可能引起二议性</li></ol><h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><ol><li>泛型化（类型的参数化）</li><li>如果模板中有普通类型，如int，则必须显示实例化</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;  <span class="comment">//也可以用class</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(T&amp; a, T&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T tmp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    Swap(a, b);<span class="comment">//自动推到调用</span></span><br><span class="line">    <span class="comment">//Swap&lt;int&gt;(a, b);//显示指定调用</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">float</span> c = <span class="number">12.3</span>;</span><br><span class="line">    <span class="keyword">float</span> d = <span class="number">23.4</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//Swap(c, d); //自动推到调用</span></span><br><span class="line">    Swap&lt;<span class="keyword">float</span>&gt;(c, d); <span class="comment">//显示指定调用</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;d = &quot;</span> &lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/lms1008611/article/details/81985815">参考资料《C++中的函数模板》</a></p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> * p = &amp;a;</span><br><span class="line">cou&lt;&lt;*p; <span class="comment">//解引用，找到内存中的数据</span></span><br></pre></td></tr></table></figure><p>任何类型的指针都占四个字节</p><h3 id="空指针和野指针"><a href="#空指针和野指针" class="headerlink" title="空指针和野指针"></a>空指针和野指针</h3><blockquote><p>当指针定义为0、NULL、或者不赋值，此时不能解引用，否则崩溃</p></blockquote><ol><li>空指针：指向内存编号为0的指针，一般用来初始换（0-255）不可访问，系统占用。<code>int * p = NULL</code>或<code>int * p = 0</code></li><li>野指针：指向非法空间（是一种错误），无法访问。</li></ol><h3 id="const修饰指针"><a href="#const修饰指针" class="headerlink" title="const修饰指针"></a>const修饰指针</h3><blockquote><p>指针就是一种特殊的变量，专门用来存放地址。地址可以看作一个特殊的数据类型，地址不可以复制给int变量，但可以赋值给指针变量，int的地址，只能复制给int *。地址可以解引用，所以&amp;a和p的用法是一样的。</p></blockquote><h4 id="常量指针"><a href="#常量指针" class="headerlink" title="常量指针"></a>常量指针</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * p = &amp;a;</span><br><span class="line">cou&lt;&lt;*p&lt;&lt;*&amp;a&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p %p&quot;</span>,&amp;a, p); <span class="comment">//地址的占位符应该用%p</span></span><br><span class="line">a = <span class="number">20</span>; <span class="comment">//这样是可以的</span></span><br><span class="line">*p = <span class="number">20</span>; <span class="comment">//不可以！！指针的指向可以修改，但不可以通过解引用来修改</span></span><br></pre></td></tr></table></figure><h4 id="指针常量"><a href="#指针常量" class="headerlink" title="指针常量"></a>指针常量</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> * <span class="keyword">const</span> p = &amp;a; <span class="comment">//指向不可以改，解引用可以改。</span></span><br></pre></td></tr></table></figure><h4 id="常量指针常量"><a href="#常量指针常量" class="headerlink" title="常量指针常量"></a>常量指针常量</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p = &amp;a; <span class="comment">//都不可以改</span></span><br></pre></td></tr></table></figure><h3 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h3><blockquote><p>此处，若那指针p指向数组首地址，那么此时的<strong>数组名</strong>和<strong>指针名</strong>的本质其实都是一个<strong>指针</strong>，访问数组的元素可以通过<u>方括号</u>来访问，也可以用<u>*</u>来访问。需要注意的是p和a的区别，p是变量，但a是常量指针，a不可以进行a++等运算。另外，指针相加无意义，相减有意义。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> * p = arr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用指针遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    p++; <span class="comment">//向后走四个字节，即到下个元素，p+1指向下一个元素，p-1指向上一个元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过指针引用数组元素</span></span><br><span class="line"><span class="comment">//下标法 和  指针法</span></span><br><span class="line">p[i];</span><br><span class="line">a[i];</span><br><span class="line">*(p+i);</span><br><span class="line">*(a+i);</span><br></pre></td></tr></table></figure><blockquote><p>利用指针进行排序，可以避免复杂的例如结构体、字符串的赋值，效率更高</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> arr[<span class="number">8</span>] = &#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">3</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> *p[<span class="number">8</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i ++)&#123;</span><br><span class="line">      p[i] = &amp;arr[i];</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i ++)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; <span class="number">8</span>; j++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(*p[i] &gt; *p[j])&#123;</span><br><span class="line">              <span class="keyword">int</span> *temp = p[i]; </span><br><span class="line">              p[i] = p[j];</span><br><span class="line">              p[j] = temp; <span class="comment">//只交换指针的指向，而不更改</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)&#123;</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;*p[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="指针与字符串"><a href="#指针与字符串" class="headerlink" title="指针与字符串"></a>指针与字符串</h3><blockquote><p>指向字符串常量和指向字符数组的指针有什么区别呢？</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *<span class="built_in">string</span>;</span><br><span class="line"><span class="built_in">string</span> = <span class="string">&quot;abcd&quot;</span>; <span class="comment">//string是常量区（数据段）里&quot;abcd&quot;的首地址，不可以修改*string的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *string2, ss[] = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">string2 = ss; <span class="comment">//string2是栈里&quot;abcd&quot;的首地址，可以修改*string2的值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">string</span>; <span class="comment">//即从string开始，知道&#x27;\0&#x27;结束，所以类推cout&lt;&lt;string+1即输出&quot;bcd&quot;</span></span><br></pre></td></tr></table></figure><p>要搞清楚<code>string</code>、<code>string2</code>、<code>ss</code>三者的区别：</p><ol><li>*string不可以修改，两外两个可以</li><li>ss不可以修改，两外两个可以</li><li>三者都属于指针，第一个指向常量即<strong>常量指针</strong>，第二个正常指针，第三个本身是常量即<strong>指针常量</strong></li></ol><blockquote><p>利用指针编程的实例（复制字符串）</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//把字符数组a赋值给b</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[] = <span class="string">&quot;abcd&quot;</span>,b[<span class="number">10</span>],*p1,*p2;</span><br><span class="line">    p1 = a;</span><br><span class="line">    p2 = b;</span><br><span class="line">    <span class="keyword">while</span>(*p1)</span><br><span class="line">        *p2++ = *p1++;</span><br><span class="line">    *p2 = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">//不要忘了最后加上&#x27;\0&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指针与函数（地址传递）"><a href="#指针与函数（地址传递）" class="headerlink" title="指针与函数（地址传递）"></a>指针与函数（地址传递）</h3><blockquote><p>主要注意传递指针以及返回指针</p></blockquote><p><strong>值传递是文件复制，地址传递是建立快捷方式</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> * p1, <span class="keyword">int</span> * p2)</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span>(*p1 + *p2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; add(&amp;a, &amp;b);</span><br></pre></td></tr></table></figure><h3 id="指向函数的指针"><a href="#指向函数的指针" class="headerlink" title="指向函数的指针"></a>指向函数的指针</h3><blockquote><p>用的不多</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">int</span> (*p)(<span class="keyword">int</span> <span class="keyword">int</span>);</span><br><span class="line">p = f;</span><br><span class="line"><span class="comment">//之后p和f用法相同，p可以用来传参</span></span><br></pre></td></tr></table></figure><h3 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h3><blockquote><p>与指针类似，但更安全、简单，主要用于函数的参数，不需要解引用，也不需要传参的时候传递地址</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;b = a; <span class="comment">//a,b地址一样，且定义的时候必须初始化，不能先定义再赋值，且以后b不能再修改</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> &amp; r)</span></span>&#123;</span><br><span class="line">    r = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">    f(x);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;x; <span class="comment">//5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 返回值为引用类型的引用</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> &amp; <span class="title">max</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;a[t]) t = i;</span><br><span class="line">        <span class="keyword">return</span> a[t]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> &amp; sum(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        s += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> &amp; m1 = max(a, <span class="number">10</span>); <span class="comment">//此处m1即为a[4]</span></span><br><span class="line">    <span class="keyword">int</span> &amp; m2 = sum(a, <span class="number">10</span>); <span class="comment">//此处m2即为s，但是s为局部变量，s释放之后，m2是随机值。</span></span><br><span class="line">    </span><br><span class="line">    max(a, <span class="number">10</span>)++; <span class="comment">//返回值是引用的话可以对返回值直接进行运算操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>常引用：不能通过常引用来修改变量的值，所以常引用可以用来引用常量，表达式等，通常用来作为只读形参。传引用更快，但又不希望被改动，所以更安全</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp; b = a; <span class="comment">//a，b地址相同，唯一区别是只能通过a来修改该地址的值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp; x, <span class="keyword">int</span> &amp; y)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maing</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    f(<span class="number">100</span>, a); <span class="comment">// 第一个参数可以传常量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态内存"><a href="#动态内存" class="headerlink" title="动态内存"></a>动态内存</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><blockquote><p>先记录一个常见的错误</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> a[n]; <span class="comment">//不合法，应该使用动态数组 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>动态数组</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *q;</span><br><span class="line">    q = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">10</span>]; <span class="comment">//new得到的是申请到的空间的地址，当系统用完时可能会失败，当失败时会返回空指针</span></span><br><span class="line">    <span class="keyword">if</span>(!q)&#123; <span class="comment">//检查new的结果</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;failed&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcpy</span>(q, <span class="string">&quot;abcde&quot;</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;q&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">delete</span> []q;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a><strong>补充</strong></h4><blockquote><p>关于内存分配的一些问题</p></blockquote><p><img src="https://pic.imgdb.cn/item/6112334a5132923bf840aea3.jpg" alt></p><p>对于三个区域，<strong>数据段、栈、堆</strong>，全局变量存储在数据段，局部栈，动态分配堆。对于一些很大的例如<strong>大数组</strong>，不能直接在堆里创建，否则会崩溃，需要在堆里<code>new</code>，且用完之后一定要<code>delete</code>否则会不断累积，造成内存泄漏，但要注意<code>delete</code>之后不允许再操作此处内存；也可以放在数据段里，即定义全局变量。</p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="定义与使用"><a href="#定义与使用" class="headerlink" title="定义与使用"></a>定义与使用</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;s3 <span class="comment">//这里可以在定义的时候直接创建一个实例，不建议用</span></span><br><span class="line"><span class="comment">//创建后赋值</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">student1</span>;</span> <span class="comment">//struct可以省略</span></span><br><span class="line">student1.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">student1.age = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//创建时赋值</span></span><br><span class="line">Student student1 = &#123;</span><br><span class="line">    <span class="string">&quot;张三&quot;</span>,<span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">arr</span>[3]=</span></span><br><span class="line">&#123;</span><br><span class="line">    &#123;<span class="string">&quot;张三&quot;</span>, <span class="number">10</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">student</span> =</span> &#123;<span class="string">&quot;张三&quot;</span>, <span class="number">10</span>&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student * p = student;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p-&gt;name; <span class="comment">//相当于(*p).name</span></span><br></pre></td></tr></table></figure><h3 id="结构体嵌套"><a href="#结构体嵌套" class="headerlink" title="结构体嵌套"></a>结构体嵌套</h3><p>要在之前声明</p><h3 id="结构体传参"><a href="#结构体传参" class="headerlink" title="结构体传参"></a>结构体传参</h3><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p><code>private</code>（成员函数可以访问本类其它对象私有成员）、<code>public</code>、<code>protected</code>（该类以及子类）出现的次序和顺序可以任意，默认是private</p><p>类本身并不占内存</p><h3 id="数据成员"><a href="#数据成员" class="headerlink" title="数据成员"></a>数据成员</h3><p>可以使用已定义完整的类，但当前正在定义的类没有定义完整，所以不能实例化</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grade</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> a; <span class="comment">//不占用内存空间，不可以赋初值。新标准可以赋值，但其实是通过构造函数赋值。</span></span><br><span class="line">  Grade *p;</span><br><span class="line">  Grade &amp;r;</span><br><span class="line">  Grade b; <span class="comment">//错误</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="函数成员"><a href="#函数成员" class="headerlink" title="函数成员"></a>函数成员</h3><ol><li><p>类内定义的称为内联函数，若要在类外定义，必须在类里声明原型</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clock::SetTime</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> m, <span class="keyword">int</span> s)</span></span>&#123; <span class="comment">//::是作用域分辨符</span></span><br><span class="line">    ... <span class="comment">//访问类里变量时直接访问就可以，写法和内联一样</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>默认形参可以放在原型里也可以放在定义处，不可都放，一般放原型</p></li><li><p>只有一份，不会给每个实例都放个函数</p></li></ol><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ol><li>没有返回值类型，且不用void的，一般函数需要void</li><li>构造函数只能被自动调用</li><li>构造函数要放在<code>pubilc</code>里面，否则无法实例化</li><li>构造函数可以重载</li><li>只有在不定义构造函数的时候才会自动生成无参构造函数</li><li>定义有参构造函数时最好再重载一个无参构造</li></ol><h3 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Score</span>&#123;</span></span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Score ScoreArr[<span class="number">3</span>]; <span class="comment">//调用不带参数的构造函数</span></span><br><span class="line">    Score ScoreArr[<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;&#125;; <span class="comment">//带参构造函数，两种都行，初值表</span></span><br><span class="line">    Score ScoreArr[<span class="number">3</span>] = &#123;</span><br><span class="line">        Score(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),</span><br><span class="line">        Score(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),</span><br><span class="line">        Score(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><h4 id="常量对象"><a href="#常量对象" class="headerlink" title="常量对象"></a>常量对象</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> 类名 对象名；</span><br><span class="line">类名 <span class="keyword">const</span> 对象名；<span class="comment">//两种都可以</span></span><br></pre></td></tr></table></figure><ol><li>常对象只能调用常成员函数</li><li>常对象本身以及其内部的属性等都不可以改变</li></ol><h4 id="常成员函数"><a href="#常成员函数" class="headerlink" title="常成员函数"></a>常成员函数</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getx</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">gety</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">A::gety</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>原型和实现都要加<code>const</code></li><li><code>const</code>可以用来重载函数</li><li>不能修改数据成员</li><li>不能调用非常成员函数</li><li>普通对象可以调用常成员函数和非常成员函数</li></ol><h4 id="常数据成员"><a href="#常数据成员" class="headerlink" title="常数据成员"></a>常数据成员</h4><blockquote><p> 定义和普通常量一样（注意：常量声明必须初始化），但是由于老标准中初始化类时不允许赋值，所以可以在构造函数里通过初始化表赋值</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> SIZE;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">3</span>; <span class="comment">//新标准才可以如此</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A::A(<span class="keyword">int</span> size):SIZE(size) <span class="comment">//后面为参数化表可以给一个常量或者变量赋值</span></span><br><span class="line">&#123;...&#125;</span><br></pre></td></tr></table></figure><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><h4 id="静态数据成员"><a href="#静态数据成员" class="headerlink" title="静态数据成员"></a>静态数据成员</h4><blockquote><p>静态成员只保留一次拷贝</p><p>不能用构造函数初始化静态成员，必须在类外初始化</p><p>定义对象时不会为静态成员分配空间</p><p>调用时可以通过类调用也可以通过<code>obj.</code>调用，值相同</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">double</span> a;  </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> b = <span class="number">2</span>;<span class="comment">//静态常数据成员可以在此初始化（非静态常数据成员老标准不支持在此初始化）</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> A::a = <span class="number">1.3</span>;<span class="comment">//不要忘记初始化，初始化的时候不加static</span></span><br></pre></td></tr></table></figure><h4 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h4><blockquote><p>不依赖任何对象，用来访问静态数据成员，可以通过类直接调用，也可以通过对象调用。</p><p>可以在类内声明原型，然后在类外定义，此时，类外不用加static</p><p>普通函数可以访问静态变量，但是静态函数不可以直接访问普通变量，但可以访问自己创建的或是传进来的实例的变量</p></blockquote><h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><p>友元类</p><p>友元函数</p><p>友元成员函数</p><h3 id="对象析构与拷贝构造"><a href="#对象析构与拷贝构造" class="headerlink" title="对象析构与拷贝构造"></a>对象析构与拷贝构造</h3><h4 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">~构造函数名();</span><br></pre></td></tr></table></figure><p>析构函数没有重载，没有参数，没有返回值</p><p>如果没有定义，系统会生成空析构函数</p><p>调用顺序和构造函数相反（出入栈）</p><h4 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认拷贝构造函数，可以用旧实例来初始化新实例。</span></span><br><span class="line"><span class="function">MyClass <span class="title">A2</span><span class="params">(A1)</span></span>;</span><br><span class="line">MyClass A2 = A1;</span><br></pre></td></tr></table></figure><p>在初始化，函数传参，返回值的时候会自动调用拷贝构造函数。系统默认生成拷贝构造函数。但是先声明，再赋值不会调用，而是调用<code>=</code>。注意一定是传变量的时候才会调用，如果直接传递常量MyClass </p><blockquote><p>默认拷贝构造函数比较傻，只能浅拷贝（即直接赋值），这会导致，如果你的类用到了动态内存，那么两个指针指向会相同，所以需要自己重新定义拷贝构造函数，重新开辟内存。</p><p>而当自己重新定义拷贝构造函数之后，默认的拷贝构造函数和构造函数都会消失，所以你还需要定义构造函数。</p><p>但是如果你只是重新定义构造函数，默认的拷贝构造函数依旧完好。</p></blockquote><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><blockquote><p>构造函数涉及到动态内存一定要注意</p><ul><li>拷贝构造函数</li><li>重新赋值运算符</li><li>析构函数</li></ul></blockquote><ul><li>C++ 要求’=’、’[]’、’()’、’-&gt;’运算符必须被定义为类的成员函数，把这些运算符通过全局函数进行重载时会出现编译错误；</li><li>如果有一个操作数是类类型（如 string 类），那么对于对称操作符（比如操作符“==”），最好通过全局函数的方式进行重载。</li><li>如果一个重载运算符是类的成员函数，那么只有当与它一起使用的左操作数是该类的对象时，该运算符才会被调用；而如果该运算符的左操作数确定为其他的类型，则运算符必须被重载为全局函数；</li><li>有一些运算符是不能重载的，如“sizeof”；</li><li>不能创建新的运算符；</li></ul><h4 id="重载为全局函数"><a href="#重载为全局函数" class="headerlink" title="重载为全局函数"></a>重载为全局函数</h4><ul><li>最好设置为友元函数</li></ul><h4 id="重载为成员函数"><a href="#重载为成员函数" class="headerlink" title="重载为成员函数"></a>重载为成员函数</h4><ul><li>形参少一个        </li></ul><h4 id="常见的重载"><a href="#常见的重载" class="headerlink" title="常见的重载"></a>常见的重载</h4><ul><li>=可以返回*this，这样就可以连等了！</li><li>[]返回类型要加个&amp;，这样就可以通过[]修改了！</li><li>前置++，重置为一元，后置为二元（加个新参int x 会默认传0）</li><li>&gt;&gt; &lt;&lt; <strong>必须是全局</strong></li></ul><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>如果成员类没有无参构造函数，那么组合类的构造函数的时候，必须携带初始化表。**初始化表不是在调用构造函数，构造函数的调用顺序和初始化表无关，它仅仅是提供参数。顺序应该是和数据成员里声明的顺序相同。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">const</span> &amp;B1):B(B1)</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><blockquote><p>一些名词：继承、派生。基类、父类，派生类、子类 ，单继承，单向继承，多继承，多重继承，多层派生，多层继承</p></blockquote><p><img src="https://pic.imgdb.cn/item/612e56ce44eaada73961cd6b.jpg" alt></p><p>继承决定访问权限上限</p><p>派生类不继承<strong>构造函数、析构函数、赋值运算符</strong>，但是可以调用基类的</p><p>构造函数调用顺序：基类、成员对象、自己。</p><p>如果基类没有无参构造函数，那么派生类必须定义构造函数，通过参数表传递给基类，即便派生类本身不需要重新定义构造函数，此时重新定义的构造函数作用仅仅是传递参数。如果基类有的话则可以不定义。</p><p>对于多层派生，派生类会调用直接基类的构造函数，依次上溯。</p><p>继承方式如果不写，默认是private</p><h4 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A, <span class="keyword">public</span> C&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基类构造函数调用顺序按照声明的顺序，如例子中先调用A，再C</p><p>接着调用成员对象的构造函数</p><p>最后派生类</p><p>继承默认是private</p><p><strong>多继承要时刻注意可能出现二义性</strong>。</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><blockquote><p>其实就是为了方便对所有的派生类进行统一管理罢了</p></blockquote><ol><li>虚函数不能是静态成员函数，也不能是友元函数，因为二者都不属于对象</li><li>多态的实现只能是指针或引用（基类指针指向派生对象，或基类引用指向派生对象）</li><li>派生类继承基类的虚函数，无论写不写<code>virtual</code>都是虚函数</li><li>派生类的重载函数会覆盖继承过来的同名虚函数</li></ol><h4 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h4><p>当派生类需要析构去delete动态内存时，如果是基类的指针，只会执行基类的析构函数，为了能够析构派生类，所以加了<code>virtual</code>。同时派生类会调用基类的析构函数。而基类不会调用派生类的析构函数。</p><h4 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h4><blockquote><p>只有原型没有实体</p></blockquote><p><code>virtual int f(int, double) = 0;</code></p><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>一个类中至少有一个纯虚函数，则称之为抽象类。这种类只能作为基类，不能创建对象，但可以创建指针和引用。</p><h2 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h2><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="built_in">string</span> s1; <span class="comment">//空串</span></span><br><span class="line"><span class="keyword">char</span> *str1 = <span class="string">&quot;hhh&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> str2[] = <span class="string">&quot;hhh&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s1</span><span class="params">(str1)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s1</span><span class="params">(str2)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s1</span><span class="params">(<span class="string">&quot;hhh&quot;</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s1</span><span class="params">(str1, <span class="number">3</span>)</span></span>; <span class="comment">//前几个字符</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(s1)</span></span>; <span class="comment">//拷贝构造</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(s1, <span class="number">2</span>, <span class="number">3</span>)</span></span>; <span class="comment">//从2，拷贝3个。</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(s1, <span class="number">2</span>)</span></span>; <span class="comment">//从2，拷贝到结束</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(<span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>)</span></span>; <span class="comment">///ccc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s1; <span class="comment">//开头空格不算，中间空格结束</span></span><br><span class="line">getline(<span class="built_in">cin</span>, s1, c); <span class="comment">//输入流、string、结束符（默认回车），且结束符会被丢弃。如果第一个就是结束符，那么就是空串，如果之前又输入字符，需要getchar()或者cin.get()吃掉回车。返回值是输入流</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line">s1[i]; <span class="comment">//下标，注意没有&#x27;\0&#x27;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> ch:s);<span class="comment">//范围循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;ch:s);<span class="comment">//类型可以自动，&amp;可以修改源字符串，否则是副本</span></span><br><span class="line"><span class="comment">//迭代器iterator reverse_itrerator const_iterator，对于常量，必须用第三个</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">string</span>::iterator it=s.begin(); it&lt;s.end(); it++)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运算符重载</span></span><br><span class="line">+， =， +=， ==， ！=， &gt;, &gt;=....</span><br><span class="line">        </span><br><span class="line"><span class="comment">//方法(不写那么细致了)</span></span><br><span class="line">append();</span><br><span class="line">push_back();</span><br><span class="line">insert();</span><br><span class="line">erase();</span><br><span class="line">clear();</span><br><span class="line">replace();</span><br><span class="line">size();</span><br><span class="line">length();</span><br><span class="line">empty();</span><br><span class="line">compare();<span class="comment">//可以截取范围</span></span><br><span class="line">assign();<span class="comment">//赋值</span></span><br><span class="line">substr();<span class="comment">//子串</span></span><br><span class="line">swap();<span class="comment">//交换</span></span><br><span class="line">c_str();<span class="comment">//转换为c字符数粗</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p><img src="https://pic.imgdb.cn/item/613d583444eaada739877124.jpg" alt></p><p><img src="https://pic.imgdb.cn/item/613d58b044eaada739880e76.jpg" alt></p><h3 id="基于控制台的I-O"><a href="#基于控制台的I-O" class="headerlink" title="基于控制台的I/O"></a>基于控制台的I/O</h3><p>​    cin cout <iostream></iostream></p><h3 id="基于字符串的I-O"><a href="#基于字符串的I-O" class="headerlink" title="基于字符串的I/O"></a>基于字符串的I/O</h3><ol><li><p>istringstream：流的输入</p></li><li><p>ostringstream：流的输出</p></li><li><p>stringstream：输入输出</p></li><li><pre><code class="c++"><span class="built_in">string</span> str = <span class="string">"asdkfjasdf"</span>;<span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(str)</span></span>;<span class="comment">//创建字符流对象</span>ss&gt;&gt;a&gt;&gt;b&gt;&gt;s;<span class="comment">//即从ss对象输入其它变量。</span>ss&lt;&lt;<span class="string">"234"</span>&lt;&lt;<span class="string">"2"</span>&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//输入到字符串</span><span class="built_in">string</span> s2 = ss.str();<span class="comment">//转化为字符串</span><span class="comment">//可以用来做不同类型数据的转换</span><span class="keyword">template</span>&lt;<span class="keyword">typename</span> out_type, <span class="keyword">typename</span> in_type&gt;<span class="function">out_type <span class="title">convert</span><span class="params">(<span class="keyword">const</span> in_type &amp;t)</span></span><span class="function"></span>&#123;    <span class="built_in">stringstream</span> stream;    steam&lt;&lt;t;    out_type res;    stream&gt;&gt;res;    <span class="keyword">return</span> res;&#125;&lt;!--code￼<span class="number">42</span>--&gt;</code></pre></li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//操作样例，从文件输出</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">8</span>],score[<span class="number">6</span>];</span><br><span class="line">    ifstream txtfile;</span><br><span class="line">    txtfile.open(<span class="string">&quot;d:\\xxx.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!txtfile)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cerr</span>&lt;&lt;<span class="string">&quot;error&quot;</span>&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//cerr无缓冲输出，迅速的很呐！</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!txtfile.eof()) <span class="comment">//判断是否读完了！只不过这样会重复输出最后一行，所以在下边加个if！</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(txtfile&gt;&gt;name&gt;&gt;score)<span class="comment">//防止最后一行重复</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;name&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;score&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    txtfile.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取二进制文件</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CStudent s;       </span><br><span class="line">    <span class="function">ifstream <span class="title">inFile</span><span class="params">(<span class="string">&quot;students.dat&quot;</span>,ios::in|ios::binary)</span></span>; <span class="comment">//二进制读方式打开</span></span><br><span class="line">    <span class="keyword">if</span>(!inFile) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;error&quot;</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(inFile.read((<span class="keyword">char</span> *)&amp;s, <span class="keyword">sizeof</span>(s))) &#123; <span class="comment">//一直读到文件结束，可以用binfile.peek()!=EOF来判断</span></span><br><span class="line">        <span class="keyword">int</span> readedBytes = inFile.gcount(); <span class="comment">//看刚才读了多少字节</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s.szName &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s.age &lt;&lt; <span class="built_in">endl</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">    inFile.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/613d5daa44eaada7398e970d.jpg" alt></p><h2 id="分文件编写"><a href="#分文件编写" class="headerlink" title="分文件编写"></a>分文件编写</h2><ol><li>h写声明，.cpp写定义，最后新的cpp里引用.h即可</li></ol><h2 id="杂乱"><a href="#杂乱" class="headerlink" title="杂乱"></a>杂乱</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><ol><li><ctime></ctime></li><li><iostream></iostream></li></ol><h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><ol><li><p>pow是浮点计算，貌似算出来的数可能导致不相等，可以加个(int)，加（int）会导致不准确，需要自己写函数（不同编译器不一样效果）</p></li><li><p>cout输出小数不会带后面的0；</p></li><li><p>当在循环的时候要找到最好的判断方式，在最合适的地方break，不然很容易超时！</p></li><li><p>cin&gt;&gt;char1不会读入空格，scanf可以</p></li><li><p>第一个cin.getline之前要放一个getchar</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> str[<span class="number">60</span>];</span><br><span class="line">        <span class="built_in">cin</span>.getline(str, <span class="number">60</span>);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len<span class="number">-1</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[j] == <span class="string">&#x27; &#x27;</span> &amp;&amp; str[j+<span class="number">1</span>] != <span class="string">&#x27; &#x27;</span>) sum++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(str[<span class="number">0</span>] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sum+<span class="number">1</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li><p>如果定义了拷贝构造函数，记得要把其它属性赋值，不然你传参的时候就错了！！！</p></li><li><p>析构貌似不用delete[];</p></li></ol><h2 id="考试复习"><a href="#考试复习" class="headerlink" title="考试复习"></a>考试复习</h2><h3 id="第一次课"><a href="#第一次课" class="headerlink" title="第一次课"></a>第一次课</h3><ol><li>‘\xCC’。\x是表示16进制，即CC是十六进制。</li><li>-=返回值是改变后的左侧的数</li><li>Size of char : 1<br>Size of int : 4<br>Size of short int : 2<br>Size of long int（long) : 8<br>Size of float : 4<br>Size of double : 8<br>Size of wchar_t : 4</li><li>1.0小数默认是double，如果是1.0f则是float</li><li><code>;</code>可以是一句话</li><li>‘0’——48，‘A’——65,’a’——97；</li><li>取余<code>%</code>必须是整型</li></ol><h3 id="第二次课"><a href="#第二次课" class="headerlink" title="第二次课"></a>第二次课</h3><ol><li><p>注意if后面不加{}的话，只能读一句。</p></li><li><pre><code class="c++"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><span class="function"></span>&#123;   <span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;   <span class="keyword">if</span>(a &lt; b)      <span class="keyword">if</span>(b &gt; c)            <span class="built_in">cout</span>&lt;&lt;<span class="number">3</span>;   <span class="keyword">else</span>      <span class="built_in">cout</span>&lt;&lt;<span class="number">4</span>; <span class="comment">//最终输出4，不加括号时，else只能跟最近的if</span>&#125;&lt;!--code￼<span class="number">45</span>--&gt;</code></pre></li><li><p>函数原型可以只声明变量类型，而不声明变量名称，且不需要<code>&#123;&#125;</code>；</p></li><li><p>函数都要通过main来调用，main是入口，所以函数不能单独运行，但是可以单独编译</p></li></ol><h3 id="第八次课"><a href="#第八次课" class="headerlink" title="第八次课"></a>第八次课</h3><ol><li>对于<code>double a[3][5]</code>，<code>a[1][5]</code>是不对的！</li><li><code>char a[3] = &#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;&#125;</code>不可以用strlen()，因为没有结束符’\0’。</li><li>对于c_string的字符数组，注意最后的结束符，另外<code>\\</code>是一个字符。</li></ol><h3 id="第九次课"><a href="#第九次课" class="headerlink" title="第九次课"></a>第九次课</h3><ol><li>不可以用1，’a’这样的常量给指针赋值</li><li><code>int a[] = &#123;1,2,3&#125;</code>a是不可以变的！但是如果是形参，是可以变的！</li></ol><h3 id="第十一次课"><a href="#第十一次课" class="headerlink" title="第十一次课"></a>第十一次课</h3><ol><li>函数模板显示实例化与隐式实例化的条件，如果有普通类型，如int，则必须显示</li></ol><h3 id="第十二次课"><a href="#第十二次课" class="headerlink" title="第十二次课"></a>第十二次课</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ST</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">long</span> a;</span><br><span class="line">   <span class="keyword">int</span> b;</span><br><span class="line">   <span class="keyword">char</span> c[<span class="number">2</span>];</span><br><span class="line">&#125;NEW; <span class="comment">// 给结构体起了别名，如果没有typedef的话，NEW在此处表示一个结构体</span></span><br><span class="line"></span><br><span class="line">ST st[] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;a&#x27;</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;b&#x27;</span>&#125;&#125;;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(&amp;st[<span class="number">0</span>])-&gt;a; <span class="comment">//必须加括号，不然编译出错。</span></span><br></pre></td></tr></table></figure><h3 id="第十三次课"><a href="#第十三次课" class="headerlink" title="第十三次课"></a>第十三次课</h3><ol><li><p>常成员函数不可以修改属性值，但可以访问。常成员函数不可以调用非常成员函数。</p></li><li><p>常成员函数可以访问类中的所有数据成员，但不能修改。注意常数据成员要被初始化，（可以在构造函数初始化0</p></li><li><p>静态函数可以访问静态变量，但不能访问其它变量。普通函数可以访问静态变量。</p></li><li><p>注意静态数据成员的初始化</p></li><li><p>普通成员函数不能<code>:x(a),y(b)</code>；</p></li><li><p>常对象只能调用常成员函数</p></li><li><p>拷贝构造函数的参数<code>const point &amp;p</code></p></li><li><p>友元函数可以把原型和定义都写在类里，但是即便写在类里，也不是成员函数。<code>friend</code>只能用在类里。</p></li><li><p>当涉及到友元成员函数的时候，因为会涉及到相互依赖的问题，所以只写函数原型，函数定义要放在后面。</p></li><li><p><code>%</code>，必须是<code>int</code></p></li><li><p><code>switch</code>注意后面是否有break！</p></li></ol><h3 id="第十四次课"><a href="#第十四次课" class="headerlink" title="第十四次课"></a>第十四次课</h3><ol><li>是double后面要有个小数点么</li><li>函数默认返回值是int</li><li>赋值表达式<code>t=1</code>的值是t</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探Java</title>
      <link href="post/eb0811b7.html"/>
      <url>post/eb0811b7.html</url>
      
        <content type="html"><![CDATA[<h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><blockquote><p>推荐环境统一放在一个environment的文件夹下，最新的jdk的jre不用自己配置，只需要配置java_home以及path即可。<br>安装后移动jdk路径，会导致cmd无任何输出，可以重新安装一下（如果你想换位置的话）。</p></blockquote><h2 id="DOS命令"><a href="#DOS命令" class="headerlink" title="DOS命令"></a>DOS命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1. dir</span><br><span class="line">2. cd /d E:\xxx 跨盘操作</span><br><span class="line">3. cls (clear screen)</span><br><span class="line">4. exit</span><br><span class="line">5. ipconfig</span><br><span class="line">6. calc</span><br><span class="line">7. mspaint</span><br><span class="line">8. notepad</span><br><span class="line">9. ping + domain</span><br><span class="line">10. md test</span><br><span class="line">11. cd&gt;a.txt</span><br><span class="line">12. del a.txt</span><br><span class="line">13. rd test</span><br></pre></td></tr></table></figure><h2 id="基础知识点"><a href="#基础知识点" class="headerlink" title="基础知识点"></a>基础知识点</h2><ol><li><p>大小写敏感、强类型</p></li><li><p>char c  = ‘\u0061’</p></li><li><p>引用类型比较地址 基本类型比较值</p></li><li><p>高到低：强制转换；低到高：自动转换</p><ol><li>byte-&gt;short-&gt;hcar-&gt;int-&gt;long-&gt;float-&gt;double</li></ol></li><li><p>JDK7后数字可以用下划线分割</p></li><li><p>方法重载（参数类型、个数、排序不同）</p></li><li><p>数组</p><ol><li><p>int[] nums; （首选）</p></li><li><p>int nums[]; （C的风格）</p></li><li><p>int[] nums = new int[10];nums[0] = 1（动态初始化，先声明，后赋值）隐式初始化，int默认0，string默认null</p></li><li><p>int [] nums = {1,2,3}（静态初始化：创建直接赋值）</p></li><li><p>长度是确定的，不可更改，元素类型相同，可以是基本类型也可是引用类型</p></li><li><p>for-each:</p><ol><li><pre><code class="java"><span class="keyword">for</span>(<span class="keyword">int</span> array : arrays)&#123;    System.out.println(array);&#125;</code></pre></li></ol></li><li><p>Arrays类</p><ol><li>Arrays.sort()</li><li>Arrays.fill()</li><li>Arrays.tostring()</li></ol></li><li><p>稀疏数组</p><ol><li>总行 总列 有效值个数</li><li>行 列 值</li><li>…</li></ol></li></ol></li></ol><h2 id="面向对象（OOP）"><a href="#面向对象（OOP）" class="headerlink" title="面向对象（OOP）"></a>面向对象（OOP）</h2><ol><li><p>非静态方法需要实例化才能调用</p></li><li><p>引用传递、值传递</p></li><li><p>构造器（方法名和类名一致）,new本质是在调用构造器</p></li><li><p>无参构造再不定义任何构造时会自动生成，反之必须自己显示定义。</p></li><li><p>idea :  alt+insert 自动生成构造器</p></li><li><p>封装：属性私有，get，set</p></li><li><p>继承：实例化子类时，会先调用父类构造器，如果显式定义构造器，super（）必须在子类构造器的第一行。ctrl + h继承树</p></li><li><p>重写：方法名和参数列表必须一样</p></li><li><p>多态：能调用的方法只看引用类型，且如果子类重写父类方法，则运行子类方法。 多态是方法的多态</p></li><li><p>A instanceof B</p></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建自己的网页编程（Jupyter）</title>
      <link href="post/ecef5fd9.html"/>
      <url>post/ecef5fd9.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于如何利用Jupyter-Notebook搭建网页编程"><a href="#关于如何利用Jupyter-Notebook搭建网页编程" class="headerlink" title="关于如何利用Jupyter Notebook搭建网页编程"></a>关于如何利用Jupyter Notebook搭建网页编程</h1><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p><img src="https://pic.imgdb.cn/item/60f54fb95132923bf82d6ab0.jpg" alt></p><h2 id="安装jupyter"><a href="#安装jupyter" class="headerlink" title="安装jupyter"></a>安装jupyter</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install jupyter</span><br><span class="line"># 安装失败的可以考虑换阿里源</span><br><span class="line"># 修改.&#x2F;pip&#x2F;pip.ini 为</span><br><span class="line">[global]</span><br><span class="line">index-url &#x3D; https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host &#x3D; mirrors.aliyun.com</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><code>jupyter notebook --generate-config</code></p><ol><li>第一种密码配置<br><code>jupyter notebook password</code><br>确认密码后得到密文，复制。<br>在.py文件末尾填上如下几句<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c.NotebookApp.password &#x3D; u&#39;这里填写密文&#39;       # 刚才复制的那个密文</span><br><span class="line">c.NotebookApp.open_browser &#x3D; False       # 禁止自动打开浏览器  </span><br><span class="line">c.NotebookApp.port &#x3D;8888                         #随便指定一个端口，默认就是8888，也可以不写</span><br><span class="line">c.NotebookApp.certfile &#x3D; u&#39;c:&#x2F;&#x2F;xxx&#x2F;&#x2F;xxx&#39;   # 根目录，一定要写转义符（我就是错在这里，要认真看报错）</span><br></pre></td></tr></table></figure></li><li>第二种密码配置<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> IPython</span><br><span class="line">IPython.lib.passwd()</span><br></pre></td></tr></table></figure>得到密文，修改.py文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c.NotebookApp.password &#x3D; u&#39;这里填写密文&#39;       # 刚才复制的那个密文</span><br><span class="line">c.NotebookApp.open_browser &#x3D; False       # 禁止自动打开浏览器  </span><br><span class="line">c.NotebookApp.port &#x3D;8888                         #随便指定一个端口，默认就是8888，也可以不写</span><br><span class="line">c.NotebookApp.certfile &#x3D; u&#39;c:&#x2F;&#x2F;xxx&#x2F;&#x2F;xxx&#39;   # 根目录，一定要写转义符（我就是错在这里，要认真看报错）</span><br></pre></td></tr></table></figure></li></ol><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p><code>jupyter notebook</code><br>注意启动后命令行弹出的运行地址包括token</p><h2 id="本地访问"><a href="#本地访问" class="headerlink" title="本地访问"></a>本地访问</h2><p>第一种密码配置：localhost:8888<br>第二种密码配置：localhost:8888?token=xxxx，登陆以后可以logout，通过token设置密码，然后可以正常登录，也可以重新启动一下，若提示.py和.json密码不匹配，可以重新采取第一种密码配置，强制修改密码。</p><h2 id="远端访问"><a href="#远端访问" class="headerlink" title="远端访问"></a>远端访问</h2><p>ip:8888<br>记得去控制台安全组实例把端口开放</p><p>到此结束</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jupyter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习通《软件技术基础》ppt</title>
      <link href="post/71475d58.html"/>
      <url>post/71475d58.html</url>
      
        <content type="html"><![CDATA[<h1 id="点击获取"><a href="#点击获取" class="headerlink" title="点击获取"></a><a href="http://dt2.8tupian.com/1/21378a1b500.pg3">点击获取</a></h1><p>请在点击后的界面内操作</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sources </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>you-get支持哪些网站下载</title>
      <link href="post/cabfd42a.html"/>
      <url>post/cabfd42a.html</url>
      
        <content type="html"><![CDATA[<article class="baidu_pl">        <div id="article_content" class="article_content clearfix">        <link rel="stylesheet" href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css">                <div id="content_views" class="htmledit_views">                    <h2><a name="t0"></a>You-get支持网站</h2> <div class="table-box"><table><thead><tr><th>网站</th><th>URL</th><th>视频?</th><th>图像?</th><th>音频?</th></tr></thead><tbody><tr><td><strong>YouTube</strong></td><td><a href="https://www.youtube.com/">https://www.youtube.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td><strong>Twitter</strong></td><td><a href="https://twitter.com/">https://twitter.com/</a></td><td>✓</td><td>✓</td><td>&nbsp;</td></tr><tr><td>VK</td><td><a href="http://vk.com/">http://vk.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>Vine</td><td><a href="https://vine.co/">https://vine.co/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>Vimeo</td><td><a href="https://vimeo.com/">https://vimeo.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>Vidto</td><td><a href="http://vidto.me/">http://vidto.me/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>Veoh</td><td><a href="http://www.veoh.com/">http://www.veoh.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td><strong>Tumblr</strong></td><td><a href="https://www.tumblr.com/">https://www.tumblr.com/</a></td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>TED</td><td><a href="http://www.ted.com/">http://www.ted.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>SoundCloud</td><td><a href="https://soundcloud.com/">https://soundcloud.com/</a></td><td>&nbsp;</td><td>&nbsp;</td><td>✓</td></tr><tr><td>Pinterest</td><td><a href="https://www.pinterest.com/">https://www.pinterest.com/</a></td><td>&nbsp;</td><td>✓</td><td>&nbsp;</td></tr><tr><td>MusicPlayOn</td><td><a href="http://en.musicplayon.com/">http://en.musicplayon.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>MTV81</td><td><a href="http://www.mtv81.com/">http://www.mtv81.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>Mixcloud</td><td><a href="https://www.mixcloud.com/">https://www.mixcloud.com/</a></td><td>&nbsp;</td><td>&nbsp;</td><td>✓</td></tr><tr><td>Metacafe</td><td><a href="http://www.metacafe.com/">http://www.metacafe.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>Magisto</td><td><a href="http://www.magisto.com/">http://www.magisto.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>Khan Academy</td><td><a href="https://www.khanacademy.org/">https://www.khanacademy.org/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>JPopsuki TV</td><td><a href="http://www.jpopsuki.tv/">http://www.jpopsuki.tv/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>Internet Archive</td><td><a href="https://archive.org/">https://archive.org/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td><strong>Instagram</strong></td><td><a href="https://instagram.com/">https://instagram.com/</a></td><td>✓</td><td>✓</td><td>&nbsp;</td></tr><tr><td>Heavy Music Archive</td><td><a href="http://www.heavy-music.ru/">http://www.heavy-music.ru/</a></td><td>&nbsp;</td><td>&nbsp;</td><td>✓</td></tr><tr><td><strong>Google+</strong></td><td><a href="https://plus.google.com/">https://plus.google.com/</a></td><td>✓</td><td>✓</td><td>&nbsp;</td></tr><tr><td>Freesound</td><td><a href="http://www.freesound.org/">http://www.freesound.org/</a></td><td>&nbsp;</td><td>&nbsp;</td><td>✓</td></tr><tr><td>Flickr</td><td><a href="https://www.flickr.com/">https://www.flickr.com/</a></td><td>✓</td><td>✓</td><td>&nbsp;</td></tr><tr><td>Facebook</td><td><a href="https://www.facebook.com/">https://www.facebook.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>eHow</td><td><a href="http://www.ehow.com/">http://www.ehow.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>Dailymotion</td><td><a href="http://www.dailymotion.com/">http://www.dailymotion.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>CBS</td><td><a href="http://www.cbs.com/">http://www.cbs.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>Bandcamp</td><td><a href="http://bandcamp.com/">http://bandcamp.com/</a></td><td>&nbsp;</td><td>&nbsp;</td><td>✓</td></tr><tr><td>AliveThai</td><td><a href="http://alive.in.th/">http://alive.in.th/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>interest.me</td><td><a href="http://ch.interest.me/tvn">http://ch.interest.me/tvn</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td><strong>755<br> ナナゴーゴー</strong></td><td><a href="http://7gogo.jp/">http://7gogo.jp/</a></td><td>✓</td><td>✓</td><td>&nbsp;</td></tr><tr><td><strong>niconico<br> ニコニコ動画</strong></td><td><a href="http://www.nicovideo.jp/">http://www.nicovideo.jp/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td><strong>163<br> 网易视频<br> 网易云音乐</strong></td><td><a href="http://v.163.com/">http://v.163.com/</a><br><a href="http://music.163.com/">http://music.163.com/</a></td><td>✓</td><td>&nbsp;</td><td>✓</td></tr><tr><td>56网</td><td><a href="http://www.56.com/">http://www.56.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td><strong>AcFun</strong></td><td><a href="http://www.acfun.tv/">http://www.acfun.tv/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td><strong>Baidu<br> 百度贴吧</strong></td><td><a href="http://tieba.baidu.com/">http://tieba.baidu.com/</a></td><td>✓</td><td>✓</td><td>&nbsp;</td></tr><tr><td>爆米花网</td><td><a href="http://www.baomihua.com/">http://www.baomihua.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td><strong>bilibili<br> 哔哩哔哩</strong></td><td><a href="http://www.bilibili.com/">http://www.bilibili.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>Dilidili</td><td><a href="http://www.dilidili.com/">http://www.dilidili.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>豆瓣</td><td><a href="http://www.douban.com/">http://www.douban.com/</a></td><td>&nbsp;</td><td>&nbsp;</td><td>✓</td></tr><tr><td>斗鱼</td><td><a href="http://www.douyutv.com/">http://www.douyutv.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>凤凰视频</td><td><a href="http://v.ifeng.com/">http://v.ifeng.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>风行网</td><td><a href="http://www.fun.tv/">http://www.fun.tv/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>iQIYI<br> 爱奇艺</td><td><a href="http://www.iqiyi.com/">http://www.iqiyi.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>激动网</td><td><a href="http://www.joy.cn/">http://www.joy.cn/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>酷6网</td><td><a href="http://www.ku6.com/">http://www.ku6.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>酷狗音乐</td><td><a href="http://www.kugou.com/">http://www.kugou.com/</a></td><td>&nbsp;</td><td>&nbsp;</td><td>✓</td></tr><tr><td>酷我音乐</td><td><a href="http://www.kuwo.cn/">http://www.kuwo.cn/</a></td><td>&nbsp;</td><td>&nbsp;</td><td>✓</td></tr><tr><td>乐视网</td><td><a href="http://www.letv.com/">http://www.letv.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>荔枝FM</td><td><a href="http://www.lizhi.fm/">http://www.lizhi.fm/</a></td><td>&nbsp;</td><td>&nbsp;</td><td>✓</td></tr><tr><td>秒拍</td><td><a href="http://www.miaopai.com/">http://www.miaopai.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>MioMio弹幕网</td><td><a href="http://www.miomio.tv/">http://www.miomio.tv/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>痞客邦</td><td><a href="https://www.pixnet.net/">https://www.pixnet.net/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>PPTV聚力</td><td><a href="http://www.pptv.com/">http://www.pptv.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>齐鲁网</td><td><a href="http://v.iqilu.com/">http://v.iqilu.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>QQ<br> 腾讯视频</td><td><a href="http://v.qq.com/">http://v.qq.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>阡陌视频</td><td><a href="http://qianmo.com/">http://qianmo.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>Sina<br> 新浪视频<br> 微博秒拍视频</td><td><a href="http://video.sina.com.cn/">http://video.sina.com.cn/</a><br><a href="http://video.weibo.com/">http://video.weibo.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>Sohu<br> 搜狐视频</td><td><a href="http://tv.sohu.com/">http://tv.sohu.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>天天动听</td><td><a href="http://www.dongting.com/">http://www.dongting.com/</a></td><td>&nbsp;</td><td>&nbsp;</td><td>✓</td></tr><tr><td><strong>Tudou<br> 土豆</strong></td><td><a href="http://www.tudou.com/">http://www.tudou.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>虾米</td><td><a href="http://www.xiami.com/">http://www.xiami.com/</a></td><td>&nbsp;</td><td>&nbsp;</td><td>✓</td></tr><tr><td>阳光卫视</td><td><a href="http://www.isuntv.com/">http://www.isuntv.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td><strong>音悦Tai</strong></td><td><a href="http://www.yinyuetai.com/">http://www.yinyuetai.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td><strong>Youku<br> 优酷</strong></td><td><a href="http://www.youku.com/">http://www.youku.com/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>战旗TV</td><td><a href="http://www.zhanqi.tv/lives">http://www.zhanqi.tv/lives</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>央视网</td><td><a href="http://www.cntv.cn/">http://www.cntv.cn/</a></td><td>✓</td><td>&nbsp;</td><td>&nbsp;</td></tr></tbody></table></div><p>对于不在列表的网站，通用解析器将寻找并下载感兴趣之内容.</p>                </div><div data-report-view="{&quot;mod&quot;:&quot;1585297308_001&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/qq_39377696/article/details/86529857&quot;,&quot;extend1&quot;:&quot;pc&quot;,&quot;ab&quot;:&quot;new&quot;}"><div></div></div>        </div>    </article>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> you-get </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于高考的一些思考（文素课小作业）</title>
      <link href="post/29ec6806.html"/>
      <url>post/29ec6806.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于高考的一些思考"><a href="#关于高考的一些思考" class="headerlink" title="关于高考的一些思考"></a>关于高考的一些思考</h1><p>大二了已经，距离我的高考已经过去几近两年了。前段时间偶然翻到我在19年6月8号晚上写的小文章，方才想起当时的我俨然是一个喜欢去写东西记录感受的人。看了那篇文章什么感受呢，里面一些细节我还历历在目，但是宏观的情愫我已经体味不到了，这种感觉就像是你长大后就忘记怎么长大似的，仿佛本来是这么大。<br>那节诗歌与人生，莫名其妙地变成了一节讨论高考的课，老师以及同学都举出了不少的例子，这让我想起来我高三那段时间发生的公交坠江事件，以及各地发生的跳楼等等事件。这类事件很多，而且无一例外让我对生死感到敬畏。高中在学校能接受的信息十分有限，仅仅能从各家杂志和老师口中甚至是试卷上获取时事信息，我记得当时喜欢看《作文素材》和《看天下》之类的杂志，其实本质是什么呢，我对这个世界了解的太少了，就像信息时代还未发展起来的时候人们大都去看报和听收音机一样。我想说的是，到现在，近来的一年中，当然也发生了很多事情，我也通过各方渠道了解过很多，但无一例外，我都提不起兴趣来，我很少去深入了解那些新闻，不知道这起事故的来龙去脉，更不用提各种反转。我厌恶极了当今的各种报道，他们像一群狗一样争先恐后疯抢食物（新闻头条便是他们的粮食），不要说什么价值观导向，且看各家官方媒体都不辨是非把各种错误消息信手拈来，让舆论里面的人们经历心情的大起大落，多让人心躁。写下这些的时候，很不幸，袁隆平老先生走了，走之前却还闹了场造谣的风波，让我痛心疾首。</p><p>总而言之，现在的我，对各种新闻已经没有任何兴趣了，我不想再花费心思在它上面。</p><p>说这些是干什么的呢，因为那节课不少同学举的例子我都闻所未闻或是只是道听途说了些皮毛。我完全不敢相信他们的报道是否真实，这使我对他们的言语存疑。</p><p>说回高考，无非就是“公平！公平！还是TMD公平！”。<br>公平这件事情很容易上升到哲学层次，或者简单来说很容易成为辩题，大多都是各执己见、众说纷纭、难分伯仲最后莫衷一是。大多数人不都是自私的吗，口中的公平虚伪极了，这些人想问题只考虑到于己有利的方面。我记得有同学说到四川怎么样怎么样，我大河南每年百万考生都还没说话。居然还有人在这里提到内卷，其实我深知这些词语代表的意思。但是我觉的应该从另一种角度来考虑：大家所说的内卷不过就是所有人都做了多余的劳动，而最后得到的收益却没有增加，所有人都站起来看电影，所有人都玩命学习，最后能看见电影的还是那么多人，能考上大学的还是那么多人。于是他们开始呼吁反内卷、内卷革命。这让我哭笑不得，再本质一点，当你考虑内卷的收益的时候，你就已经狭隘了，因为你没有考虑到整体的收益，内卷得到是什么？是所有人对知识的理解都加固了，整个社会的人才知识水平提高了。换做公司，整个公司的生产力也提高了不是吗？也就是说，内卷最终造成的是上层收益增加。<br>今天还看到一个有意思的话题，说是审美是个复杂的东西，它包括了很多权力结构因素在里面，简单举个例子就是你有什么资格认为你的审美更高级？由于各家说法很多，这里不赘述。其实用这种想法去思考内卷，不也正是如此，有太多结构化的东西在里面。然而在当今社会，这种结构是必要的，所以这种现象是无法根除的，它渗透在任何地方。往大了说，也正是无处不在的内卷才推动着人类社会发展。</p><p>试想，所有人都能不用劳动，靠着大自然的恩赐过上幸福的生活，这不守恒了吧！</p><p>说到这里肯定还有人要说了，不是说我们不应该努力，而是应该最大效率的去让每个人的劳动收益最大化，我们应该去寻找更好的解决方式，而不是一味的内卷。我只想说，只要有资源就有竞争，只要竞争存在，内卷就不会缺席。<br>再说回高考，我认为急需改善的一点是，让同学们学什么、怎么学，或者更好是去考虑如何让这活生生的年轻人健健康康长大，而不是去考虑如何改变他们的竞争结构。前者比后者重要一万倍，然而又有多少人在思考前者。</p><p>以上。</p><p>另外最近看杨宁文学理论课上瘾，强推！</p>]]></content>
      
      
      <categories>
          
          <category> 文学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> literature </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转专业面试小结</title>
      <link href="post/4d5a8c9b.html"/>
      <url>post/4d5a8c9b.html</url>
      
        <content type="html"><![CDATA[<h1 id="今天经历了第一次转专业面试"><a href="#今天经历了第一次转专业面试" class="headerlink" title="今天经历了第一次转专业面试"></a>今天经历了第一次转专业面试</h1><p>我提前一个小时到了地点，最近紧张的不行，生怕我说话太多了又条理不清晰。在机房等待叫号，很快就到我了。<br>进门不小心还绊了一跤（太憨了。。。）<br>随后我开始滔滔不绝，我还是没控制住，说完才觉得说的实在太多了！！而且又乱又紧张！<br>绩点排名只在卓越班排实在太难了，大佬都在卓班:(<br>C语言当时真的是挺好玩的，然而实在是大一懵懂没有好好学<br>其实不只C语言，大多数课程都没深入好好学，可能兴趣真的不在那吧…<br>大二做了这么多东西花了不少时间，但在面前的大佬们眼里恐怕啥也不是吧（毕竟都是些小东西）<br>老师提到solidworks还真的提醒了我，关于这个软件我想到的什么，当时说的好像啥也不是<br>但其实很简单，我觉得实现这个软件真的需要一个很庞大的体系…<br>不管是团队组织、代码之间的耦合还是什么都很艰难</p><p>完了完了，我考了二级证书我还没说，总共我就没什么证书，哭了<br>虽然这证书也没啥含金量<br>算了，自己表现…只能给个勉强及格<br>希望各位大佬高抬贵手！！<br>表现欠佳实属抱歉！！！</p><p>祈祷…</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于vercel私有域名无法访问</title>
      <link href="post/3548e590.html"/>
      <url>post/3548e590.html</url>
      
        <content type="html"><![CDATA[<h1 id="记录一下deploy在vercel上的项目忽然无法访问的问题"><a href="#记录一下deploy在vercel上的项目忽然无法访问的问题" class="headerlink" title="记录一下deploy在vercel上的项目忽然无法访问的问题"></a>记录一下deploy在vercel上的项目忽然无法访问的问题</h1><p>这几天没打开，今天偶然打开发现我的个人主页无法访问了（只是私有域名无法访问，但是vercel提供的域名毫无问题，怪哉！），看了半天控制台的域名解析没问题，又到vercel后台查了半天，实在是不行。<br>最后想起来会不会是被墙了，于是科学上网尝试了一下，居然真的成功了。<br>然而我还是不知道该怎么解决，四处询问未果。<br>最后我想会不会是因为github的这个仓库挺久没更新了，于是稍稍修改了一下html文件push上去，嘿嘿，然后就可以访问了，具体原因不清楚，至少可以进去了！！<br>由于问题来的莫名其妙，解决的也莫名其妙，不用再多说什么了。<br>另外，明天加油！（紧张ingngg)</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> vercel </tag>
            
            <tag> domain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于部署机器人到linux的一些记录</title>
      <link href="post/b3542778.html"/>
      <url>post/b3542778.html</url>
      
        <content type="html"><![CDATA[<h1 id="一下是我踩的坑（不完全记录）"><a href="#一下是我踩的坑（不完全记录）" class="headerlink" title="一下是我踩的坑（不完全记录）"></a>一下是我踩的坑（不完全记录）</h1><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><ol><li>从阿里云控制台直接登录（更换系统的时候可以直接选择设置好root和pw）</li><li>putty登录（我没怎么用，阿里云的网页登录居然很不错！待会再说）<h2 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h2></li><li>利用软件<code>winscp</code>，此处感谢zjy的帮助！！</li><li>不过用貌似有时候winscp和putty会断掉，可以自行百度一下怎么长时间保持连接…<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install openjdk-8-jre-headless</span><br></pre></td></tr></table></figure>安装完之后<code>java -version</code>可以查看版本<h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><blockquote><p>应该是有预装python的，输入<code>python</code>可以检测，<code>exit()</code>退出<br>更新版本</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sudo apt-get update</span><br><span class="line">$sudo apt-get install python3.8</span><br></pre></td></tr></table></figure></li></ol><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><blockquote><p>由于需要同时运行多个程序，具体可以参考<a href="https://www.jb51.net/article/165417.htm">在Linux中查看及终止正在运行的后台程序方法</a><br>但是，我看了一会觉得好麻烦！这时，我发现了阿里云远程连接的网页端居然可以多开terminal，还有各种布局，太奈斯了！<br>于是直接两个terminal搭好环境，运行<code>bot.py</code>哈哈哈，不行！缺少module（意料之中）…</p></blockquote><h3 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h3><p>我发现居然没有<code>pip</code>，那就装<br><code>sudo apt install python3-pip</code><br>重新运行<code>bot.py</code>，然后看着报错一个一个模块装，最后成功！<br>下面我要去搞我的<code>selenium</code>了，这又是个大坑…</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> robot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署robot+selenium的坑</title>
      <link href="post/90946297.html"/>
      <url>post/90946297.html</url>
      
        <content type="html"><![CDATA[<h1 id="记录一下部署robot-selenium的坑"><a href="#记录一下部署robot-selenium的坑" class="headerlink" title="记录一下部署robot+selenium的坑"></a>记录一下部署robot+selenium的坑</h1><ol><li><code>no module ... cv2.cv2</code><br><strong>SOLUTION</strong>: <code>pip uninstall opencv-python``pip install opencv-python</code></li><li><code>...tensorflow</code><br><strong>SOLUTION</strong>: <code>pip uninstall tensorflow``pip install tensorflow</code><blockquote><p>其余相关问题例如<code>numpy</code>等都可以通过重装模块解决。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> robot </tag>
            
            <tag> selenium </tag>
            
            <tag> muggle_ocr </tag>
            
            <tag> cv2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mirai+Graia编写聊天机器人</title>
      <link href="post/a5130995.html"/>
      <url>post/a5130995.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文作者： YOOZIKI<br> 本文链接： <a href="https://yooziki.github.io/2020/08/297095/">https://yooziki.github.io/2020/08/297095/</a></p></blockquote><h2 id="Python版本：py37"><a href="#Python版本：py37" class="headerlink" title="Python版本：py37"></a>Python版本：py37</h2><p>安装相关模块，<a href="https://github.com/GraiaProject/Application">源码在这里</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install graia-application-mirai</span><br><span class="line">pip install graia-broadcast --upgrade</span><br><span class="line">pip install singledispatchmethod</span><br></pre></td></tr></table></figure><p>添加选择器子模块</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install graia-component-selector</span><br></pre></td></tr></table></figure><h2 id="mirai环境配置"><a href="#mirai环境配置" class="headerlink" title="mirai环境配置"></a>mirai环境配置</h2><h3 id="自定义方式-推荐"><a href="#自定义方式-推荐" class="headerlink" title="自定义方式(推荐)"></a>自定义方式(推荐)</h3><p>在<a href="https://github.com/project-mirai/mirai-repo">mirai仓库中</a>的<code>shadow</code>下找到对应的包体并下载</p><blockquote><p>如果出现无法下载的情况下载文件时将<a href="https://github.com替换成http://github-proxy.yobot.win即可">https://github.com替换成http://github-proxy.yobot.win即可</a></p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;tmp</span><br><span class="line">wget -N -O shadowsocks.tar.gz http:&#x2F;&#x2F;github-proxy.yobot.win&#x2F;heweiye&#x2F;Merlin_Shadowsocks&#x2F;master&#x2F;shadowsocks_3.8.0.tar.gz</span><br><span class="line">tar -zxvf &#x2F;tmp&#x2F;shadowsocks.tar.gz</span><br><span class="line">chmod +x &#x2F;tmp&#x2F;shadowsocks&#x2F;install.sh</span><br><span class="line">sh &#x2F;tmp&#x2F;shadowsocks&#x2F;install.sh</span><br></pre></td></tr></table></figure><p>经测试的可用版本:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console &#x3D; &quot;mirai-console-1.0-M4-dev-3.jar&quot;</span><br><span class="line">pure &#x3D; &quot;mirai-console-pure-1.0-M4-dev-3.jar&quot;</span><br><span class="line">qqandroid &#x3D; &quot;mirai-core-qqandroid-1.2.3.jar&quot;</span><br><span class="line">mirai-api-http &#x3D; &quot;mirai-api-http-v1.8.2.jar&quot;</span><br><span class="line">java &#x3D; &quot;jdk8u265-b01&quot;</span><br></pre></td></tr></table></figure><p>使用简易的python启动器即可启动，首次启动后会创建一系列文件夹，使用<code>stop</code>命令正常停止，将<code>mirai-api-http</code>放到<code>plugins</code>下，再次启动plugins会自动生成配置文件存放在<code>config\MiraiAPIHTTP</code>下，使用文本方式打开后可以修改其中的一些配置，完成后再次用<code>stop</code>命令正常停止，之后使用：<code>login user passwd</code>登录即可</p><p>强行停止mirai会造成<code>mirai-api-http</code>没有结束的问题，如果出现请在任务管理器中关闭<code>OpenJDK Platform binary</code>进程</p><blockquote><p>建议只修改autuKey增加安全性，其它改动可能会造成Graia无法连接</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">#-*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from os import system, path, makedirs, listdir</span><br><span class="line"></span><br><span class="line">content &#x3D; &quot;.&#x2F;content&quot;</span><br><span class="line"></span><br><span class="line">console &#x3D; &quot;mirai-console-1.0-M4-dev-3.jar&quot;</span><br><span class="line">pure &#x3D; &quot;mirai-console-pure-1.0-M4-dev-3.jar&quot;</span><br><span class="line">qqandroid &#x3D; &quot;mirai-core-qqandroid-1.2.3.jar&quot;</span><br><span class="line">jar_name &#x3D; &#123;console, pure, qqandroid&#125;</span><br><span class="line"></span><br><span class="line">def init(content, jar_name):</span><br><span class="line">    print(&quot;初始化中...&quot;)</span><br><span class="line">    if not path.exists(content):</span><br><span class="line">        makedirs(content)</span><br><span class="line">        raise ValueError(f&quot;请在 &#123;content&#125; 文件夹中放入 &#123;console&#125;, &#123;pure&#125;, &#123;qqandroid&#125; 可在 &#39;https:&#x2F;&#x2F;github.com&#x2F;project-mirai&#x2F;mirai-repo&#39; 处下载&quot;)</span><br><span class="line"></span><br><span class="line">    c &#x3D; set()</span><br><span class="line">    for i in listdir(content):</span><br><span class="line">        if i in (console, pure, qqandroid):</span><br><span class="line">            c.add(i)</span><br><span class="line"></span><br><span class="line">    if len(c) &lt; 3:</span><br><span class="line">        raise ValueError(&quot;目录 &#123;content&#125; 中缺少↓ \n&#123;data&#125;\n可在 &#39;https:&#x2F;&#x2F;github.com&#x2F;project-mirai&#x2F;mirai-repo&#39; 处下载&quot;.format(</span><br><span class="line">            content&#x3D;content,</span><br><span class="line">            data&#x3D;&#39;, &#39;.join(jar_name - c)</span><br><span class="line">        ))</span><br><span class="line">    print(&quot;开始启动 mirai-console ...&quot;)</span><br><span class="line"></span><br><span class="line">def run(content, JClass):</span><br><span class="line">    try:</span><br><span class="line">        system(f&quot;java -cp &#123;content&#125;&#x2F;* &#123;JClass&#125;&quot;)</span><br><span class="line">    except KeyboardInterrupt:</span><br><span class="line">        print(&quot;手动关闭 mirai...&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    init(content, jar_name)</span><br><span class="line">    run(content, &#39;&quot;net.mamoe.mirai.console.pure.MiraiConsolePureLoader&quot;&#39;)</span><br></pre></td></tr></table></figure><h3 id="mirua方式（一键懒人包）"><a href="#mirua方式（一键懒人包）" class="headerlink" title="mirua方式（一键懒人包）"></a>mirua方式（一键懒人包）</h3><p>可以在<a href="https://github.com/ieew/mirua">这里获得</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git colne https:&#x2F;&#x2F;github.com&#x2F;ieew&#x2F;mirua</span><br></pre></td></tr></table></figure><h3 id="miraiOK方式"><a href="#miraiOK方式" class="headerlink" title="miraiOK方式"></a>miraiOK方式</h3><p>首先找到<a href="https://github.com/LXY1226/MiraiOK">miraiOK仓库</a>或者使用<a href="https://github.com/yooziki/MiraiOK">我的fork仓库</a>并且根据说明文件下载可执行程序到miraoOK目录下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;LXY1226&#x2F;MiraiOK</span><br></pre></td></tr></table></figure><p>执行对应的可执行文件，等待第一次执行结束</p><blockquote><p>为了保证程序的正确性，第一次执行结束后，请创建一个<strong>.nonupdate</strong>文件禁用更新功能，或者可以试试更新一次会不会出问题</p></blockquote><p>对应的mirai相关jar包可以在<a href="https://github.com/project-mirai/mirai-repo">这里查看</a></p><p>执行第一次之后，在miraiOK的目录下会有一个<code>plugins</code>文件夹，将<code>mirai-api-http-version.jar</code>包放到这里，插件<a href="https://github.com/project-mirai/mirai-api-http">源码</a></p><blockquote><p>如果miraiOK给到的./content/中mirai-core版本为1.0一下，则只能使用1.7版本的mirai-api-http</p></blockquote><p>为了保证py程序的正确运行，再次运行可执行文件</p><p>然后回到<code>plugins</code>文件夹下，新生成了一个文件夹，里面有一个yml配置文件，使用txt方式打开即可。(如果没有生成文件夹，则手动创建<code>./MiraiAPIHTTP/setting.yml</code>)</p><p>写入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##该配置为分段配置，对所有会话有效</span><br><span class="line"></span><br><span class="line">#Graia只能是0.0.0.0</span><br><span class="line">主机: “ 0.0.0.0 ”</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">端口: 8080</span><br><span class="line"></span><br><span class="line">#Graia需要手动指定，并且和py中保持一致</span><br><span class="line">authKey: 123456780</span><br><span class="line"></span><br><span class="line">#任选，缓存大小，预设4096.缓存过小会导致引用回复和撤回消息失败</span><br><span class="line">cacheSize: 4096</span><br><span class="line"></span><br><span class="line">#任选，是否开启websocket，更改关闭，建议通过会话范围的配置设置</span><br><span class="line">enableWebsocket: true</span><br><span class="line"></span><br><span class="line">#任选，配置CORS跨域，交替为*，即允许所有，可以不做更改</span><br><span class="line">域名cors:</span><br><span class="line">  - &#39; * &#39;</span><br></pre></td></tr></table></figure><p>如果希望每次都自动登录，可以在miraiOK更目录下的<code>config.txt</code>中根据模板提示写入内容</p><h1 id="程序框架"><a href="#程序框架" class="headerlink" title="程序框架"></a>程序框架</h1><p>可以从<a href="https://graiaproject.github.io/Application/#/README">这里查看</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 所有事件监听都在entry中可以找到</span><br><span class="line">from graia.application.entry import (</span><br><span class="line">    GraiaMiraiApplication, Session,</span><br><span class="line">    MessageChain,Group,Friend,Member,MemberInfo,</span><br><span class="line">    Plain,Image,AtAll,At,Face</span><br><span class="line">)</span><br><span class="line">from graia.application.entry import (</span><br><span class="line">    BotMuteEvent,BotGroupPermissionChangeEvent</span><br><span class="line">)</span><br><span class="line">from graia.broadcast import Broadcast</span><br><span class="line">#from graia.template import Template     # 模板功能</span><br><span class="line">#from graia.component import Components  # 检索器</span><br><span class="line"></span><br><span class="line">import asyncio</span><br><span class="line">from pathlib import Path</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 监听</span><br><span class="line">loop &#x3D; asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line">bcc &#x3D; Broadcast(loop&#x3D;loop)</span><br><span class="line">app &#x3D; GraiaMiraiApplication(</span><br><span class="line">    broadcast&#x3D;bcc,</span><br><span class="line">    connect_info&#x3D;Session(</span><br><span class="line">        host&#x3D;&quot;http:&#x2F;&#x2F;localhost:8080&quot;,  # 填入 httpapi 服务运行的地址，如果根据我的配置的话可以不做修改</span><br><span class="line">        authKey&#x3D;&quot;1234567890&quot;,  # 填入 authKey</span><br><span class="line">        account&#x3D;1111111,  # 你的机器人的 qq 号</span><br><span class="line">        websocket&#x3D;True  # Graia 已经可以根据所配置的消息接收的方式来保证消息接收部分的正常运作.</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>其中的<code>bcc</code>是一个广播，会将从miraiOK获得的信息在程序内广播传递。</p><p><code>app</code>是一个像mirai框架传递信息的通道</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 写入监听事件handler</span><br><span class="line">@bcc.receiver(&quot;FriendMessage&quot;)</span><br><span class="line">async def friend_message_listener(app: GraiaMiraiApplication, friend: Friend):</span><br><span class="line">    await app.sendFriendMessage(friend, MessageChain.create([</span><br><span class="line">        Plain(&quot;谢谢, 非常感谢你对我们服务的满意.&quot;)</span><br><span class="line">    ]))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 程序固定尾</span><br><span class="line">app.launch_blocking()</span><br></pre></td></tr></table></figure><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="MessageChain"><a href="#MessageChain" class="headerlink" title="MessageChain"></a>MessageChain</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from graia.application.message.chain import MessageChain</span><br></pre></td></tr></table></figure><p>用于处理消息的数据结构，包含一个有序列表</p><ul><li>MessageChain.asDisplay()<br>得到字符串形式的消息表示，返回字符串</li><li>MessageChain.<strong>root</strong><br>返回消息链列表</li><li>MessageChain.<strong>doc</strong><br>返回消息链的API文档说明</li><li>MessageChain.<strong>module</strong><br>返回消息链的模块绝对引用</li><li>MessageChain.create(&lt;list/tuple&gt;)<br>创建一个消息链结构，其中list/tuple可以包含能够获取的类型元素，返回创建的消息链</li><li>MessageChain.isImmutable()<br>判断消息链是否为可变，可变返回<code>True</code>，不可变返回<code>False</code>，默认接受的消息为不可变</li><li>MessageChain.asMutable()<br>将消息链转换为可变的，返回可变的消息链</li><li>MessageChain.isSendable()<br>检查消息链是否可以被正确发送，可发送返回<code>True</code>，不可发送返回<code>False</code></li><li>MessageChain.asSendable()<br>将消息链转换为可以发送的新消息链，返回可能可以正确发送的消息链</li><li>MessageChain.has(T)<br>消息链中是否存在某种消息元素，亦可使用<strong>T in MessageChain</strong><br>如果有则返回<code>True</code>否则返回<code>False</code></li><li>MessageChain.get(T)<br>取出消息链中某种消息元素，以列表方式返回<br>亦可以使用<strong>MessageChain[T]</strong></li><li>MessageChain.join(*MessageChains)<br>将多个MessageChain按顺序拼合“<br>返回拼合后的消息链</li><li>MessageChain.plusWith(*MessageChain)<br>方法将在现有的基础上将另一消息链拼接到原来实例的尾部, 并生成, 返回新的实例; 该方法不改变原有和传入的实例.</li><li>MessageChain.plus(*MessageChain)<br>方法将在现有的基础上将另一消息链拼接到原来实例的尾部; 该方法更改了原有的实例, 并要求 <code>isMutable</code> 方法返回 <code>True</code> 才可以执行.</li><li>MessageChain.asSerializationString()<br>将消息链对象转为以 “Mirai 码” 表示特殊对象的字符串<br>返回字符串</li><li>MessageChain.fromSerializationString(string)<br>将以 “Mirai 码” 表示特殊对象的字符串解析为消息链, 不过可能不完整<br>返回消息链，不可变</li><li>MessageChain.asMerged()<br>把相邻的Plain元素合并为一个Plain元素</li><li>MessageChain.subchain(slice)<br>切片操作<br>类似list切片方式<br>返回切片后的MessageChain</li><li>MessageChain.exclude(T)<br>将消息链中某种元素排除<br>返回新的消息链</li><li>MessageChain.include(T)<br>只保留消息链中某种元素<br>返回新消息链</li></ul><h2 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import graia.application.message.elements.internal as Elements</span><br></pre></td></tr></table></figure><ul><li><p>Elements.Plain(string)<br>实例化一个Plain元素，用于承载消息中的文字</p></li><li><p>Elements.Source<br>表示消息在一个特定聊天区域内的唯一标识，收到的消息链中存在，只能够获取</p></li><li><p>Elements.Quote(id,groupID,senderID,targetID,origin)<br>表示消息中回复功能，<br>id:回复的消息在群内的唯一标识，通过Elements.Source得到<br>groupID:群号<br>senderID:原消息发送人<br>targetID:群号<br>oringin:发送的消息链</p><blockquote><p>消息链中应该有：原消息链的<strong><strong>root</strong>列表, At(type=‘At’,target=qq号,display=’@谁谁谁(群内id)’), Plain(’ ‘),Plain(“内容”)</strong></p></blockquote></li><li><p><a href="http://elements.at/">Elements.At</a>(id)<br>表示@某人</p></li><li><p>Elements.AtAll()<br>管理员有效，@全体成员</p></li><li><p>Elements.Face(id)<br>表示一个表现，QQ内置的表情，id是表情的id</p></li><li><p>Elements.ImageType(Enum)<br>Friend = “Friend”<br>Group = “Group”<br>Temp = “Temp”<br>Unknown = “Unknow”<br>是一个类型的定义，不需要直接调用</p></li><li><p>Elements.Image()<br>imageID:是一个16进制字符串<br>url:链接位置<br>path<br>type:图片属于哪里(ImageType定义)<br>[关于Image的方法](# Image)</p></li><li><p>Elements.FlashImage(Image)<br>发送闪照，需要先通过Image方法创建一个Image对象<br>亦可以直接<code>Image.asFlash()</code></p></li><li><p>Elements.Xml(str)<br>xml消息</p></li><li><p>Elements.Json(str)</p></li><li><p>Elements.App(str)<br>app消息</p></li><li><p>Elements.PokeMethods(Enum)<br>是一个类型定义，不需要直接调用<br>Poke = “Poke”<br>ShowLove = “ShowLove”<br>Like =“Like”<br>Heartbroken=“Heartbroken”<br>SixSixSix=“SixSixSix”<br>FangDaZhao = “FangDaZhao”</p></li><li><p>Elements.Poke(PokeMethods)</p></li></ul><h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from graia.application.message.elements.internal import Image</span><br></pre></td></tr></table></figure><p>[返回到Elements](# Elements)</p><ul><li>Image.fromLoacalFile(filepath)<br>从本地获取一张图片<br>返回ShadowElement，包含了一个asFlash方法，可以作为闪照发送<code>Image.fromLocalFile(path).asFlash()</code></li><li>Image.fromUnsafePath(filepath)<br>不检查路径安全性，让上层协议(mirai-api-http)处理图片文件</li><li>Image.fromUnsafeBytes()<br>从不保证有效性的bytes中创建一个ShadowElement，并且上传，同样包含一个asFlash方法<br>不推荐，安全性低</li><li>Image.fromNetworkAddress(url)<br>从不保证有效性的网络位置中创建一个ShadowElement，在发送的时候从url获得图片并且上传<br>可能抛出任何形式的网络错误<br>可以使用asFlash方法</li><li>Image.fromUnsafeAddress(url)<br>让上层协议(mirai-apii-http)处理图片文件</li><li>Image.asDisplay()<br>返回字符串”[图片]”</li><li>Image.http_to_bytes(url)<br>从远端服务器获取图片的 bytes, 注意, 你无法获取并不包含 url 属性的本元素的 bytes</li><li>Image.asFlash()<br>设为闪照发送</li><li>Image.asSerializationString()<br>将消息链对象转为以 “Mirai 码” 表示特殊对象的字符串</li></ul><h2 id="Massages"><a href="#Massages" class="headerlink" title="Massages"></a>Massages</h2><p>定义了几种消息的类型</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import graia.application.event.messages as Messages</span><br></pre></td></tr></table></figure><ul><li>FriendMessage<br>好友对话事件</li><li>GroupMessage<br>群对话事件</li><li>TempMessage<br>临时对话事件</li></ul><h2 id="Friend模块"><a href="#Friend模块" class="headerlink" title="Friend模块"></a>Friend模块</h2><p>定义了friend的几种属性,需要在监听中声明</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from graia.application.friend import Friend</span><br></pre></td></tr></table></figure><ul><li>id:qq号</li><li>nickname:昵称</li><li><code>remark:好像访问不到？？</code></li></ul><h2 id="Group模块"><a href="#Group模块" class="headerlink" title="Group模块"></a>Group模块</h2><p>定义了group的一些属性,需要在监听中声明，例如：<code>async def group_message_handler(app: GraiaMiraiApplication, message: MessageChain, group: Group,member: Member):</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import graia.application.group as Group</span><br></pre></td></tr></table></figure><h3 id="Group-Group"><a href="#Group-Group" class="headerlink" title="Group.Group"></a>Group.Group</h3><ul><li><a href="http://group.group.id/">Group.Group.id</a>:群id</li><li><a href="http://group.group.name/">Group.Group.name</a>:群名称</li><li>Group.Group.accountPerm:账号在群中的权限</li></ul><h3 id="Group-MemberPerm"><a href="#Group-MemberPerm" class="headerlink" title="Group.MemberPerm"></a>Group.MemberPerm</h3><p>作为字典枚举，并不需要主动调用</p><ul><li>.Member # 普通成员</li><li>.Administrator # 管理员</li><li>.Owner # 群主</li></ul><h3 id="Group-Member"><a href="#Group-Member" class="headerlink" title="Group.Member"></a>Group.Member</h3><p>描述用户在群组中所具备的有关状态，包括所在群组，群中昵称，所具备的权限，唯一的ID</p><ul><li>.id:说话人的QQ号</li><li>.name:说话人的群昵称</li><li>.permission:说话人的权限等级</li><li>.group:上面的Group.Group所有内容</li></ul><h3 id="Group-GroupConfig"><a href="#Group-GroupConfig" class="headerlink" title="Group.GroupConfig"></a>Group.GroupConfig</h3><p>描述群内各项功能的设置(使用方法不明)</p><ul><li>name</li><li>announcement</li><li>confessTalk</li><li>allowMemberInvite</li><li>autoApprove</li><li>anonymousChat</li></ul><h3 id="Group-MemberInfo"><a href="#Group-MemberInfo" class="headerlink" title="Group.MemberInfo"></a>Group.MemberInfo</h3><p>描述群组成员的可修改状态，修改需要权限(使用方法不明)</p><ul><li>name</li><li>specialTitle</li></ul><h2 id="GraiaMiraiApplication类"><a href="#GraiaMiraiApplication类" class="headerlink" title="GraiaMiraiApplication类"></a>GraiaMiraiApplication类</h2><p>大多数的功能都被存在这个类中</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from graia.application import GraiaMiraiApplication</span><br></pre></td></tr></table></figure><h3 id="getVersion"><a href="#getVersion" class="headerlink" title=".getVersion()"></a>.getVersion()</h3><p>返回<code>mirai-api-http</code>的版本</p><h3 id="getGroup-int"><a href="#getGroup-int" class="headerlink" title=".getGroup(int)"></a>.getGroup(int)</h3><p>返回对应群号的群组信息(为空则None)<br>id,name,accountPerm<code>print(app.getGroup(&lt;Id&gt;))</code></p><h3 id="groupList"><a href="#groupList" class="headerlink" title=".groupList()"></a>.groupList()</h3><p><code>print(await app.groupList())</code></p><h3 id="getMember-Group-int-member-int"><a href="#getMember-Group-int-member-int" class="headerlink" title=".getMember(Group int,member int)"></a>.getMember(Group int,member int)</h3><p>从已知群组和已知成员的id获得成员的信息</p><p><code>print(await app.getMember(&lt;ID&gt;,&lt;ID&gt;))</code></p><h3 id="memberList-Group-int"><a href="#memberList-Group-int" class="headerlink" title=".memberList(Group int)"></a>.memberList(Group int)</h3><p>从已知群组中获取群内所有成员的信息列表</p><h3 id="friendList"><a href="#friendList" class="headerlink" title=".friendList()"></a>.friendList()</h3><p>获取所有好友的信息列表</p><p><code>print(await app.friendList())</code></p><h3 id="getFriend-int"><a href="#getFriend-int" class="headerlink" title=".getFriend(int)"></a>.getFriend(int)</h3><p>根据好友的id获取Friend实例</p><h3 id="sendFriendMessage-Friend-MessageChain-quote"><a href="#sendFriendMessage-Friend-MessageChain-quote" class="headerlink" title=".sendFriendMessage(Friend,MessageChain[,quote])"></a>.sendFriendMessage(Friend,MessageChain[,quote])</h3><p>向好友发送消息,quote为回复信息断，可以选择</p><h3 id="sendGroupMessage-Group-MessageChain-quote"><a href="#sendGroupMessage-Group-MessageChain-quote" class="headerlink" title=".sendGroupMessage(Group,MessageChain[,quote])"></a>.sendGroupMessage(Group,MessageChain[,quote])</h3><p>向群组发送消息</p><h3 id="sendTempMessage-Group-ID-Member-ID-messageChain-quote"><a href="#sendTempMessage-Group-ID-Member-ID-messageChain-quote" class="headerlink" title=".sendTempMessage(Group/ID,Member/ID,messageChain[,quote])"></a>.sendTempMessage(Group/ID,Member/ID,messageChain[,quote])</h3><p>向群内成员发起临时会话</p><h3 id="revokeMessage-target"><a href="#revokeMessage-target" class="headerlink" title=".revokeMessage(target)"></a>.revokeMessage(target)</h3><p>撤回消息(2min以内)</p><p>target (Union[Source, BotMessage, int]): 特定信息的 <code>messageId</code>, 可以是 <code>Source</code> 实例, <code>BotMessage</code> 实例或者是单纯的 int 整数.</p><h3 id="messageFromId-source-Source-int"><a href="#messageFromId-source-Source-int" class="headerlink" title=".messageFromId(source[Source, int])"></a>.messageFromId(source[Source, int])</h3><p>尝试从已知的 <code>messageId</code> 获取缓存中的消息</p><h3 id="muteAll-group-amp-unmuteAll-group"><a href="#muteAll-group-amp-unmuteAll-group" class="headerlink" title=".muteAll(group)&amp;.unmuteAll(group)"></a>.muteAll(group)&amp;.unmuteAll(group)</h3><p>全员禁言</p><h3 id="mute-group-member-time-、unmute-group-membder"><a href="#mute-group-member-time-、unmute-group-membder" class="headerlink" title=".mute(group,member,time)、unmute(group,membder)"></a>.mute(group,member,time)、unmute(group,membder)</h3><p>禁言指定群友</p><p>time指禁言时长</p><h3 id="kick-group-membder"><a href="#kick-group-membder" class="headerlink" title=".kick(group,membder)"></a>.kick(group,membder)</h3><p>群内踢掉某人</p><h3 id="quit-group"><a href="#quit-group" class="headerlink" title=".quit(group)"></a>.quit(group)</h3><p>退群</p><h2 id="Event模块"><a href="#Event模块" class="headerlink" title="Event模块"></a>Event模块</h2><p>通过Graia.application.entry可以导入MiraiApiHttp支持的所有事件类型</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from graia.application.entry import (</span><br><span class="line">   *</span><br><span class="line">)</span><br><span class="line">@bcc.receiver(&quot;xxxEvent&quot;)</span><br><span class="line">async def function(event:xxxEvent):</span><br><span class="line">    print(&quot;EventHappened&quot;)</span><br><span class="line">    event.&lt;可选获得参数&#x2F;方法&gt;</span><br></pre></td></tr></table></figure><h3 id="BotOnlineEvent"><a href="#BotOnlineEvent" class="headerlink" title="BotOnlineEvent"></a>BotOnlineEvent</h3><p>当该事件发生时, 应用实例所辖账号登录成功<br>qq: int</p><h3 id="BotOfflineEventActive"><a href="#BotOfflineEventActive" class="headerlink" title="BotOfflineEventActive"></a>BotOfflineEventActive</h3><p>当该事件发生时, 应用实例所辖账号主动离线<br>qq: int</p><h3 id="BotOfflineEventForce"><a href="#BotOfflineEventForce" class="headerlink" title="BotOfflineEventForce"></a>BotOfflineEventForce</h3><p>当该事件发生时, 应用实例所辖账号被迫离线<br>qq: int</p><h3 id="BotOfflineEventDropped"><a href="#BotOfflineEventDropped" class="headerlink" title="BotOfflineEventDropped"></a>BotOfflineEventDropped</h3><p>当该事件发生时, 应用实例所辖账号与服务器的连接被服务器主动断开, 或因网络原因离线<br>qq: int</p><h3 id="BotReloginEvent"><a href="#BotReloginEvent" class="headerlink" title="BotReloginEvent"></a>BotReloginEvent</h3><p>当该事件发生时, 应用实例所辖账号正尝试重新登录<br>qq: int</p><h3 id="BotGroupPermissionChangeEvent"><a href="#BotGroupPermissionChangeEvent" class="headerlink" title="BotGroupPermissionChangeEvent"></a>BotGroupPermissionChangeEvent</h3><p>当该事件发生时, 应用实例所辖账号在一特定群组内所具有的权限发生变化<br>origin: MemberPerm<br>current: MemberPerm<br>group: Group</p><h3 id="BotMuteEvent"><a href="#BotMuteEvent" class="headerlink" title="BotMuteEvent"></a>BotMuteEvent</h3><p>当该事件发生时, 应用实例所辖账号在一特定群组内被管理员/群主禁言</p><blockquote><p>Allowed Extra Parameters(提供的额外注解支持):<br>GraiaMiraiApplication (annotation): 发布事件的应用实例<br>Member (annotation, optional = None): 执行解除禁言操作的管理员/群主, 若为 None 则为应用实例所辖账号操作<br>Group (annotation, optional = None): 发生该事件的群组</p></blockquote><p>durationSeconds: int<br>operator: Optional[Member]</p><h3 id="BotUnmuteEvent"><a href="#BotUnmuteEvent" class="headerlink" title="BotUnmuteEvent"></a>BotUnmuteEvent</h3><p>当该事件发生时, 应用实例所辖账号在一特定群组内被管理员/群主解除禁言<br>operator: Optional[Member]</p><h3 id="BotJoinGroupEvent"><a href="#BotJoinGroupEvent" class="headerlink" title="BotJoinGroupEvent"></a>BotJoinGroupEvent</h3><p>当该事件发生时, 应用实例所辖账号加入指定群组<br>group: Group</p><h3 id="BotLeaveEventActive"><a href="#BotLeaveEventActive" class="headerlink" title="BotLeaveEventActive"></a>BotLeaveEventActive</h3><p>当该事件发生时, 应用实例所辖账号主动退出了某群组.<br>group: Group</p><h3 id="BotLeaveEventKick"><a href="#BotLeaveEventKick" class="headerlink" title="BotLeaveEventKick"></a>BotLeaveEventKick</h3><p>当该事件发生时, 应用实例所辖账号被某群组的管理员/群主从该群组中删除.<br>group: Group</p><h3 id="GroupRecallEvent"><a href="#GroupRecallEvent" class="headerlink" title="GroupRecallEvent"></a>GroupRecallEvent</h3><p>当该事件发生时, 有群成员在指定群组撤回了一条消息<br>注意, 这里的群成员若具有管理员/群主权限, 则他们可以撤回其他普通群员的消息, 且不受发出时间限制<br>authorId: int<br>messageId: int<br>time: datetime<br>group: Group<br>operator: Optional[Member]</p><h3 id="FriendRecallEvent"><a href="#FriendRecallEvent" class="headerlink" title="FriendRecallEvent"></a>FriendRecallEvent</h3><p>当该事件发生时, 有一位与应用实例所辖账号为好友关系的用户撤回了一条消息<br>authorId: int<br>messageId: int<br>time: int<br>operator: int</p><h3 id="GroupNameChangeEvent"><a href="#GroupNameChangeEvent" class="headerlink" title="GroupNameChangeEvent"></a>GroupNameChangeEvent</h3><p>该事件发生时, 有一群组被修改了群名称<br>origin: str<br>current: str<br>group: Group<br>operator: Optional[Member] = None</p><h3 id="GroupEntranceAnnouncementChangeEvent"><a href="#GroupEntranceAnnouncementChangeEvent" class="headerlink" title="GroupEntranceAnnouncementChangeEvent"></a>GroupEntranceAnnouncementChangeEvent</h3><p>该事件发生时, 有一群组被修改了入群公告<br>origin: str<br>current: str<br>group: Group<br>operator: Optional[Member]</p><h3 id="GroupMuteAllEvent"><a href="#GroupMuteAllEvent" class="headerlink" title="GroupMuteAllEvent"></a>GroupMuteAllEvent</h3><p>该事件发生时, 有一群组开启了全体禁言<br>origin: bool<br>current: bool<br>group: Group<br>operator: Optional[Member]</p><h3 id="GroupAllowAnonymousChatEvent"><a href="#GroupAllowAnonymousChatEvent" class="headerlink" title="GroupAllowAnonymousChatEvent"></a>GroupAllowAnonymousChatEvent</h3><p>该事件发生时, 有一群组修改了有关匿名聊天的相关设定<br>origin: bool<br>current: bool<br>group: Group<br>operator: Optional[Member]</p><h3 id="GroupAllowConfessTalkEvent"><a href="#GroupAllowConfessTalkEvent" class="headerlink" title="GroupAllowConfessTalkEvent"></a>GroupAllowConfessTalkEvent</h3><p>该事件发生时, 有一群组修改了有关坦白说的相关设定<br>origin: bool<br>current: bool<br>group: Group<br>isByBot: bool</p><h3 id="GroupAllowMemberInviteEvent"><a href="#GroupAllowMemberInviteEvent" class="headerlink" title="GroupAllowMemberInviteEvent"></a>GroupAllowMemberInviteEvent</h3><p>该事件发生时, 有一群组修改了有关是否允许已有成员邀请其他用户加入群组的相关设定<br>origin: bool<br>current: bool<br>group: Group<br>operator: Optional[Member]</p><h3 id="MemberJoinEvent"><a href="#MemberJoinEvent" class="headerlink" title="MemberJoinEvent"></a>MemberJoinEvent</h3><p>该事件发生时, 有一新成员加入了一特定群组<br>member: Member</p><h3 id="MemberLeaveEventKick"><a href="#MemberLeaveEventKick" class="headerlink" title="MemberLeaveEventKick"></a>MemberLeaveEventKick</h3><p>该事件发生时, 有一群组成员被管理员/群主从群组中删除, 当 <code>operator</code> 为 <code>None</code> 时, 执行者为应用实例所辖账号.<br>type = “MemberLeaveEventKick”<br>member: Member<br>operator: Optional[Member]</p><h3 id="MemberLeaveEventQuit"><a href="#MemberLeaveEventQuit" class="headerlink" title="MemberLeaveEventQuit"></a>MemberLeaveEventQuit</h3><p>该事件发生时, 有一群组成员主动退出群组.<br>member: Member</p><h3 id="MemberCardChangeEvent"><a href="#MemberCardChangeEvent" class="headerlink" title="MemberCardChangeEvent"></a>MemberCardChangeEvent</h3><p>该事件发生时, 有一群组成员的群名片被更改, 执行者可能是管理员/群主, 该成员自己, 也可能是应用实例所辖账号(这时, <code>operator</code> 为 <code>None</code>).<br>origin: str<br>current: str<br>member: Member<br>operator: Optional[Member]</p><h3 id="MemberSpecialTitleChangeEvent"><a href="#MemberSpecialTitleChangeEvent" class="headerlink" title="MemberSpecialTitleChangeEvent"></a>MemberSpecialTitleChangeEvent</h3><p>该事件发生时, 有一群组成员的群头衔被更改, 执行者只可能是群组的群主.<br>origin: str<br>current: str<br>member: Member</p><h3 id="MemberPermissionChangeEvent"><a href="#MemberPermissionChangeEvent" class="headerlink" title="MemberPermissionChangeEvent"></a>MemberPermissionChangeEvent</h3><p>该事件发生时, 有一群组成员的权限被更改/调整, 执行者只可能是群组的群主.<br>origin: str<br>current: str<br>member: Member</p><h3 id="MemberMuteEvent"><a href="#MemberMuteEvent" class="headerlink" title="MemberMuteEvent"></a>MemberMuteEvent</h3><p>该事件发生时, 有一群组成员被管理员/群组禁言, 当 <code>operator</code> 为 <code>None</code> 时为应用实例所辖账号操作.<br>durationSeconds: int<br>member: Member<br>operator: Optional[Member]</p><h3 id="MemberUnmuteEvent"><a href="#MemberUnmuteEvent" class="headerlink" title="MemberUnmuteEvent"></a>MemberUnmuteEvent</h3><p>该事件发生时, 有一群组成员被管理员/群组解除禁言, 当 <code>operator</code> 为 <code>None</code> 时为应用实例所辖账号操作.<br>member: Member<br>operator: Optional[Member]</p><h3 id="NewFriendRequestEvent"><a href="#NewFriendRequestEvent" class="headerlink" title="NewFriendRequestEvent"></a>NewFriendRequestEvent</h3><p>当该事件发生时, 有一用户向机器人提起好友请求.</p><blockquote><p>该事件的处理需要你获取原始事件实例.</p></blockquote><ol><li>读取该事件的基础信息:</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">event.supplicant: int # 发起加好友请求的用户的 ID</span><br><span class="line">event.sourceGroup: Optional[int] # 对方可能是从某个群发起对账号的请求的, mirai 可以解析对方从哪个群发起的请求.</span><br><span class="line">event.nickname: str # 对方的昵称</span><br><span class="line">event.message: str # 对方发起请求时填写的描述</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">同意请求: &#96;await event.accept()&#96;, 具体查看该方法所附带的说明.</span><br><span class="line">拒绝请求: &#96;await event.reject()&#96;, 具体查看该方法所附带的说明.</span><br><span class="line">拒绝并不再接受来自对方的请求: &#96;await event.rejectAndBlock()&#96;, 具体查看该方法所附带的说明.</span><br></pre></td></tr></table></figure><p>requestId: int = Field(…, alias=“eventId”)<br>supplicant: int = Field(…, alias=“fromId”) # 即请求方 QQ<br>sourceGroup: Optional[int] = Field(…, alias=“groupId”)<br>nickname: str = Field(…, alias=“nick”)<br>message: str</p><h3 id="accept-message-str-””"><a href="#accept-message-str-””" class="headerlink" title="accept(message:str=””)"></a>accept(message:str=””)</h3><p>同意对方的加好友请求.<br>message (str, optional): 附带给对方的消息. 默认为 “”.</p><h3 id="reject-message-str-“”"><a href="#reject-message-str-“”" class="headerlink" title="reject(message: str = “”)"></a>reject(message: str = “”)</h3><p>拒绝对方的加好友请求.<br>message (str, optional): 附带给对方的消息. 默认为 “”.</p><h3 id="rejectAndBlock-message-str-“”"><a href="#rejectAndBlock-message-str-“”" class="headerlink" title="rejectAndBlock(message: str = “”)"></a>rejectAndBlock(message: str = “”)</h3><p>拒绝对方的加好友请求, 并不再接受来自对方的加好友请求.<br>message (str, optional): 附带给对方的消息. 默认为 “”.</p><h3 id="MemberJoinRequestEvent"><a href="#MemberJoinRequestEvent" class="headerlink" title="MemberJoinRequestEvent"></a>MemberJoinRequestEvent</h3><p>当该事件发生时, 有一用户向机器人作为管理员/群主的群组申请加入群组.</p><blockquote><p>该事件的处理需要你获取原始事件实例.</p></blockquote><ol><li>读取该事件的基础信息:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5event.supplicant: int # 申请加入群组的用户的 ID</span><br><span class="line">event.groupId: Optional[int] # 对方试图加入的群组的 ID</span><br><span class="line">event.groupName: str # 对方试图加入的群组的名称</span><br><span class="line">event.nickname: str # 对方的昵称</span><br><span class="line">event.message: str # 对方发起请求时填写的描述</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">同意请求: &#96;await event.accept()&#96;, 具体查看该方法所附带的说明.</span><br><span class="line">拒绝请求: &#96;await event.reject()&#96;, 具体查看该方法所附带的说明.</span><br><span class="line">忽略请求: &#96;await event.ignore()&#96;, 具体查看该方法所附带的说明.</span><br><span class="line">拒绝并不再接受来自对方的请求: &#96;await event.rejectAndBlock()&#96;, 具体查看该方法所附带的说明.</span><br><span class="line">忽略并不再接受来自对方的请求: &#96;await event.ignoreAndBlock()&#96;, 具体查看该方法所附带的说明.</span><br></pre></td></tr></table></figure></li></ol><p>requestId: int = Field(…, alias=“eventId”)<br>supplicant: int = Field(…, alias=“fromId”) # 即请求方 QQ<br>groupId: Optional[int] = Field(…, alias=“groupId”)<br>groupName: str = Field(…, alias=“groupName”)<br>nickname: str = Field(…, alias=“nick”)<br>message: str</p><h3 id="accept-message-str-“”"><a href="#accept-message-str-“”" class="headerlink" title="accept(message: str = “”)"></a>accept(message: str = “”)</h3><p>同意对方加入群组.<br>message (str, optional): 附带给对方的消息. 默认为 “”.</p><h3 id="reject-message-str-“”-1"><a href="#reject-message-str-“”-1" class="headerlink" title="reject(message: str = “”)"></a>reject(message: str = “”)</h3><p>拒绝对方加入群组.<br>message (str, optional): 附带给对方的消息. 默认为 “”.</p><h3 id="ignore-self-message-str-“”"><a href="#ignore-self-message-str-“”" class="headerlink" title="ignore(self, message: str = “”)"></a>ignore(self, message: str = “”)</h3><p>忽略对方加入群组的请求.<br>message (str, optional): 附带给对方的消息. 默认为 “”.</p><h3 id="rejectAndBlock-self-message-str-“”"><a href="#rejectAndBlock-self-message-str-“”" class="headerlink" title="rejectAndBlock(self, message: str = “”)"></a>rejectAndBlock(self, message: str = “”)</h3><p>拒绝对方加入群组的请求, 并不再接受来自对方加入群组的请求<br>message (str, optional): 附带给对方的消息. 默认为 “”.</p><h3 id="BotInvitedJoinGroupRequestEvent"><a href="#BotInvitedJoinGroupRequestEvent" class="headerlink" title="BotInvitedJoinGroupRequestEvent"></a>BotInvitedJoinGroupRequestEvent</h3><p>当该事件发生时, 应用实例所辖账号接受到来自某个账号的邀请加入某个群组的请求.</p><blockquote><p>该事件的处理需要你获取原始事件实例.</p></blockquote><ol><li>读取该事件的基础信息:<figure class="highlight plain"><figcaption><span>int # 邀请所辖账号加入群组的用户的 ID</span></figcaption><table><tr><td class="code"><pre><span class="line">event.groupId: Optional[int] # 对方邀请所辖账号加入的群组的 ID</span><br><span class="line">event.groupName: str # 对方邀请所辖账号加入的群组的名称</span><br><span class="line">event.nickname: str # 对方的昵称</span><br><span class="line">event.message: str # 对方发起请求时填写的描述</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">同意请求: &#96;await event.accept()&#96;, 具体查看该方法所附带的说明.</span><br><span class="line">拒绝请求: &#96;await event.reject()&#96;, 具体查看该方法所附带的说明.</span><br></pre></td></tr></table></figure></li></ol><p>requestId: int = Field(…, alias=“eventId”)<br>supplicant: int = Field(…, alias=“fromId”) # 即请求方 QQ<br>groupId: Optional[int] = Field(…, alias=“groupId”)<br>groupName: str = Field(…, alias=“groupName”)<br>nickname: str = Field(…, alias=“nick”)<br>message: str</p><h3 id="accept-message-str-“”-1"><a href="#accept-message-str-“”-1" class="headerlink" title="accept(message: str = “”)"></a>accept(message: str = “”)</h3><p>同意对方加入群组.<br>message (str, optional): 附带给对方的消息. 默认为 “”.</p><h3 id="reject-message-str-“”-2"><a href="#reject-message-str-“”-2" class="headerlink" title="reject(message: str = “”)"></a>reject(message: str = “”)</h3><p>拒绝对方加入群组.<br>message (str, optional): 附带给对方的消息. 默认为 “”.</p><h2 id="GraiaScheduler模块"><a href="#GraiaScheduler模块" class="headerlink" title="GraiaScheduler模块"></a>GraiaScheduler模块</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from graia.scheduler import (</span><br><span class="line">    timers,</span><br><span class="line">)</span><br><span class="line">import graia.scheduler as scheduler</span><br><span class="line">loop &#x3D; asyncio.get_event_loop()</span><br><span class="line">bcc &#x3D; Broadcast(loop&#x3D;loop)</span><br><span class="line">app &#x3D; GraiaMiraiApplication(</span><br><span class="line">    ...</span><br><span class="line">)</span><br><span class="line">sche &#x3D; scheduler.GraiaScheduler(loop&#x3D;loop,broadcast&#x3D;bcc)</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line">@sche.schedule(timers.every_custom_seconds(60))</span><br><span class="line">async def test():</span><br><span class="line">    print(&quot;60s一次&quot;)</span><br><span class="line">....</span><br></pre></td></tr></table></figure><blockquote><p>timers为一些常用的Scheduler时间设置</p></blockquote><p>对于<code>timers</code>中自造方法，使用<code>croniter</code>模块</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from datetime import datetime, timedelta</span><br><span class="line">from croniter import croniter</span><br><span class="line"></span><br><span class="line">def every(**kwargs):</span><br><span class="line">    while True:</span><br><span class="line">        yield datetime.now() + timedelta(**kwargs)</span><br><span class="line"></span><br><span class="line">def func(n):</span><br><span class="line">    &quot;&quot;&quot;每时间执行一次&quot;&quot;&quot;</span><br><span class="line">    yield from every(seconds&#x3D;n)</span><br><span class="line">    #yield from every(hours&#x3D;n)</span><br><span class="line">    #yield from every(minutes&#x3D;n)</span><br><span class="line"></span><br><span class="line">def crontabify(pattern: str):</span><br><span class="line">    &quot;&quot;&quot;使用类似 crontab 的方式生成计时器</span><br><span class="line"></span><br><span class="line">    Args:</span><br><span class="line">        pattern (str): crontab 的设置, 具体请合理使用搜索引擎</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    base_datetime &#x3D; datetime.now()</span><br><span class="line">    crontab_iter &#x3D; croniter(pattern, base_datetime)</span><br><span class="line">    while True:</span><br><span class="line">        yield crontab_iter.get_next(datetime)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> robot </tag>
            
            <tag> mirai </tag>
            
            <tag> Graia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小小总结</title>
      <link href="post/427de4be.html"/>
      <url>post/427de4be.html</url>
      
        <content type="html"><![CDATA[<h1 id="目前涉猎内容"><a href="#目前涉猎内容" class="headerlink" title="目前涉猎内容"></a>目前涉猎内容</h1><blockquote><p>简单记录一下自己目前所了解到的知识</p></blockquote><ol><li>hexo个人博客</li><li>cocoscreater开发的小游戏</li><li>前端三剑客入门</li><li>计算机二级证书</li><li>python做的几个桌面应用<ol><li>百度网盘链接提取器</li><li>文件批量处理工具</li></ol></li><li>学习通作业提醒、博客更新提醒</li><li>基于mirai和graia的qq机器人（集成包括作业提醒的功能）</li><li>微信小程序（起步）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github进不去解决方法</title>
      <link href="post/3345821.html"/>
      <url>post/3345821.html</url>
      
        <content type="html"><![CDATA[<h1 id="Github进不去解决方法"><a href="#Github进不去解决方法" class="headerlink" title="Github进不去解决方法"></a>Github进不去解决方法</h1><p>按以下方法修改hosts文件，注意hosts文件只有在管理员权限下才可以修改，hosts文件所在目录为:</p><p><code>C:\Windows\System32\drivers\etc\hosts</code>，注意修改右下角显示所有文件才可以看到。</p><p>用<a href="https://www.ipaddress.com/ip-lookup">此网站</a>查找<code>github.com</code>和<code>github.global.ssl.fastly.net</code>对应的ip，然后添加hosts文件以下内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">github.com的ip    github.com</span><br><span class="line"></span><br><span class="line">github.global.ssl.fastly.net的ip    github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure><p> 注意添加的ip要是你自己本机查到的，用网上其他人查到的可能不管用</p><p>————————————————</p><p>版权声明：本文为CSDN博主「w͏l͏j͏」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</p><p><a href="https://blog.csdn.net/qq_40624026/article/details/107704677">原文链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构学习笔记</title>
      <link href="post/31bf2518.html"/>
      <url>post/31bf2518.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构学习笔记"><a href="#数据结构学习笔记" class="headerlink" title="数据结构学习笔记"></a>数据结构学习笔记</h1><h2 id="认识数据"><a href="#认识数据" class="headerlink" title="认识数据"></a>认识数据</h2><ul><li>数据</li><li>数据对象（<em>同一类数据元素的集合</em>）</li><li>数据元素（<em>研究的最小的一个整体</em>）</li><li>数据项（<em>数据元素的最小构成单位</em>）</li></ul><h2 id="数据结构分类"><a href="#数据结构分类" class="headerlink" title="数据结构分类"></a>数据结构分类</h2><ol><li>数据结构主要研究其<strong>逻辑结构</strong>、<strong>物理结构</strong>、及其<strong>运算</strong>。</li><li>逻辑结构<ol><li>划分一<ul><li>线性结构（<em>有且仅有一个开始和一个终端结点，并且所有结点都最多只有一个直接前趋和一个直接后继。</em>）<ul><li>线性表</li><li>栈</li><li>队列</li><li>串</li></ul></li><li>非线性结构（<em>一个结点可能有多个直接前趋和直接后继</em>）<ul><li>树</li><li>图</li></ul></li></ul></li><li>划分二<ul><li>集合结构（<em>结构中的数据元素之间除了同属于一个集合的关系外，无任何其它关系。</em>）</li><li>线性结构（<em>结构中的数据元素之间存在着一对一的线性关系。</em>）</li><li>树形结构（<em>结构中的数据元素之间存在着一对多的层次关系。</em>）</li><li>图/网状结构 （<em>结构中的数据元素之间存在着多对多的任意关系。</em>）</li></ul></li></ol></li><li>存储结构<ol><li>顺序存储结构（<em>用一组连续的存储单鹂依次存储数据元素，数据元素之间的逻辑关系由元素的存储位置来表示。*</em>C语言中用数组来实现顺序存储结构***）</li><li>链式存储结构（<em>用一组任意的存储单元存储数据元素，数据元素之间的逻辑关系用指针来表示。*</em>C中用指针来实现链式存储结构***）</li><li><em>索引存储结构</em></li><li><em>散列存储结构</em></li></ol></li></ol><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水漫二十</title>
      <link href="post/42a48ee3.html"/>
      <url>post/42a48ee3.html</url>
      
        <content type="html"><![CDATA[<h2 id="在生日过后记录些"><a href="#在生日过后记录些" class="headerlink" title="在生日过后记录些"></a>在生日过后记录些</h2><p>前两天忽然想起来《毕业缺海》那篇文章，于是又翻出来看了看，其中大概有一成的东西读来仿佛不属于我了，我知道这个比例会越来越大，但相较于其他篇算性能不错了。一晃而过，毕业到现在，还有一个多月便两年了，刚好是我从一个环境到另一个环境所需要的适应的时间。再多一年就会成为心里永远的壁垒了。<br>农历生日过了十几年了，今年单独抽出来过了阳历生日，410总比317好听些，但是317实在太令人熟悉了，条件反射般的让我激灵。2021年的317，算是我主观意义上真正二十了，这一天极为平淡，上午两大节课，电工技术和机械原理都是再前半段集中注意力了，后面逐渐跑神，就再也没能回过来。下午互换性还算勉强抵抗困意，软件技术还是一如往常。这些事情不重要，所以只需要一笔带过。真正想要记录的有一些，例如：阿弥在我生日这天直播，我把qq飞车打上了星耀，买的拖鞋到了，会用浴花起沫洗头，会在vscode使用qq插件，我妈早上给我了500，奶奶在七点多就给我打了个电话（我到晚上才回过去），我爸发的红包里我和我妈抢到的竟然一模一样（这毕竟是我们母子二人的节日），作业基本搞定，两天后要出去玩一下，衣服洗好，床单更换，枕套更换，我对家的理解慢慢改善，家庭关系愈发融洽（我悟出来的解决方法就是像对待朋友一样对待他们）……<br>最近仿佛是在好起来。<br>仿佛我在阳历生日许下的心愿已经完成一二。<br>那这次生日许个什么愿呢，愿望是不能说出来的，但毕竟我写这些东西的时候，已经二十了，所以还是可以说的对吧？<br>所以，我真的希望，现阶段，转专业可以成功吧，之后便是投入计算机的努力（这是最好的结果，尽管可能性不是很大）。</p><p>再说点关于生日的吧，现在除了家人（大鹅也是家人）基本没人会跟我说生日快乐了。可能会有些失落，是不可控的那种失落。我想起来那个up过二十的时候录vlog了，还是很喜欢那样直抒胸臆的措辞和神态的，至少我做不出来，我还是很喜欢看别人快乐。<br>为什么说水漫二十呢，第一是有点上火喝了很多水；第二是水有时候很平静，就像这次的生日；第三是毕业缺海那篇，到现在我也没见到海；第四是过去稀里糊涂，二十算是上岸了吧。<br>太晚了，就不多写了。<br><strong>anyway，goonigh~</strong></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> birthday </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水漫二十</title>
      <link href="post/42a48ee3.html"/>
      <url>post/42a48ee3.html</url>
      
        <content type="html"><![CDATA[<h2 id="在生日过后记录些"><a href="#在生日过后记录些" class="headerlink" title="在生日过后记录些"></a>在生日过后记录些</h2><p>前两天忽然想起来《毕业缺海》那篇文章，于是又翻出来看了看，其中大概有一成的东西读来仿佛不属于我了，我知道这个比例会越来越大，但相较于其他篇算性能不错了。一晃而过，毕业到现在，还有一个多月便两年了，刚好是我从一个环境到另一个环境所需要的适应的时间。再多一年就会成为心里永远的壁垒了。<br>农历生日过了十几年了，今年单独抽出来过了阳历生日，410总比317好听些，但是317实在太令人熟悉了，条件反射般的让我激灵。2021年的317，算是我主观意义上真正二十了，这一天极为平淡，上午两大节课，电工技术和机械原理都是再前半段集中注意力了，后面逐渐跑神，就再也没能回过来。下午互换性还算勉强抵抗困意，软件技术还是一如往常。这些事情不重要，所以只需要一笔带过。真正想要记录的有一些，例如：阿弥在我生日这天直播，我把qq飞车打上了星耀，买的拖鞋到了，会用浴花起沫洗头，会在vscode使用qq插件，我妈早上给我了500，奶奶在七点多就给我打了个电话（我到晚上才回过去），我爸发的红包里我和我妈抢到的竟然一模一样（这毕竟是我们母子二人的节日），作业基本搞定，两天后要出去玩一下，衣服洗好，床单更换，枕套更换，我对家的理解慢慢改善，家庭关系愈发融洽（我悟出来的解决方法就是像对待朋友一样对待他们）……<br>最近仿佛是在好起来。<br>仿佛我在阳历生日许下的心愿已经完成一二。<br>那这次生日许个什么愿呢，愿望是不能说出来的，但毕竟我写这些东西的时候，已经二十了，所以还是可以说的对吧？<br>所以，我真的希望，现阶段，转专业可以成功吧，之后便是投入计算机的努力（这是最好的结果，尽管可能性不是很大）。</p><p>再说点关于生日的吧，现在除了家人（大鹅也是家人）基本没人会跟我说生日快乐了。可能会有些失落，是不可控的那种失落。我想起来那个up过二十的时候录vlog了，还是很喜欢那样直抒胸臆的措辞和神态的，至少我做不出来，我还是很喜欢看别人快乐。<br>为什么说水漫二十呢，第一是有点上火喝了很多水；第二是水有时候很平静，就像这次的生日；第三是毕业缺海那篇，到现在我也没见到海；第四是过去稀里糊涂，二十算是上岸了吧。<br>太晚了，就不多写了。<br><strong>anyway，goonigh~</strong></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> birthday </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node学习笔记</title>
      <link href="post/129264f1.html"/>
      <url>post/129264f1.html</url>
      
        <content type="html"><![CDATA[<h1 id="Node初步学习（后端入门）"><a href="#Node初步学习（后端入门）" class="headerlink" title="Node初步学习（后端入门）"></a>Node初步学习（后端入门）</h1><h2 id="基础入门"><a href="#基础入门" class="headerlink" title="基础入门"></a>基础入门</h2><ol><li><p>node安装</p></li><li><p>node运行js文件</p></li><li><p>寻找包的时候先去node_modules，如果没有，在上一级寻找node_modules，直到根目录</p></li><li><p>const math = require(math)</p></li><li><p>buffer</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> buf = Buffer.from(str);</span><br><span class="line"><span class="built_in">console</span>.log(buf.length) <span class="comment">//汉字算2（内存大小）</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length) <span class="comment">//汉字英文都算1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buf2 = Buffer.alloc(<span class="number">10</span>) <span class="comment">//创建10字节大小的Buffer</span></span><br><span class="line">buf2[<span class="number">0</span>] = <span class="number">88</span></span><br><span class="line"><span class="built_in">console</span>.log(bur2[<span class="number">0</span>].toString(<span class="number">2</span>)) <span class="comment">//输出二进制</span></span><br><span class="line"><span class="comment">//一单创建无法更改长度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buf3 = Buffer.allocUnsafe(<span class="number">10</span>) <span class="comment">//不清空内存，可能包含敏感数据</span></span><br></pre></td></tr></table></figure><h2 id="模块使用之fs"><a href="#模块使用之fs" class="headerlink" title="模块使用之fs"></a>模块使用之fs</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">// 写文件</span></span><br><span class="line">fs.writeFile(path,data,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 读文件</span></span><br><span class="line">fs.readFile(path,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="模块使用之http"><a href="#模块使用之http" class="headerlink" title="模块使用之http"></a>模块使用之http</h2><h3 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> server = http.createServer()</span><br><span class="line"><span class="comment">// 绑定事件</span></span><br><span class="line">server.on(<span class="string">&#x27;request&#x27;</span>,<span class="function"><span class="title">funtion</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 根据不同路径返回不同response</span></span><br><span class="line">    <span class="keyword">if</span> (url = <span class="string">&#x27;/index&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res.url)</span><br><span class="line">        <span class="comment">// 需要end结束，不太常用</span></span><br><span class="line">        res.write(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">        res.end</span><br><span class="line">        <span class="comment">// 一般不用write</span></span><br><span class="line">        res.end(<span class="string">&#x27;hhh&#x27;</span>) <span class="comment">// 只能是字符串，可以用json. stringify()</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 绑定端口号，启动服务器</span></span><br><span class="line">server.listen()</span><br></pre></td></tr></table></figure><h3 id="关于content-type"><a href="#关于content-type" class="headerlink" title="关于content-type"></a>关于content-type</h3><p><code>res.setHeader(&#39;Content-Type&#39;,&#39;text/plain;charset-utf-8&#39;)</code><br>具体类型可参照<a href="https://tool.oschina.net/commons">此处链接</a></p><h2 id="引用自己的模块"><a href="#引用自己的模块" class="headerlink" title="引用自己的模块"></a>引用自己的模块</h2><!-- 核心模块os不讲了 --><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自制模块，需要用到exports对象，设定不同的属性值达到跨文件引用变量目的</span></span><br><span class="line"><span class="built_in">exports</span>.name = <span class="string">&#x27;Doge&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用模块</span></span><br><span class="line"><span class="keyword">var</span> myModule = <span class="built_in">require</span>(<span class="string">&#x27;./a.js&#x27;</span>) <span class="comment">// 后缀可以省略</span></span><br><span class="line"><span class="built_in">console</span>.log(a.name) <span class="comment">// 输出Dog</span></span><br></pre></td></tr></table></figure><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><ol><li>JavaScript Style要求tab两个空格</li><li>一般结尾不加<code>;</code> 某些特殊情况要加（很不常见）</li></ol><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p><strong>art-template</strong><br><code>npm install art-template</code><br><strong>暂时跳过</strong></p><h2 id="渲染模式"><a href="#渲染模式" class="headerlink" title="渲染模式"></a>渲染模式</h2><ul><li>服务端渲染（服务端使用模板引擎）<br>SEO优化</li><li>客户端渲染<br>请求更快，但不利于SEO</li></ul><h2 id="静态资源案例"><a href="#静态资源案例" class="headerlink" title="静态资源案例"></a>静态资源案例</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">http <span class="comment">//简写方式，默认绑定request</span></span><br><span class="line">  .creatServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.end(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;runing&#x27;</span>) </span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notes </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的记忆只有一扇门</title>
      <link href="post/7e086bda.html"/>
      <url>post/7e086bda.html</url>
      
        <content type="html"><![CDATA[<p>我总是在打算干正事的时候发现很多有趣的事情，于是开始陷入对某些旧事的反思。我时常感到我有些笨，我故意起了个“<strong>我的记忆只有一扇门</strong>”这样的标题，看起来能让世俗更有气质。<br>不写东西几近半年，我已经很久没有用文学的头脑去思考问题了，随之而来的，我丢掉了很多独特的情感，包括对某种<strong>亲情的憎恶</strong>、<strong>爱情的崇尚</strong>、<strong>世俗的感叹</strong>。我看过去的我就像是秋天的虫子，四足渐僵。<br>我感到很遗憾，在忘记某本书是谁送的时候：<strong>梦里有人告诉我说，我看好你，你很棒的，我也不再多夸你了，你受到的称赞一定不会少。</strong>但是都很飘渺，就在身边绕来绕去，半径越来越大。这真令人遗憾，我在摆脱一种生活的同时，也摆脱掉了无数珍宝，甚至是我多年前唯一的宝藏。而我又在不断挖掘新的宝藏，这然我感到充实，可我每当停下来的时候却又很失落，我正处于上一代货币被淘汰，而无处兑换新的货币的时候。哪些财富离我而去，同时对我嗤之以鼻。<br>记忆只有一扇门，要门往里进，要么往外出，我发现我印在瓶子上的话就像是个咒，我深知多年以前的担忧，却毫无办法，我活成了另一个样子：<strong>过去和未来不兼得，我忘了回忆过去，也不会想往未来。</strong><br>但是当我停下来的时候，我又有一种感受，那就是我拥有了前前后后的所有。<br>我几分钟前打算联系一位好友，当我打了三行字后才盯着它的名字看了半天，我越看越陌生，直到我一点也认不出它。我大概明白，我们正在互相远离。我也不知道很多过去怎么和现下链接。<br>所以只好删除所有文字，<strong>再把记忆之门开到另一个方向。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 文学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> literature </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron学习笔记</title>
      <link href="post/5f7056f2.html"/>
      <url>post/5f7056f2.html</url>
      
        <content type="html"><![CDATA[<h1 id="记录一下学习electron的坑"><a href="#记录一下学习electron的坑" class="headerlink" title="记录一下学习electron的坑"></a>记录一下学习electron的坑</h1><h3 id="旧版笔记（建议看新版，往下翻）"><a href="#旧版笔记（建议看新版，往下翻）" class="headerlink" title="旧版笔记（建议看新版，往下翻）"></a>旧版笔记（建议看新版，往下翻）</h3><ol><li>require is not defined<br> 在12版本往后，同时设置<code>nodeIntegration: true</code>及<code>contextIsolation: false</code>解决该问题！</li><li>cannot read property ‘BrowserWindow’ of undefined<br> 在原有的基础上配置<code>enableRemoteModule:true</code></li><li>打包<br> <code>electron-packager . HelloWorld --win --out ../HelloWorldApp --arch=x64 --electron-ersion=1.0.0 --electron-version=12.0.4</code><br> 貌似下载下来一个包要放到哪里来着。。。</li></ol><h3 id="新版笔记"><a href="#新版笔记" class="headerlink" title="新版笔记"></a>新版笔记</h3><ol><li>认真阅读<a href="https://www.electronjs.org/docs">官方文档</a></li><li>打包失败的原因，除了author、description的报错之外，load file报错，查了好久都没发现问题，最后想到是不是因为路径中包含了中文导致无法加载文件的，md，一试，果然如此。</li><li>另外还有些报错我虽然没遇到，但是记录一下<ol><li>·、<code>npm install --save-dev @electron-forge/cli</code>和<code>npx electron-forge import</code>报错可能是你用了taobao源，建议用华为源<code>npm config set registry https://mirrors.huaweicloud.com/repository/npm/</code>，或者默认源<code>npm config set registry https://registry.npmjs.org</code></li><li>author和description一定要写</li><li>如果还有报错可以试试cnpm（我自己没试过）</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notes </tag>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP学习笔记</title>
      <link href="post/55d182ea.html"/>
      <url>post/55d182ea.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下是我最近学习php的笔记，主要记录自认为会遗忘的知识点</p></blockquote><h1 id="初识php"><a href="#初识php" class="headerlink" title="初识php"></a>初识php</h1><p>php是一种动态网站开发的脚本语言，有交互性，有数据的传递。</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>标准语法<code>&lt;?php php代码 ?&gt;</code></li><li>最后一句php语言可以不带结束符<code>;</code></li><li>最后可以不写<code>?&gt;</code>，这样就可以避免读取最后的空行</li><li>行注释<code>//</code>或<code>#</code></li><li>块注释<code>/* */</code></li></ol><h2 id="开始语法"><a href="#开始语法" class="headerlink" title="开始语法"></a>开始语法</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ol><li>声明<br><code>$var1;</code>或直接赋值<code>$var2 = 1;</code></li><li>删除变量<br><code>unset($var1);</code></li><li>命名规则<ul><li>以$开始</li><li>由字母、数字、下划线组成，但不能以数字开始</li><li>支持中文变量（很不建议你懂的）</li></ul></li><li>预定义变量（均为数组类型）<ul><li>$_GET: 获取所有表单以get方式提交的数据</li><li>$_POST: 提交的数据都会保存在此</li><li>$_REQUEST: GET和POST提交的都会保存</li><li>$GLOBALS: PHP钟所有的全局变量</li><li>$_SERVER: 服务器信息</li><li>$_SESSION: session会话数据</li><li>$_COOKIE: cookie会话数据</li><li>$_ENV: 环境信息</li><li>$_FILES: 用户上传的文件信息</li></ul></li><li>可变变量<br>如果一个变量保存的值刚好是另一个变量的名字，那么可以通过访问一个变量得到另一个变量的值。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a &#x3D; &#39;b&#39;</span><br><span class="line">$b &#x3D; &#39;bb&#39;</span><br><span class="line">echo $$A</span><br></pre></td></tr></table></figure></li><li>变量赋值<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$b &#x3D; 1</span><br><span class="line">$a &#x3D; $b</span><br><span class="line">$a &#x3D; 2 </span><br><span class="line">echo $a，$b</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$b &#x3D; 1</span><br><span class="line">$a &#x3D; &amp;$b &#x2F;&#x2F;引用赋值</span><br><span class="line">$a &#x3D; 2 </span><br><span class="line">echo $a，$b</span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3></li><li>定义常量<ul><li>函数定义 <code>define(&#39;PI&#39;,3.14)</code></li><li>const定义 <code>const PI = 3.14</code></li></ul></li><li>命名规则<ul><li>不需要$</li><li>名字由数字、字母、下划线组成但不能由数字开头</li><li>通常常量都是大写字母</li><li>命名规则其实比较松，比如其实可以用一些特殊字符，但标准下不这样使用 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">define(&#39;-_-&#39;,3); &#x2F;&#x2F;只能这样命名</span><br><span class="line">const -_-,3; &#x2F;&#x2F;这是错误的</span><br></pre></td></tr></table></figure></li><li>注意细节<ul><li>define和const定义的常量是有区别的：访问权限有区别</li><li>常量名不区分大小写，但是可以区分（？？？）</li></ul></li></ul></li><li>使用形式<br><code>echo PI;</code><ul><li>特殊常量的使用形式 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo -_-; &#x2F;&#x2F;X</span><br><span class="line">echo constant(&#39;-_-&#39;); &#x2F;&#x2F;√</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notes </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP学习笔记</title>
      <link href="post/55d182ea.html"/>
      <url>post/55d182ea.html</url>
      
        <content type="html"><![CDATA[<p>视频：<a href="https://www.bilibili.com/video/BV18x411H7qD?p=3">https://www.bilibili.com/video/BV18x411H7qD?p=3</a></p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>Web分为两类：静态网站和动态网站。流程:浏览器发起访问-&gt;DNS解析域名-&gt;服务器电脑-&gt;服务软件</p><h5 id="1、静态网站访问原理："><a href="#1、静态网站访问原理：" class="headerlink" title="1、静态网站访问原理："></a>1、静态网站访问原理：</h5><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200726195840264.png" alt="image-20200726195840264"></p><p><strong>必备工具</strong>：1、有两台电脑，PC（个人电脑），里面需要有浏览器；另外一台为服务器（需要有服务软件，假设为APACHE）,软件没有数据，故需在里面添加文件夹（准备访问的文件/网页）2、下面蓝线代表两个在同一个互联网下。</p><p><strong>访问流程</strong>：1、在浏览器中需输入URL（uniformed resource location，统一资源定位，即互联网的绝对路径）；2、第一部需要经过URL的解析（DNS，DNS内部包含本地DNS与网络DNS，，访问本地DNS无需通过网络，可提高效率。如果本地DNS无法转化IP，就需要网络DNS）。3、DNS将转换后的IP地址返回给浏览器。4、浏览器通过IP地址找到服务器。5、（虽然找到了服务器，但服务器里面资源很多，如何找自己想要的APACH？）这就需要利用端口，APACHE的端口为80。6、访问APACHE后，即可找到要访问的内容（IP地址后的/index.html也称为URI（uniformed resource identify，统一资源标志。目标机器上相对某个文件夹的相对路径，，，注/即为根目录，相对根目录所以其为相对路径））.7、Apache根据URI读取文件，读取文件的内容（注意只是读取）。8、Apache读取文件后，返回结果。9、浏览器看之前，需要经过浏览器解析，才可展示给用户。（所有人访问的时候，都访问的一样的index文件，若要改变显示的信息，就需要改变index，比较麻烦）</p><h5 id="2、动态网站访问"><a href="#2、动态网站访问" class="headerlink" title="2、动态网站访问"></a>2、动态网站访问</h5><p>区别：相对静态网站访问多了几个步骤：需要服务器端解析；需要数据库</p><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200726202647377.png" alt="image-20200726202647377"></p><p>在访问内容时，Apache不能识别PHP（只能识别html），需通过PHP引擎读取PHP代码。读取PHP代码之后需要进行解析，解析过程中可能需要数据库。PHP引擎通过数据库，找到内容以后再返回给Apache。（注意，PHP引擎得到的内容是PHP代码，但交给Apache的是HTML内容，，，因为浏览器只能解析html文件）</p><h5 id="3、C-S、B-S"><a href="#3、C-S、B-S" class="headerlink" title="3、C/S、B/S"></a>3、C/S、B/S</h5><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200726203705834.png" alt="image-20200726203705834" style="zoom: 67%;"><p><strong>软件设计结构</strong>：C/S、B/S</p><p>C/S：Client客户端/Server服务端，用户需要安装客户端产品才能访问服务器，且只能访问一种软件（自己的）</p><p>B/S：Browser浏览器/Server服务端，用户只需要安装浏览器，就可以访问所有的服务器（B/S架构服务）。</p><h5 id="4、MySQL访问流程"><a href="#4、MySQL访问流程" class="headerlink" title="4、MySQL访问流程"></a>4、MySQL访问流程</h5><p>Mysql是一款C/S架构的软件，需要通过客户端来访问服务端</p><p><strong>运行：</strong>1、启用MySQL客户端：mysqi.exe</p><p>2、mysql.exe通过cmd运行（安装配置环境变量后可这样运行）</p><p><strong>操作：</strong>由于qq服务器不在自己的电脑（即客户端与服务器可分离），故MySQL客户端访问服务器需进行寻找匹配：连接认证</p><p>a、连接：IP端口和确认。。。如果是本地，均可省略</p><p>命令：<em>-h 主机地址</em>      <em>-hlocalhost（或IP）</em>  localhost是主机名     <em>-P 端口 -P3306</em>（MySQL服务器的端口默认是3306）</p><p>b、认证：通过用户名和密码进入服务器。</p><p><em>-u 用户名     -uroot*（不可省略，匿名用户除外）      *-p 密码    -proot</em></p><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200726211039168.png" alt="image-20200726211039168"></p><p><strong>退出命令行：</strong>\q</p><p><strong>注意：</strong>通常连接认证的时候不建议密码明文，可在输入-p之后回车，系统会再次让输入密码，此时为密文。</p><h5 id="5、PHP连接MySQL数据库"><a href="#5、PHP连接MySQL数据库" class="headerlink" title="5、PHP连接MySQL数据库"></a>5、PHP连接MySQL数据库</h5><p>PHP本身不具备操作MySQL数据库的能力，需要借助MySQL扩展来实现。</p><p>1、PHP加载MySQL扩展：php.ini文件中。（不要用记事本打开）</p><p>2、PHP中所有扩展都是在ext的文件夹中，需要指定扩展所在路径：extension_dir。</p><p>3、php.ini已经被Apache重载，故需要重启才可。</p><h5 id="6、设定系统时区"><a href="#6、设定系统时区" class="headerlink" title="6、设定系统时区"></a>6、设定系统时区</h5><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200726214149458.png" alt="image-20200726214149458"></p><h5 id="7、配置虚拟主机"><a href="#7、配置虚拟主机" class="headerlink" title="7、配置虚拟主机"></a>7、配置虚拟主机</h5><p>一台服务器若只能部署一个网站，则非常浪费。故需通过其他渠道实现一台主机上部署多个网站。</p><p><strong>虚拟主机：</strong>Virtual machine，并不存在的主机，但可提供真实主机所实现的功能。虚拟主机是将计算机中不同的文件夹进行不同的命名，然后可实现让服务器（Apache）根据用户的需求从不同的文件夹（网站）中读取不同的内容。</p><p><strong>分类：</strong>在Apache中，可将虚拟主机划分为两类</p><p>1、基于IP的虚拟主机，一台电脑上有多个IP，每个IP对应一个网站。</p><p>原理：电脑默认只有一个IP，因为通常只有一个网卡，但有的电脑可配置多个网卡，每个网卡可绑定一个IP地址。</p><p>2、基于域名的虚拟主机：一台主机只有一个IP，但IP下课制作多个网站，但需给每个网站不同的名字。</p><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h5 id="初步语法"><a href="#初步语法" class="headerlink" title="初步语法"></a>初步语法</h5><p>PHP是一种运行在服务器端的脚本语言，可以嵌入到HTML中。（HTML是通过浏览器解析，PHP是通过PHP引擎解析,那么嵌入到里面以后如何区分什么时候通过什么来解析？）</p><p><strong>PHP代码标记</strong>：可通过多种标记来区分PHP脚本</p><p>ASP标记  &lt;% php 代码 %&gt;；    短标记  <? Php 代码 ?>    以上两种基本弃用，如使用，需在配置文件中开启</p><p>脚本标记 ：也不经常用</p><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200726215627740.png" alt="image-20200726215627740" style="zoom:67%;"><p>标准标记：</p><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200726215718187.png" alt="image-20200726215718187" style="zoom:67%;"><p><strong>PHP注释：</strong>行注释：//（双斜杠）或#          块注释：/*     */</p><p><strong>PHP语句分隔符：</strong></p><p>1、在PHP中，代码以行为单位，系统需要通过判断行的结束，通常都用；表示结束。</p><p>注注注：PHP中标记结束符?&gt;有自带语句结束符的效果，最后一行PHP代码可以没有语句结束符。</p><p>2、PHP中代码的书写并不是全嵌入到HTML中，而是单独存在，所以可以不用标记结束符?&gt;</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>1、变量是用来存储数据的；                2、变量是存在名字的；</p><p>3、变量是通过名字访问数据的；        4、变量的数据是可以改变的。</p><h5 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h5><p>1、定义：在系统中增加对应的变量名字（在内存中开发一块地）</p><p>2、赋值：将数据赋值给变量（在定义时直接初始化）</p><p>3、可通过变量名访问数据</p><p>4、变量可从内存中删除</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义时不需要关键字，但必须使用$符号</span></span><br><span class="line">$var1;</span><br><span class="line">$var2 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">echo</span> $var2;   <span class="comment">// 访问变量，通过变量名找到数据，并显示</span></span><br><span class="line">$var2 = <span class="number">2</span>;        <span class="comment">// 修改变量</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr/&gt;&#x27;</span>,$var2;    <span class="comment">// hr/“ 为下划线，分隔符</span></span><br><span class="line"><span class="keyword">unset</span>($var2); <span class="comment">// 删除变量，从内存中剔除 </span></span><br><span class="line"><span class="keyword">echo</span> $var2;   <span class="comment">// 此时会报错，因为不存在变量</span></span><br></pre></td></tr></table></figure><h5 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h5><p>1、变量名字必须以”$”开头；</p><p>2、变量名可由数字、字母、下划线命名，但必须以字母和下划线开头</p><p>3、允许中文变量；</p><h5 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h5><p>即提前定义的变量，由系统定义的变量，存储许多要用到的数据（预定义变量都是数组）。</p><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200727081937045.png" alt="image-20200727081937045"></p><h5 id="可变变量"><a href="#可变变量" class="headerlink" title="可变变量"></a>可变变量</h5><p>如果一个变量保存的值刚好是另外一个变量的名字，则可直接通过访问一个变量得到另外一个变量的值：但需在变量前多加一个$符号</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$a = <span class="string">&#x27;b&#x27;</span>;    <span class="comment">// a变量的内容正好是b变量的名称，故称a为可变变量</span></span><br><span class="line">$b = <span class="string">&#x27;bb&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> $$a;    <span class="comment">// 使用时需加一个$符号</span></span><br></pre></td></tr></table></figure><h5 id="变量传值"><a href="#变量传值" class="headerlink" title="变量传值"></a>变量传值</h5><p>将一个变量赋值给另一个变量：值传递、引用传递</p><p>值传递：将变量保存的值复制一份，并将该值给另外一个变量保存(两个变量无关系)</p><p>引用传递：将变量保存值所在的内存地址传递给另外一个变量，两个变量同指一块内存（名字不一样而已）。</p><h6 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h6><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200727083357714.png" alt="image-20200727083357714"></p><p>注：c++中，栈区由编译器自动释放，存储局部变量和函数参数；代码区存放函数的二进制代码，由操作系统管理；全局区存放全局变量、静态变量、常量；堆区由程序员分配释放。</p><h6 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h6><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 值传递</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 2.1 执行此行，在栈区开辟一块内存存储$a，在数据段中开辟一块内存保存值1。然后将1所在位置赋值给a变量</span></span><br><span class="line">$a = <span class="number">1</span>;   </span><br><span class="line"><span class="comment">// 2.2 栈区开辟存储$b；发现是赋值运算，故会取出$a的值，</span></span><br><span class="line"><span class="comment">// 并在数据段重新开辟一块内存并保存，且再把新开辟地址赋值给栈区的变量b</span></span><br><span class="line">$b = $a;   <span class="comment">// 值传递</span></span><br><span class="line"><span class="comment">// 2.3 执行该行</span></span><br><span class="line">$b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">echo</span> $a,$b;</span><br></pre></td></tr></table></figure><p>讲解运行步骤：</p><p>1、代码装载：从脚本文件中将代码读取出来，进行编译，将编译结果存放到代码段（二进制）。</p><p>2、代码执行：从代码段中一行一行执行代码。</p><p>3、脚本执行结束：系统会回收所有内存（栈区、代码区）：因为数据段与栈区有关系，回收栈后，数据段的内容无意义，相当于回收。</p><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200727085308489.png" alt="image-20200727085308489" style="zoom: 67%;"><h6 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h6><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用传递</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.1 执行此行，在栈区开辟一块内存存储$a，在数据段中开辟一块内存保存值1。然后将1所在位置赋值给a变量</span></span><br><span class="line">$a = <span class="number">1</span>;   </span><br><span class="line"><span class="comment">// 2.2 栈区开辟存储$b；发现是引用运算，故会取出$a的地址，并将该地址给栈区的变量b</span></span><br><span class="line">$b = $a;   <span class="comment">// 值传递</span></span><br><span class="line"><span class="comment">// 2.3 执行该行</span></span><br><span class="line">$b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">echo</span> $a,$b;</span><br></pre></td></tr></table></figure><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200727091111294.png" alt="image-20200727091111294"></p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量与变量一样，均是用来保存数据的。</p><h5 id="常量的基本概念"><a href="#常量的基本概念" class="headerlink" title="常量的基本概念"></a>常量的基本概念</h5><p>const/constant:是在程序运行中，不可改变的量（数据）；常量一旦定义，通常不可更改。</p><h5 id="常量定义的形式"><a href="#常量定义的形式" class="headerlink" title="常量定义的形式"></a>常量定义的形式</h5><h6 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h6><p>1、使用定义常量的函数：define（’常量名’,常量值）——类似于c++的 #define</p><p>2、const</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 使用函数定义常量</span></span><br><span class="line">define(<span class="string">&#x27;PI&#x27;</span>,<span class="number">3.1415</span>);   <span class="comment">// 注意此处与c++不同，#define 为预处理命令，宏定义，无需加；。。</span></span><br><span class="line"><span class="comment">// 使用const关键字定义</span></span><br><span class="line"><span class="keyword">const</span> PI1 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义特殊常量</span></span><br><span class="line">define(<span class="string">&#x27;^-^&#x27;</span>,<span class="string">&#x27;smile&#x27;</span>);</span><br><span class="line"><span class="comment">// const ^-^   // 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问常量</span></span><br><span class="line"><span class="keyword">echo</span> PI1;</span><br><span class="line"><span class="comment">// echo ^-^   // 报错</span></span><br><span class="line">constant(<span class="string">&#x27;^-^&#x27;</span>);  <span class="comment">// 特殊常量的访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统常量</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr/&gt;&#x27;</span>,PHP_VERSION,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,PHP_INI_SIZE,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,PHP_INI_MAX;   <span class="comment">// 有符号整形</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 魔术常量</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr/&gt;&#x27;</span>,<span class="keyword">__DIR__</span>,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,<span class="keyword">__FILE__</span>,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,<span class="keyword">__LINE__</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">__LINE__</span>;  <span class="comment">// 输出的行数会变</span></span><br></pre></td></tr></table></figure><h6 id="常量命名规则："><a href="#常量命名规则：" class="headerlink" title="常量命名规则："></a>常量命名规则：</h6><p>1、常量不需要使用”$”符号，一旦使用被认为是变量</p><p>2、变量名可由数字、字母、下划线命名，但必须以字母和下划线开头（const定义）</p><p>3、常量的名字通常是以大写字母为主（与变量以示区别）</p><p>4、变量命名的规则比变量要松散，可以使用一些特殊字符（define函数）</p><p>5、变量通常不区分大小写，但可以区分（define函数的第三个参数）</p><h5 id="系统常量"><a href="#系统常量" class="headerlink" title="系统常量"></a>系统常量</h5><p>魔术常量：由双下划线+常量名+双下划线组成，其值会随着环境变化而变化，用户无法改变。</p><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200727094945925.png" alt="image-20200727094945925"></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型：data type，在PHP中指的是数据本身的类型，而不是变量的类型。PHP是一种弱类型语言，变量本身没有数据类型。</p><h5 id="PHP八大数据类型"><a href="#PHP八大数据类型" class="headerlink" title="PHP八大数据类型"></a>PHP八大数据类型</h5><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200727095933827.png" alt="image-20200727095933827"> </p><h5 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h5><p>很多情况需要指定数据类型，需要将外部数据类型（当前PHP获得的数据）转换成目标数据类型。</p><h6 id="两种转化方式："><a href="#两种转化方式：" class="headerlink" title="两种转化方式："></a>两种转化方式：</h6><p>1、自动转化：系统根据自己的需求判断，自己转化（用的较多、但效率较低）。</p><p>2、强制转换（手动）：在变量之前增加一个()，并在括号里面写上对于的类型，其中NULL特殊，需用unset。</p><h6 id="转换说明："><a href="#转换说明：" class="headerlink" title="转换说明："></a>转换说明：</h6><p>1、以字母开头的字符串，永远为0；</p><p>2、以数字开头的字符串，取到碰到字符串为止。（不会同时包含两个小数点）</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 数据类型</span></span><br><span class="line"><span class="comment">// 创建数据</span></span><br><span class="line">$a = <span class="string">&#x27;abcd1.1.1&#x27;</span>;</span><br><span class="line">$b = <span class="string">&#x27;1.1.1abc&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动转换。算术运算，系统先转化为数值类型，然后运算</span></span><br><span class="line"><span class="keyword">echo</span> $a+$b;  <span class="comment">//   结果为1.1（0+1.1）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制转换</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>,(<span class="keyword">float</span>)$a,(<span class="keyword">float</span>)$b;  <span class="comment">// 01.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型判断</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr/&gt;&#x27;</span>;</span><br><span class="line">var_dump(is_int($a));         <span class="comment">// bool(FALSE)</span></span><br><span class="line">var_dump(is_string($a));      <span class="comment">// bool(TRUE)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数据类型</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr/&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> gettype($a);    <span class="comment">// string（虽然前面强制转换了，但并未改变本身）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置类型</span></span><br><span class="line"><span class="comment">// var_dump 输出展示展示代码内容，结构与类型。该函数作可以窥探所有内容的类型，以及内部信息</span></span><br><span class="line">var_dump(settype($b,<span class="string">&#x27;int&#x27;</span>));    <span class="comment">// 先将字符串转换为int型，转换成功返回true，var_dump判断是否为bool型，故显示                                 bool（true）</span></span><br><span class="line"><span class="keyword">echo</span> gettype($b),$b;     <span class="comment">// interger1</span></span><br></pre></td></tr></table></figure><h5 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">十进制转换二进制-----&gt;除以2</span></span><br><span class="line"><span class="comment">10  1010  注：不管结果ruhr，均需补足32位：00000000 00000000 00000000 00001010</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// php中提供了很多函数进行转换：</span></span><br><span class="line"><span class="comment">// Decbin():十进制转二进制</span></span><br><span class="line">var_dump(decbin(<span class="number">107</span>));     <span class="comment">// 结果：string(7) &quot;1101011&quot;</span></span><br><span class="line"><span class="comment">// 同理，还有Decoct():十进制转八进制</span></span><br><span class="line"><span class="comment">// Dechex():十进制转十六进制</span></span><br><span class="line"><span class="comment">// Bindec():二进制转十进制</span></span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h5 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h5><p>问：为什么浮点数和整型均占用四个字节，为什么比整型表示的范围大？</p><p>整型数据的32位均通过*2转化为十进制。而浮点型中，前八位的后七位为指数，所以表示的范围要大。</p><p>另，实际使用时，尽量不用浮点型数字做精确判断，且计算机中凡是小数基本上均不准确。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浮点数的定义</span></span><br><span class="line">$f1 = <span class="number">1.23</span>;</span><br><span class="line">$f2 = <span class="number">1.23e10</span>;</span><br><span class="line">$f3 = PHP_INT_MAX+<span class="number">1</span>;   <span class="comment">// 若整型超过自身存储的大小之后会自动改为浮点型存储</span></span><br><span class="line"></span><br><span class="line">var_dump($f1,$f2,$f3);</span><br><span class="line"><span class="comment">// 结果：float(1.23)float(1.2300000000) float(214748348)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浮点数判断</span></span><br><span class="line">$f4 = <span class="number">0.7</span>;</span><br><span class="line">$f5 = <span class="number">2.1</span>;</span><br><span class="line">$f6 = $f5/<span class="number">3</span>;</span><br><span class="line">var_dump($f6 == $f4);      <span class="comment">// 结果：bool(false),,因此其不能进行精确判断</span></span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 运算符：是一种将数据进行运算的特殊符号，在PHP中一共有十多种运算符。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 算术运算符   +-*/%</span></span><br><span class="line"><span class="comment">// 比较运算符   &gt; &gt;= &lt; &lt;= ==(数据大小相同即可，无需考虑数据数据类型) != ===(全等于，大小及数据类型均等) !==</span></span><br><span class="line">$a = <span class="string">&#x27;123&#x27;</span>;  <span class="comment">// 字符串</span></span><br><span class="line">$b = <span class="number">123</span>;  <span class="comment">// 整型</span></span><br><span class="line">var_dump($a == $b);   <span class="comment">// 结果： bool(true)</span></span><br><span class="line"></span><br><span class="line">var_dump($a === $b);   <span class="comment">// 结果： bool(false)   不全等于</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 逻辑运算符 &amp;&amp;(左边条件与右边条件同时成立) ||(有一个满足即可) !(取反)</span></span><br><span class="line">$c = <span class="string">&#x27;weekend&#x27;</span>;</span><br><span class="line">$d = <span class="string">&#x27;goods&#x27;</span>;</span><br><span class="line"></span><br><span class="line">var_dump($c == <span class="string">&#x27;weekend&#x27;</span> &amp;&amp; $d == <span class="string">&#x27;good&#x27;</span>);   <span class="comment">// bool(false)</span></span><br><span class="line">var_dump($c == <span class="string">&#x27;weekend&#x27;</span> &amp;&amp; $d == <span class="string">&#x27;good&#x27;</span>);   <span class="comment">// bool(true)</span></span><br><span class="line">var_dump(!($c == good);   <span class="comment">// bool(true)</span></span><br><span class="line">         </span><br><span class="line"><span class="comment">// 连接运算符  .(将字符串连接一起)   .=(将左边内容与右边内容连接起来并重新赋值)</span></span><br><span class="line">$e = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">$f = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">echo</span> $e . $f;   <span class="comment">// hello 123（注意，此处有强制类型转换）</span></span><br><span class="line"></span><br><span class="line">$e .= $e;      </span><br><span class="line"><span class="keyword">echo</span> $e;       <span class="comment">// hello 123</span></span><br><span class="line">     </span><br><span class="line"><span class="comment">// 错误抑制符：@(可能出错的表达式)，在PHP中有一些错误可以提前预知，但又不想报错，这就需要错误抑制符。</span></span><br><span class="line">$g = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">echo</span> $f % $g;    <span class="comment">// 此时会报错</span></span><br><span class="line"><span class="keyword">echo</span> @($f % $g); <span class="comment">// 不会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 三目运算符(问号表达式) 表达式1 ？ 表达式2：表达式3</span></span><br><span class="line"><span class="keyword">echo</span> $g ==<span class="number">0</span>?<span class="number">1</span>:<span class="number">2</span>;</span><br><span class="line">   </span><br><span class="line"><span class="comment">// 自操作运算符 ++ --(前置或后置如果只有自操作，则效果一致)</span></span><br><span class="line">$i = $g++;    <span class="comment">// $g = 1;  $i = 0</span></span><br><span class="line">$i = ++$g;    <span class="comment">// $g = 2;  $i = 2;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 位运算符</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">计算机码：计算机在实际存储数据时，采用的编码规则(二进制规则)</span></span><br><span class="line"><span class="comment">计算机码：原码、反码和补码。数值本身最左边一位用来充当符号位：正数为0，负数为1；</span></span><br><span class="line"><span class="comment">原码:数据本身从十进制转换成二进制得到的结果</span></span><br><span class="line"><span class="comment">     正数，左符号位为0         负数：右符号位为1</span></span><br><span class="line"><span class="comment">反码：针对负数，符号位不变，其他位取反。</span></span><br><span class="line"><span class="comment">补码：针对负数，反码+1.（系统中存的为补码）</span></span><br><span class="line"><span class="comment">以0为例，若是原码，则+0 = 00000000  -0 = 10000000；二者不一样</span></span><br><span class="line"><span class="comment">         -0 反码 11111111   -0 补码 00000000   与+0一样（正数原码、补码、反码为其本身）。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$j = <span class="number">5</span>;      <span class="comment">// 原码：00000101</span></span><br><span class="line">$k = <span class="number">-5</span>;     <span class="comment">// 原码：10000101  反码：11111010  补码：11111011</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 位运算：取出计算机中最小的单位（bit）进行运算  &amp; | ~(按位取反) ^(按位异或) &gt;&gt;(右移) &lt;&lt;(左移)</span></span><br><span class="line"><span class="comment">// 注：1、系统进行位运算时，均是利用补码进行运算的     2、运算结束之后，必须转换为原码进行显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按位取与         </span></span><br><span class="line">var_dump($j &amp; $k);    <span class="comment">// int(1)</span></span><br><span class="line"><span class="comment">/*    5  00000101</span></span><br><span class="line"><span class="comment">     -5  11111011</span></span><br><span class="line"><span class="comment">      &amp;  00000001  判断：符号位为0，正数，所存即为原码，无需操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按位取反</span></span><br><span class="line">var_dump(~ $k);       <span class="comment">// int(4)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     -5  11111011</span></span><br><span class="line"><span class="comment">      ~  00000100  正数即为原码，</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">         </span><br><span class="line"><span class="comment">// 按位左移</span></span><br><span class="line">var_dump($k &gt;&gt; <span class="number">1</span>)   <span class="comment">// int(-3)</span></span><br><span class="line">var_dump($k &gt;&gt; <span class="number">2</span>)   <span class="comment">// int(-2)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     -5  11111011</span></span><br><span class="line"><span class="comment">    &gt;&gt;2  11111110(右移补符号位)</span></span><br><span class="line"><span class="comment">   反码  11111101(补码-1)</span></span><br><span class="line"><span class="comment">   原码  10000010(除符号位均取反)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">         </span><br><span class="line"><span class="comment">// 运算符优先级</span></span><br></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p><strong>分类</strong>：顺序结构、分支结构（if分支与switch分支）、循环结构</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分支结构——if分支</span></span><br><span class="line">$day = <span class="string">&#x27;星期天&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>($day == <span class="string">&#x27;星期1&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;go out&#x27;</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;work&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch 分支：同一条件下，有多个值，且每个值对应一种操作</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">switch(条件表达式)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    case 值1:</span></span><br><span class="line"><span class="comment">        代码;</span></span><br><span class="line"><span class="comment">        break;</span></span><br><span class="line"><span class="comment">    case 值1:</span></span><br><span class="line"><span class="comment">        代码;</span></span><br><span class="line"><span class="comment">        break;</span></span><br><span class="line"><span class="comment">    default:</span></span><br><span class="line"><span class="comment">        代码;</span></span><br><span class="line"><span class="comment">        break;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环结构 for循环、while循环、Do-While循环、foreach循环（针对数组）</span></span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> $i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// while  Do-while循环</span></span><br><span class="line"><span class="keyword">while</span>($i &lt;= <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> $i++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环控制</span></span><br><span class="line"><span class="comment">// 1、中断控制：重新开始从头循环 continue(需求，输出1-100的5的倍数)  </span></span><br><span class="line">$i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>($i &lt;= <span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>($i % <span class="number">5</span> != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        $i++ ;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> $i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  <img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200727163058009.png" alt="image-20200727163058009"></p><h5 id="流程控制替代语法"><a href="#流程控制替代语法" class="headerlink" title="流程控制替代语法"></a>流程控制替代语法</h5><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200727163350639.png" alt="image-20200727163350639"></p><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200727164308351.png" alt="image-20200727164308351" style="zoom:67%;"><p>上述书写中(tr 代表表格的一行，td代表表格的一列)，大括号很容易丢失，所以PHP有了一种替代机制，让其可以不用书写大括号。</p><p><em>for(;;){   =&gt; :      }=&gt;endfor;</em></p><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200727164715418.png" alt="image-20200727164715418" style="zoom:67%;"><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200727164840718.png" alt="image-20200727164840718"></p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>文件包含：在一个PHP脚本中，将另外一个文件包含进来，合作完成一件事情。</p><h5 id="文件包含作用"><a href="#文件包含作用" class="headerlink" title="文件包含作用"></a>文件包含作用</h5><p>1、要么使用被包含文件中的内容，实现代码共享，向上包含（索要）</p><p>2、要么自己的东西可被使用，向下包含（给予）：自己有某个东西需要别的脚本显示。</p><p>最大的作用是分工协作，共同完成一件事情。</p><h5 id="文件包含四种形式"><a href="#文件包含四种形式" class="headerlink" title="文件包含四种形式"></a>文件包含四种形式</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含文件：使用数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含文件：include  include_once(系统自动判断文件包含当中，是否已被包含过)  require  require_once</span></span><br><span class="line"><span class="comment">// 向上包含：使用已准备好的文件</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;include1.php&#x27;</span>;  <span class="comment">// 包含当前文件所在文件夹下的include1.php文件</span></span><br><span class="line"><span class="keyword">echo</span> $a,PI;              <span class="comment">// include1.php中已定义这个变量和常量，故可直接使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向下包含：类似于调用了子函数</span></span><br><span class="line">$a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&#x27;display.php&#x27;</span>;   <span class="comment">// 该文件中可输出a和PI</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="文件加载原理"><a href="#文件加载原理" class="headerlink" title="文件加载原理"></a>文件加载原理</h5><h6 id="PHP代码执行流程："><a href="#PHP代码执行流程：" class="headerlink" title="PHP代码执行流程："></a>PHP代码执行流程：</h6><p>1、读取代码文件（相当于PHP程序）；</p><p>2、编译：将PHP代码转化成字节码（二进制），生成opcode（php可解析的代码）；</p><p>3、针对引擎来解析opcode，按照细节码进行逻辑运算；</p><p>4    转化成对应的html代码。</p><p>1、在文件加载（include 或 require）时，系统会自动嵌入对应的include位置</p><p>2、在PHP中，被包含的文件是单独编译的。。</p><p>若编译过程中报错，则会失败，不执行。但若是被包含文件有错误，则系统执行到include语句时，才回报错。</p><h6 id="include-和-require区别"><a href="#include-和-require区别" class="headerlink" title="include 和 require区别"></a>include 和 require区别</h6><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200727185824220.png" alt="image-20200727185824220" style="zoom:67%;"><p>include会执行多次，导致报错（重复定义变量）。。而include_once不会出现这种情况。</p><p>require和include区别在于：若未包含文件，则报错形式不一样。（require包含错误文件，则include后不再执行；include未包含文件，会警告，但是仍会执行后面的。）</p><h5 id="文件加载路径"><a href="#文件加载路径" class="headerlink" title="文件加载路径"></a>文件加载路径</h5><p>文件加载时需指定文件路径，才能保证PHP正确找到对应的文件。</p><p>1、绝对路径（从磁盘根目录开始—本地绝对路径；从网站根目录开始—网络绝对路径–相对于/的路径，，/相当于绝对路径）</p><p>2、相对路径：从当前文件所在目录开始的路径。。.或者./表示当前文件夹。。../上级目录</p><p>绝对路径和相对路径加载区别：绝对路径相对效率偏低（因为要从跟目录开始找，但相对安全，路径固定）</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 文件加载路径</span></span><br><span class="line"><span class="comment">// 相对路径加载(只供演示，不考虑多次加载)</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;include1.php&#x27;</span>;  <span class="comment">// 不写路径，默认在当前文件夹下</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;./include1.php&#x27;</span>; <span class="comment">// 另一种形式</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../hostdoc/include1.php&#x27;</span>;  <span class="comment">// ../代表当前文件夹的上一个文件夹，hostdoc为当前文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绝对路径</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;E:/server/apache/htdocs/include1.php&#x27;</span>;   <span class="comment">// 绝对路径，不会出错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="文件嵌套包含"><a href="#文件嵌套包含" class="headerlink" title="文件嵌套包含"></a>文件嵌套包含</h5><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200727194419362.png" alt="image-20200727194419362" style="zoom:67%;"><p><strong>嵌套包含容易出现相对路径出错的问题。</strong></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>将实现某一功能的代码块封装到一个结构中，从而实现代码的复用。</p><h5 id="函数定义语法（与c的差别在于可在任意位置调用子函数）"><a href="#函数定义语法（与c的差别在于可在任意位置调用子函数）" class="headerlink" title="函数定义语法（与c的差别在于可在任意位置调用子函数）"></a>函数定义语法（与c的差别在于可在任意位置调用子函数）</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function 函数名(参数)&#123;</span></span><br><span class="line"><span class="comment">函数体</span></span><br><span class="line"><span class="comment">返回值</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 函数的定义</span></span><br><span class="line"><span class="comment">// 1、函数不会自动运行，必须调用才可</span></span><br><span class="line"><span class="comment">// 2、代码执行阶段，遇到函数名字才回调用，不是在编译阶段</span></span><br><span class="line"><span class="comment">// 3、函数调用可在声明之前</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span>;   <span class="comment">// 没有返回值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的调用（）</span></span><br><span class="line">diaplay();   <span class="comment">// 若函数有参数，则需加参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数命名规范：字母数字下划线、但不能数字开头。</span></span><br><span class="line"><span class="comment">// 一半遵循以下规则：1、驼峰法：除第一个单词外，其余首字母大写。showParent()   2、下划线方式</span></span><br><span class="line"><span class="comment">// 在一个脚本函数周期中，不允许出现同名函数。</span></span><br></pre></td></tr></table></figure><h5 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义函数:定义函数时使用的参数，形参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">$arg1,$arg2</span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> arg1+arg2;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数时使用的参数，实参</span></span><br><span class="line">$num1 = <span class="number">10</span>;</span><br><span class="line">add($num1,<span class="number">20</span>);  <span class="comment">// 1、实参个数可以多于形参（不能少于），只是函数不用而已  2、理论上实参个数没有限制</span></span><br><span class="line"><span class="comment">/* 调用过程：1、系统调用add函数时，会去内存中找是否有add函数</span></span><br><span class="line"><span class="comment">             2、系统在栈区开辟内存空间运行函数add</span></span><br><span class="line"><span class="comment">             3、系统查看函数本身是否有形参</span></span><br><span class="line"><span class="comment">             4、系统判断调用函数时是否有实参</span></span><br><span class="line"><span class="comment">             5、系统默认会将实参$num、20分别赋值给形参</span></span><br><span class="line"><span class="comment">             6、执行函数体、运行</span></span><br><span class="line"><span class="comment">             7、返回值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认值：形参的默认值。。若调用时没有提供实参，则函数使用默认值执行函数</span></span><br><span class="line"><span class="comment">// 注：1、默认值定义时，应放在后边，不能左边有默认值，而右边没有</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moren</span>(<span class="params">$num1 = <span class="number">0</span>,$num2 =<span class="number">0</span></span>)  // 当前的<span class="title">num1</span>是形参，编译时不执行。且如果外部有同名子变量，也不会冲突</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> $num1-$num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上述实参形参的传递相当于值传递，函数内部改变变量的内容，不会影响外面变量的内容</span></span><br><span class="line"><span class="comment">// 引用传递：可在函数内部改变外部变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yinyong</span>(<span class="params">$a,&amp;$b</span>)   // 函数要的是地址，故将外部变量<span class="title">b</span>存储的地址取出赋值给了形参</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $b = $b - <span class="number">1</span>;</span><br><span class="line">    $a = $a <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="number">10</span>;</span><br><span class="line">$b = <span class="number">5</span>;</span><br><span class="line">yinyong($a,$b);    <span class="comment">// 注意：此处不取地址..另，引用传递不可传入数字（常量中存储的不是地址）</span></span><br></pre></td></tr></table></figure><h5 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h5><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200727204330212.png" alt="image-20200727204330212" style="zoom:67%;"><h5 id="作用域（与c差别在于全局变量不能直接被函数调用）"><a href="#作用域（与c差别在于全局变量不能直接被函数调用）" class="headerlink" title="作用域（与c差别在于全局变量不能直接被函数调用）"></a>作用域（与c差别在于全局变量不能直接被函数调用）</h5><p>作用域：通常是指变量可以被访问的区域。</p><p>在PHP中，作用域严格分为两种，以及内部定义的一种</p><p>1、全局变量：所属全局空间，在PHP中只允许在全局空间使用，函数内部不可用。（c++可使用）</p><p>2、局部变量：函数内部的变量</p><p>3、超全局变量：预定义变量（系统定义的）,没有访问限制，能够帮助局部去访问全局变量。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> php</span><br><span class="line"></span><br><span class="line"><span class="comment">// php中作用域</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认的代码空间：全局空间</span></span><br><span class="line">$global = <span class="string">&#x27;global area&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部变量（函数内部定义）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $inner = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 访问全局变量</span></span><br><span class="line">    <span class="keyword">echo</span> $global;   <span class="comment">// 函数内部不能访问全局变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 转化为超全局变量，使得函数内部可以访问</span></span><br><span class="line">    <span class="keyword">echo</span> $GLOBALS[<span class="string">&#x27;global&#x27;</span>];  <span class="comment">// 这样可访问</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">display();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>想在函数内部访问全局变量，可通过$GLOBALS，也可使用引用传值。</strong></p><p>另，还有一种方式既可从全局访问局部、也可从局部访问全局。即，<strong>global关键字</strong>：</p><p>1、若使用global定义的关键字在外部存在，那么系统在函数内部定义的变量直接指向外部变量所指向的内存空间（同一个变量）。</p><p>2、若其定义的变量在外部不存在，系统会自动在全局空间定义一个与局部变量同名的全局变量。</p><p>本质为：在函数的内部和外部，对一个同名变量使用同一块内存地址保存数据。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> php</span><br><span class="line"></span><br><span class="line"><span class="comment">// global关键字的应用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认的代码空间：全局空间</span></span><br><span class="line">$global = <span class="string">&#x27;global area&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部变量（函数内部定义）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 访问全局变量</span></span><br><span class="line">    <span class="keyword">echo</span> $global;   <span class="comment">// 函数内部不能访问全局变量</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment">// 1、全局变量存在</span></span><br><span class="line">    <span class="keyword">global</span> $global;</span><br><span class="line">    <span class="keyword">echo</span> $global;    <span class="comment">// 此时可以调用全局变量</span></span><br><span class="line">   <span class="comment">//2、全局变量不存在</span></span><br><span class="line">    <span class="keyword">global</span> $local = <span class="string">&#x27;inner&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $local;   <span class="comment">// 访问局部变量</span></span><br><span class="line">display();</span><br></pre></td></tr></table></figure><h5 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h5><p>静态变量：static是在函数内部定义的变量，使用static关键字修饰，用来实现夸函数共享数据的变量（注：跨函数是指同个函数多次调用）。</p><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200727213251776.png" alt="image-20200727213251776" style="zoom:67%;"><p><strong>静态变量原理：系统在进行编译的时候，就已经对static这一行进行了初始化：即为静态变量赋值。。。而在执行时，会跳过初始化这一行。</strong></p><h5 id="可变函数（未写全）"><a href="#可变函数（未写全）" class="headerlink" title="可变函数（未写全）"></a>可变函数（未写全）</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可变函数:当前有一个变量所保存的值，刚好是一个函数的名字，那么就可以使用$变量()来充当函数名使用。</span></span><br><span class="line"><span class="comment">// 可变函数在使用系统函数时，需用户在外部定义一个自定义函数，但是需要传入到系统函数内部使用。</span></span><br><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">__FUNCTION__</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义变量</span></span><br><span class="line">$func = <span class="string">&#x27;display&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可变函数</span></span><br><span class="line">$func();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名函数：没有名字的函数，</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 定义基本匿名函数</span></span><br><span class="line"><span class="comment">// function()  // 没有办法运行，故须加一个变量名字</span></span><br><span class="line"><span class="comment">// 变量保存匿名函数，本质得到的是一个对象（closure类中的对象）</span></span><br><span class="line">$func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">&#125;;         <span class="comment">// 因为相当于变量的赋值，所以需加一个分号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用匿名函数</span></span><br><span class="line">$func();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">闭包：要执行的代码块（由于自由变量被包含在代码块中，这些自由变量以及它们引用的对象没有被释放）和为自由变量提供绑定地计算环境。（简单理解就是说，函数内部的一些局部变量即要执行的代码块，在执行完毕后没有被释放）。没有被释放的原因是：在函数内部，还有对应的函数被引用，通常为匿名函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $name == <span class="keyword">__FUNCTION__</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义匿名函数</span></span><br><span class="line">    <span class="comment">// $innerfunction = function()// $name 相对于匿名函数来说是外部变量，故不能直接用</span></span><br><span class="line">    <span class="comment">// 1、使用匿名函数    2、使用关键字use</span></span><br><span class="line">    $innerfunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="title">use</span>(<span class="params">$name</span>)  // <span class="title">use</span>就是将局部变量 保留给内部使用（形成了闭包，使<span class="title">display</span>运行完                                                毕后，不会被释放）</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> $name;     </span><br><span class="line">    &#125;</span><br><span class="line">    $innerfunction();  </span><br><span class="line">    <span class="comment">// 3、 匿名函数返回给外部使用</span></span><br><span class="line">    <span class="keyword">return</span>  $innerfunction();    <span class="comment">// 为验证局部变量未被释放而返回</span></span><br><span class="line">&#125;;</span><br><span class="line">$closure = display();   <span class="comment">// 理论上此处局部变量被释放</span></span><br><span class="line"></span><br><span class="line">$closure();   <span class="comment">// 结果却输出了name，说明上一行并未释放局部变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如何证明局部变量在函数使用完之后没有被释放？（三步法）</span></span><br><span class="line"><span class="comment">// 1、使用内部匿名函数</span></span><br><span class="line"><span class="comment">// 2、匿名函数使用句变量：use</span></span><br><span class="line"><span class="comment">// 3、匿名函数返回给外部使用。</span></span><br></pre></td></tr></table></figure><h5 id="伪类型"><a href="#伪类型" class="headerlink" title="伪类型"></a>伪类型</h5><p>PHP中不存在的类型，只是为了方便查看操作手册。（可当作模板，只是为了泛化数据类型）</p><p>伪类型有两类:mixed混合的，只要是php中的类型即可；numbe数值的</p><h5 id="常用系统函数"><a href="#常用系统函数" class="headerlink" title="常用系统函数"></a>常用系统函数</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出相关</span></span><br><span class="line"><span class="comment">// print():类似于echo输出提供的内容，本质是一种结构（非函数），返回值为1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">print</span>(<span class="string">&#x27;hello lewao&#x27;</span>);   <span class="comment">// 输出hello world</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;hello lewao&#x27;</span>;         <span class="comment">// 输出1hello world（1为上一行echo的输出）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// print_r()：类似于var_dump，但不会输出数据类型，只会输出值，数组打印使用较多。</span></span><br><span class="line">print_r(<span class="string">&#x27;hello&#x27;</span>);            <span class="comment">// 输出为hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//时间函数</span></span><br><span class="line"><span class="keyword">echo</span> data(<span class="string">&#x27;Y 年 m 月 d 日&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> time();</span><br><span class="line"><span class="keyword">echo</span> microtime();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数学函数：  max()、rand():指定范围里的随机整数、round()：四舍五入、ceil():向上取整、floor()向下取整、pow(2,8):2的8次方、abs()：绝对值、sqrt()：求平方根</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有关函数的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">$a,$b</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取指定参数</span></span><br><span class="line">    var_dump(func_get_arg(<span class="number">1</span>));    <span class="comment">// 得到了第二个参数，结果为：string(1) &#x27;2&#x27;;</span></span><br><span class="line">    <span class="comment">// 获取所有参数:对应实参的个数</span></span><br><span class="line">    var_dump(func_get_args());    <span class="comment">// array(4)&#123;   &#125;</span></span><br><span class="line">    <span class="comment">// 获取参数数量：对应实参的个数</span></span><br><span class="line">    var_dump(func_num_args());    <span class="comment">// 参数数量 int(4)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用(如果存在的话，执行test)</span></span><br><span class="line">function_exist(<span class="string">&#x27;test&#x27;</span>) &amp;&amp; test(<span class="number">1</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>错误处理：指系统或用户在对某些代码进行执行的时候，发现有错误，就会通过错误处理的形式告诉程序员。</p><h5 id="错误分类"><a href="#错误分类" class="headerlink" title="错误分类"></a>错误分类</h5><p>1、语法错误：书写代码不符合PHP语法规范，会导致代码在编译中不允许，故也不会执行（parse error）；</p><p>2、运行时错误：代码编译通过，但在执行时会出现一些条件不满足从而导致的错误。（runtime error取空数组的第几位数）</p><p>3、逻辑错误：写代码不规范、但逻辑性错误，导致虽可正常运行，但得不到预期结果。</p><h5 id="错误代号"><a href="#错误代号" class="headerlink" title="错误代号"></a>错误代号</h5><p>系统代号在PHP中均被定义为了系统常量，故可直接使用：</p><p>1、系统错误（系统使用的代号）：</p><p>E_PARSE：编译错误，代码不会运行</p><p>E_ERROR：fatal error致命错误，会在出错的位置断掉</p><p>E_WARNING：warning警告错误，不影响执行，但可能得不到预期结果</p><p>E_NOTICE：notice，通知错误、不影响代码执行</p><p>2、用户错误（用户使用的代号）：E_USER_ERROR、E_USER_WARNING、E_USER_NOTICE用户在使用自定义错误出发的时候，会使用道德错误代号。</p><p>3、E_ALL：代表所有错误</p><p>所有E开头的错误常量都由一个字节（8位）存储，且每一种错误占用一个位，故可进行位操作。</p><p>排除通知级别notice：E_ALL &amp; ~E_NOTICE 。。假设ALL全为1，那么与NOTICE取反再取与就可把其剔除</p><p>只要警告和同志：E_WARNING | E_NOTICE</p><h5 id="错误触发"><a href="#错误触发" class="headerlink" title="错误触发"></a>错误触发</h5><p>程序运行时触发：主要针对代码的语法错误和运行时错误。</p><p>人为触发：知道某些逻辑可能会出错，从而使用对应的代码编号来判断</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// php错误处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 人为触发</span></span><br><span class="line"><span class="comment">// 处理脚本让浏览器按照指定字符集解析</span></span><br><span class="line"><span class="comment">// header(&#x27;Content-type:text/html;charset=utf-8&#x27;);</span></span><br><span class="line"></span><br><span class="line">$b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>($b == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    trigger_error(<span class="string">&#x27;除数不能为0&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $a / $b;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200728093504044.png" alt="image-20200728093504044" style="zoom:80%;"><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728093845093.png" alt="image-20200728093845093"></p><h5 id="错误显示设置（未全）"><a href="#错误显示设置（未全）" class="headerlink" title="错误显示设置（未全）"></a>错误显示设置（未全）</h5><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><h5 id="字符串定义语法"><a href="#字符串定义语法" class="headerlink" title="字符串定义语法"></a>字符串定义语法</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//php字符串：定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、引号定义:比较适合定义较短的或无结构要求的字符串</span></span><br><span class="line">$str1 = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">$str2 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">var_dump($str1,$str2);  <span class="comment">// 两种方式显示的结果一致</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构化定义</span></span><br><span class="line"><span class="comment">// 2、heredoc字符串：没有单引号的单引号字符串</span></span><br><span class="line">$str3 = &lt;&lt;&lt;EOD</span><br><span class="line">          HELLO</span><br><span class="line">          EOD;</span><br><span class="line"><span class="comment">// 3、nowdoc 结构</span></span><br><span class="line">$str4 = &lt;&lt;&lt;<span class="string">&#x27;EOD&#x27;</span>   <span class="comment">// eod只是边界符，可自己定义</span></span><br><span class="line">           hello</span><br><span class="line">EOD;</span><br><span class="line">var_dump($str3,$str4);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="转义字符串"><a href="#转义字符串" class="headerlink" title="转义字符串"></a>转义字符串</h5><p>字符串转义：在计算机通用协议中，有一些特定方式定义的字母，系统会特定处理；反斜杠+字母<br>&#39;:在单引号字符串中显示单引号  &quot; 在双引号字符串中显示双引号  \r：回车  \n：换行  \t:四个空格  $<br><strong>区别:</strong>上述转义符中，单引号只能识别&#39;。而双引号中不能识别&#39;；</p><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728100839775.png" alt="image-20200728100839775"></p><p>双引号中变量识别规则：</p><p>1、变量本身系统能够与后面的内容区分；即应该保证变量的独立性，不要使系统难以识别。</p><p>2、使用变量专业标识符，即给变量加一组{}；</p><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728101319093.png" alt="image-20200728101319093"></p><p>结构化字符串变量的规则</p><p>1、结构化定义字符串对应的边界符有条件</p><p>1.1 上边界符和后面不能有任何东西（包括注释）</p><p>1.2 下边界符必须顶格</p><p>1.3 下边界符后面只能跟分号</p><p>2、结构化定义字符串内部均是字符串本身（包括空格、换行、注释等）</p><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728102143974.png" alt="image-20200728102143974"></p><h5 id="字符串长度问题"><a href="#字符串长度问题" class="headerlink" title="字符串长度问题"></a>字符串长度问题</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header(<span class="string">&#x27;Content-type:text/html;charset = utf-8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义字符串</span></span><br><span class="line">$str1 = <span class="string">&#x27;abcefjdoifaoi&#x27;</span>;</span><br><span class="line">$str2 = <span class="string">&#x27;你好中国123&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> strlen($str1),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,strlen($str2);  <span class="comment">// 13   15(中文在utf下占3个字节)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多字节字符串的长度问题：包含中文的长度</span></span><br><span class="line"><span class="comment">// 多字节字符串扩展模块：mbstring扩展(mb:Multi Bytes)</span></span><br><span class="line"><span class="comment">// 首先需加载PHP的mbstring扩展（php.ini中去注释即可）</span></span><br><span class="line"><span class="comment">// 使用mbstring</span></span><br><span class="line"><span class="keyword">echo</span> mb_strlen($str1),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,mb_strlen($str2);  <span class="comment">// 13   15(与之前一致) </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 长度并未改变，MBstring针对不同的字符集有不同的统计结果</span></span><br><span class="line"><span class="keyword">echo</span> mb_strlen($str1),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,mb_strlen($str2),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,mb_string($str2,<span class="string">&#x27;utf-8&#x27;</span>);  <span class="comment">// 13   15   7</span></span><br></pre></td></tr></table></figure><h5 id="字符串相关函数"><a href="#字符串相关函数" class="headerlink" title="字符串相关函数"></a>字符串相关函数</h5><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728104720621.png" alt="image-20200728104720621"></p><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728104800475.png" alt="image-20200728104800475"></p><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728105204318.png" alt="image-20200728105204318"></p><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728105449502.png" alt="image-20200728105449502"></p><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728105557351.png" alt="image-20200728105557351"></p><h2 id="数组（元素下标均和c-不一样）"><a href="#数组（元素下标均和c-不一样）" class="headerlink" title="数组（元素下标均和c++不一样）"></a>数组（元素下标均和c++不一样）</h2><p>数组：数据的组合，指将一组数据（多个）存储到一个指定的容器中，并用变量指向该容器，然后可用变量一次性取得该容器的所有数据。</p><h5 id="定义语法"><a href="#定义语法" class="headerlink" title="定义语法"></a>定义语法</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// php数组：可以是一种或多种类型的数据，这与c++很不一样.类似于哈希表</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 定义数组：array</span></span><br><span class="line">$arr1 = <span class="keyword">array</span>(<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">var_dump($arr1);    <span class="comment">// 结果：// array(3) ([0]=&gt;string(1) &quot;1&quot; [1]=&gt;int(2) [2]=&gt;string(5) &quot;hello&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数组：[]</span></span><br><span class="line">$arr2 = [<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line">var_dump($arr2);   <span class="comment">// array(3) ([0]=&gt;string(1) &quot;1&quot; [1]=&gt;int(2) [2]=&gt;string(5) &quot;hello&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数组：隐型数组  </span></span><br><span class="line">$arr3[] = <span class="number">1</span>;      <span class="comment">// 默认给数组第0个元素赋值</span></span><br><span class="line">$arr3[<span class="number">10</span>] = <span class="number">100</span>;  <span class="comment">// 第10个元素赋值</span></span><br><span class="line">$arr3[] = <span class="string">&#x27;1&#x27;</span>;    <span class="comment">// 第11个。默认下标是从当前最大下标</span></span><br><span class="line">$arr[<span class="string">&#x27;key&#x27;</span>] = <span class="string">&#x27;key&#x27;</span>;  <span class="comment">// 第key个</span></span><br><span class="line">$arr[<span class="number">1</span>] = <span class="string">&#x27;value&#x27;</span>  <span class="comment">// 第1个，但不会自动调整，还是会处于最后一个位置</span></span><br><span class="line"><span class="comment">// 结果为：array(4) ([0]=&gt;int(1) [10]=&gt;int(100) [11]=&gt;string(1) &quot;1&quot; [&quot;key&quot;]=&gt;string(3)&quot;key&quot; [1]=&gt;string(5) &quot;value&quot;)</span></span><br></pre></td></tr></table></figure><h5 id="PHP数组特点"><a href="#PHP数组特点" class="headerlink" title="PHP数组特点"></a>PHP数组特点</h5><p>1、可以整数下标或者字符串下标</p><p>若数组下标均为整数，则称为<strong>索引数组</strong></p><p>若数组下标均为字符串，则称为<strong>关联数组</strong>。</p><p>混合下标的话称为<strong>混合数组</strong></p><p>2、数组元素的顺序以放入顺序为准，与下标无关</p><p>3、数字下标的增长特性：从0开始自动增长，若中间手动加入较大的下标，则后面则会从当前最大下标+1增长。</p><p>4、特殊值下标的自动转换</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊下标自动转换</span></span><br><span class="line">$arr1[<span class="literal">false</span>] = <span class="literal">false</span>;</span><br><span class="line">$arr1[<span class="literal">true</span>] = <span class="literal">true</span>;</span><br><span class="line">arr1[<span class="literal">NULL</span>] = <span class="literal">NULL</span>;</span><br><span class="line">var_dump($arr1);   <span class="comment">// array(3)([0]=&gt;bool(false),[1]=&gt;bool(true) [&quot;&quot;]-&gt;NULL)</span></span><br></pre></td></tr></table></figure><p>5、PHP数组中类型元素没有限制。</p><p>6、PHP中数组元素没有长度限制。c++ vector</p><p>补充：PHP中数组是很大的数据，故会存储在堆区。</p><h5 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h5><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200728143259676.png" alt="image-20200728143259676" style="zoom:67%;"><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200728143418531.png" alt="image-20200728143418531" style="zoom:67%;"><h5 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h5><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728143816339.png" alt="image-20200728143816339"></p><h6 id="Foreach语法"><a href="#Foreach语法" class="headerlink" title="Foreach语法"></a>Foreach语法</h6><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 数组遍历  foreach</span></span><br><span class="line"></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// foreach</span></span><br><span class="line"><span class="keyword">foreach</span>($arr <span class="keyword">as</span> $a)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> $a,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;    <span class="comment">// 依次输出1，2，3，4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($arr <span class="keyword">as</span> $a =&gt; $v)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;key&#x27;</span>,$a,<span class="string">&#x27;== value&#x27;</span>,$v,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;    <span class="comment">// 依次输出key0 == value1  等</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维数组</span></span><br><span class="line">$arr = <span class="keyword">array</span>(</span><br><span class="line"><span class="number">0</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt;<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">10</span>),</span><br><span class="line">    <span class="number">1</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Jim&#x27;</span>,<span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">11</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过foreach遍历二维元素</span></span><br><span class="line"><span class="keyword">foreach</span>($arr <span class="keyword">as</span> $a)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;name is:&#x27;</span>,$a[<span class="string">&#x27;name&#x27;</span>],<span class="string">&#x27;age is:&#x27;</span>,$a[<span class="string">&#x27;age&#x27;</span>],<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    <span class="comment">// name is:TOM age is:10</span></span><br><span class="line">    <span class="comment">// name is:TOM age is:10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="foreach遍历原理"><a href="#foreach遍历原理" class="headerlink" title="foreach遍历原理"></a>foreach遍历原理</h6><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728145904737.png" alt="image-20200728145904737"></p><h6 id="for循环遍历"><a href="#for循环遍历" class="headerlink" title="for循环遍历"></a>for循环遍历</h6><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// for循环遍历数组</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数组特点：1、索引数组   2、下标规律</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i&lt;count($arr);$i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;key is:&#x27;</span>,$i,<span class="string">&#x27;value is:&#x27;</span>,$arr[$i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="while配合each和list遍历数组"><a href="#while配合each和list遍历数组" class="headerlink" title="while配合each和list遍历数组"></a>while配合each和list遍历数组</h6><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728152144177.png" alt="image-20200728152144177"></p><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200728152016161.png" alt="image-20200728152016161" style="zoom:67%;"><p><img src="/post/55d182ea.htm/C:%5CUsers%5Ca%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200728152224856.png" alt="image-20200728152224856"></p><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200728161251519.png" alt="image-20200728161251519" style="zoom:67%;"><p>由于不存在下标1，而list只能从0开始依次查找，故上述会报错。</p><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200728161749886.png" alt="image-20200728161749886" style="zoom:67%;"><h5 id="数组相关的函数"><a href="#数组相关的函数" class="headerlink" title="数组相关的函数"></a>数组相关的函数</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组相关函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序函数</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">print_r(sort($arr))  <span class="comment">// 结果为1</span></span><br><span class="line">print_r($arr);     <span class="comment">// 排序后，索引变为01234</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针函数 reset:将数组的内部指针指向第一个单元；end():将数组指针指向最后一个元素；</span></span><br><span class="line"><span class="comment">// next():     prev():指针上移   current():获取当前指针对应的元素值    key()获取当前指针对应的key</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否指针移动</span></span><br><span class="line"><span class="keyword">echo</span> current($arr),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> key($arr),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;  <span class="comment">//若是第一个元素。则当前数组指针未移动</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> next($arr),next($arr),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;  <span class="comment">//15</span></span><br><span class="line"><span class="keyword">echo</span> prev($arr);<span class="comment">//1</span></span><br><span class="line"><span class="comment">// 注意事项：next，prev会移动指针，可能导致超出数组，此时再使用next、prev便不能再返回数组，只能通过end/reset</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他函数：count</span></span><br></pre></td></tr></table></figure><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200728164831073.png" alt="image-20200728164831073" style="zoom:67%;"><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200728165028151.png" alt="image-20200728165028151" style="zoom:67%;"><img src="/post/55d182ea.htm/Users\a\AppData\Roaming\Typora\typora-user-images\image-20200728165056637.png" alt="image-20200728165056637" style="zoom:67%;"><h2 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h2><h5 id="递推算法"><a href="#递推算法" class="headerlink" title="递推算法"></a>递推算法</h5><p>利用特定关系得出中间推论，直至得到结果的算法。。。分为顺推和逆推两种</p><p>顺推:通过最简单的条件，逐步推演结果。</p><p>逆推，通过结果找到规律，从而推到已知条件。</p><h5 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h5><p>把问题转化为规模缩小了的同类问题的子问题。然后递归调用函数以表达问题的解。</p><p><strong>简化问题，找到最优子问题。</strong></p><p>递归的本质是函数调用：一个函数需要开辟一块内存，递归会出现同时调用多个函数，故占用很多内存。</p><h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><p>1、比较相邻元素，若前一个比后一个大，则交换。</p><p>2、对每一对相邻元素进行1操作，直至最后一对。此时最后一个因为最大值。</p><p>3、除最后一个外，重复以上操作</p><p>4、重复以上操作，直至排序完成。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>);</span><br><span class="line"><span class="comment">// 计算长度</span></span><br><span class="line">$len = count($arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>;$i&lt;$len<span class="number">-1</span>;$i++)    <span class="comment">// 第几次重复循环</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>($j = <span class="number">0</span>;$j&lt;$len-$i<span class="number">-1</span>;$j++)  <span class="comment">// 第几次交换</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>($arr[$j] &gt; $arr[$j+<span class="number">1</span>])</span><br><span class="line">            swap1($arr[$j],$arr[$j+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var_dump($arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap1</span>(<span class="params">&amp;$a,&amp;$b</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $tmp = $a;</span><br><span class="line">    $a = $b;</span><br><span class="line">    $b = $tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h5><p>1、假设第一个元素为最小元素，记下下标</p><p>2、寻找右侧剩余元素，若有更小的，则记下更小的下标</p><p>3、一行对比完成后，交换第一个和最小的元素</p><p>4、重新开始以上操作</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">$min_index = <span class="number">0</span>;  </span><br><span class="line"></span><br><span class="line">$len = count($arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i&lt;$len<span class="number">-1</span>; $i++)</span><br><span class="line">&#123;</span><br><span class="line">    $min_index = $i;</span><br><span class="line">    <span class="keyword">for</span>($j = $min_index + <span class="number">1</span>;$j&lt;$len;$j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>($arr[$min_index] &gt; $arr[$j])</span><br><span class="line">            $min_index = $j;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>($min_index != $i)</span><br><span class="line">    swap1($arr[$min_index],$arr[$i]);</span><br><span class="line">&#125;</span><br><span class="line">var_dump($arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap1</span>(<span class="params">&amp;$a,&amp;$b</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $tmp = $a;</span><br><span class="line">    $a = $b;</span><br><span class="line">    $b = $tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h5><p>1、认定一个第一个元素已经排好序；</p><p>2、取出第二个元素作为待插入元素；</p><p>3、将待插入元素与已排好元素比较；</p><p>4、若小于已排好元素，则说明前面排序未在正确位置，应该向后移动，让新元素插入进去</p><p>5、重复以上操作，直到该元素插入完毕</p><p>6、重复操作，直至所有元素完毕</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">$len = count($arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">1</span>;$i&lt;$len;$i++)   <span class="comment">// 第几个元素为待插入元素</span></span><br><span class="line">&#123;</span><br><span class="line">    $tmp = $arr[$i];</span><br><span class="line">    <span class="keyword">for</span>($j = $i;$j&gt;<span class="number">0</span>;$j--)  <span class="comment">// 比较几次</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>($tmp &lt; $arr[$j<span class="number">-1</span>])    <span class="comment">// 注意此处比较的是tmp</span></span><br><span class="line">            $arr[$j] = $arr[$j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>($arr[$j] != $tmp)</span><br><span class="line">        $arr[$j] =$tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump($arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap1</span>(<span class="params">&amp;$a,&amp;$b</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $tmp = $a;</span><br><span class="line">    $a = $b;</span><br><span class="line">    $b = $tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="快速排序法："><a href="#快速排序法：" class="headerlink" title="快速排序法："></a>快速排序法：</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数组开头及结尾</span></span><br><span class="line">$start = <span class="number">0</span>;</span><br><span class="line">$end = count($arr)<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义函数作为递归函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick_sort</span>(<span class="params">$arr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 递归出口</span></span><br><span class="line">    $len = count($arr);</span><br><span class="line">    <span class="keyword">if</span>($len &lt;= <span class="number">1</span>) <span class="keyword">return</span> $arr;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 比较并分散数据</span></span><br><span class="line">    $left = $right = <span class="keyword">array</span>();  <span class="comment">// 定义空数组用于存放大的或小的</span></span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">1</span>;$i&lt;$len;$i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>($arr[$i]&gt;$arr[<span class="number">0</span>]) $right[] = $arr[$i];   <span class="comment">// 大于存放在右边数组</span></span><br><span class="line">        <span class="keyword">else</span> $left[] = $arr[$i];   <span class="comment">// 小于存放在左边数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 递归</span></span><br><span class="line">    $left = quick_sort($left);  <span class="comment">// 分别将右数组和左数组进一步排序</span></span><br><span class="line">    $right = quick_sort($right);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> array_merge($left,(<span class="keyword">array</span>)$arr[<span class="number">0</span>],$right);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$res = quick_sort($arr);</span><br><span class="line">var_dump($res);   <span class="comment">// 不能用echo</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 快排双指针</span></span><br><span class="line"></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">7</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick_sort</span>(<span class="params">$arr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 递归结束条件</span></span><br><span class="line">    $len = count($arr);</span><br><span class="line">    <span class="keyword">if</span>($len &lt;= <span class="number">1</span>) <span class="keyword">return</span> $arr;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义双指针</span></span><br><span class="line">    $left = <span class="number">0</span>;</span><br><span class="line">    $right = $len<span class="number">-1</span>;</span><br><span class="line">    $pivot = $arr[<span class="number">0</span>];  <span class="comment">// 确定基准</span></span><br><span class="line">    <span class="keyword">while</span>($left &lt; $right)   <span class="comment">// left == right时跳出循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>($left &lt; $right &amp;&amp; $arr[$right] &gt;= $pivot) $right--;</span><br><span class="line"><span class="keyword">while</span>($left &lt; $right &amp;&amp; $arr[$left] &lt;= $pivot) $left++;</span><br><span class="line">swap1($arr[$left],$arr[$right]);</span><br><span class="line">    &#125;</span><br><span class="line">    swap1($arr[$left],$arr[<span class="number">0</span>]);   <span class="comment">// 跳出循环时，left = right ，故将pivot赋值即可</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 递归点(上述操作完毕后，需要进一步排序左边和右边，故需递归)</span></span><br><span class="line">    $left_arr = quick_sort(array_slice($arr,<span class="number">0</span>,$left));</span><br><span class="line">    $right_arr = quick_sort(array_slice($arr,$left+<span class="number">1</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> array_merge($left_arr,(<span class="keyword">array</span>)$arr[$left],$right_arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(quick_sort($arr));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap1</span>(<span class="params">&amp;$a,&amp;$b</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $tmp = $a;</span><br><span class="line">    $a = $b;</span><br><span class="line">    $b = $tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二路合并算法</span></span><br><span class="line">$arr1 = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">$arr2 = <span class="keyword">array</span>(<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">$res = <span class="keyword">array</span>();    <span class="comment">// 存合并后的元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(count($arr1) &amp;&amp; count($arr2))</span><br><span class="line">&#123;</span><br><span class="line">    $res[] = $arr1[<span class="number">0</span>]&gt;$arr2[<span class="number">0</span>] ? array_shift($arr2):array_shift($arr1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(count($arr1) &amp;&amp; !count($arr2))</span><br><span class="line">&#123;</span><br><span class="line">    $res[] = array_shift($arr1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(count($arr2) &amp;&amp; !count($arr1))</span><br><span class="line">&#123;</span><br><span class="line">    $res[] = array_shift($arr2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump($res);</span><br></pre></td></tr></table></figure><p>1、将数组拆分成两个数组</p><p>2、重复步骤1，将数组拆分成最小单元</p><p>3、然后二路归并</p><p>4、重复步骤直至完成</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序</span></span><br><span class="line">    </span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge_sort</span>(<span class="params">$arr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 1、递归结束条件</span></span><br><span class="line">    $len = count($arr);</span><br><span class="line">    <span class="keyword">if</span>($len &lt;= <span class="number">1</span>) <span class="keyword">return</span> $arr;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2、重复的操作</span></span><br><span class="line">    <span class="comment">// 2、1 拆分数组</span></span><br><span class="line">    $middle = $len&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    $left = array_slice($arr,<span class="number">0</span>,$middle);</span><br><span class="line">    $right = array_slice($arr,$middle);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4、递归点（最后写这一步，先将一层的分离和合并写完，再找递归点）</span></span><br><span class="line">    $left = merge_sort($left);</span><br><span class="line">    $right = merge_sort($right);</span><br><span class="line">    <span class="comment">// 2、2 二路归并</span></span><br><span class="line">    $res = <span class="keyword">array</span>();    <span class="comment">// 存合并后的元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(count($left) &amp;&amp; count($right))</span><br><span class="line">    &#123;</span><br><span class="line">        $res[] = $left[<span class="number">0</span>]&gt;$right[<span class="number">0</span>] ? array_shift($right):array_shift($left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(count($left) &amp;&amp; !count($right))</span><br><span class="line">    &#123;</span><br><span class="line">        $res[] = array_shift($left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(count($right) &amp;&amp; !count($left))</span><br><span class="line">    &#123;</span><br><span class="line">        $res[] = array_shift($right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、返回值</span></span><br><span class="line">    <span class="keyword">return</span> array_merge($res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(merge_sort($arr));</span><br></pre></td></tr></table></figure><h5 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">17</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">32</span>);</span><br><span class="line"><span class="comment">// 顺序查找：从数组第一个元素开始挨个匹配</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find_index</span>(<span class="params">$arr,$num</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span>($arr <span class="keyword">as</span> $k =&gt; $v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>($v == $num) <span class="keyword">return</span> $k;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var_dump(find_index($arr,2));  // 不存在，故返回bool(false)</span></span><br><span class="line"><span class="comment">// var_dump(find_index($arr,32));  // 存在，故返回int(5)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Binary_search</span>(<span class="params">$arr,$num</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $len = count($arr);</span><br><span class="line">    $left = <span class="number">0</span>;</span><br><span class="line">    $right = $len<span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>($left &lt;= $right)</span><br><span class="line">    &#123;</span><br><span class="line">        $middle = $left+($right-$left&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>($arr[$middle] &gt; $num) </span><br><span class="line">$right = $middle<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">elseif</span>($arr[$middle] &lt; $num) </span><br><span class="line">$left = $middle+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line"><span class="keyword">return</span> $middle;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">print_r(Binary_search($arr,<span class="number">6</span>));</span><br><span class="line">var_dump(Binary_search($arr,<span class="number">2</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notes </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旅行说走就走，二十岁说走就走</title>
      <link href="post/e6351f8b.html"/>
      <url>post/e6351f8b.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="4cf46947b33711549667985c62613a518bd30812932281913a9fa8422c490376"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">已加密，请在这里密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> think </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看小米春季新品发布会有感</title>
      <link href="post/f32b1748.html"/>
      <url>post/f32b1748.html</url>
      
        <content type="html"><![CDATA[<p>从来没看过这么长的发布会，有感于雷总的人格魅力，分为两场的发布会丝毫不觉得劳累。今天的发布会雷总已经嗓子哑得很严重了，只要稍微大声说话便会失声，我以为讲完mix雷总要休息了，没想到后面的笔记本，以及最后的充满激情的造车宣言，他都坚持下来了。我在想，假如我在场，一定会热泪盈眶吧。听了太多的参数，这里我已经不想提产品了。正常发布会看下来，各种新品层出不穷，可谓盛宴，又被人称之为手机界的“春晚”，说实话，毫不为过。但是其实我最喜欢的还是雷总讲起来他的回忆，讲起来他和许知远的对话，那是无比真诚的，一口不是很标准的普通话却感人肺腑。雷总又讲起来了他的以往，从当年笃定要敲代码，到最后代码被格式化，学习管理、金融的知识，16年小米的低谷期，雷总挑起大旗带领大家扛了过来，如今有了“我们又1080亿”的资本这样的豪言，属实让人感叹！今天雷总正式在发布会上宣布要进军智能电动汽车行业，他说到：“这是我人生中最后一次重大的创业项目了。”我一时间还不能接受这样的消息，雷军在我眼里一直是一个年轻帅气充满魅力的成功人士，况且当他将其mix fold的时候还调侃自己还年轻，可是终究逃不了变老的命运。这样的感受让我想起来罗老师，当年他在各行各业闯荡，而现在算算，他还有多少时间可以依旧保持活力探索呢。我真心的希望小米能在汽车行业有一番成就，至少不会辜负一百亿美金的资金调用，至少不会辜负发布会最后两句失声的谢谢。<br><img src="https://img.imgdb.cn/item/606335818322e6675c6e5344.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python项目练习</title>
      <link href="post/71485f5b.html"/>
      <url>post/71485f5b.html</url>
      
        <content type="html"><![CDATA[<h1 id="记录一下python常用的源码"><a href="#记录一下python常用的源码" class="headerlink" title="记录一下python常用的源码"></a>记录一下python常用的源码</h1><h2 id="邮件服务"><a href="#邮件服务" class="headerlink" title="邮件服务"></a>邮件服务</h2><blockquote><p>用来每次部署博客以后给订阅的人自动发邮件</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 邮件服务 --&gt;</span><br><span class="line"># coding: UTF-8</span><br><span class="line">import smtplib</span><br><span class="line">from email.mime.text import MIMEText</span><br><span class="line">mailserver &#x3D; &quot;smtp.163.com&quot;  #邮箱服务器地址</span><br><span class="line">username_send &#x3D; &#39;******@163.com,xxx@qq.com&#39;  #邮箱用户名</span><br><span class="line">password &#x3D; &#39;******&#39;   #邮箱密码：需要使用授权码</span><br><span class="line">username_recv &#x3D; &#39;****@qq.com&#39;  #收件人，多个收件人用逗号隔开</span><br><span class="line">mail &#x3D; MIMEText(&#39;xxx&#39;)</span><br><span class="line">mail[&#39;Subject&#39;] &#x3D; &#39;xxx&#39;</span><br><span class="line">mail[&#39;From&#39;] &#x3D; username_send  #发件人</span><br><span class="line">mail[&#39;To&#39;] &#x3D; username_recv  #收件人；[]里的三个是固定写法，别问为什么，我只是代码的搬运工</span><br><span class="line">smtp &#x3D; smtplib.SMTP(mailserver,port&#x3D;25) # 连接邮箱服务器，smtp的端口号是25</span><br><span class="line"># smtp&#x3D;smtplib.SMTP_SSL(&#39;smtp.qq.com&#39;,port&#x3D;465) #QQ邮箱的服务器和端口号</span><br><span class="line">smtp.login(username_send,password)  #登录邮箱</span><br><span class="line">smtp.sendmail(username_send,username_recv,mail.as_string())# 参数分别是发送者，接收者，第三个是把上面的发送邮件的内容变成字符串</span><br><span class="line">smtp.quit() # 发送完毕后退出smtp</span><br><span class="line">print (&#39;success&#39;)</span><br></pre></td></tr></table></figure><h2 id="自动更新更新时间"><a href="#自动更新更新时间" class="headerlink" title="自动更新更新时间"></a>自动更新更新时间</h2><blockquote><p>每次部署的时候自动将post的<code>update:</code>后面的时间改成文件的修改时间</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 自动更新更新时间和文件名 --&gt;</span><br><span class="line">import re</span><br><span class="line">import time</span><br><span class="line">import os</span><br><span class="line">def change_time(path):</span><br><span class="line">        fileList &#x3D; os.listdir(path)</span><br><span class="line">        fb &#x3D; open(&#39;更新内容.txt&#39;,&#39;w&#39;,encoding &#x3D; &#39;utf-8&#39;)</span><br><span class="line">        hello &#x3D; &#39;博客更新&#39;</span><br><span class="line">        fb.write(&#39;&#123;:⭐^10&#125;\n&#39;.format(hello))</span><br><span class="line">        for file in fileList:</span><br><span class="line">            allpath &#x3D; path+file</span><br><span class="line">            f &#x3D; open(allpath,&#39;r&#39;,encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">            txt &#x3D; f.read() #读取内容</span><br><span class="line">            f.close()</span><br><span class="line">            now &#x3D; int(time.time())</span><br><span class="line">            # 匹配，加入\n是为了防止匹配到文章内部代码。</span><br><span class="line">            old_update &#x3D; re.findall(r&quot;(updated: \d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;\s\d&#123;1,2&#125;:\d&#123;1,2&#125;:\d&#123;1,2&#125;\n)&quot;,txt) # 正则匹配要修改的字符串</span><br><span class="line">            file_title &#x3D; re.findall(r&#39;title: (.*?)\n&#39;,txt)</span><br><span class="line">            if old_update &#x3D;&#x3D; []:</span><br><span class="line">                    old_update &#x3D; [&#39;updated:\n&#39;]</span><br><span class="line">            new_update &#x3D; time.strftime(&#39;updated: %Y-%m-%d %H:%M:%S\n&#39;,time.localtime(int(os.path.getmtime(allpath)))) # 获取文件的最后修改时间并赋值</span><br><span class="line">            </span><br><span class="line">            try:</span><br><span class="line">                txt &#x3D; txt.replace(old_update[0],new_update) # 替换</span><br><span class="line">            except:</span><br><span class="line">                print(&#39;&#123;&#125;有误&#39;.format(file))</span><br><span class="line">                continue</span><br><span class="line">            else:</span><br><span class="line">                if now - int(os.path.getmtime(allpath)) &lt; 43200:</span><br><span class="line">                    fi &#x3D; open(allpath,&#39;w&#39;,encoding &#x3D; &#39;utf-8&#39;)</span><br><span class="line">                    fi.write(txt) # 写入</span><br><span class="line">                    fi.close() # 关闭</span><br><span class="line">                    os.rename(allpath,path+file_title[0]+os.path.splitext(allpath)[1])</span><br><span class="line">                    update_name &#x3D; &#39;《&#39;+file_title[0]+&#39;》&#39;</span><br><span class="line">                    fb.write(&#39;------------&#123;&#125;\n&#39;.format(update_name))</span><br><span class="line">        fb.write(&#39;\n访问地址：https:&#x2F;&#x2F;blog.asea.fun&#39;)</span><br><span class="line">        fb.close()</span><br><span class="line">change_time(&#39;E:&#x2F;blog&#x2F;source&#x2F;_posts&#x2F;&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自己写了一个文件名字批处理的软件"><a href="#自己写了一个文件名字批处理的软件" class="headerlink" title="自己写了一个文件名字批处理的软件"></a>自己写了一个文件名字批处理的软件</h2><blockquote><p>网上找的都怪怪的，用起来不舒服，就自己写了一个，自由度更高，使用的是tkinter。</p></blockquote><p><strong>未来打算更新的几个功能</strong></p><ul><li><input checked disabled type="checkbox"> 增加前缀后缀（已实现） </li><li><input checked disabled type="checkbox"> 修改字符的半匹配（逻辑重复已pass）</li><li><input disabled type="checkbox"> 支持正则替换</li><li><input disabled type="checkbox"> 支持修改范围（例如：前十个）</li><li><input disabled type="checkbox"> 支持批量word转pdf</li><li><input disabled type="checkbox"> 支持批量pdf转word<blockquote><p> 另外附上：<a href="https://asea.ys168.com">&gt;&gt;最新版本下载地址&lt;&lt;</a></p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line">import time</span><br><span class="line">import os</span><br><span class="line">import re</span><br><span class="line">from tkinter import scrolledtext</span><br><span class="line">import webbrowser</span><br><span class="line">import tkinter.messagebox</span><br><span class="line"></span><br><span class="line">class MY_GUI():</span><br><span class="line">    #窗口初始化</span><br><span class="line">    def __init__(self,window_name):</span><br><span class="line">        self.window &#x3D; window_name</span><br><span class="line">        self.is_all_change &#x3D; 0</span><br><span class="line">        self.is_all_change &#x3D; tk.IntVar()</span><br><span class="line">        self.can_change &#x3D; 0</span><br><span class="line">        self.theme_CN&#x3D;self.mode_CN&#x3D;&#39;默认&#39;</span><br><span class="line">        # 设置窗口</span><br><span class="line">    #窗口设置</span><br><span class="line">    def set_window(self):</span><br><span class="line">        self.window.title(&#39;文件名称批量修改器_v1.2.0&#39;)</span><br><span class="line">        self.window.geometry(&#39;800x600+500+100&#39;)</span><br><span class="line">        self.window.maxsize(800,600)</span><br><span class="line">        self.window.minsize(800,600)</span><br><span class="line">        self.window.attributes(&#39;-alpha&#39;,1) # 1为不虚化</span><br><span class="line">        # self.to_be_changed_label_name&#x3D;tk.StringVar()</span><br><span class="line">        self.to_change_label_name&#x3D;tk.StringVar()</span><br><span class="line">        self.change_button_name&#x3D;tk.StringVar()</span><br><span class="line">        # 标签</span><br><span class="line">        self.address_label &#x3D; tk.Label(self.window,text&#x3D;&#39;原文件夹的地址&#39;,font&#x3D;(&#39;microsoft yahei&#39;, 10),relief&#x3D;&#39;groove&#39;)</span><br><span class="line">        self.state_label &#x3D; tk.Label(self.window,font&#x3D;(&#39;microsoft yahei&#39;, 9),anchor&#x3D;&#39;w&#39;,relief&#x3D;&#39;groove&#39;)</span><br><span class="line">        self.to_be_changed_label &#x3D; tk.Label(self.window,text&#x3D;&#39;&#39;,font&#x3D;(&#39;microsoft yahei&#39;, 10),relief&#x3D;&#39;groove&#39;)</span><br><span class="line">        self.to_change_label &#x3D; tk.Label(self.window,text &#x3D; &#39;&#39;,font&#x3D;(&#39;microsoft yahei&#39;, 10),relief&#x3D;&#39;groove&#39;)</span><br><span class="line">        self.change_button &#x3D; tk.Button(self.window,text &#x3D; &#39;&#39;,bg&#x3D;&#39;#CCCCCC&#39;,command&#x3D;self.callChange)</span><br><span class="line">        self.original_fileList_label &#x3D; tk.Label(self.window,text&#x3D;&#39;原始文件目录&#39;,relief&#x3D;&#39;groove&#39;)</span><br><span class="line">        self.latest_fileList_label &#x3D; tk.Label(self.window,text&#x3D;&#39;修改后文件目录&#39;,relief&#x3D;&#39;groove&#39;)</span><br><span class="line">        self.log_data_label &#x3D; tk.Label(self.window,text&#x3D;&#39;工  作  日  志&#39;,font&#x3D;(&#39;microsoft yahei&#39;, 10,&#39;bold&#39;))</span><br><span class="line">        # 单行输入框</span><br><span class="line">        self.address_Entry &#x3D; tk.Entry(self.window) # 文件夹地址收集框</span><br><span class="line">        self.to_be_changed_Entry &#x3D; tk.Entry(self.window) # 要被改变的字符串</span><br><span class="line">        self.to_change_Entry &#x3D; tk.Entry(self.window) # 要改变成的字符串</span><br><span class="line">        # 按钮</span><br><span class="line">        self.is_all_change_button &#x3D; tk.Checkbutton(self.window,text &#x3D; &quot;是否遍历整个文件夹(默认为否)&quot;,variable&#x3D;self.is_all_change,onvalue&#x3D;1,offvalue&#x3D;0)</span><br><span class="line">        self.look_files_button &#x3D; tk.Button(self.window,text&#x3D;&#39;查看当前目录&#39;,command&#x3D;self.look_files)</span><br><span class="line">        self.clear_button &#x3D; tk.Button(self.window,text&#x3D;&#39;重置&#39;,command&#x3D;self.clearAll)</span><br><span class="line">        self.clearLog_button &#x3D; tk.Button(self.window,text&#x3D;&#39;清除工作日志&#39;,command&#x3D;self.clearLog)</span><br><span class="line">        # 多行文本框</span><br><span class="line">        self.original_fileList_text &#x3D; tk.Text(self.window) # 原始文件目录</span><br><span class="line">        self.latest_fileList_text &#x3D; tk.Text(self.window) # 修改后的文件目录</span><br><span class="line">        self.log_data_text &#x3D; scrolledtext.ScrolledText(self.window,font&#x3D;(&#39;microsoft yahei&#39;, 10),fg&#x3D;&#39;#fff&#39;,bg&#x3D;&#39;#455&#39;) # 工作日志</span><br><span class="line">        # 菜单栏</span><br><span class="line">        self.menubar &#x3D; tk.Menu(self.window)</span><br><span class="line">        self.func_menu &#x3D; tk.Menu(self.menubar, tearoff&#x3D;0)</span><br><span class="line">        self.menubar.add_cascade(label&#x3D;&#39;功能&#39;, menu&#x3D;self.func_menu)</span><br><span class="line">        self.func_menu.add_command(label&#x3D;&#39;查看当前目录&#39;,command&#x3D;self.look_files)</span><br><span class="line">        self.func_menu.add_command(label&#x3D;&#39;执行&#39;,command&#x3D;self.change_name)</span><br><span class="line">        self.func_menu.add_command(label&#x3D;&#39;退出&#39;,command&#x3D;self.window.quit)</span><br><span class="line">        self.func_menu.add_command(label&#x3D;&#39;重置&#39;,command&#x3D;self.clearAll)</span><br><span class="line">        self.change_mode_menu &#x3D; tk.Menu(self.menubar,tearoff&#x3D;0)</span><br><span class="line">        self.menubar.add_cascade(label&#x3D;&#39;模式&#39;,menu&#x3D;self.change_mode_menu)</span><br><span class="line">        self.change_mode_menu.add_command(label&#x3D;&#39;替换模式&#39;,command&#x3D; lambda: self.change_mode(&#39;replace_mode&#39;))</span><br><span class="line">        self.change_mode_menu.add_command(label&#x3D;&#39;加缀模式&#39;,command&#x3D;lambda: self.change_mode(&#39;clues_mode&#39;))</span><br><span class="line">        self.more_menu &#x3D; tk.Menu(self.menubar,tearoff&#x3D;0)</span><br><span class="line">        self.color_menu &#x3D; tk.Menu(self.menubar,tearoff&#x3D;0)</span><br><span class="line">        self.menubar.add_cascade(label&#x3D;&#39;主题&#39;,menu &#x3D; self.color_menu)</span><br><span class="line">        self.color_menu.add_command(label&#x3D;&#39;默认&#39;,command&#x3D;lambda: self.change_color(&#39;默认&#39;,&#39;#eee&#39;,&#39;#eee&#39;,&#39;#eee&#39;,&#39;#000&#39;))</span><br><span class="line">        self.color_menu.add_command(label&#x3D;&#39;灰蓝&#39;,command&#x3D;lambda: self.change_color(&#39;灰蓝&#39;,&#39;#758a99&#39;,&#39;#50616d&#39;,&#39;#41555d&#39;,&#39;#eee&#39;))</span><br><span class="line">        self.color_menu.add_command(label&#x3D;&#39;苍水&#39;,command&#x3D;lambda: self.change_color(&#39;苍水&#39;,&#39;#75878a&#39;,&#39;#88ada6&#39;,&#39;#808080&#39;,&#39;#eee&#39;))</span><br><span class="line">        self.color_menu.add_command(label&#x3D;&#39;茶白&#39;,command&#x3D;lambda: self.change_color(&#39;茶白&#39;,&#39;#f3f9f1&#39;,&#39;#e0eee8&#39;,&#39;#fffbf0&#39;,&#39;#000&#39;))</span><br><span class="line">        self.color_menu.add_command(label&#x3D;&#39;豆青&#39;,command&#x3D;lambda: self.change_color(&#39;豆青&#39;,&#39;#bce672&#39;,&#39;#96ce54&#39;,&#39;#0eb83a&#39;,&#39;#000&#39;))</span><br><span class="line">        self.color_menu.add_command(label&#x3D;&#39;黛紫&#39;,command&#x3D;lambda: self.change_color(&#39;豆青&#39;,&#39;#815463&#39;,&#39;#8c4356&#39;,&#39;#8c4356&#39;,&#39;#fff&#39;))</span><br><span class="line">        self.color_menu.add_command(label&#x3D;&#39;深黑&#39;,command&#x3D;lambda: self.change_color(&#39;深黑&#39;,&#39;#000&#39;,&#39;#000&#39;,&#39;#000&#39;,&#39;#fff&#39;))</span><br><span class="line">        self.color_menu.add_command(label&#x3D;&#39;砺茶&#39;,command&#x3D;lambda: self.change_color(&#39;砺茶&#39;,&#39;#9f6f55&#39;,&#39;#8c6450&#39;,&#39;#a16d5d&#39;,&#39;#fff&#39;))</span><br><span class="line">        self.menubar.add_cascade(label&#x3D;&#39;更多&#39;, menu&#x3D;self.more_menu)</span><br><span class="line">        self.more_menu.add_command(label&#x3D;&#39;bug反馈&#39;,command&#x3D;self.bug_return)</span><br><span class="line">        self.more_menu.add_command(label&#x3D;&#39;赞赏&#39;,command&#x3D;self.reward)</span><br><span class="line">        self.menubar.add_command(label&#x3D;&#39;关于&#39;,command&#x3D;self.about_window)</span><br><span class="line">        self.menubar.add_command(label&#x3D;&#39;更新&#39;,command&#x3D;self.update_link)</span><br><span class="line">        # 菜单栏的关联</span><br><span class="line">        self.window.config(menu&#x3D;self.menubar)</span><br><span class="line">        # 滚动条</span><br><span class="line">        self.original_fileList_text_scroll &#x3D; tk.Scrollbar()</span><br><span class="line">        self.latest_fileList_text_scroll &#x3D; tk.Scrollbar()</span><br><span class="line">        # 放到窗口的右侧, 填充Y竖直方向       </span><br><span class="line">        # 两个控件关联</span><br><span class="line">        self.original_fileList_text_scroll.config(command&#x3D;self.original_fileList_text.yview)</span><br><span class="line">        self.original_fileList_text.config(yscrollcommand&#x3D;self.original_fileList_text_scroll.set)</span><br><span class="line">        self.latest_fileList_text_scroll.config(command&#x3D;self.latest_fileList_text.yview)</span><br><span class="line">        self.latest_fileList_text.config(yscrollcommand&#x3D;self.latest_fileList_text_scroll.set)</span><br><span class="line">        self.change_mode(&#39;replace_mode&#39;)# 初始化标签名字</span><br><span class="line">        #布局</span><br><span class="line">        label_x &#x3D; 10</span><br><span class="line">        extry_x &#x3D; 140</span><br><span class="line">        fileList_text_x &#x3D; 380</span><br><span class="line">        log_text_width &#x3D; 360-label_x</span><br><span class="line">        self.address_label.place(x&#x3D;label_x,y&#x3D;0,width&#x3D;log_text_width&#x2F;3,height&#x3D;30)</span><br><span class="line">        self.to_be_changed_label.place(x&#x3D;label_x,y&#x3D;30,width&#x3D;log_text_width&#x2F;3,height&#x3D;30)</span><br><span class="line">        self.to_change_label.place(x&#x3D;label_x,y&#x3D;60,width&#x3D;log_text_width&#x2F;3,height&#x3D;30)</span><br><span class="line">        self.address_Entry.place(x&#x3D;extry_x,y&#x3D;0,width&#x3D;220,height&#x3D;30)</span><br><span class="line">        self.to_be_changed_Entry.place(x&#x3D;extry_x,y&#x3D;30,width&#x3D;220,height&#x3D;30)</span><br><span class="line">        self.to_change_Entry.place(x&#x3D;extry_x,y&#x3D;60,width&#x3D;220,height&#x3D;30)</span><br><span class="line">        self.change_button.place(x&#x3D;2*(log_text_width)&#x2F;3+label_x,y&#x3D;120,width&#x3D;log_text_width&#x2F;3,height&#x3D;30)</span><br><span class="line">        self.is_all_change_button.place(x&#x3D;100,y&#x3D;90,width&#x3D;280,height&#x3D;30)</span><br><span class="line">        self.log_data_text.place(x&#x3D;label_x,y&#x3D;175,width&#x3D;log_text_width+18,height&#x3D;430-25)</span><br><span class="line">        self.original_fileList_label.place(x&#x3D;fileList_text_x,y&#x3D;0,width&#x3D;100,height&#x3D;30)</span><br><span class="line">        self.original_fileList_text.place(x&#x3D;fileList_text_x,y&#x3D;30,width&#x3D;400,height&#x3D;250)</span><br><span class="line">        self.latest_fileList_label.place(x&#x3D;fileList_text_x,y&#x3D;300,width&#x3D;100,height&#x3D;30)</span><br><span class="line">        self.latest_fileList_text.place(x&#x3D;fileList_text_x,y&#x3D;330,width&#x3D;400,height&#x3D;250)</span><br><span class="line">        self.look_files_button.place(x&#x3D;label_x,y&#x3D;90,width&#x3D;log_text_width&#x2F;3,height&#x3D;30)</span><br><span class="line">        self.clear_button.place(x&#x3D;label_x,y&#x3D;120,width&#x3D;log_text_width&#x2F;3,height&#x3D;30)</span><br><span class="line">        self.original_fileList_text_scroll.place(x&#x3D;780,y&#x3D;0,width&#x3D;15,height&#x3D;300)</span><br><span class="line">        self.latest_fileList_text_scroll.place(x&#x3D;780,y&#x3D;330,width&#x3D;15,height&#x3D;300)</span><br><span class="line">        self.clearLog_button.place(x&#x3D;log_text_width&#x2F;3+label_x,y&#x3D;120,width&#x3D;log_text_width&#x2F;3,height&#x3D;30)</span><br><span class="line">        self.log_data_label.place(x&#x3D;label_x,y&#x3D;150,width&#x3D;log_text_width,height&#x3D;25)</span><br><span class="line">        self.state_label.place(x&#x3D;label_x,y&#x3D;580,width&#x3D;log_text_width,height&#x3D;20)</span><br><span class="line">    def change_color(self,theme_CN,color1,color2,color3,fontcolor):</span><br><span class="line">        self.address_label.config(bg&#x3D;color1,fg&#x3D;fontcolor)</span><br><span class="line">        self.to_be_changed_label.config(bg&#x3D;color2,fg&#x3D;fontcolor)</span><br><span class="line">        self.to_change_label.config(bg&#x3D;color3,fg&#x3D;fontcolor)</span><br><span class="line">        self.original_fileList_label.config(bg &#x3D; color1,fg&#x3D;fontcolor)</span><br><span class="line">        self.latest_fileList_label.config(bg&#x3D;color1,fg&#x3D;fontcolor)</span><br><span class="line">        self.log_data_label.config(bg&#x3D;color2,fg&#x3D;fontcolor)</span><br><span class="line">        self.theme_CN&#x3D;theme_CN</span><br><span class="line">        self.state_label.config(text&#x3D;&#39;当前模式：&#39;+self.mode_CN+&#39;       当前主题：&#39;+self.theme_CN)</span><br><span class="line">    def change_mode(self,mode):</span><br><span class="line">        if mode &#x3D;&#x3D; &#39;replace_mode&#39;:</span><br><span class="line">            self.mode&#x3D;&#39;replace_mode&#39;</span><br><span class="line">            self.to_be_changed_label.config(text &#x3D; &#39;被替换的字符串&#39;)</span><br><span class="line">            self.to_change_label.config(text &#x3D; &#39;来替换的字符串&#39;)</span><br><span class="line">            self.change_button.config(text &#x3D; &#39;替换&#39;)</span><br><span class="line">            self.mode_CN&#x3D;&#39;替换模式&#39;</span><br><span class="line">        else:</span><br><span class="line">            self.mode&#x3D;&#39;clues_mode&#39;</span><br><span class="line">            self.to_be_changed_label.config(text&#x3D;&#39;要添加的前缀&#39;)</span><br><span class="line">            self.to_change_label.config(text &#x3D; &#39;要添加的后缀&#39;)</span><br><span class="line">            self.change_button.config(text &#x3D; &#39;添加&#39;)</span><br><span class="line">            self.mode_CN&#x3D;&#39;加缀模式&#39;</span><br><span class="line">        self.state_label.config(text&#x3D;&#39;当前模式：&#39;+self.mode_CN+&#39;        当前主题：&#39;+self.theme_CN)</span><br><span class="line">    def update_link(self):</span><br><span class="line">        webbrowser.open(&#39;http:&#x2F;&#x2F;asea.ys168.com&#x2F;&#39;,new&#x3D;0)</span><br><span class="line">    def reward(self):</span><br><span class="line">        webbrowser.open(&quot;https:&#x2F;&#x2F;img.imgdb.cn&#x2F;item&#x2F;605ff1f08322e6675cb51721.jpg&quot;, new&#x3D;0)</span><br><span class="line">    def about_window(self):</span><br><span class="line">        tk.messagebox.askyesno(&#39;关于&#39;,&#39;本软件为我闲暇之余开发的小应用，目的是解决一下自己常遇到的批量替换文件名的问题，由于我还是个新手，软件可能还有bug，你可以点击菜单栏的更多——bug反馈来进行反馈，希望本工具能够帮助到你。&#39;)</span><br><span class="line">    def bug_return(self):</span><br><span class="line">        webbrowser.open(&quot;tencent:&#x2F;&#x2F;message&#x2F;?uin&#x3D;569389750&amp;Site&#x3D;admin5.com&amp;Menu&#x3D;yes&quot;, new&#x3D;0)</span><br><span class="line">    #清除工作日志</span><br><span class="line">    def clearLog(self):</span><br><span class="line">        self.log_data_text.delete(1.0,tk.END)</span><br><span class="line">        current_time &#x3D; str(self.get_current_time())</span><br><span class="line">        self.log_data_text.insert(1.0, current_time+&#39; &#39;+&#39;WARNING:已清除\n&#39;)</span><br><span class="line">        # self.log_data_text.mark_set(&#39;insert&#39;, tk.END)</span><br><span class="line">    #遍历文件夹返回生成器</span><br><span class="line">    def findAllFile(self,path): # 获取文件夹下所有文件</span><br><span class="line">        for root, ds, fs in os.walk(path):</span><br><span class="line">            for f in fs:</span><br><span class="line">                fullname &#x3D; [os.path.join(root, f),os.path.join(root),os.path.join(f)]</span><br><span class="line">                yield fullname</span><br><span class="line">    #重置</span><br><span class="line">    def clearAll(self):</span><br><span class="line">        current_time &#x3D; str(self.get_current_time())</span><br><span class="line">        # self.address_Entry.delete(0,tk.END)</span><br><span class="line">        # self.to_be_changed_Entry.delete(0,tk.END)</span><br><span class="line">        # self.to_change_Entry.delete(0,tk.END,)</span><br><span class="line">        # self.log_data_text.delete(1.0,tk.END)</span><br><span class="line">        self.set_window()</span><br><span class="line">        self.log_data_text.insert(1.0,current_time+&#39; &#39;+&#39;WARNING:已重置\n&#39;)</span><br><span class="line">        # self.original_fileList_text.delete(1.0,tk.END)</span><br><span class="line">        # self.latest_fileList_text.delete(1.0,tk.END)</span><br><span class="line">    #获取当前时间</span><br><span class="line">    def get_current_time(self):</span><br><span class="line">        current_time &#x3D; time.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;,time.localtime(time.time()))</span><br><span class="line">        return current_time</span><br><span class="line">    #判断是否输入文件夹地址</span><br><span class="line">    def callChange(self):</span><br><span class="line">        if self.address_Entry.get() !&#x3D; &#39;&#39;:</span><br><span class="line">            self.change_name()</span><br><span class="line">    #查看当前文件夹目录</span><br><span class="line">    def look_files(self):</span><br><span class="line">        self.original_fileList_text.delete(1.0,tk.END)</span><br><span class="line">        address_str &#x3D; self.address_Entry.get()</span><br><span class="line">        try:</span><br><span class="line">            if self.is_all_change.get():</span><br><span class="line">                fileList &#x3D; self.findAllFile(address_str)</span><br><span class="line">                for filelist in fileList:</span><br><span class="line">                    self.original_fileList_text.insert(tk.END,filelist[2]+&#39;\n&#39;)</span><br><span class="line">            else:</span><br><span class="line">                fileList &#x3D; os.listdir(address_str)</span><br><span class="line">                for fileName in fileList:</span><br><span class="line">                    self.original_fileList_text.insert(tk.END,fileName+&#39;\n&#39;)</span><br><span class="line">        except:</span><br><span class="line">            current_time &#x3D; self.get_current_time()</span><br><span class="line">            self.log_data_text.insert(tk.END,current_time+&#39; &#39;+&#39;ERROR:请确认路径存在\n&#39;)</span><br><span class="line"></span><br><span class="line">    #主函数</span><br><span class="line">    def change_name(self):</span><br><span class="line">        address_str &#x3D; self.address_Entry.get()</span><br><span class="line">        if self.is_all_change.get():#判断是否遍历</span><br><span class="line">            current_time &#x3D; self.get_current_time()</span><br><span class="line">            try:</span><br><span class="line">                fileList &#x3D; self.findAllFile(address_str)</span><br><span class="line">            except:</span><br><span class="line">                self.log_data_text.insert(tk.END,current_time+&#39; &#39;+&#39;ERROR:请确认路径存在\n&#39;)</span><br><span class="line">            self.original_fileList_text.delete(1.0,tk.END)</span><br><span class="line">            self.latest_fileList_text.delete(1.0,tk.END)</span><br><span class="line">            to_be_changed_str &#x3D; self.to_be_changed_Entry.get()</span><br><span class="line">            to_change_str &#x3D; self.to_change_Entry.get()</span><br><span class="line">            num &#x3D; 0</span><br><span class="line">            for filelist in (fileList):</span><br><span class="line">                fileName &#x3D; filelist[0]#绝对路径</span><br><span class="line">                fileRoot &#x3D; filelist[1]+&#39;\\&#39;</span><br><span class="line">                fileShortName &#x3D; filelist[2]</span><br><span class="line">                self.original_fileList_text.insert(tk.END,fileShortName+&#39;\n&#39;)</span><br><span class="line">                if self.mode &#x3D;&#x3D; &#39;replace_mode&#39;:</span><br><span class="line">                    try:</span><br><span class="line">                        os.rename(fileName, fileRoot + fileShortName.replace(to_be_changed_str,to_change_str)) # 文件重新命名</span><br><span class="line">                        if fileShortName !&#x3D; fileShortName.replace(to_be_changed_str,to_change_str):</span><br><span class="line">                            num +&#x3D; 1</span><br><span class="line">                            self.log_data_text.insert(tk.END, &#39;已将\n&#39;+fileShortName+&#39;\n&#39;+&#39;修改为\n&#39;+fileShortName.replace(to_be_changed_str,to_change_str)+&#39;\n&#39;+&#39;-&#39;*20+&#39;\n&#39;)</span><br><span class="line">                    except:</span><br><span class="line">                        self.log_data_text.insert(tk.END,current_time+&#39; &#39;+&#39;ERROR:无法同时存在两个相同名字的文件\n&#39;)</span><br><span class="line">                else:</span><br><span class="line">                    try:</span><br><span class="line">                        os.rename(fileName, fileRoot + to_be_changed_str + os.path.splitext(fileShortName)[0] + to_change_str + os.path.splitext(fileShortName)[1]) </span><br><span class="line">                        num +&#x3D; 1</span><br><span class="line">                        self.log_data_text.insert(tk.END, &#39;已将\n&#39;+fileName+&#39;\n&#39;+&#39;修改为\n&#39;+fileRoot + fileShortName.replace(to_be_changed_str,to_change_str)+&#39;\n&#39;+&#39;-&#39;*20+&#39;\n&#39;)</span><br><span class="line">                    except:</span><br><span class="line">                        self.log_data_text.insert(tk.END,current_time+&#39; &#39;+&#39;ERROR:添加错误，请点击菜单栏反馈bug\n&#39;)</span><br><span class="line">            self.log_data_text.insert(tk.END,current_time+&#39; &#39;+&#39;共修改&#39;+str(num)+&#39;个文件&#39;+&#39;\n&#39;+&#39;&#123;:■^26&#125;&#39;.format(&#39;本次修改结束&#39;)+&#39;\n&#39;)</span><br><span class="line">            fileList &#x3D; self.findAllFile(address_str)</span><br><span class="line">            for filelist in fileList:</span><br><span class="line">                self.latest_fileList_text.insert(tk.END,filelist[2]+&#39;\n&#39;)</span><br><span class="line">            self.log_data_text.see(tk.END) # 自动将光标移到末尾</span><br><span class="line">        else:</span><br><span class="line">            current_time &#x3D; self.get_current_time()</span><br><span class="line">            try:</span><br><span class="line">                fileList &#x3D; os.listdir(address_str)</span><br><span class="line">            except:</span><br><span class="line">                self.log_data_text.insert(tk.END,current_time+&#39; &#39;+&#39;ERROR:请确认路径存在\n&#39;)</span><br><span class="line">            # os.chdir(address_str)  # 将当前工作目录修改为待修改文件夹的位置</span><br><span class="line">            self.original_fileList_text.delete(1.0,tk.END)</span><br><span class="line">            self.latest_fileList_text.delete(1.0,tk.END)</span><br><span class="line">            to_be_changed_str &#x3D; self.to_be_changed_Entry.get()</span><br><span class="line">            to_change_str &#x3D; self.to_change_Entry.get()</span><br><span class="line">            num &#x3D; 0</span><br><span class="line">            for fileName in fileList:</span><br><span class="line">                self.original_fileList_text.insert(tk.END,fileName+&#39;\n&#39;)</span><br><span class="line">                if self.mode &#x3D;&#x3D; &#39;replace_mode&#39;:</span><br><span class="line">                    try:</span><br><span class="line">                        os.rename(address_str+&#39;\\&#39;+fileName, address_str+&#39;\\&#39;+fileName.replace(to_be_changed_str,to_change_str)) # 3. 文件重新命名 规则根据需求自己定</span><br><span class="line">                        if fileName !&#x3D; fileName.replace(to_be_changed_str,to_change_str):</span><br><span class="line">                            num +&#x3D; 1</span><br><span class="line">                            self.log_data_text.insert(tk.END, &#39;已将\n&#39;+fileName+&#39;\n&#39;+&#39;修改为\n&#39;+fileName.replace(to_be_changed_str,to_change_str)+&#39;\n&#39;+&#39;-&#39;*20+&#39;\n&#39;)</span><br><span class="line">                    except:</span><br><span class="line">                        self.log_data_text.insert(tk.END,current_time+&#39; &#39;+&#39;ERROR:无法同时存在两个相同名字的文件\n&#39;)</span><br><span class="line">                else:</span><br><span class="line">                    try:</span><br><span class="line">                        os.rename(address_str+&#39;\\&#39;+fileName, address_str+&#39;\\&#39;+to_be_changed_str+os.path.splitext(fileName)[0]+to_change_str+os.path.splitext(fileName)[1]) # 3. 文件重新命名 规则根据需求自己定</span><br><span class="line">                        num +&#x3D; 1</span><br><span class="line">                        self.log_data_text.insert(tk.END, &#39;已将\n&#39;+fileName+&#39;\n&#39;+&#39;修改为\n&#39;+fileName.replace(to_be_changed_str,to_change_str)+&#39;\n&#39;+&#39;-&#39;*20+&#39;\n&#39;)</span><br><span class="line">                    except:</span><br><span class="line">                        self.log_data_text.insert(tk.END,current_time+&#39; &#39;+&#39;ERROR:添加错误，请点击菜单栏反馈bug\n&#39;)</span><br><span class="line">            fileList &#x3D; os.listdir(address_str)</span><br><span class="line">            self.latest_fileList_text.insert(tk.END,&#39;\n&#39;.join(fileList))</span><br><span class="line">            self.log_data_text.insert(tk.END,current_time+&#39; &#39;+&#39;共修改&#39;+str(num)+&#39;个文件&#39;+&#39;\n&#39;+&#39;&#123;:■^26&#125;&#39;.format(&#39;本次修改结束&#39;)+&#39;\n&#39;)</span><br><span class="line">            self.log_data_text.see(tk.END)</span><br><span class="line"></span><br><span class="line">def gui_start():</span><br><span class="line">    window &#x3D; tk.Tk()</span><br><span class="line">    MY_PORTAL &#x3D; MY_GUI(window)</span><br><span class="line">    MY_PORTAL.set_window()</span><br><span class="line">    window.mainloop()</span><br><span class="line"></span><br><span class="line">gui_start()#启动</span><br></pre></td></tr></table></figure><h2 id="pyinstaller反编译代码《pyinstxtractor-py》"><a href="#pyinstaller反编译代码《pyinstxtractor-py》" class="headerlink" title="pyinstaller反编译代码《pyinstxtractor.py》"></a>pyinstaller反编译代码《pyinstxtractor.py》</h2><blockquote><p>具体使用可以自行百度<strong>pyinstxtractor.py</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">PyInstaller Extractor v1.9 (Supports pyinstaller 3.3, 3.2, 3.1, 3.0, 2.1, 2.0)</span><br><span class="line">Author : Extreme Coders</span><br><span class="line">E-mail : extremecoders(at)hotmail(dot)com</span><br><span class="line">Web    : https:&#x2F;&#x2F;0xec.blogspot.com</span><br><span class="line">Date   : 29-November-2017</span><br><span class="line">Url    : https:&#x2F;&#x2F;sourceforge.net&#x2F;projects&#x2F;pyinstallerextractor&#x2F;</span><br><span class="line"></span><br><span class="line">For any suggestions, leave a comment on</span><br><span class="line">https:&#x2F;&#x2F;forum.tuts4you.com&#x2F;topic&#x2F;34455-pyinstaller-extractor&#x2F;</span><br><span class="line"></span><br><span class="line">This script extracts a pyinstaller generated executable file.</span><br><span class="line">Pyinstaller installation is not needed. The script has it all.</span><br><span class="line"></span><br><span class="line">For best results, it is recommended to run this script in the</span><br><span class="line">same version of python as was used to create the executable.</span><br><span class="line">This is just to prevent unmarshalling errors(if any) while</span><br><span class="line">extracting the PYZ archive.</span><br><span class="line"></span><br><span class="line">Usage : Just copy this script to the directory where your exe resides</span><br><span class="line">        and run the script with the exe file name as a parameter</span><br><span class="line"></span><br><span class="line">C:\path\to\exe\&gt;python pyinstxtractor.py &lt;filename&gt;</span><br><span class="line">$ &#x2F;path&#x2F;to&#x2F;exe&#x2F;python pyinstxtractor.py &lt;filename&gt;</span><br><span class="line"></span><br><span class="line">Licensed under GNU General Public License (GPL) v3.</span><br><span class="line">You are free to modify this source.</span><br><span class="line"></span><br><span class="line">CHANGELOG</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">Version 1.1 (Jan 28, 2014)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- First Release</span><br><span class="line">- Supports only pyinstaller 2.0</span><br><span class="line"></span><br><span class="line">Version 1.2 (Sept 12, 2015)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- Added support for pyinstaller 2.1 and 3.0 dev</span><br><span class="line">- Cleaned up code</span><br><span class="line">- Script is now more verbose</span><br><span class="line">- Executable extracted within a dedicated sub-directory</span><br><span class="line"></span><br><span class="line">(Support for pyinstaller 3.0 dev is experimental)</span><br><span class="line"></span><br><span class="line">Version 1.3 (Dec 12, 2015)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- Added support for pyinstaller 3.0 final</span><br><span class="line">- Script is compatible with both python 2.x &amp; 3.x (Thanks to Moritz Kroll @ Avira Operations GmbH &amp; Co. KG)</span><br><span class="line"></span><br><span class="line">Version 1.4 (Jan 19, 2016)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- Fixed a bug when writing pyc files &gt;&#x3D; version 3.3 (Thanks to Daniello Alto: https:&#x2F;&#x2F;github.com&#x2F;Djamana)</span><br><span class="line"></span><br><span class="line">Version 1.5 (March 1, 2016)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- Added support for pyinstaller 3.1 (Thanks to Berwyn Hoyt for reporting)</span><br><span class="line"></span><br><span class="line">Version 1.6 (Sept 5, 2016)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- Added support for pyinstaller 3.2</span><br><span class="line">- Extractor will use a random name while extracting unnamed files.</span><br><span class="line">- For encrypted pyz archives it will dump the contents as is. Previously, the tool would fail.</span><br><span class="line"></span><br><span class="line">Version 1.7 (March 13, 2017)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- Made the script compatible with python 2.6 (Thanks to Ross for reporting)</span><br><span class="line"></span><br><span class="line">Version 1.8 (April 28, 2017)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- Support for sub-directories in .pyz files (Thanks to Moritz Kroll @ Avira Operations GmbH &amp; Co. KG)</span><br><span class="line"></span><br><span class="line">Version 1.9 (November 29, 2017)</span><br><span class="line">-------------------------------------------------</span><br><span class="line">- Added support for pyinstaller 3.3</span><br><span class="line">- Display the scripts which are run at entry (Thanks to Michael Gillespie @ malwarehunterteam for the feature request)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">from __future__ import print_function</span><br><span class="line">import os</span><br><span class="line">import struct</span><br><span class="line">import marshal</span><br><span class="line">import zlib</span><br><span class="line">import sys</span><br><span class="line">import imp</span><br><span class="line">import types</span><br><span class="line">from uuid import uuid4 as uniquename</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CTOCEntry:</span><br><span class="line">    def __init__(self, position, cmprsdDataSize, uncmprsdDataSize, cmprsFlag, typeCmprsData, name):</span><br><span class="line">        self.position &#x3D; position</span><br><span class="line">        self.cmprsdDataSize &#x3D; cmprsdDataSize</span><br><span class="line">        self.uncmprsdDataSize &#x3D; uncmprsdDataSize</span><br><span class="line">        self.cmprsFlag &#x3D; cmprsFlag</span><br><span class="line">        self.typeCmprsData &#x3D; typeCmprsData</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class PyInstArchive:</span><br><span class="line">    PYINST20_COOKIE_SIZE &#x3D; 24           # For pyinstaller 2.0</span><br><span class="line">    PYINST21_COOKIE_SIZE &#x3D; 24 + 64      # For pyinstaller 2.1+</span><br><span class="line">    MAGIC &#x3D; b&#39;MEI\014\013\012\013\016&#39;  # Magic number which identifies pyinstaller</span><br><span class="line"></span><br><span class="line">    def __init__(self, path):</span><br><span class="line">        self.filePath &#x3D; path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def open(self):</span><br><span class="line">        try:</span><br><span class="line">            self.fPtr &#x3D; open(self.filePath, &#39;rb&#39;)</span><br><span class="line">            self.fileSize &#x3D; os.stat(self.filePath).st_size</span><br><span class="line">        except:</span><br><span class="line">            print(&#39;[*] Error: Could not open &#123;0&#125;&#39;.format(self.filePath))</span><br><span class="line">            return False</span><br><span class="line">        return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        try:</span><br><span class="line">            self.fPtr.close()</span><br><span class="line">        except:</span><br><span class="line">            pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def checkFile(self):</span><br><span class="line">        print(&#39;[*] Processing &#123;0&#125;&#39;.format(self.filePath))</span><br><span class="line">        # Check if it is a 2.0 archive</span><br><span class="line">        self.fPtr.seek(self.fileSize - self.PYINST20_COOKIE_SIZE, os.SEEK_SET)</span><br><span class="line">        magicFromFile &#x3D; self.fPtr.read(len(self.MAGIC))</span><br><span class="line"></span><br><span class="line">        if magicFromFile &#x3D;&#x3D; self.MAGIC:</span><br><span class="line">            self.pyinstVer &#x3D; 20     # pyinstaller 2.0</span><br><span class="line">            print(&#39;[*] Pyinstaller version: 2.0&#39;)</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">        # Check for pyinstaller 2.1+ before bailing out</span><br><span class="line">        self.fPtr.seek(self.fileSize - self.PYINST21_COOKIE_SIZE, os.SEEK_SET)</span><br><span class="line">        magicFromFile &#x3D; self.fPtr.read(len(self.MAGIC))</span><br><span class="line"></span><br><span class="line">        if magicFromFile &#x3D;&#x3D; self.MAGIC:</span><br><span class="line">            print(&#39;[*] Pyinstaller version: 2.1+&#39;)</span><br><span class="line">            self.pyinstVer &#x3D; 21     # pyinstaller 2.1+</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">        print(&#39;[*] Error : Unsupported pyinstaller version or not a pyinstaller archive&#39;)</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def getCArchiveInfo(self):</span><br><span class="line">        try:</span><br><span class="line">            if self.pyinstVer &#x3D;&#x3D; 20:</span><br><span class="line">                self.fPtr.seek(self.fileSize - self.PYINST20_COOKIE_SIZE, os.SEEK_SET)</span><br><span class="line"></span><br><span class="line">                # Read CArchive cookie</span><br><span class="line">                (magic, lengthofPackage, toc, tocLen, self.pyver) &#x3D; \</span><br><span class="line">                struct.unpack(&#39;!8siiii&#39;, self.fPtr.read(self.PYINST20_COOKIE_SIZE))</span><br><span class="line"></span><br><span class="line">            elif self.pyinstVer &#x3D;&#x3D; 21:</span><br><span class="line">                self.fPtr.seek(self.fileSize - self.PYINST21_COOKIE_SIZE, os.SEEK_SET)</span><br><span class="line"></span><br><span class="line">                # Read CArchive cookie</span><br><span class="line">                (magic, lengthofPackage, toc, tocLen, self.pyver, pylibname) &#x3D; \</span><br><span class="line">                struct.unpack(&#39;!8siiii64s&#39;, self.fPtr.read(self.PYINST21_COOKIE_SIZE))</span><br><span class="line"></span><br><span class="line">        except:</span><br><span class="line">            print(&#39;[*] Error : The file is not a pyinstaller archive&#39;)</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line">        print(&#39;[*] Python version: &#123;0&#125;&#39;.format(self.pyver))</span><br><span class="line"></span><br><span class="line">        # Overlay is the data appended at the end of the PE</span><br><span class="line">        self.overlaySize &#x3D; lengthofPackage</span><br><span class="line">        self.overlayPos &#x3D; self.fileSize - self.overlaySize</span><br><span class="line">        self.tableOfContentsPos &#x3D; self.overlayPos + toc</span><br><span class="line">        self.tableOfContentsSize &#x3D; tocLen</span><br><span class="line"></span><br><span class="line">        print(&#39;[*] Length of package: &#123;0&#125; bytes&#39;.format(self.overlaySize))</span><br><span class="line">        return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def parseTOC(self):</span><br><span class="line">        # Go to the table of contents</span><br><span class="line">        self.fPtr.seek(self.tableOfContentsPos, os.SEEK_SET)</span><br><span class="line"></span><br><span class="line">        self.tocList &#x3D; []</span><br><span class="line">        parsedLen &#x3D; 0</span><br><span class="line"></span><br><span class="line">        # Parse table of contents</span><br><span class="line">        while parsedLen &lt; self.tableOfContentsSize:</span><br><span class="line">            (entrySize, ) &#x3D; struct.unpack(&#39;!i&#39;, self.fPtr.read(4))</span><br><span class="line">            nameLen &#x3D; struct.calcsize(&#39;!iiiiBc&#39;)</span><br><span class="line"></span><br><span class="line">            (entryPos, cmprsdDataSize, uncmprsdDataSize, cmprsFlag, typeCmprsData, name) &#x3D; \</span><br><span class="line">            struct.unpack( \</span><br><span class="line">                &#39;!iiiBc&#123;0&#125;s&#39;.format(entrySize - nameLen), \</span><br><span class="line">                self.fPtr.read(entrySize - 4))</span><br><span class="line"></span><br><span class="line">            name &#x3D; name.decode(&#39;utf-8&#39;).rstrip(&#39;\0&#39;)</span><br><span class="line">            if len(name) &#x3D;&#x3D; 0:</span><br><span class="line">                name &#x3D; str(uniquename())</span><br><span class="line">                print(&#39;[!] Warning: Found an unamed file in CArchive. Using random name &#123;0&#125;&#39;.format(name))</span><br><span class="line"></span><br><span class="line">            self.tocList.append( \</span><br><span class="line">                                CTOCEntry(                      \</span><br><span class="line">                                    self.overlayPos + entryPos, \</span><br><span class="line">                                    cmprsdDataSize,             \</span><br><span class="line">                                    uncmprsdDataSize,           \</span><br><span class="line">                                    cmprsFlag,                  \</span><br><span class="line">                                    typeCmprsData,              \</span><br><span class="line">                                    name                        \</span><br><span class="line">                                ))</span><br><span class="line"></span><br><span class="line">            parsedLen +&#x3D; entrySize</span><br><span class="line">        print(&#39;[*] Found &#123;0&#125; files in CArchive&#39;.format(len(self.tocList)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def extractFiles(self):</span><br><span class="line">        print(&#39;[*] Beginning extraction...please standby&#39;)</span><br><span class="line">        extractionDir &#x3D; os.path.join(os.getcwd(), os.path.basename(self.filePath) + &#39;_extracted&#39;)</span><br><span class="line"></span><br><span class="line">        if not os.path.exists(extractionDir):</span><br><span class="line">            os.mkdir(extractionDir)</span><br><span class="line"></span><br><span class="line">        os.chdir(extractionDir)</span><br><span class="line"></span><br><span class="line">        for entry in self.tocList:</span><br><span class="line">            basePath &#x3D; os.path.dirname(entry.name)</span><br><span class="line">            if basePath !&#x3D; &#39;&#39;:</span><br><span class="line">                # Check if path exists, create if not</span><br><span class="line">                if not os.path.exists(basePath):</span><br><span class="line">                    os.makedirs(basePath)</span><br><span class="line"></span><br><span class="line">            self.fPtr.seek(entry.position, os.SEEK_SET)</span><br><span class="line">            data &#x3D; self.fPtr.read(entry.cmprsdDataSize)</span><br><span class="line"></span><br><span class="line">            if entry.cmprsFlag &#x3D;&#x3D; 1:</span><br><span class="line">                data &#x3D; zlib.decompress(data)</span><br><span class="line">                # Malware may tamper with the uncompressed size</span><br><span class="line">                # Comment out the assertion in such a case</span><br><span class="line">                assert len(data) &#x3D;&#x3D; entry.uncmprsdDataSize # Sanity Check</span><br><span class="line"></span><br><span class="line">            with open(entry.name, &#39;wb&#39;) as f:</span><br><span class="line">                f.write(data)</span><br><span class="line"></span><br><span class="line">            if entry.typeCmprsData &#x3D;&#x3D; b&#39;s&#39;:</span><br><span class="line">            print(&#39;[+] Possible entry point: &#123;0&#125;&#39;.format(entry.name))</span><br><span class="line"></span><br><span class="line">            elif entry.typeCmprsData &#x3D;&#x3D; b&#39;z&#39; or entry.typeCmprsData &#x3D;&#x3D; b&#39;Z&#39;:</span><br><span class="line">                self._extractPyz(entry.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def _extractPyz(self, name):</span><br><span class="line">        dirName &#x3D;  name + &#39;_extracted&#39;</span><br><span class="line">        # Create a directory for the contents of the pyz</span><br><span class="line">        if not os.path.exists(dirName):</span><br><span class="line">            os.mkdir(dirName)</span><br><span class="line"></span><br><span class="line">        with open(name, &#39;rb&#39;) as f:</span><br><span class="line">            pyzMagic &#x3D; f.read(4)</span><br><span class="line">            assert pyzMagic &#x3D;&#x3D; b&#39;PYZ\0&#39; # Sanity Check</span><br><span class="line"></span><br><span class="line">            pycHeader &#x3D; f.read(4) # Python magic value</span><br><span class="line"></span><br><span class="line">            if imp.get_magic() !&#x3D; pycHeader:</span><br><span class="line">                print(&#39;[!] Warning: The script is running in a different python version than the one used to build the executable&#39;)</span><br><span class="line">                print(&#39;    Run this script in Python&#123;0&#125; to prevent extraction errors(if any) during unmarshalling&#39;.format(self.pyver))</span><br><span class="line"></span><br><span class="line">            (tocPosition, ) &#x3D; struct.unpack(&#39;!i&#39;, f.read(4))</span><br><span class="line">            f.seek(tocPosition, os.SEEK_SET)</span><br><span class="line"></span><br><span class="line">            try:</span><br><span class="line">                toc &#x3D; marshal.load(f)</span><br><span class="line">            except:</span><br><span class="line">                print(&#39;[!] Unmarshalling FAILED. Cannot extract &#123;0&#125;. Extracting remaining files.&#39;.format(name))</span><br><span class="line">                return</span><br><span class="line"></span><br><span class="line">            print(&#39;[*] Found &#123;0&#125; files in PYZ archive&#39;.format(len(toc)))</span><br><span class="line"></span><br><span class="line">            # From pyinstaller 3.1+ toc is a list of tuples</span><br><span class="line">            if type(toc) &#x3D;&#x3D; list:</span><br><span class="line">                toc &#x3D; dict(toc)</span><br><span class="line"></span><br><span class="line">            for key in toc.keys():</span><br><span class="line">                (ispkg, pos, length) &#x3D; toc[key]</span><br><span class="line">                f.seek(pos, os.SEEK_SET)</span><br><span class="line"></span><br><span class="line">                fileName &#x3D; key</span><br><span class="line">                try:</span><br><span class="line">                    # for Python &gt; 3.3 some keys are bytes object some are str object</span><br><span class="line">                    fileName &#x3D; key.decode(&#39;utf-8&#39;)</span><br><span class="line">                except:</span><br><span class="line">                    pass</span><br><span class="line"></span><br><span class="line">                # Make sure destination directory exists, ensuring we keep inside dirName</span><br><span class="line">                destName &#x3D; os.path.join(dirName, fileName.replace(&quot;..&quot;, &quot;__&quot;))</span><br><span class="line">                destDirName &#x3D; os.path.dirname(destName)</span><br><span class="line">                if not os.path.exists(destDirName):</span><br><span class="line">                    os.makedirs(destDirName)</span><br><span class="line"></span><br><span class="line">                try:</span><br><span class="line">                    data &#x3D; f.read(length)</span><br><span class="line">                    data &#x3D; zlib.decompress(data)</span><br><span class="line">                except:</span><br><span class="line">                    print(&#39;[!] Error: Failed to decompress &#123;0&#125;, probably encrypted. Extracting as is.&#39;.format(fileName))</span><br><span class="line">                    open(destName + &#39;.pyc.encrypted&#39;, &#39;wb&#39;).write(data)</span><br><span class="line">                    continue</span><br><span class="line"></span><br><span class="line">                with open(destName + &#39;.pyc&#39;, &#39;wb&#39;) as pycFile:</span><br><span class="line">                    pycFile.write(pycHeader)      # Write pyc magic</span><br><span class="line">                    pycFile.write(b&#39;\0&#39; * 4)      # Write timestamp</span><br><span class="line">                    if self.pyver &gt;&#x3D; 33:</span><br><span class="line">                        pycFile.write(b&#39;\0&#39; * 4)  # Size parameter added in Python 3.3</span><br><span class="line">                    pycFile.write(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    if len(sys.argv) &lt; 2:</span><br><span class="line">        print(&#39;[*] Usage: pyinstxtractor.py &lt;filename&gt;&#39;)</span><br><span class="line"></span><br><span class="line">    else:</span><br><span class="line">        arch &#x3D; PyInstArchive(sys.argv[1])</span><br><span class="line">        if arch.open():</span><br><span class="line">            if arch.checkFile():</span><br><span class="line">                if arch.getCArchiveInfo():</span><br><span class="line">                    arch.parseTOC()</span><br><span class="line">                    arch.extractFiles()</span><br><span class="line">                    arch.close()</span><br><span class="line">                    print(&#39;[*] Successfully extracted pyinstaller archive: &#123;0&#125;&#39;.format(sys.argv[1]))</span><br><span class="line">                    print(&#39;&#39;)</span><br><span class="line">                    print(&#39;You can now use a python decompiler on the pyc files within the extracted directory&#39;)</span><br><span class="line">                    return</span><br><span class="line"></span><br><span class="line">            arch.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="预支项目"><a href="#预支项目" class="headerlink" title="预支项目"></a>预支项目</h1><h2 id="opencv"><a href="#opencv" class="headerlink" title="opencv"></a>opencv</h2><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><h2 id="pdf-word"><a href="#pdf-word" class="headerlink" title="pdf-word"></a>pdf-word</h2><h2 id="mysql-python搭建后端接口"><a href="#mysql-python搭建后端接口" class="headerlink" title="mysql+python搭建后端接口"></a>mysql+python搭建后端接口</h2></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>three.js学习笔记</title>
      <link href="post/afab6017.html"/>
      <url>post/afab6017.html</url>
      
        <content type="html"><![CDATA[<h1 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h1><p><img src="/images/three/three%E7%BB%93%E6%9E%84.jpg" alt></p><h1 id="live-server的坑"><a href="#live-server的坑" class="headerlink" title="live-server的坑"></a>live-server的坑</h1><p>html引入本地three.js文件后404，因为我live-server启动的地方没有包含three.js-master。应该在根目录启动。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> three.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python笔记</title>
      <link href="post/c00b24b1.html"/>
      <url>post/c00b24b1.html</url>
      
        <content type="html"><![CDATA[<h1 id="开发环境IDLE"><a href="#开发环境IDLE" class="headerlink" title="开发环境IDLE"></a>开发环境IDLE</h1><p><code>exit() quit()</code><br>shift + 右键打开命令行<br><code>ctrl + o</code><br><code>ctrl + n</code> #交互界面下<br><code>ctrl + q</code><br><code>alt + 3/4</code> 注释与解除 注释：##<br><code>f5</code> run<br>pypi.org 库网址</p><hr><h1 id="pip-命令"><a href="#pip-命令" class="headerlink" title="pip 命令"></a>pip 命令</h1><p><code>pip list</code><br><code>pip install package1 package2</code><br><code>pip install --upgrade package</code><br><code>pip uninstall package</code></p><hr><h1 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h1><ul><li><strong>三种导入方式:</strong><ul><li>导入整个模块 <code>import模块名as模块的别名（自定义）</code></li><li>明确导入模块中的特定对象 <code>from模块名import对象名as别名</code></li><li>导入特定模块中的所有对象 <code>from 模块名 import *</code> (不建议)</li></ul></li></ul><hr><h1 id="变量及数据类型"><a href="#变量及数据类型" class="headerlink" title="变量及数据类型"></a>变量及数据类型</h1><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ol><li><p>变量名必须以字母或下划线开头，不能以数字开头。·但下划线开头的变量在Python中有特殊含义。</p></li><li><p>变量名中不能有空格或标点符号。(括号、引号、逗号、斜线、反斜线、冒号、句号、问号等）。”</p></li><li><p>不能使用关键字作为变量名。关键字( keyword，也称为保留字，Python3版本中共有33个)。</p></li><li><p>不建议使用系统内置的模块名、类型名或函数名以及已导入的模块名及其成员名作为变量名，这会改变其类型和含义，甚至会导致4 其他代码无法正常执行。</p></li><li><p>变量名对英文字母的大小写敏感绶即要区分大小写。例如:a与A是不同的变量。</p></li><li><p>Python3版本可以使用中文。</p></li><li><p>变量的值是可以变化的，类型也随之发生改变。比如:<code>a = 3 ; a = &quot;3&quot;</code><br>小结:Python采用大、小写字母，数字，下划线，汉字等字符及其组合进行命名，长度没有限制，但是<em>首字符不能是数字</em> ，不能出现空格与标点符号，大小写敏感，不能与关键字相同。(不建议使用中文等非英语语言字符)。</p></li></ol><h3 id="查看已有关键字"><a href="#查看已有关键字" class="headerlink" title="查看已有关键字"></a>查看已有关键字</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import keyword</span><br><span class="line">keyword.kwlist</span><br><span class="line">[&#39;False&#39;, &#39;None&#39;, &#39;True&#39;, &#39;and&#39;, &#39;as&#39;, &#39;assert&#39;, &#39;async&#39;, &#39;await&#39;, &#39;break&#39;, &#39;class&#39;, &#39;continue&#39;, &#39;def&#39;, &#39;del&#39;, &#39;elif&#39;, &#39;else&#39;, &#39;except&#39;, &#39;finally&#39;, &#39;for&#39;, &#39;from&#39;, &#39;global&#39;, &#39;if&#39;, &#39;import&#39;, &#39;in&#39;, &#39;is&#39;, &#39;lambda&#39;, &#39;nonlocal&#39;, &#39;not&#39;, &#39;or&#39;, &#39;pass&#39;, &#39;raise&#39;, &#39;return&#39;, &#39;try&#39;, &#39;while&#39;, &#39;with&#39;, &#39;yield&#39;]</span><br></pre></td></tr></table></figure><h3 id="查看已有内置对象名"><a href="#查看已有内置对象名" class="headerlink" title="查看已有内置对象名"></a>查看已有内置对象名</h3><p><code>dir(__builtins__)</code></p><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>10 2 8 16进制转换：<code>int() bin() oct() hex()</code>，其中0b 0o 0x 代表2 8 16进制。<br><code>int(&#39;111&#39;,6)</code></p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p><code>float(&quot;3.5&quot;)</code> = 3.5</p><h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><p><code>complex(3,5)</code> = (3+5j)<br><code>complex(&#39;3+5j&#39;)</code> = (3+5j)</p><h3 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h3><p><code>abs()</code><br><code>divmond()</code><br><code>pow()</code><br><code>round()</code></p><p><img src="/images/python/%E5%87%BD%E6%95%B0.jpg" alt></p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p><code>+ - * / // % **</code></p><p>字符串相加即为拼接，集合相减为差集，字符串*3即为重复3次</p><p><strong>优先级</strong></p><ol><li><code>**</code></li><li><code>* / % //</code></li><li><code>+ -</code></li></ol><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p><code>== != &gt; &lt; &gt;= &lt;=</code><br>返回值为boolean</p><h3 id="赋值运算符（加强赋值操作符）"><a href="#赋值运算符（加强赋值操作符）" class="headerlink" title="赋值运算符（加强赋值操作符）"></a>赋值运算符（加强赋值操作符）</h3><p><code>= += -= *= /= //= %= **=</code><br>中间不能出现空格<br><code>b *= 3+2</code>  先算=右侧</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p><code>and or not</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x and y</span><br><span class="line">x or y</span><br><span class="line">not x</span><br></pre></td></tr></table></figure><p>比较运算符优先于逻辑运算符</p><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p><img src="/images/python/%E4%BC%98%E5%85%88%E7%BA%A7.jpg" alt></p><h3 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h3><p>in |  not in<br>返回boolean</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 in (1,2)</span><br><span class="line">true</span><br></pre></td></tr></table></figure><h3 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h3><p>is |    is not<br><code>x is y</code>等价于<code>id(x) == id(y)</code></p><h3 id="集合运算符"><a href="#集合运算符" class="headerlink" title="集合运算符"></a>集合运算符</h3><table><thead><tr><th>&amp;</th><th>|</th><th>-</th><th>^</th></tr></thead><tbody><tr><td>交集</td><td>并集</td><td>差集</td><td>对称差集</td></tr></tbody></table><p>对称差集即为<code>(a | b) - (a &amp; b)</code></p><hr><h1 id="组合数据"><a href="#组合数据" class="headerlink" title="组合数据"></a>组合数据</h1><p><img src="/images/python/%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE.jpg" alt></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>str():将其他序列转化为字符串，会把集合完全转化为字符串<br>比如<br>a = str(set1)<br>a[0]<br>‘(‘<br>把字典转化成str的时候好像冒号后面会多个空格</p><h3 id="字符串的创建"><a href="#字符串的创建" class="headerlink" title="字符串的创建"></a>字符串的创建</h3><ol><li>交互式<code>a</code>与<code>print(a)</code>的区别是少个<code>‘’</code></li><li>多行字符串内敲入回车会换行，可以加<code>\</code>防止换行。<code>\n</code>表示换行。</li><li>多行字符串用<code>&#39;&#39;&#39;三单&#39;&#39;&#39;</code>或者<code>&quot;&quot;&quot;三双&quot;&quot;&quot;</code>具体可参考：<a href="https://blog.csdn.net/woainishifu/article/details/76105667">《Python中单引号，双引号，3个单引号及3个双引号的区别》</a></li><li>反斜杠<code>\</code>的用处<ol><li>续行符</li><li>转义符： <code>\n</code>表示换行符</li></ol></li><li><code>str = &quot;&quot;&quot;他说：&quot;你好。&quot; &quot;&quot;&quot;</code> 后面四个<code>&quot;</code>必须分成1+3</li></ol><h3 id="字符串的索引与切片"><a href="#字符串的索引与切片" class="headerlink" title="字符串的索引与切片"></a>字符串的索引与切片</h3><ol><li><strong>索引</strong><code>index</code></li><li><strong>切片</strong><code>slice</code>，适用于字符串、列表、元组 <ul><li><strong>格式</strong>： <code>字符串名[开始索引:结束索引:方向与步长]</code></li><li><strong>注意</strong>:<ul><li>结束索引不包括在内，即左闭右开；步长默认为一。</li><li>从头开始：<code>str[:3:2]</code></li><li>到末尾结束： <code>str[2::3]</code></li></ul></li></ul></li><li><strong>由字符到索引</strong><br><code>str.index(&#39;A&#39;)</code>查询的是首次出现的index</li></ol><h3 id="字符串的运算符"><a href="#字符串的运算符" class="headerlink" title="字符串的运算符"></a>字符串的运算符</h3><table><thead><tr><th>+: 拼接</th><th>*： 重复</th><th>成员运算符：in/not in</th><th>比较运算符：&gt; &lt; &gt;=…</th></tr></thead></table><blockquote><p>字符串的比较标准：ASCII码，Unicode编码值</p></blockquote><ul><li>升序 A—Z—a—z</li><li>数字从小到大</li><li>若混合排序： 数字 &lt; 大写字母&lt;小写字母</li><li>多个字符串比较时，从首位开始逐步比较。</li><li><code>chr()</code> 返回Unicode编码值对应的字符<br><code>ord()</code> 返回编码值，如<code>ord(&#39;1&#39;)</code></li></ul><h3 id="字符串格式化（format-）"><a href="#字符串格式化（format-）" class="headerlink" title="字符串格式化（format()）"></a>字符串格式化（format()）</h3><p><code>&#39;你好，我是&#123;&#125;，是&#123;&#125;的爸爸。&#39;.format(&#39;Linda&#39;,&#39;Mia&#39;)</code><br><code>&#39;你好，我是&#123;1&#125;，是&#123;0&#125;的爸爸。&#39;.format(&#39;Linda&#39;,&#39;Mia&#39;)</code></p><blockquote><p><code>&#123;&#125;</code>里面可以填写index，用来匹配format()里的参数，从0开始。<br><code>&#39;你好，我是&#123;&#125;，&#123;&#123;是&#123;&#125;的爸爸。&#125;&#125;&#39;.format(&#39;Linda&#39;,&#39;Mia&#39;)</code><br>当想输出<code>&#123;&#125;</code>的时候，需要写成<code>&#123;&#123;&#125;&#125;</code>，此处{}用来转义。</p></blockquote><p><del>此处有待补充</del></p><h3 id="字符串函数汇总"><a href="#字符串函数汇总" class="headerlink" title="字符串函数汇总"></a>字符串函数汇总</h3><ol><li>参考：<a href="https://blog.csdn.net/weixin_43158056/article/details/92798114">字符串常用方法汇总</a></li><li><code>eval()</code>去掉最外侧的引号并以Python语句输出</li><li>一些图片</li></ol><p><img src="/images/python/%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0.jfif" alt><br><img src="/images/python/char.jfif" alt><br><img src="/images/python/char2.jfif" alt><br><img src="/images/python/char3.jfif" alt></p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><table><thead><tr><th>(元组)</th><th>[列表]</th><th>{字典}</th><th>{集合}</th></tr></thead><tbody><tr><td>不可更改</td><td>可更改</td><td>可更改</td><td>可更改，元素不可重复</td></tr></tbody></table><ol start="0"><li>元组是不能修改的，只能再生成新的元组<br><code>tuple = ()</code></li><li>两个类型不一样<br><code>tuple = (1)</code><br><code>tuple = (1,)</code></li><li>取值<br><code>tuple[1]</code><br><code>tuple[2:5]</code></li><li>拼接<br><code>tuple[1:3]+ tuple[3:5]</code><br>注意单个元组如：<code>tuple[2]</code>不是元组，是不能用来和元组拼接的。</li><li>方法<br><code>len()</code><br><code>max()</code><br><code>min()</code><br><code>tuple(seq)</code><br><code>.count()</code><br><code>.index()</code> 查第一次出现的数据的索引</li><li>比较<br>元组内部的元素一般为同一种，如果不统一的话在进行某些操作的时候会报错。</li><li>遍历<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- for --&gt;</span><br><span class="line">for i in range(len(tuple)):</span><br><span class="line">    print(i)</span><br><span class="line">for i in tuple:</span><br><span class="line">    print(tuple[i])</span><br><span class="line">&lt;!-- while --&gt;</span><br><span class="line">i &#x3D; 0</span><br><span class="line">while i&lt;len(tuple):</span><br><span class="line">    print(tuple[i])&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2></li><li>创建列表<ol><li>普通创建<br><code>list = [&#39;&#39;,&#39;&#39;,&#39;&#39;...]</code><br><code>list = [1,2,3...]</code> </li><li>由字符串创建<br><code>list1 = list(&#39;abcde&#39;)</code></li></ol></li><li>方法<ol><li>增加<br>.insert(索引,数据) 指定位置插入<br>.append(数据) 末尾追加数据<br>.extend(列表2) 拼接列表，即为list1 + list2 </li><li>删除<br>del list[索引] 删除指定元素<br>.remove(数据) 删除第一次出现的数据<br>.pop() 删除末尾的数据<br>.pop(索引) 删除指定数据<br>.clear() 清空 </li><li>修改<br>list[索引] = 数据</li><li>查询<br>list[索引]<br>.index(数据) 第一次出现的索引<br>len() 长度<br>.count(数据) 统计次数</li><li>排序<br><img src="/images/python/sort.png" alt></li><li>相加相乘<br><code>list1 + list2</code> 拼接<br><code>list2 = list1 * 3</code> 复制三次</li><li>复制</li></ol> <strong>【有待补充】</strong></li></ol><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p><code>del()</code><br><code>pop</code><br><code>if &#39;&#39; in d:</code><br><code>for key in d.keys():</code><br><code>for value in d.values():</code><br><code>.clear</code></p><p><code>list(dic) = list(dic.keys())</code> 只有keys<br><code>list(dic.values())</code><br><code>list(dic.items())</code><br><code>tuple</code> 一样<br><code>for x in dic:</code><br>    <code>print(x)</code> #输出只有keys<br><code>for x in dic.items():</code> #输出键值对</p><blockquote><p>while不能直接遍历字典 需要转化为tuple/列表，这样才有索引，才能通过索引遍历。</p></blockquote><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><blockquote><p>集合中间只能包含不可变的数据：如数字、字符串、元组。（唯一性）</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set1 &#x3D; &#123;1,2,3,4&#125;</span><br><span class="line">set2 &#x3D; &#123;1,2,1,2&#125; #自动去重</span><br><span class="line">set3 &#x3D; &#123;[3,4],1,2&#125; #报错</span><br><span class="line">&lt;!-- 空集合 空字典 空元组的创建 --&gt;</span><br><span class="line">元组名 &#x3D; ()</span><br><span class="line">字典名 &#x3D; &#123;&#125;</span><br><span class="line">集合名 &#x3D; set()</span><br></pre></td></tr></table></figure><blockquote><p>字符串转化为集合会拆分字母，且自动去重，无序。字典转化为集合只会呈现keys。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; set(range(1,9))</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6, 7, 8&#125; </span><br><span class="line">&lt;!-- 声明列表 --&gt;</span><br><span class="line">s &#x3D; set(&#39;python&#39;)</span><br><span class="line">s &#x3D; frozenset(&#39;python&#39;)</span><br><span class="line">&lt;!-- 方法 --&gt;</span><br><span class="line">.add(&#39;0&#39;)</span><br><span class="line">.update([update])</span><br><span class="line">.remove()</span><br><span class="line">.clear</span><br><span class="line">if 2 in s:</span><br><span class="line">for e in s:</span><br></pre></td></tr></table></figure><table><thead><tr><th>表示</th><th>含义</th><th>方法</th></tr></thead><tbody><tr><td>s = s1 | s2</td><td>并集</td><td>s1.union(s2)</td></tr><tr><td>s = s1 &amp; s2</td><td>交集</td><td>s1.intersection(s2)</td></tr><tr><td>s = s1 - s2</td><td>差集</td><td>s1.difference(s2)</td></tr><tr><td>s = s1 ^ s2</td><td>两集合中不重复的元素</td><td>s1.symmetric_difference(s2)</td></tr></tbody></table><p>参考1：<a href="https://blog.csdn.net/weixin_44489823/article/details/100533920">python 集合比较（交集、并集，差集）</a><br>参考2：<a href="https://www.runoob.com/python3/python3-set.html#setmethod">集合方法参考</a></p><hr><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="杂碎知识点"><a href="#杂碎知识点" class="headerlink" title="杂碎知识点"></a>杂碎知识点</h2><p>return多个返回值：<br><code>return sum,product</code><br>返回值默认显示为元组<code>(1,2)</code><br>还可以按需求为其它的形式如：<br>列表：<code>return[sum,product]</code></p><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><p><code>def fun1(x):</code><br><code>help(fun1)</code><br><code>dir(fun1)</code><br><code>fun1.</code></p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><table><thead><tr><th>L</th><th>E</th><th>G</th><th>B</th></tr></thead><tbody><tr><td>局部</td><td>闭包外</td><td>全局</td><td>内建</td></tr></tbody></table><p>函数内部声明<code>global a</code><br><code>if elif else try except for while</code>不会引入新的作用域，其中定义的变量外部也可以访问。 </p><h2 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h2><p>斐波那契数列的递归函数<br><code>input() | age = input(&#39;your age:&#39;)</code><br><code>raw_input()</code>只存在于python2，不管输入什么的都是字符串<br><code>print()</code><br><code>int()</code><br><code>print(value1,value2,value3...,step = &#39;\t&#39;,end = &#39;\n&#39;, file = &#39;sys.stdout&#39;)</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i in range(1,5)</span><br><span class="line">    print(i,end&#x3D;&#39;&#39;) #输出不换行</span><br></pre></td></tr></table></figure><p>写入文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open (&#39;test.txt&#39;,&#39;w&#39;) as file01:</span><br><span class="line">    print(&#39;hello&#39;,file &#x3D; file01)</span><br><span class="line">with open (&#39;test02.txt&#39;,&#39;w&#39;) as file02:</span><br><span class="line">    file02.write(&#39;hello&#39;)</span><br></pre></td></tr></table></figure><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><p>工厂函数：<code>list()</code> <code>tuple()</code> <code>dict()</code> <code>set()</code> <code>int()</code> <code>str()</code></p><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><p><img src="/images/python/%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0.jfif" alt></p><hr><h1 id="模拟笔记"><a href="#模拟笔记" class="headerlink" title="模拟笔记"></a>模拟笔记</h1><h2 id="杂碎知识点记忆"><a href="#杂碎知识点记忆" class="headerlink" title="杂碎知识点记忆"></a>杂碎知识点记忆</h2><p><code>eval(&#39;代码&#39;)</code> 执行其中的代码，并返回值<br><code>str.split()</code> 分割，返回列表，默认以空格分割<br><code>&#123;:-&gt;25,&#125;.format()</code> 格式化输出，注意-&gt;一起使用<br>python3.x <code>input()</code> 返回值是str，如需格式化输出等，可用<code>int()</code>、<code>eval()</code>转换为整数 ，<code>eval()</code>就是<strong>去掉引号</strong><br>&lt;填充&gt;&lt;对齐/&lt;宽度&gt;&lt;,&gt;&lt;.精度&gt;&lt;类型&gt;等六个字段，<br><code>for i in range()</code> i从0开始<br><code>b = 1,2,3</code><br><code>type(b) = tuple</code><br><code>type(eval（&#39;1,2,3&#39;)) = tuple</code><br><code>jieba.lcut()</code> 返回值是<strong>列表</strong><br><code>list.reverse()</code>  会改变原来的列表，而且<strong>没有返回值</strong><br>参考1：<a href="https://blog.csdn.net/mingyuli/article/details/81604795">print(s[::-1])</a><br>参考2<a href="cnblogs.com/wc-chan/p/8080765.html">同时给多个变量赋值</a><br><code>a, b = 0, 1</code><br><code>random</code> 之能生成0.0-1.1之间的数，<code>randint</code>可以指定（1，2）经过实测，是[1,2]</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifxxx:</span><br><span class="line">elif xxx:</span><br><span class="line">elif xxx:</span><br><span class="line">else:</span><br></pre></td></tr></table></figure><p><code>print(&quot;&#123;:+^11&#125;&quot;.format(chr(n-1)+chr(n)+chr(n+1)))</code>字符串直接相加就行<br>输入多个数  <code>a,b,c = eval(input())</code><br><code>try except</code><br><code>int(a) == a</code><br><code>turtle.seth</code><br><code>turtle.left</code><br><code>str.split</code>不改变原来值<br><a href="https://www.cnblogs.com/huigebj/p/11433896.html">python3排序 sorted(key=lambda)</a><br>常用的用字典统计个数<br><code>d[i] = d.get[i]+1</code><br>如果是<code>readlines</code>读写进来的列表，其中的元素含有<code>\n</code>字符，算作一个字符，素以向字典添加的时候需要去掉，即为<code>d[i][:-1] = d.get[i][:-1]+1</code><br><code>if len(name.split()) == 1:</code> 记录一行有两个名字的有效票数问题<br>判断数据是否在字典里，不管是key还是value都可以用<code>if data in d:</code><br>print输出多个数据的时候，可以用format格式化输出 <code>print(&#39;&#123;&#125;&#123;&#125;&#123;&#125;&#39;.format(a,b,c))</code><br>文件内容的遍历：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file &#x3D; open(&#39;xxx.txt&#39;,&#39;rb&#39;)</span><br><span class="line">for line in file:</span><br><span class="line">    print(line)</span><br></pre></td></tr></table></figure><h2 id="盲点"><a href="#盲点" class="headerlink" title="盲点"></a>盲点</h2><ul><li><input disabled type="checkbox"> 位运算符</li><li><input disabled type="checkbox"> 优先级 </li><li><input disabled type="checkbox"> 可变长参数</li><li><input disabled type="checkbox"> 格式化输出</li><li><input checked disabled type="checkbox"> 序列的方法</li><li><input checked disabled type="checkbox"> 用字典统计数目</li><li><input disabled type="checkbox"> 字符串中的数字怎么比较</li><li><input disabled type="checkbox"> format参数</li><li><input disabled type="checkbox"> 字符串的一些函数</li></ul><hr><h1 id="软件技术基础"><a href="#软件技术基础" class="headerlink" title="软件技术基础"></a>软件技术基础</h1><p>软件 = 程序+ 文档 = 数据结构+算法+文档</p><h1 id="选择题笔记"><a href="#选择题笔记" class="headerlink" title="选择题笔记"></a>选择题笔记</h1><blockquote><p>x*<em>y的作用是计算x的y次幂。<br>x//y的作用是计算x与y的整数商，即不大于x与y之商的最大整数。<br>x%y的作用是计算x与y之商的余数。<br>表达式中的运算符中，\</em>*的运算级最高，所以先计算4**2，即3*4**2//8%7=3*16//8%7=48//8%7=6%7=6。<br>C语言是静态编译语言，Python语言是脚本语言    静态语言和脚本语言，静态语言采用编译方式执行，脚本语言采用解释方式执行。<br>Python语言中的浮点数类型必须带有小数部分，小数部分可以是0。<br>一般代码不需要缩进，顶行编写且不留空白。当表示分支、循环、函数、类等程序含义时，在if、while、for、def、class等保留字所在完整语句后通过英文冒号结尾并在之后进行缩进，表明后续代码与紧邻无缩进语句的所属关系。<br>代码编写中，缩进可以用Tab键实现，也可以用多个空格（一般是4个空格）实现，但两者不混用。不会增加编程难度。<br>Python采用大写字母、小写字母、数字、下划线和汉字等字符及其组合进行命名，但首字符不能是数字。<br>Python保留字是大小写敏感的，True是保留字，true不是。<br>sum不是保留字，可以被当做变量使用。finally是保留字。<br>id()函数是Python内置函数之一，作用是获取对象的内存地址，返回对象的内存地址（是一个正整数）。<br>Python语言的三个重要特点：<br>（1）通用性：Python语言可以用于几乎任何与程序设计相关应用的开发，不仅适合训练编程思维，更适合诸如数据分析、机器学习、人工智能、Web开发等具体的技术区域。<br>（2）语法简洁。<br>（3）生态高产：Python解释器提供了几百个内置类和函数库，此外，世界各地程序员通过开源社区贡献了十几万个第三方函数库。<br>除此之外，还有一些具体特点：<br>（1）平台无关。<br>（2）强制可读。<br>（3）支持中文。<br>count    </p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import keyword</span><br><span class="line">&gt;&gt;&gt; keyword.kwlist</span><br><span class="line">[&#39;False&#39;, &#39;None&#39;, &#39;True&#39;, &#39;and&#39;, &#39;as&#39;, &#39;assert&#39;, &#39;break&#39;, &#39;class&#39;, &#39;continue&#39;, &#39;def&#39;, &#39;del&#39;, &#39;elif&#39;, &#39;else&#39;, &#39;except&#39;, &#39;finally&#39;, &#39;for&#39;, &#39;from&#39;, &#39;global&#39;, &#39;if&#39;, &#39;import&#39;, &#39;in&#39;, &#39;is&#39;, &#39;lambda&#39;, &#39;nonlocal&#39;, &#39;not&#39;, &#39;or&#39;, &#39;pass&#39;, &#39;raise&#39;, &#39;return&#39;, &#39;try&#39;, &#39;while&#39;, &#39;with&#39;, &#39;yield&#39;]</span><br></pre></td></tr></table></figure><blockquote><p>type(type(‘45’))输出为&lt;class ‘type’&gt;。<br>以下保留字不用于循环逻辑的是<code>try</code><br><code>s[0:4]</code>表示截取字符串正向第1个字符1到正向第5个字符5（不包括5）之间的字符，即’1234’。<br>乘除和取模取余同级先计算<code>5%6*2//8=5*2//8=10//8=1</code>，再计算<code>3+1=4</code>。<br>**是数值运算操作符。<br>&amp;是按位与运算符，&amp;=则是对应的二元操作符。<br>^是按位异或运算符。<br>保留字大小写敏感，False是保留字，false不是保留字。<br>if不用于异常处理逻辑，用于分支结构。<code>try</code> <code>else</code> <code>finally</code>都用于异常处理<br>python 不是网络编程语言<br>Python中出现SyntaxError一般表示语法错误，如未在<code>if , elif , else , for , while , class ,def</code> 声明末尾添加”:”，导致该语句无法解释执行。<br>int()函数用于将一个字符串或数字转换为整型，字符串’100/3’中有”/“，该文本不能转化成数值，参数无效，会报ValueError的错误。<br>random.random()表示取随机数，数值的类型是float型，<br>uniform(a,b)：生成一个[a,b]之间的随机小数，3.993002365820678超出了范围。<br>判断字符串内是否有子字符串，可以用<code>if xx in str:</code>或<code>if str.coune(&#39;xx&#39;) &gt;0:</code><br><code>ls.append(line.strip(&#39;\n&#39;).split(&#39;,&#39;))</code></p></blockquote><p><strong>👇👇👇这是练习的一道题，卡在一个点出不来了记录一下，简而言之就是👇👇👇</strong></p><ol><li>建议把f.read()保存到一个变量里，然后f.close()。</li><li>List.sort会改变原来的列表，而且没有返回值！！！！😭<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import jieba</span><br><span class="line">d &#x3D; &#123;&#125;</span><br><span class="line">def print_most_word (path,year):</span><br><span class="line">    f &#x3D; open(path,&#39;r&#39;)</span><br><span class="line">    txt &#x3D; f.read()</span><br><span class="line">    f.close()</span><br><span class="line">    wordList &#x3D; jieba.lcut(txt)</span><br><span class="line">    for word in wordList:</span><br><span class="line">        if len(word) &gt;1:</span><br><span class="line">            d[word] &#x3D; d.get(word,0)+1</span><br><span class="line">    dls&#x3D; list(d.items())</span><br><span class="line">    dls.sort(key &#x3D; lambda x:x[1],reverse &#x3D; True)</span><br><span class="line">    print(str(year)+&#39;:&#39;,end&#x3D;&#39;&#39;)</span><br><span class="line">    for i in range(10):</span><br><span class="line">        if i &#x3D;&#x3D;:</span><br><span class="line">            print(&#39;&#123;&#125;:&#123;&#125;&#39;.format(dls[i][0],dls[i][1]))</span><br><span class="line">            continue</span><br><span class="line">        print(&#39;&#123;&#125;:&#123;&#125;,&#39;.format(dls[i][0],dls[i][1]),end&#x3D;&#39;&#39;)</span><br><span class="line">print_most_word(&#39;data2018.txt&#39;,2018)</span><br><span class="line">print_most_word(&#39;data2019.txt&#39;,2019)</span><br><span class="line"></span><br></pre></td></tr></table></figure>打开<code>txt</code>的时候看一下编码格式如果是utf-8那么打开的时候要注意是：<code>f = open(&#39;data.txt&#39;,&#39;r&#39;,encoding=&#39;utf-8&#39;)</code><br>注意如果一不小心把<code>r</code>写成了<code>w</code>，文件就会清空了！！</li></ol><h1 id="模拟考试知识点总结"><a href="#模拟考试知识点总结" class="headerlink" title="模拟考试知识点总结"></a>模拟考试知识点总结</h1><p>遍历字符串：<br><code>for i in string1:</code><br><code>for i in len(string1):</code><br>统计字符串的某个字符的个数：<br><code>sting.count(&#39;xxx&#39;)</code><br>格式化输出的进制以及大小写<br>字符串索引是[index]<br><a href="https://blog.csdn.net/laochu250/article/details/67649210">《python list转换字符串报错TypeError: sequence item 0: expected str instance, int found》</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 提取示例 --&gt;</span><br><span class="line">while True:</span><br><span class="line">    s &#x3D; input(&quot;请输入不带数字的文本:&quot;)</span><br><span class="line">    a &#x3D; 0</span><br><span class="line">    for i in range(10):</span><br><span class="line">        if str(i)  in s:</span><br><span class="line">            a &#x3D;1</span><br><span class="line">            break</span><br><span class="line">    if a &#x3D;&#x3D; 0:</span><br><span class="line">        break</span><br><span class="line">print(len(s))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>turtle.seth()</code>是设置<code>turtle</code>的角度，<code>turtle.left()</code>是改变角度</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f &#x3D; open(&#39;论语-网络版.txt&#39;,&#39;r&#39;,encoding &#x3D; &#39;utf-8&#39;)</span><br><span class="line">txt &#x3D; f.readlines()</span><br><span class="line">f.close()</span><br><span class="line">f &#x3D; open(&#39;原文.txt&#39;,&#39;w&#39;,encoding &#x3D; &#39;utf-8&#39;)</span><br><span class="line">ls&#x3D;[]</span><br><span class="line">can_write &#x3D; False</span><br><span class="line">for line in txt:</span><br><span class="line">    if &#39;【原文】&#39; in line:</span><br><span class="line">        can_write &#x3D; True</span><br><span class="line">        continue</span><br><span class="line">    if &#39;【&#39; in line and &#39;【原文】&#39; not in line:</span><br><span class="line">        can_write &#x3D; False</span><br><span class="line">    if can_write:</span><br><span class="line">        if line !&#x3D; &#39;\n&#39;:</span><br><span class="line">            for i in range(20):</span><br><span class="line">                remove_str &#x3D; &#39;(&#39;+str(i)+&#39;)&#39;</span><br><span class="line">                line &#x3D; line.replace(remove_str,&#39;&#39;)</span><br><span class="line">            f.write(line)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>字典里面的东西写进去：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for key in d:</span><br><span class="line">    ls.append(&quot;&#123;&#125;:&#123;&#125;&quot;.format(key, d[key]))</span><br><span class="line">fo.write(&quot;,&quot;.join(ls))</span><br><span class="line">del d[&#39; &#39;] #删除字典中的元素</span><br><span class="line">del d[&#39;\n&#39;]</span><br></pre></td></tr></table></figure><p>字符串的截取：string[:2]<br>表示第0和第1.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d &#x3D; input() #当输入值可能有小数时可以用eval</span><br><span class="line">if d[0] &#x3D;&#x3D; &#39;C&#39;: #一定要注意是&#x3D;&#x3D;不是&#x3D;</span><br><span class="line">    d &#x3D; float(d[1:])*1.8+32 </span><br><span class="line">    print(&#39;F&#123;:.2f&#125;&#39;.format(d)) #格式化输出的语法要记牢啊</span><br><span class="line">else:</span><br><span class="line">    d &#x3D; (float(d[1:])-32)&#x2F;1.8</span><br><span class="line">    print(&#39;C&#123;:.2f&#125;&#39;.format(d))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s &#x3D; input()</span><br><span class="line">if s[:3] &#x3D;&#x3D; &#39;RMB&#39;: #字符串截取的是左闭右开！！！</span><br><span class="line">    s &#x3D; eval(s[3:])&#x2F;6.78</span><br><span class="line">    print(&#39;USD&#123;:.2f&#125;&#39;.format(s))</span><br><span class="line">else: #不要写两个if啊，要写else</span><br><span class="line">    s &#x3D; eval(s[3:])*6.78</span><br><span class="line">    print(&#39;RMB&#123;:.2f&#125;&#39;.format(s))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">n&#x3D;float(input()) # float(xxx)其中的xxx必需全是数字，可以是小数</span><br><span class="line">print(pow(n,0),pow(n,1),pow(n,2),pow(n,3),pow(n,4),pow(n,5)) # pow是内置函数，可以用**代替</span><br></pre></td></tr></table></figure><p>all(x)：组合类型变量x中所有元素都为真时返回True，否则返回False；若x为空，返回True。<br>any(x)：组合类型变量x中任一元素都为真时返回True，否则返回False；若x为空，返回True。<br>y中第一个元素为一个空格，第二个元素为空，即null，所以第一个元素为真，第二个元素为假，all(y)输出False，any(y)输出True。<br>如果一个函数需要以多种形式来接收实参，定义时一般把位置参数放在最前面，然后是默认参数，接下来是一个星号的可变长度参数，最后是两个星号的可变长度参数。<br>例：def foo(x,<em>args,*</em>kwargs):<br>Python为源文件指定的默认字符编码是<strong>__</strong>。（UTF-8）<br>round(x,d)：对x四舍五入，保留d位小数，无参数d则返回四舍五入的整数值。<br>当文件以文本方式打开时，读写按照字符串方式；当文件以二进制方式打开时，读写按照字节流方式。<br>创建写模式x，文件不存在则创建，存在则返回异常FileExistsError。<br>打开并关闭文件的操作，需要文件的路径名，由于”&quot;是字符串中的转义符，所以表示路径时，使用”\“或”/“代替”&quot;。</p><h1 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h1><p>网络爬虫方向<br>requests<br><strong>scrapy</strong><br>pyspider<br>数据分析方向<br><strong>numpy<br>pandas<br>scipy</strong><br>文本处理方向<br><strong>pdfminer</strong><br>python-docx<br><strong>beautifuisoup4</strong><br>数据可视化方向<br>matplotlib<br><strong>seaborn</strong><br><strong>mayavi</strong><br>用户图形界面方向<br>    <strong>PyQt5</strong><br>wxPython<br>PyGTK<br>机器学习方向<br>scikit -learn<br><strong>TebsorFlow</strong><br>mxnet<br>web开发方向<br><strong>Diango<br>Pyramid<br>flask</strong><br>游戏开发方向<br><strong>Pygame</strong><br>Panda3D<br>cocos2d</p><h1 id="考完总结"><a href="#考完总结" class="headerlink" title="考完总结"></a>考完总结</h1><p>其实吧，不用看那么多视频，就那个模拟考软件，把题库完完整整刷完搞懂就行了，考试完全没问题（我不会告诉你都是原题的）。</p><h1 id="额外服务"><a href="#额外服务" class="headerlink" title="额外服务"></a>额外服务</h1><h2 id="邮件服务"><a href="#邮件服务" class="headerlink" title="邮件服务"></a>邮件服务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 邮件服务 --&gt;</span><br><span class="line"># coding: UTF-8</span><br><span class="line">import smtplib</span><br><span class="line">from email.mime.text import MIMEText</span><br><span class="line">mailserver &#x3D; &quot;smtp.163.com&quot;  #邮箱服务器地址</span><br><span class="line">username_send &#x3D; &#39;******@163.com&#39;  #邮箱用户名</span><br><span class="line">password &#x3D; &#39;******&#39;   #邮箱密码：需要使用授权码</span><br><span class="line">username_recv &#x3D; &#39;****@qq.com&#39;  #收件人，多个收件人用逗号隔开</span><br><span class="line">mail &#x3D; MIMEText(&#39;xxx&#39;)</span><br><span class="line">mail[&#39;Subject&#39;] &#x3D; &#39;xxx&#39;</span><br><span class="line">mail[&#39;From&#39;] &#x3D; username_send  #发件人</span><br><span class="line">mail[&#39;To&#39;] &#x3D; username_recv  #收件人；[]里的三个是固定写法，别问为什么，我只是代码的搬运工</span><br><span class="line">smtp &#x3D; smtplib.SMTP(mailserver,port&#x3D;25) # 连接邮箱服务器，smtp的端口号是25</span><br><span class="line"># smtp&#x3D;smtplib.SMTP_SSL(&#39;smtp.qq.com&#39;,port&#x3D;465) #QQ邮箱的服务器和端口号</span><br><span class="line">smtp.login(username_send,password)  #登录邮箱</span><br><span class="line">smtp.sendmail(username_send,username_recv,mail.as_string())# 参数分别是发送者，接收者，第三个是把上面的发送邮件的内容变成字符串</span><br><span class="line">smtp.quit() # 发送完毕后退出smtp</span><br><span class="line">print (&#39;success&#39;)</span><br></pre></td></tr></table></figure><h2 id="自动更新更新时间"><a href="#自动更新更新时间" class="headerlink" title="自动更新更新时间"></a>自动更新更新时间</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 自动更新更新时间 --&gt;</span><br><span class="line">import re</span><br><span class="line">import time</span><br><span class="line">import os</span><br><span class="line">def change_time(path):</span><br><span class="line">        fileList &#x3D; os.listdir(path)</span><br><span class="line">        for file in fileList:</span><br><span class="line">            allpath &#x3D; path+file</span><br><span class="line">            f &#x3D; open(allpath,&#39;r&#39;,encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">            txt &#x3D; f.read() #读取内容</span><br><span class="line">            f.close()</span><br><span class="line">            now &#x3D; int(time.time())</span><br><span class="line">            old_update &#x3D; re.findall(r&quot;(updated: \d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;\s\d&#123;1,2&#125;:\d&#123;1,2&#125;:\d&#123;1,2&#125;)&quot;,txt) # 正则匹配要修改的字符串</span><br><span class="line">            new_update &#x3D; time.strftime(&#39;updated: %Y-%m-%d %H:%M:%S&#39;,time.localtime(int(os.path.getmtime(allpath)))) # 获取文件的最后修改时间并赋值</span><br><span class="line">            try:</span><br><span class="line">                txt &#x3D; txt.replace(old_update[0],new_update) # 替换</span><br><span class="line">            except:</span><br><span class="line">                print(&#39;&#123;&#125;有误&#39;.format(file)) # 排查错误</span><br><span class="line">                continue</span><br><span class="line">            else:</span><br><span class="line">                if now - int(os.path.getmtime(allpath)) &lt; 86400: # 只修改当天创建或修改的文章</span><br><span class="line">                    fi &#x3D; open(allpath,&#39;w&#39;,encoding &#x3D; &#39;utf-8&#39;)</span><br><span class="line">                    fi.write(txt) # 写入</span><br><span class="line">                    fi.close() # 关闭</span><br><span class="line">change_time(&#39;E:&#x2F;blog&#x2F;source&#x2F;_posts&#x2F;&#39;) #执行代码</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>返校日记</title>
      <link href="post/b6589fc3.html"/>
      <url>post/b6589fc3.html</url>
      
        <content type="html"><![CDATA[<h1 id="大二下的返校有什么可说道的"><a href="#大二下的返校有什么可说道的" class="headerlink" title="大二下的返校有什么可说道的"></a>大二下的返校有什么可说道的</h1><h2 id="流水账一"><a href="#流水账一" class="headerlink" title="流水账一"></a>流水账一</h2><p>火车站安检的位置改了，改的挺合理，我觉得它本来就应该是这样子。在取票厅见到了很久不见的老同学，一见面其实没认出来，好家伙，那肯定认不出来，不过说了些话后感觉也还熟悉，可能是某些深处的记忆被拔出来了，整个相处还算不尴尬。我们五个人上四号车，结果却往相反的地方走，好在问了问工作人员，赶紧掉头走了很久很久才到。上车后我们坐在下铺攀谈了一会，主人过来了，于是我们便移步到道旁的位置上。没什么事干，我们决定打会牌，然而网络问题，磕磕绊绊进去之后，也就打了一把，还算有意思的结束。我坐在窗户旁边看周遭景致后撤，脑中并无任何想法。</p><h2 id="流水账二"><a href="#流水账二" class="headerlink" title="流水账二"></a>流水账二</h2><p>快到熄灯的时间，我收拾了东西爬上上铺，整个感觉奇妙的很，狭小的空间内时睡时醒，只记得做了很多噩梦，醒来的时候六点多，车上的广播开始有了动静。我翻动了一会下了床洗了脸，牙刷什么的在箱子里，也懒得去拿了。坐在窗户旁边看风景，但也没什么看到，雾气茫茫，不太能看清多远。同行的伙伴递过来面包、🍓，也没什么食欲，捏了个草莓吃了。</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08); width:300px" src="https://img.imgdb.cn/item/603b65385f4313ce25b1d1e4.jpg">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">剩下的叶子放在了车窗旁拍了照，随即丢到了垃圾桶了，毕竟不太好看——放窗户上。</div></center><h2 id="流水账三"><a href="#流水账三" class="headerlink" title="流水账三"></a>流水账三</h2><p>上午没什么事，看了会手机没什么玩的，就站起来站着，车到站的时候咯噔了一下，差点跌倒，还好不至于出丑。后来实在无趣，上了床，开始睡觉了。大约十一点半，乘务员提醒快到站了。拿出浏览器查了查，12：05到，还早，打算再睡会，可也没啥兴致，便下了床。再次坐在窗边，旋即看到“上海站”几个打字向我跑来，原来早点了。那便收拾收拾下车吧。</p><h2 id="流水账四"><a href="#流水账四" class="headerlink" title="流水账四"></a>流水账四</h2><p>一路按照指示牌的方向，给看了健康码，一路来到三四号线的地方，跟我姐分道扬镳，开始了一个多小时的地铁之旅。一路无话，倒是宜山路转9号线，路途之远难以想象，太累了，几十级的台阶，去年帮某人抬了一路，今年换了个人，以后一定提醒带少行李。说起来三号线上看到个有意思的父亲和女儿，那父亲大概三十岁不到，短发、五官都分外精致，手里抱个“长宁美院”的袋子，女儿也六七岁的样子，一会坐下一会站起来。我顿时起了好感。说着她拉起来她爸爸指着墙上的广告说，这两个人怎么长的一样。那美院男子细心的讲解着什么镜像、什么Ps、什么广告，听起来极为有趣。<br>最后面没什么说的了，倒是等公交等不来，打的又堵车，磕磕绊绊算是回了学校，便也开始新的日子了。</p><h2 id="一些图片"><a href="#一些图片" class="headerlink" title="一些图片"></a>一些图片</h2><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08); width:300px" src="https://img.imgdb.cn/item/603b67ee5f4313ce25b3b2e0.jpg">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">上海站慢慢靠近</div></center><hr><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08); width:300px" src="https://img.imgdb.cn/item/603b67ee5f4313ce25b3b2e3.jpg">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">公交车站牌人山人海</div></center><hr><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08); width:300px" src="https://img.imgdb.cn/item/603b67ee5f4313ce25b3b2e7.jpg">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">到宿舍后一碗泡面草草了事</div></center><hr><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08); width:300px" src="https://img.imgdb.cn/item/603b67ee5f4313ce25b3b2ea.jpg">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">上铺视角</div></center>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo deploy——避免重复输入账户密码</title>
      <link href="post/f7b96544.html"/>
      <url>post/f7b96544.html</url>
      
        <content type="html"><![CDATA[<h1 id="ssh配置"><a href="#ssh配置" class="headerlink" title="ssh配置"></a>ssh配置</h1><h2><a id="1SSH_13"></a>1.生成SSH密钥</h2> <pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">cd ~/.ssh<div class="hljs-button &#123;2&#125;" data-title="复制" data-report-click="&#123;&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;&#125;"></div></code><p class="pre-numbering" style><li style="color: rgb(153, 153, 153);">1</li></p></pre> <p>使用ssh -Keygen 生成密钥</p> <pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">ssh-keygen -t rsa -C "your_email@example.com"<div class="hljs-button &#123;2&#125;" data-title="复制" data-report-click="&#123;&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;&#125;"></div></code><p class="pre-numbering" style><li style="color: rgb(153, 153, 153);">1</li></p></pre> <p>后面的输入均使用默认值，点击<strong>enter回车</strong>跳过</p> <p>密钥生成成功</p> <pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">Your identification has been saved in /home/you/.ssh/id_rsa.Your public key has been saved in /home/you/.ssh/id_rsa.pub.The key fingerprint is:…………………此处是密钥内容…………………… your_email@example.com<div class="hljs-button &#123;2&#125;" data-title="复制" data-report-click="&#123;&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;&#125;"></div></code><p class="pre-numbering" style><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li></p></pre> <p>点击复制</p> <h2><a id="2GitHub_38"></a>2.设置GitHub仓库的密钥</h2> <p>点击SSh and GPG keys，后新建一个SSh key</p> <p><img src="https://img-blog.csdnimg.cn/img_convert/f8c5d3ae311c550857f785e2cd599386.png" alt="image-20210103194924377"></p> <p>输入密钥的title，可自定义输入，下面的key的内容即为刚才生成的密钥内容，将其复制粘贴进去（可能会遇到问题，请继续往后看），后点击add ssh key即可创建成功</p> <p><img src="https://img-blog.csdnimg.cn/img_convert/3b39fd4fdde832109ea9f30f2d85d834.png" alt="image-20210103195020682"></p> <h2><a id="3_48"></a>3.测试配置是否成功</h2> <pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">ssh -T git@GitHub.com<div class="hljs-button &#123;2&#125;" data-title="复制" data-report-click="&#123;&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;&#125;"></div></code><p class="pre-numbering" style><li style="color: rgb(153, 153, 153);">1</li></p></pre> <p>如果看到successfully，即为配置完成并且成功</p> <p><img src="https://img-blog.csdnimg.cn/img_convert/cae4224ec411aaff9598cae46dd7d1dd.png" alt="image-20210103195309236"></p> <h2><a id="4Git_60"></a>4.修改博客Git远程提交的地址</h2> <pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"># 修改 https 协议为 ssh 协议(仓库的ssh地址)git remote set-url origin git@github.com:xxx/xxx.git<div class="hljs-button &#123;2&#125;" data-title="复制" data-report-click="&#123;&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;&#125;"></div></code><p class="pre-numbering" style><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li></p></pre> <h2><a id="5hexo_configyml_67"></a>5.修改hexo根目录下的_config.yml文件中的远程仓库设置</h2> <pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"># Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy:  type: git  repository: git@github.com:looles/looles.github.io.git  branch: master<div class="hljs-button &#123;2&#125;" data-title="复制" data-report-click="&#123;&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;&#125;"></div></code><p class="pre-numbering" style><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li></p></pre> <h2><a id="6_78"></a>6.部署推送到远程仓库</h2> <p>ub.com:looles/looles.github.io.git<br> branch: master</p> <pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">#### 6.部署推送到远程仓库<div class="hljs-button &#123;2&#125;" data-title="复制" data-report-click="&#123;&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;&#125;"></div></code><p class="pre-numbering" style><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li></p></pre>                <div><div></div></div>                <link href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css" rel="stylesheet">                <link href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-80ad9b4f5b.css" rel="stylesheet">        <p>转载于: <a href="https://blog.csdn.net/qq_43729277/article/details/112150367?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control&dist_request_id=ad442711-b6a8-4c52-8eb8-433089bfe963&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control">2021-01-03-设解决使用hexo deploy推送代码到github仓库时重复输入账户密码</a></p><hr><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><blockquote><p>1、如果之前设置过ssh，但是部署的时候需要输入密码，可能是没有配置好，用<code>ssh -T <a href="mailto:git@GitHub.com">git@GitHub.com</a></code>检查的时候需要输入密码，则代表没有配置好。建议重头配置一次，提示是否要overwrite的时候y就行了。<br>2、另外粘贴密钥的时候可能会遇到问题 <em>“Key is invalid. You must supply a key in OpenSSH public key format github”</em>，请继续往后看。</p></blockquote><hr><h1 id="add-ssh-key报错"><a href="#add-ssh-key报错" class="headerlink" title="add ssh key报错"></a>add ssh key报错</h1><div id="article_content" class="article_content clearfix">        <link rel="stylesheet" href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css">                <div id="content_views" class="markdown_views prism-atom-one-light">                    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">                        <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"/>                    </svg>                    <p>直接复制粘贴 .ssh的文件<strong>会破坏格式</strong><br> 需要打开 git bash<br> <img src="https://img-blog.csdnimg.cn/20200609194954856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYwNDI1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 输入命令<code>clip &lt; ~/.ssh/id_rsa.pub</code><br> 回车后就复制到剪切板了，到github添加ssh keys的地方直接就能粘贴上<br> 如图：<br> <img src="https://img-blog.csdnimg.cn/20200609195404177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYwNDI1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>                </div><div><div></div></div>                <link href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css" rel="stylesheet">                <link href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-80ad9b4f5b.css" rel="stylesheet">        </div><p>转载于：<a href="https://blog.csdn.net/weixin_45604257/article/details/106649576">Key is invalid. You must supply a key in OpenSSH public key format github</a></p><hr><p>以上就完成了对hexo deploy的所有配置。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deploy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看垃圾</title>
      <link href="post/c337a479.html"/>
      <url>post/c337a479.html</url>
      
        <content type="html"><![CDATA[<h1 id="看垃圾"><a href="#看垃圾" class="headerlink" title="看垃圾"></a>看垃圾</h1><p>徐店长店还开着的时候就给老药罐找了这个工作。<br>老药罐因为身体原因常年服药，趁不便走动，遂听徐店长安排在南丰镇东接了家商店。只用做些简单的售卖工作，来的人自己挑，完事把钱放进箱子里就行，要是遇到有人不付账按一下手里的按钮就行了，里面集成有现成的报警电话，所以闲适得很。况且这地方空气刺鼻，人烟稀少，仅有运垃圾的司机到这讨几瓶水喝，有时也顺带进个货——这店好似个服务区。老药罐这名字喊的人多了就被传开了，三人成虎，结果最后被人叫成了老妖怪，也巧，和这地方挺搭。商店再往东二里地是个垃圾站，镇里所有的垃圾都要拉到这里来处理。南丰镇近年来大兴养殖，垃圾只多不少。</p><p>那天空气燥热，正午的太阳高悬头顶，烈日下一辆辆垃圾车跑来跑去，和隔壁镇的一天两趟完全不同，南丰这地方简直是个工地。路边的商店里，不知谁用帘子隔了个小地方，里面放了个躺椅，一个身材羸弱皮包骨的老汉躺在上面有气无力地摇动扇子，这便是老妖怪了。郊外的野风不见踪影，今天热得出奇。老妖怪虽是身子不便运动，但是脑子却是清醒的很，即便到了午睡的时候，他也能时刻留意周边的变化，仿佛有双无形的眼睛注视着门外的一切，包括来往的车辆。<br>老妖怪眼皮动了动，他知道，有人来了，紧接着，另一只眼皮也动了，“还不只一个”，他想。<br>很快，只见一个身高不足一米的小孩哒哒哒地跑进来，却不见旁人的踪影——一人而已。脚步快得离谱，加之酷热使得声浪扭曲，老汉第一次听错了。<br>那小孩像是走进自己家一样，径直跑向冰柜，掀开上面的褥子，打开柜子，扒拉到柜子边上，抽出两根冰棍来，朝老汉方向晃了晃，老妖怪眯着的眼睛缓缓打开条缝隙又合上，不注意完全看不出来他动了眼皮子，是个死人——扇子也没摇了。小孩把五块钱扔进箱子里就跑了，动作熟练，谁能看出来他是个小孩呢。<br>远处垃圾车轰隆启动了，又开始奔驰在这条走了无数次的路上，车里副驾上的小孩正掏出冰棍塞到驾驶员的嘴里。</p><p>“我给你找了个地儿，你就去咱垃圾站当个门卫吧，有车来了开个门就行。”说话的人是乡长，躺在病床上的是刚做完手术的徐店长。老徐之前开了家修车店，十多年，人们叫习惯了。乡长看看旁边的孩子，“老徐，我只能帮你到这了。早知道你就应该好好当个店长，跑来做什么垃圾运输员。现在少了条腿委实找不来好差事，当个门卫挺好的。”乡长是个好人，不客套，帮徐店长另谋生路也不是他的责任，只看在当年一起打拼的情分上帮一把。“我知道。”老徐有点不好意思了，尽管腿上的痛还在，但就是不好意思了，他也没想到这个时候他会羞，乡长的救济他很难再说三道四了。<br>“吃个橘子？”老徐拆开乡长拿的果篮。<br>乡长头也没回走了。<br>此后小孩每次到外面玩腻了就跑回垃圾站门口的小房间里去，他亲爱的父亲在里面靠着墙，一条腿悬在床边看着进进出出的车辆，不停的按下手中的遥控。生活从方向盘变成了遥控器而已。</p><p>说起小孩他妈——因为孩子爸家暴、婚后出轨还拒不认账，几年前就已经离婚了，她跟了乡长，一直经营着一家宾馆，巧的是宾馆的地址正在垃圾站的对面。客户目标很明显了，正是来来往往的司机们，他也曾经住在这里过。小孩妈妈叫雪琴，宾馆是她在老徐之前的丈夫留给他的，没啥情分，这宾馆最后一定亏干净了，根本不盈利啊，来开垃圾车的都是些什么走投无路的人。雪琴自己的房间在二楼正中，从窗户可以看见垃圾站的正大门，老徐所在的小房子也尽收眼底。她每天在自己的房间里和乡长如胶似漆后就坐在床边歪着脖子看下面的垃圾站。她看不见老徐，从她听说老徐搬进去就再也没见过他，老徐从来没有站起来过，所以她天天等着，却连个剪影都等不到。她多想看见那个男人一瘸一拐的走出来，走到她宾馆的下面，然后她一口唾沫啐下去，“这就是你的报应！”</p><p>老妖怪眼皮动了一下，另一只眼皮也动了一下，他坐起来，看着小孩跑进来拿出来两根冰棍，朝他晃了晃，没有放钱，竟是直接跑出去了。他按下手里的按钮，看着小孩慢慢跑远，最后停在马路边上。那小孩拿着冰棒，眼睛直愣愣看着前面，一根含在嘴里，一根朝着来来往往的垃圾车扔去。</p>]]></content>
      
      
      <categories>
          
          <category> 文学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> literature </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新帖</title>
      <link href="post/2ee0f961.html"/>
      <url>post/2ee0f961.html</url>
      
        <content type="html"><![CDATA[<h2 id="这里记录网站更新内容"><a href="#这里记录网站更新内容" class="headerlink" title="这里记录网站更新内容"></a><font color="#495969">这里记录网站更新内容</font></h2><blockquote><p>本贴更新不及时，想要及时收到网站更新的邮件提醒可在下方留言处留下你的邮箱。</p></blockquote><div class="tabs" id><ul class="nav-tabs"><li class="tab active"><a href="#-1">Butterfly主题更新内容</a></li><li class="tab"><a href="#-2">Next主题更新内容</a></li></ul><div class="tab-content"><div class="tab-pane active" id="-1"><table><tr><td bgcolor="#f1f5ec"><ul><li><em>2021-01-20</em><br>更新文章界面两篇置顶；<br>开通<a href="https://blog.asea.fun/talk/">说说</a>界面；<br><a href="https://blog.asea.fun/talk/">说说</a>界面优化，增加说说评论功能（访客都可以评论）；<br>新增说说发布权限用户；<br>优化不同用户的头像问题；<br>优化navigationbar；</li><li><em>2021-02-09</em><br>更新post<a href="https://blog.asea.fun/post/16fab331.html">《网站收藏》</a>；<br>优化<a href="https://blog.asea.fun/post/16fab331.html">《网站收藏》</a>的界面；<br>优化文章排序和置顶问题（<a href="https://gsy00517.github.io/hexo20200207151318/">参考文章</a>）；<br>修改<a href="https://blog.asea.fun/">主页</a>post图文排版；</li><li><em>2021-02-16</em><br>发布post<a href="https://blog.asea.fun/post/6d79d7dd.html">《老地方》</a>；</li><li><em>2021-02-22</em><br>发布post<a href="https://blog.asea.fun/post/c337a479.html">《看垃圾》</a>；<br>更新post<a href="https://blog.asea.fun/post/cf7f39c3.html">《技术贴》</a>；</li><li><em>2021-02-23</em><br>更新post<a href="https://blog.asea.fun/post/cf7f39c3.html">《技术贴》</a>；<br>发布post<a href="https://blog.asea.fun/post/f7b96544.html">《hexo deploy——重复输入账户密码》</a>；<br>添加<a href="https://blog.asea.fun/fun/chi/">《吃什么》</a><a href="https://blog.asea.fun/fun/du/">《毒鸡汤》</a><a href="https://blog.asea.fun/fun/hua/">《画板》</a><a href="https://blog.asea.fun/fun/mi/">《随机密码》</a>四个界面(累趴了)；</li><li><em>2021-02-24</em><br><a href="https://next.asea.fun">新主题（Next）博客</a>重磅上线</li><li><em>2021-02-25</em><br>置顶post<a href="https://blog.asea.fun/post/cf7f39c3.html">《技术贴》</a></li><li><em>2021-02-28</em><br>发布post<a href="https://blog.asea.fun/post/b6589fc3.html">《返校日记》</a><br>更新post<a href="https://blog.asea.fun/post/6d79d7dd.html">《老地方》</a>,优化排版；</li><li><em>2021-03-02</em><br>增加<a href="https://blog.asea.fun/fun/apesk/">《APESK-荣格理论测试》</a>界面。</li><li><em>2021-03-04</em><br>更新post<a href="https://blog.asea.fun/post/cf7f39c3.html">《技术贴》</a></li><li><em>2021-03-07</em><br>更新post<a href="https://blog.asea.fun/post/c00b24b1.html">《python笔记》</a><br>启动gulp服务，优化加载速度</li><li><em>2021-03-13</em><br>更新post<a href="https://blog.asea.fun/post/c00b24b1.html">《python笔记》</a><br>修改本页样式</li><li><em>2021-03-16</em><br>调整主页布局，增加<strong>分类</strong>模块</li><li><em>2021-03-20</em><br>使用python增加博客更新邮件提醒功能<br>使用python增加自动修改本贴的更新时间功能<br>更新post<a href="https://blog.asea.fun/post/c00b24b1.html">《python笔记》</a></li><li><em>2021-03-27</em><br>更新post<a href="https://blog.asea.fun/post/c00b24b1.html">《python笔记》</a><br>发布post<a href="https://blog.asea.fun/post/71485f5b.html">《python项目练习》</a></li><li><em>2021-03-30</em><br>调整代码块为默认不展开<br>更新post<a href="https://blog.asea.fun/post/71485f5b.html">《python项目练习》</a><br>更新post<a href="https://blog.asea.fun/post/cf7f39c3.html">《技术贴》</a>；</li><li><em>2021-04-07</em><br><del>Butterfly博客上线到服务器，因为懒得备案所以只能用IP地址了。<a href="http://39.103.144.114">地址</a></del> （已弃用）</li><li><em>2021-04-27</em><br>最近更新的几篇post没来得及放更新帖<br>发布post<a href="https://blog.asea.fun/post/55d182ea.html">《PHP学习笔记》</a><br>发布post<a href="https://blog.asea.fun/post/5f7056f2.html">《electron学习笔记》</a><br>发布post<a href="https://blog.asea.fun/post/7e086bda.html">《我的记忆只有一扇门》</a></li><li><em>2021-08-08</em><br>近期post汇总：<br><a href="https://blog.asea.fun/post/42a48ee3.html">《水漫二十》</a><br><a href="https://blog.asea.fun/post/31bf2518.html">《数据结构学习笔记》</a><br><a href="https://blog.asea.fun/post/3345821.html">《Github进不去解决方法》</a><br><a href="https://blog.asea.fun/post/a5130995.html">《mirai+Graia编写聊天机器人》</a><br><a href="https://blog.asea.fun/post/90946297.html">《部署robot+selenium的坑》</a><br><a href="https://blog.asea.fun/post/427de4be.html">《小小总结》</a><br><a href="https://blog.asea.fun/post/b3542778.html">《关于部署机器人到linux的一些记录》</a><br><a href="https://blog.asea.fun/post/3548e590.html">《关于vercel私有域名无法访问》</a><br><a href="https://blog.asea.fun/post/4d5a8c9b.html">《转专业面试小结》</a><br><a href="https://blog.asea.fun/post/29ec6806.html">《关于高考的一些思考（文素课小作业）》</a><br><a href="https://blog.asea.fun/post/cabfd42a.html">《you-get支持哪些网站下载》</a><br><a href="https://blog.asea.fun/post/71475d58.html">《学习通《软件技术基础》ppt》</a><br><a href="https://blog.asea.fun/post/ecef5fd9.html">《如何搭建自己的网页编程（Jupyter）》</a><br><a href="https://blog.asea.fun/post/eb0811b7.html">《初探Java》</a><br><a href="https://blog.asea.fun/post/129264f1.html">《node学习笔记》</a><br><a href="https://blog.asea.fun/post/5d8c0cb2.html">《留言本》</a><br><a href="https://blog.asea.fun/post/97862041.html">《一天的快乐》</a><br><a href="https://blog.asea.fun/post/258a2097.html">《c++学习笔记》</a><br>自8月8日起，调整布局，置顶帖只保留了更新贴，网站引入了cdn动态加速</li></ul></td></tr></table></div><div class="tab-pane" id="-2"><table><tr><td bgcolor="#f6f5ec"><ul><li><em>2021-01-20</em><br>更新文章界面两篇置顶；<br>开通<a href="https://next.asea.fun/talk/">说说</a>界面；<br><a href="https://next.asea.fun/talk/">说说</a>界面优化，增加说说评论功能（访客都可以评论）；<br>新增说说发布权限用户；<br>优化不同用户的头像问题；<br>优化navigationbar；</li><li><em>2021-02-09</em><br>更新post<a href="https://next.asea.fun/post/16fab331.html">《网站收藏》</a>；<br>优化<a href="https://next.asea.fun/post/16fab331.html">《网站收藏》</a>的界面；<br>优化文章排序和置顶问题（<a href="https://gsy00517.github.io/hexo20200207151318/">参考文章</a>）；<br>修改<a href="https://next.asea.fun/">主页</a>post图文排版；</li><li><em>2021-02-16</em><br>发布post<a href="https://next.asea.fun/post/6d79d7dd.html">《老地方》</a>；</li><li><em>2021-02-22</em><br>发布post<a href="https://next.asea.fun/post/c337a479.html">《看垃圾》</a>；<br>更新post<a href="https://next.asea.fun/post/cf7f39c3.html">《技术贴》</a>；</li><li><em>2021-02-23</em><br>更新post<a href="https://next.asea.fun/post/cf7f39c3.html">《技术贴》</a>；<br>发布post<a href="https://next.asea.fun/post/f7b96544.html">《hexo deploy——重复输入账户密码》</a>；<br>添加<a href="https://next.asea.fun/fun/chi/">《吃什么》</a><a href="https://next.asea.fun/fun/du/">《毒鸡汤》</a><a href="https://next.asea.fun/fun/hua/">《画板》</a><a href="https://next.asea.fun/fun/mi/">《随机密码》</a>四个界面(累趴了)；</li><li><em>2021-02-24</em><br><a href="https://next.asea.fun">新主题（Next）博客</a>重磅上线</li><li><em>2021-02-25</em><br>置顶post<a href="https://next.asea.fun/post/cf7f39c3.html">《技术贴》</a><br>网页底部增加运行时间、访客数、总字数<br>增加看板“猫”<br>关联其它链接<br>增加留言板块</li><li><em>2021-02-28</em><br>发布post<a href="https://next.asea.fun/post/b6589fc3.html">《返校日记》</a><br>更新post<a href="https://next.asea.fun/post/6d79d7dd.html">《老地方》</a>,优化排版；</li><li><em>2021-03-02</em><br>增加<a href="https://next.asea.fun/fun/apesk/">《APESK-荣格理论测试》</a>界面。</li><li><em>2021-03-04</em><br>更新post<a href="https://next.asea.fun/post/cf7f39c3.html">《技术贴》</a>；</li><li><em>2021-03-07</em><br>更新post<a href="https://next.asea.fun/post/c00b24b1.html">《python笔记》</a><br>启动gulp服务，优化加载速度</li></ul></td></tr></table><li><em>2021-03-13</em><br>更新post<a href="https://next.asea.fun/post/c00b24b1.html">《python笔记》</a><br>修改本页样式</li><li><em>2021-03-20</em><br>使用python增加博客更新邮件提醒功能<br>使用python增加博客更新邮件提醒功能<br>更新post<a href="https://next.asea.fun/post/c00b24b1.html">《python笔记》</a></li><li><em>2021-03-27</em><br>更新post<a href="https://next.asea.fun/post/c00b24b1.html">《python笔记》</a><br>发布post<a href="https://next.asea.fun/post/71485f5b.html">《python项目练习》</a></li><li><em>2021-03-30</em><br>调整代码块为默认不展开<br>更新post<a href="https://next.asea.fun/post/71485f5b.html">《python项目练习》</a><br>更新post<a href="https://next.asea.fun/post/cf7f39c3.html">《技术贴》</a></li><li><em>2021-04-27</em><br>最近更新的几篇post没来得及放更新帖<br><a href="https://next.asea.fun/post/55d182ea.html">PHP学习笔记</a><br><a href="https://next.asea.fun/post/5f7056f2.html">electron学习笔记</a><br><a href="https://next.asea.fun/post/7e086bda.html">我的记忆只有一扇门</a></li><li><em>2021-08-08</em><br>近期post汇总：<br><a href="https://next.asea.fun/post/42a48ee3.html">《水漫二十》</a><br><a href="https://next.asea.fun/post/31bf2518.html">《数据结构学习笔记》</a><br><a href="https://next.asea.fun/post/3345821.html">《Github进不去解决方法》</a><br><a href="https://next.asea.fun/post/a5130995.html">《mirai+Graia编写聊天机器人》</a><br><a href="https://next.asea.fun/post/90946297.html">《部署robot+selenium的坑》</a><br><a href="https://next.asea.fun/post/427de4be.html">《小小总结》</a><br><a href="https://next.asea.fun/post/b3542778.html">《关于部署机器人到linux的一些记录》</a><br><a href="https://next.asea.fun/post/3548e590.html">《关于vercel私有域名无法访问》</a><br><a href="https://next.asea.fun/post/4d5a8c9b.html">《转专业面试小结》</a><br><a href="https://next.asea.fun/post/29ec6806.html">《关于高考的一些思考（文素课小作业）》</a><br><a href="https://next.asea.fun/post/cabfd42a.html">《you-get支持哪些网站下载》</a><br><a href="https://next.asea.fun/post/71475d58.html">《学习通《软件技术基础》ppt》</a><br><a href="https://next.asea.fun/post/ecef5fd9.html">《如何搭建自己的网页编程（Jupyter）》</a><br><a href="https://next.asea.fun/post/eb0811b7.html">《初探Java》</a><br><a href="https://next.asea.fun/post/129264f1.html">《node学习笔记》</a><br><a href="https://next.asea.fun/post/5d8c0cb2.html">《留言本》</a><br><a href="https://next.asea.fun/post/97862041.html">《一天的快乐》</a><br><a href="https://next.asea.fun/post/258a2097.html">《c++学习笔记》</a><br>自8月8日起，调整布局，置顶帖只保留了更新贴，网站引入了cdn动态加速</li></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 本站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> update </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>老地方</title>
      <link href="post/6d79d7dd.html"/>
      <url>post/6d79d7dd.html</url>
      
        <content type="html"><![CDATA[<h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><blockquote><p>前几天年前回了趟老家，要说也不是一直没回去过，但前几次都只是走马观花，单觉得那地方也不属于我了，没啥观察的必要了，加之来去匆忙，相较于这次回家大不一样了。认真打扫了院子，清理了巨量的落叶，扫干净后又像小时候的院子了。打扫的间隙也不断地发现了各种以前的老物件，可谓历史悠久，少则几年，多则十几年。</p></blockquote><hr><h1 id="爬行"><a href="#爬行" class="headerlink" title="爬行"></a>爬行</h1><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08); width: 300px" src="https://img.imgdb.cn/item/602b3f6d3ffa7d37b3a19fe7.jpg">    <br>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08); width: 300px" src="https://img.imgdb.cn/item/602b3f6d3ffa7d37b3a19fef.jpg">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">家里最大的一颗葡萄树，支架塌了之后枝蔓沿着院子里晾衣服的绳子爬了十几米远</div></center><h1 id="堵"><a href="#堵" class="headerlink" title="堵"></a>堵</h1><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08); width: 300px" src="https://img.imgdb.cn/item/602b3f803ffa7d37b3a1a898.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">院子里的水龙头，因为家里没人住了而且这个水龙头虽然穿得很厚但是每到冬天还是会冻坏所以直接停用了。</div></center><h1 id="倒地祝福"><a href="#倒地祝福" class="headerlink" title="倒地祝福"></a>倒地祝福</h1><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08); width: 300px" src="https://img.imgdb.cn/item/602b3f803ffa7d37b3a1a8a8.jpg">    <br>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08); width: 300px" src="https://img.imgdb.cn/item/602b3f6d3ffa7d37b3a19fe3.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">贴对联之前把去年的对联撕了下来，掉在地上落叶里的“万事如意”“合家欢乐”。</div></center><h1 id="冷暖"><a href="#冷暖" class="headerlink" title="冷暖"></a>冷暖</h1><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08); width: 300px" src="https://img.imgdb.cn/item/602b45aa3ffa7d37b3a4a3e7.jpg">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">用了很多年的煤火炉想起来之前在厨房烤火烧橘子的日子，很遥远，</div></center><h1 id="魔幻手机"><a href="#魔幻手机" class="headerlink" title="魔幻手机"></a>魔幻手机</h1><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08); width: 300px" src="https://img.imgdb.cn/item/602b45f33ffa7d37b3a4c8e8.jpg">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">记忆力我妈最早的一部手机可以用笔或者任何东西触控，很小的时候，在上面玩猫熊，看斗罗大陆，还有可以运行Java，可以语音指令，可以背单词听听力看电影。我也用它拍过很好玩的视频，总之它很值得尊敬，尽管我不知道它是啥牌子。</div></center><h1 id="尸体"><a href="#尸体" class="headerlink" title="尸体"></a>尸体</h1><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08); width: 300px" src="https://img.imgdb.cn/item/602b46da3ffa7d37b3a532af.jpg">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">床因为不睡了所以拿东西罩了起来，回来时发现上面躺了一只很大的蜂，不知道死前经历了什么，大概是出不去了吧。</div></center><h1 id="墨"><a href="#墨" class="headerlink" title="墨"></a>墨</h1><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08); width: 300px" src="https://img.imgdb.cn/item/602b47b13ffa7d37b3a59491.jpg">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">前年的春节在自己房间里拿笔写了些字，也尝试写了对联，但由于写的太烂又找别人写了。今天写的还算能看过去，也就将就着贴了。</div>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08); width: 300px" src="https://img.imgdb.cn/item/602b48a83ffa7d37b3a612d3.jpg">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">这是今年写的丢人对联</div></center><h1 id="🐕🏠"><a href="#🐕🏠" class="headerlink" title="🐕🏠"></a>🐕🏠</h1><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08); width: 300px" src="https://img.imgdb.cn/item/602b48d93ffa7d37b3a62c91.jpg">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">悲痛是具象的，以后专门写它。</div></center><h1 id="艺术"><a href="#艺术" class="headerlink" title="艺术"></a>艺术</h1><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08); width: 300px" src="https://img.imgdb.cn/item/602b49353ffa7d37b3a65c59.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">高中和阮同桌天天没事画来画去，有几张觉得还挺有趣的就保留了下来，现在看来仍历历在目。</div></center><h1 id="星星"><a href="#星星" class="headerlink" title="星星"></a>星星</h1><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08); width: 300px" src="https://img.imgdb.cn/item/602b499b3ffa7d37b3a6907e.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">拍星星的时候忘记还在长曝光，乱晃的结果，还不错</div></center>   <h1 id="蝴蝶"><a href="#蝴蝶" class="headerlink" title="蝴蝶"></a>蝴蝶</h1><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08); width: 300px" src="https://img.imgdb.cn/item/602b4b263ffa7d37b3a74cee.jpg">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">（网站主题就是Butterfly的）在老家落叶堆里见到的，没想到冬天能在老家见到蝴蝶。另外觉得，光学变焦太重要了。</div></center>   <h1 id="繁星"><a href="#繁星" class="headerlink" title="繁星"></a>繁星</h1><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08); width: 300px" src="https://img.imgdb.cn/item/602b4bab3ffa7d37b3a78c2f.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">老家的星星确实挺好看的，拍出来效果更绝，挑了一张好看的放这。放大调亮屏幕能看见更多星星。</div></center>   <h1 id="榆木疙瘩"><a href="#榆木疙瘩" class="headerlink" title="榆木疙瘩"></a>榆木疙瘩</h1><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08); width: 300px" src="https://img.imgdb.cn/item/602b4bfa3ffa7d37b3a7afae.jpg">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">我还记得这颗树，是我家后院的一颗很大很大的榆树。记不清几年级学了榆钱才知道这东西叫榆树，榆钱还能吃，但我记得没啥甜味。后来学到读诗读到“道傍榆荚仍似钱，摘来沽酒君肯否。”，颇有意思。树上那个缝是当时拿锯子锯的时候锯不断，就换了好几个地方，不得不说这东西真硬。</div></center>   ]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术贴</title>
      <link href="post/cf7f39c3.html"/>
      <url>post/cf7f39c3.html</url>
      
        <content type="html"><![CDATA[<h2 id="这里收录一些小技巧"><a href="#这里收录一些小技巧" class="headerlink" title="这里收录一些小技巧"></a><font color="#495969">这里收录一些小技巧</font></h2><blockquote><ul><li>网页长截图可以F12——&gt;Ctrl Shift P——&gt;Capture full size screenshot</li><li>new post 的格式在root\scafflods里面修改</li><li>利用bat快速生成newpost,可以参考<br><code>hexo new post newpost&amp;&amp;code E:\blog\source\_posts\newpost.md&amp;&amp;rd E:\blog\source\_posts\newpost</code></li><li>在微软输入法设置里面可以添加自定义短语，例如我输入sj，自动弹出当前时间，具体格式:<code>%yyyy%-%MM%-%dd% %HH%:%mm%:%ss%</code>。</li><li>win10 突然发现某些地方的图标字体变得很大，和分辨率不匹配，可能是因为开机时连接了hdmi线所致，可以拔掉hdmi线然后重启。</li><li>obs录屏如果显卡和节能都调过了，但是某一天突然有黑屏，可以去图形设置里面把obs删了，重新添加一下，因为某些原因可能导致文件路径出错。</li><li>转载csdn的博客：复制<code>&lt;div id=&quot;article_content&quot;&gt;...&lt;/div&gt;</code>里的html代码，粘贴到md文件里就行。</li><li>bilibili等视频网站自定义倍速播放：如在浏览器控制台输入<code>document.getElementsByTagName(&quot;video&quot;)[0].playbackRate = 3</code></li><li>gulp压缩参考：<a href="https://blog.csdn.net/GerZhouGengCheng/article/details/106074545">使用Gulp压缩Hexo博客静态资源</a>,imagemin可能比较慢，不报错的话建议耐心点。</li><li>放个订阅地址：<a href="https://l.dabai.pw/link/z2SMogEehRtWyNWq?sub=3&extend=1">地址</a></li><li>当需要查看浏览器的密码输入框里面的密码时，可以审查元素将<code>type</code>改成<code>text</code>就可以显示了。</li><li>浏览器快捷键：录屏<code>ctrl+alt+s</code>  元素检查<code>ctrl+shift+c</code></li><li>云服务器上python发送邮件连接失败：<code>smtp = smtplib.SMTP(mailserver,port=25)</code>修改成<code>smtp=smtplib.SMTP_SSL(mailserver,port=465)</code>。</li><li>word表格转excel可以通过html作为中转。</li><li>python降级：<code>conda install python==3.6</code></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年的大瓜</title>
      <link href="post/35baf9b8.html"/>
      <url>post/35baf9b8.html</url>
      
        <content type="html"><![CDATA[<h2 id="🍉"><a href="#🍉" class="headerlink" title="🍉"></a>🍉</h2><p>不追星，但喜欢一种仪式感。体现在对薛之谦新歌的期待，尽管不好听；体现在关注的某个up更新；体现在他刚好符合我的某个理想中的状态，这算不算追星？不算吧，顶多是从生活里找乐子，也是一种临时逃避生活的借口。<br>当开始认真关注一些人，目标不限于室友，囊括偶像在内的所有人，都会开始发现，对方比你了解的复杂很多。接着我会对就近的采取策略，而且还卓有成效。至于远处诗和远方，偶像不是诗和远方，充其量是个载体，没了载体理想依然能存在。我回想起来高中搬个凳子在狭小的厕所里写日记，有段时间话题无不关于陆之昂立夏几人。说白了就是我把很大一部分纯粹放在电视剧里，放在其中某个人身上了，但绝不是演员身上。这种纯粹每个人或多或少都有一些，而且纯粹的载体是随着时间不断更迭不断推陈的。我发现年龄增长带来了纯粹的减少，但好在记忆还在，它独有的积累效果不言而喻，多年以前的两平米里的冷和感动至今历历在目。这些很珍贵。<br>这两天的爆料很雷人，但我没难过。我又发现一些小的道理：当一个人的能力越来越大，就越来越容易干坏事。想起来限制与自由的论述，恰好符合。身为普通人，幻想着腰缠万贯或者惨遭封禁都是遥不可及的事情，而当有一天你发现你已经腰缠万贯，这时候就要十分警惕，你是否要悬崖勒马，甚至调个头往回走几步了。<br>这是一点想法。</p><h2 id="✍"><a href="#✍" class="headerlink" title="✍"></a>✍</h2><p>考试结束一直都很想找个机会总结一下这一学年，但是没安下心，一直在补漏下的娱乐。很久没有一个人呆在一个地方了，这样的感觉和高考前两天颇相似，但是却有着截然不同的使命。<br>很多人都总结的很到位，我显然就暗淡很多，不要抱多大希望。<br>这一学年还是没什么可说的，我太没兴趣了，列个表格。</p><table><thead><tr><th>好</th><th>坏</th></tr></thead><tbody><tr><td>小有收益</td><td>四级没过</td></tr><tr><td>打入外卖</td><td>没报四级</td></tr><tr><td>理论力学成绩还行</td><td>工时没做</td></tr><tr><td>看了很多电影</td><td>没有参加比赛</td></tr><tr><td>开了新坑</td><td>崴脚</td></tr><tr><td>尝试了兼职</td><td>但没要我</td></tr><tr><td>书尽量读了三本</td><td>热工不行</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><p>这样单纯的分析利弊好像又没什么意思啊，人单纯就是想看些主观的思考，但说实话我越来越懒了，厌倦思考。所以，如果，真的需要我说点什么的话，我觉得这是幸福的一学期，没有什么大富大贵，但至少无病无灾，在我看来已经极其幸运的了，至少在我活过的十几年里，算是第一梯队的一学期。<br>未来逐渐到来，过去逐渐远去。<br>希望假期能把挖的坑填上，提前祝大家新年快乐。</p><p>3.23修补了一下后台配置。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020+1</title>
      <link href="post/b6976a.html"/>
      <url>post/b6976a.html</url>
      
        <content type="html"><![CDATA[<h2 id="2020的结束"><a href="#2020的结束" class="headerlink" title="2020的结束"></a><font color="#495969">2020的结束</font></h2><blockquote><p>这些东西，有时候你说宿命，我也不得不信。</p></blockquote><p>当你回忆的时候，试想一下，你带着耳机，保温杯里刚沏了茶，茶叶丢进去拧紧瓶盖，留在外面一根棉线。过了一会，你用手一捋，发现茶水顺着棉线爬了出来，你开始怀疑，是不是瓶盖没有拧紧。怎么会呢，回忆这东西就是这样，无论你如何想法设法把它关在一个空间内，它还是渗透，渗透，趁你不注意偷偷溜出来。当你想用手去抚摸它的时候，忽然发现它都已经湿透，再过会就要往下滴了。<br>2020多吉利啊，我在两年前就想了，多好的年份，科技发展，高中毕业，一切都是向好的方向发展。但格局小的我当然不会意识到，世界变不变好不由得我，还有很多我不了解却在深刻影响世界的东西在发生。但，其实呢，我并不觉得这一年有多坏，但是鉴于大家都说2020不好，我也不能表现出来，我多喜爱这个年份。</p><h2 id="2021的开始"><a href="#2021的开始" class="headerlink" title="2021的开始"></a><font color="#495969">2021的开始</font></h2><blockquote><p>把发热的面颊<br>埋在柔软的积雪里一般<br>想那么恋爱一下看看</p></blockquote><p>2021|2021|2021|2021|2021|2021|2021|2021|2021|<br>多么高级的数字，又酷又遥远。我写这篇post的时候生成的时间是 <strong><font color="#495969">“2021-01-07 15:01:51”</font></strong> 太奇怪了吧，这种时间我居然正在过着，这根本不属于我啊，我仍然感觉2008听起来很熟悉，觉得2016很熟悉。再往后就无感起来了。是谁的问题呢？<br>李健在唱十点半的地铁，我觉得歌词写的不真实。有点矫情了吧，或者是别的原因。<br>我开始想起来那个镇，最好看的地方是一片菜地，四周精致的小灯很有味道，冰块，树，未知名的菜，掉下来的柚子。真的很好看吗，我也问我了。一般般啊，但就是喜欢，因为看起来太熟悉了，像我熟悉的地方。然后人之间的关系才缓和起来啊，生疏豁然消解了。<br><strong>熟悉是一种美再次得到了印证</strong><br>2021开头是各种情绪都到了极致的时候，开心，兴奋，焦虑，压力都是这样，就连现在的放松也是。少有的能坐直身子听歌和打字了。难得难得，也许2021就是这样？所有都开始有了起色吗？</p><h2 id="NOTE"><a href="#NOTE" class="headerlink" title="NOTE"></a><font color="#495969">NOTE</font></h2><blockquote><ul><li>村上新书出版了，译者不是我认识的。</li><li>有些事情你以为离你很远，直到你经历了，才觉得近在眼前而且不是你能承受的。</li><li>想了很久的血糯米奶茶，像喝粥一样。</li><li>一月去商店晚了两天就买不到萌芽了。</li><li>半胱氨酸和胱氨酸可以相互转化，甲硫氨酸可以转变为半胱氨酸，所以甲硫氨酸是必需氨基酸。</li><li>有时候最后一节课也没必要去上，去上是为了情怀，不去才是正道。</li><li>一小块山楂就能使一杯水变酸。</li></ul></blockquote><p><strong><center><font color="#8523912">祝新的一年快乐、健康、进步。</font><center></center></center></strong></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站收藏</title>
      <link href="post/16fab331.html"/>
      <url>post/16fab331.html</url>
      
        <content type="html"><![CDATA[<h1 id="收集好玩实用的网站"><a href="#收集好玩实用的网站" class="headerlink" title="收集好玩实用的网站"></a>收集好玩实用的网站</h1><div class="tabs" id="websites"><ul class="nav-tabs"><li class="tab active"><a href="#websites-1">取景框看世界</a></li><li class="tab"><a href="#websites-2">-LKs-</a></li><li class="tab"><a href="#websites-3">阿信OL</a></li></ul><div class="tab-content"><div class="tab-pane active" id="websites-1"><blockquote><ul><li><strong>from: bilibili UP主<a href="https://space.bilibili.com/40427625?spm_id_from=333.788.b_765f7570696e666f.1">取景框看世界</a></strong></li></ul></blockquote><div class="tabs" id="qjk"><ul class="nav-tabs"><li class="tab active"><a href="#qjk-1">第一期</a></li><li class="tab"><a href="#qjk-2">第二期</a></li><li class="tab"><a href="#qjk-3">第三期</a></li><li class="tab"><a href="#qjk-4">第四期</a></li><li class="tab"><a href="#qjk-5">第五期</a></li></ul><div class="tab-content"><div class="tab-pane active" id="qjk-1"><table><thead><tr><th><strong>类别</strong></th><th><strong>网站</strong></th><th><strong>网址</strong></th></tr></thead><tbody><tr><td>图片</td><td>pixabay</td><td><a href="https://pixabay.com/zh/">https://pixabay.com/zh/</a></td></tr><tr><td>图片</td><td>Unsplash</td><td><a href="https://unsplash.com/">https://unsplash.com/</a></td></tr><tr><td>图片</td><td>Pexels</td><td><a href="https://www.pexels.com/zh-cn/">https://www.pexels.com/zh-cn/</a></td></tr><tr><td>图片</td><td>Foodiesfeed</td><td><a href="https://www.foodiesfeed.com">https://www.foodiesfeed.com</a></td></tr><tr><td>图片</td><td>CC零图片网</td><td><a href="https://cc0.cn/">https://cc0.cn/</a></td></tr><tr><td>图片</td><td>Logo神器</td><td><a href="https://www.logosc.cn/so/">https://www.logosc.cn/so/</a></td></tr><tr><td>视频</td><td>Videezy</td><td><a href="https://www.videezy.com/">https://www.videezy.com/</a></td></tr><tr><td>视频</td><td>Videvo</td><td><a href="https://www.videvo.net/">https://www.videvo.net/</a></td></tr><tr><td>视频</td><td>mixkit</td><td><a href="https://mixkit.co/">https://mixkit.co/</a></td></tr><tr><td>视频</td><td>distill</td><td><a href="https://wedistill.io/">https://wedistill.io/</a></td></tr><tr><td>音频</td><td>audionautix</td><td><a href="https://audionautix.com/">https://audionautix.com/</a></td></tr><tr><td>音频</td><td>Freepd</td><td><a href="https://freepd.com/">https://freepd.com/</a></td></tr><tr><td>音频</td><td>Freesound</td><td><a href="https://freesound.org/">https://freesound.org/</a></td></tr><tr><td>音频</td><td>耳聆网</td><td><a href="https://www.ear0.com/">https://www.ear0.com/</a></td></tr><tr><td>音频</td><td>淘声网</td><td><a href="https://www.tosound.com/">https://www.tosound.com/</a></td></tr><tr><td>字体</td><td>字由</td><td><a href="https://www.hellofont.cn/">https://www.hellofont.cn/</a></td></tr><tr><td>字体</td><td>100font</td><td><a href="https://www.100font.com/">https://www.100font.com/</a></td></tr><tr><td>图标</td><td>iconfont</td><td><a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></td></tr></tbody></table></div><div class="tab-pane" id="qjk-2"><table><thead><tr><th><strong>类别</strong></th><th><strong>网站</strong></th><th><strong>网址</strong></th></tr></thead><tbody><tr><td>图标</td><td>iconstore</td><td><a href="https://iconstore.co/">https://iconstore.co/</a></td></tr><tr><td>图标</td><td>unDraw</td><td><a href="https://undraw.co/illustrations">https://undraw.co/illustrations</a></td></tr><tr><td>图标</td><td>ICONFINDER</td><td><a href="https://www.iconfinder.com/">https://www.iconfinder.com/</a></td></tr><tr><td>图标</td><td>ICONS8</td><td><a href="https://icons8.com/">https://icons8.com/</a></td></tr><tr><td>矢量图/PSD模板</td><td>freepik</td><td><a href="https://www.freepik.com/">https://www.freepik.com/</a></td></tr><tr><td>矢量图/PSD模板</td><td>free-PSD-templates</td><td><a href="https://free-psd-templates.com/">https://free-psd-templates.com/</a></td></tr><tr><td>矢量图/PSD模板</td><td>365psd</td><td><a href="https://365psd.com/">https://365psd.com/</a></td></tr><tr><td>免抠PNG</td><td>pngimage</td><td><a href="http://pngimg.com/">http://pngimg.com/</a></td></tr><tr><td>免抠PNG</td><td>CLEANPNG</td><td><a href="https://www.cleanpng.com/">https://www.cleanpng.com/</a></td></tr><tr><td>壁纸</td><td>wallhaven</td><td><a href="https://wallhaven.cc/">https://wallhaven.cc/</a></td></tr><tr><td>壁纸</td><td>Wallpaper Abyss</td><td><a href="https://wall.alphacoders.com/">https://wall.alphacoders.com/</a></td></tr><tr><td>壁纸</td><td>极简壁纸</td><td><a href="https://bz.zzzmh.cn/">https://bz.zzzmh.cn/</a></td></tr><tr><td>PPT模板</td><td>OfficePLUS</td><td><a href="http://www.officeplus.cn/Template/Home.shtml">http://www.officeplus.cn/Template/Home.shtml</a></td></tr><tr><td>PPT模板</td><td>PPT超级市场</td><td><a href="http://ppt.sotary.com/web/wxapp/index.html">http://ppt.sotary.com/web/wxapp/index.html</a></td></tr><tr><td>PPT模板</td><td>51PPT模板</td><td><a href="http://www.51pptmoban.com/ppt/">http://www.51pptmoban.com/ppt/</a></td></tr><tr><td>PPT模板</td><td>PPT汇</td><td><a href="https://www.ppthui.com/">https://www.ppthui.com/</a></td></tr><tr><td>PPT模板</td><td>优品PPT</td><td><a href="http://www.ypppt.com/">http://www.ypppt.com/</a></td></tr></tbody></table></div><div class="tab-pane" id="qjk-3"><table><thead><tr><th><strong>类别</strong></th><th><strong>网站</strong></th><th><strong>网址</strong></th></tr></thead><tbody><tr><td>使用论文和部分电子书方法</td><td>学校图书馆官网</td><td>注意查看学校购买的数据库以及校外访问方法</td></tr><tr><td>使用论文和部分电子书方法</td><td>各省市图书馆官网</td><td>注册各地图书馆账号</td></tr><tr><td>论文</td><td>知网</td><td>图书馆进入</td></tr><tr><td>论文</td><td>Web of Science</td><td>图书馆进入</td></tr><tr><td>论文</td><td>各图书馆官网直接检索</td><td></td></tr><tr><td>论文</td><td>SCI-HUB</td><td><a href="https://sci-hub.do">https://sci-hub.do</a></td></tr><tr><td>论文</td><td>Library Genesis</td><td><a href="http://gen.lib.rus.ec/">http://gen.lib.rus.ec/</a></td></tr><tr><td>论文</td><td>Z-Library</td><td><a href="https://booksc.xyz/">https://booksc.xyz/</a></td></tr><tr><td>电子书（含教材）</td><td>电子课本网</td><td><a href="http://www.dzkbw.com/">http://www.dzkbw.com/</a></td></tr><tr><td>电子书（含教材）</td><td>易学啦</td><td><a href="https://www.yixuela.com/">https://www.yixuela.com/</a></td></tr><tr><td>电子书（含教材）</td><td>读秀</td><td>图书馆进入</td></tr><tr><td>电子书（含教材）</td><td>超星</td><td>图书馆进入</td></tr><tr><td>电子书（含教材）</td><td>书格</td><td><a href="https://new.shuge.org/">https://new.shuge.org/</a></td></tr><tr><td>电子书（含教材）</td><td>七彩英语</td><td><a href="http://www.qcenglish.com/">http://www.qcenglish.com/</a></td></tr><tr><td>电子书（含教材）</td><td>古腾堡计划</td><td><a href="http://www.gutenberg.org/">http://www.gutenberg.org/</a></td></tr><tr><td>电子书（含教材）</td><td>manybooks</td><td><a href="https://manybooks.net/">https://manybooks.net/</a></td></tr><tr><td>电子书（含教材）</td><td>鸠摩搜索</td><td><a href="https://www.jiumodiary.com/">https://www.jiumodiary.com/</a></td></tr><tr><td>电子书（含教材）</td><td>Library Genesis</td><td><a href="http://gen.lib.rus.ec/">http://gen.lib.rus.ec/</a></td></tr><tr><td>教辅资源</td><td>学科网</td><td><a href="https://www.zxxk.com/">https://www.zxxk.com/</a></td></tr><tr><td>教辅资源</td><td>哔哩哔哩</td><td><a href="https://www.bilibili.com/">https://www.bilibili.com/</a></td></tr><tr><td>教辅资源</td><td>中国大学慕课</td><td><a href="https://www.icourse163.org/">https://www.icourse163.org/</a></td></tr></tbody></table></div><div class="tab-pane" id="qjk-4"><table><thead><tr><th><strong>类别</strong></th><th><strong>网站</strong></th><th><strong>网址</strong></th></tr></thead><tbody><tr><td>专业咨询报告</td><td>贝恩</td><td><a href="https://www.bain.cn/news.php?id=15">https://www.bain.cn/news.php?id=15</a></td></tr><tr><td>专业咨询报告</td><td>波士顿咨询</td><td><a href="https://www.bcg.com/zh-cn/">https://www.bcg.com/zh-cn/</a></td></tr><tr><td>专业咨询报告</td><td>麦肯锡</td><td><a href="https://www.mckinsey.com/featured-insights">https://www.mckinsey.com/featured-insights</a></td></tr><tr><td>专业咨询报告</td><td>罗兰贝格</td><td><a href="https://www.rolandberger.com/zh/">https://www.rolandberger.com/zh/</a></td></tr><tr><td>专业咨询报告</td><td>埃森哲</td><td><a href="https://www.accenture.com/cn-zh">https://www.accenture.com/cn-zh</a></td></tr><tr><td>专业咨询报告</td><td>普华永道</td><td><a href="https://www.pwccn.com/zh/research-and-insights.html">https://www.pwccn.com/zh/research-and-insights.html</a></td></tr><tr><td>专业咨询报告</td><td>德勤</td><td><a href="https://www2.deloitte.com/cn/zh.html">https://www2.deloitte.com/cn/zh.html</a></td></tr><tr><td>专业咨询报告</td><td>毕马威</td><td><a href="https://home.kpmg/cn/zh/home/insights.html">https://home.kpmg/cn/zh/home/insights.html</a></td></tr><tr><td>专业咨询报告</td><td>安永</td><td><a href="https://www.ey.com/zh_cn">https://www.ey.com/zh_cn</a></td></tr><tr><td>互联网+咨询报告</td><td>艾瑞咨询</td><td><a href="https://www.iresearch.com.cn/report.shtml">https://www.iresearch.com.cn/report.shtml</a></td></tr><tr><td>互联网+咨询报告</td><td>极光大数据</td><td><a href="https://www.jiguang.cn/reports">https://www.jiguang.cn/reports</a></td></tr><tr><td>互联网+咨询报告</td><td>QuestMobile</td><td><a href="https://www.questmobile.com.cn/research/report-new">https://www.questmobile.com.cn/research/report-new</a></td></tr><tr><td>互联网+咨询报告</td><td>亿欧智库</td><td><a href="https://www.iyiou.com/research">https://www.iyiou.com/research</a></td></tr><tr><td>互联网+咨询报告</td><td>TalkingData</td><td><a href="http://mi.talkingdata.com/">http://mi.talkingdata.com/</a></td></tr><tr><td>大厂研究报告</td><td>阿里研究院</td><td><a href="http://www.aliresearch.com/cn/presentation">http://www.aliresearch.com/cn/presentation</a></td></tr><tr><td>大厂研究报告</td><td>腾讯研究院</td><td><a href="https://tisi.org/yjbg">https://tisi.org/yjbg</a></td></tr><tr><td>大厂研究报告</td><td>百度研究院</td><td><a href="http://research.baidu.com/Research_Areas?id=55">http://research.baidu.com/Research_Areas?id=55</a></td></tr><tr><td>大厂研究报告</td><td>美团研究院</td><td><a href="https://mri.meituan.com/research">https://mri.meituan.com/research</a></td></tr><tr><td>大厂研究报告</td><td>京东研究院</td><td><a href="https://research.jd.com/">https://research.jd.com/</a></td></tr><tr><td>券商行研报告</td><td>Wind</td><td>需要付费购买，在校生可以咨询学校或者学院，在一些大企业实习或者工作的小伙伴可以咨询企业：是否已经购买，如果购买如何免费使用</td></tr><tr><td>券商行研报告</td><td>慧博投研咨询</td><td><a href="http://www.hibor.com.cn/">http://www.hibor.com.cn/</a></td></tr><tr><td>券商行研报告</td><td>萝卜投研</td><td><a href="https://robo.datayes.com/v2/selection">https://robo.datayes.com/v2/selection</a></td></tr><tr><td>报告整合平台</td><td>199it</td><td><a href="http://www.199it.com/archives/category/report">http://www.199it.com/archives/category/report</a></td></tr><tr><td>报告整合平台</td><td>报告查一查</td><td><a href="http://report.seedsufe.com/#/index">http://report.seedsufe.com/#/index</a></td></tr><tr><td>报告整合平台</td><td>数据局</td><td><a href="http://www.shujuju.cn/lecture/browe">http://www.shujuju.cn/lecture/browe</a></td></tr><tr><td>报告整合平台</td><td>行行查</td><td><a href="https://www.hanghangcha.com/">https://www.hanghangcha.com/</a></td></tr></tbody></table></div><div class="tab-pane" id="qjk-5"><table><thead><tr><th><strong>类别</strong></th><th><strong>网站</strong></th><th><strong>网址</strong></th></tr></thead><tbody><tr><td>中国全国数据</td><td>国务院</td><td><a href="http://www.gov.cn/shuju/index.htm">http://www.gov.cn/shuju/index.htm</a></td></tr><tr><td>中国全国数据</td><td>国家统计局</td><td><a href="https://data.stats.gov.cn/">https://data.stats.gov.cn/</a></td></tr><tr><td>中国地方数据</td><td>地方统计局导航</td><td><a href="http://www.stats.gov.cn/tjgz/wzlj/dftjwz/">http://www.stats.gov.cn/tjgz/wzlj/dftjwz/</a></td></tr><tr><td>中国地方数据</td><td>各地方数据开放平台</td><td>检索网站：某省份/城市+数据开放</td></tr><tr><td>行业数据</td><td>行业协会</td><td>检索网站：某行业+协会</td></tr><tr><td>行业数据</td><td>咨询报告、研究报告</td><td>第4期全部内容</td></tr><tr><td>其他国家数据</td><td>其他国家统计局导航</td><td><a href="http://www.stats.gov.cn/tjgz/wzlj/gwtjw/201311/t20131104_452221.html">http://www.stats.gov.cn/tjgz/wzlj/gwtjw/201311/t20131104_452221.html</a></td></tr><tr><td>其他国家数据</td><td>Open Data Inception</td><td><a href="https://opendatainception.io/">https://opendatainception.io/</a></td></tr><tr><td>全球数据</td><td>各国际组织导航</td><td><a href="http://www.stats.gov.cn/tjgz/wzlj/gjzzwz/201311/t20131101_451662.html">http://www.stats.gov.cn/tjgz/wzlj/gjzzwz/201311/t20131101_451662.html</a></td></tr><tr><td>数据整合平台</td><td>知网（年鉴）</td><td>图书馆进入</td></tr><tr><td>数据整合平台</td><td>萝卜投研</td><td><a href="https://robo.datayes.com/v2/landing/indicator_library">https://robo.datayes.com/v2/landing/indicator_library</a></td></tr><tr><td>其他特色数据</td><td>七麦数据</td><td><a href="https://www.qimai.cn/">https://www.qimai.cn/</a></td></tr><tr><td>其他特色数据</td><td>蝉大师</td><td><a href="https://www.chandashi.com/">https://www.chandashi.com/</a></td></tr><tr><td>其他特色数据</td><td>APP ANNIE</td><td><a href="https://www.appannie.com/cn/">https://www.appannie.com/cn/</a></td></tr><tr><td>其他特色数据</td><td>房天下</td><td><a href="https://fdc.fang.com/">https://fdc.fang.com/</a></td></tr><tr><td>其他特色数据</td><td>高德地图指数</td><td><a href="https://report.amap.com/diagnosis/index.do">https://report.amap.com/diagnosis/index.do</a></td></tr><tr><td>其他特色数据</td><td>艺恩</td><td><a href="https://www.endata.com.cn/BoxOffice/index.html">https://www.endata.com.cn/BoxOffice/index.html</a></td></tr><tr><td>其他特色数据</td><td>猫眼专业版</td><td><a href="http://piaofang.maoyan.com/dashboard">http://piaofang.maoyan.com/dashboard</a></td></tr><tr><td>微观数据</td><td>咨询报告、研究报告</td><td>第4期全部内容</td></tr></tbody></table></div></div></div><!-- 表格样式 --><style>table th:first-of-type {    width: 30%;}table th:nth-of-type(2) {    width: 30%;}table th:nth-of-type(3) {    width: 30%;}table th:nth-of-type(4) {    width: 10%;}<p></style><p></p></div><div class="tab-pane" id="websites-2"><blockquote><ul><li><strong>from: bilibili UP主<a href="https://space.bilibili.com/125526?from=search&seid=769593231768718900">-LKs-</a></strong></li></ul></blockquote><div class="tabs" id="lks"><ul class="nav-tabs"><li class="tab active"><a href="#lks-1">2016</a></li><li class="tab"><a href="#lks-2">2017</a></li><li class="tab"><a href="#lks-3">2018</a></li><li class="tab"><a href="#lks-4">2019</a></li><li class="tab"><a href="#lks-5">2020</a></li><li class="tab"><a href="#lks-6">2020.2</a></li><li class="tab"><a href="#lks-7">2021</a></li></ul><div class="tab-content"><div class="tab-pane active" id="lks-1"><table><thead><tr><th><strong>类型</strong></th><th><strong>网址</strong></th><th><strong>网址2</strong></th><th><strong>网址3</strong></th></tr></thead><tbody><tr><td></td><td><a href="http://nico-nico-ni.com/">http://nico-nico-ni.com/</a></td><td><a href="http://internet-map.net/">http://internet-map.net/</a></td><td></td></tr><tr><td>钢琴</td><td><a href="http://touchpianist.com/">http://touchpianist.com/</a></td><td></td><td></td></tr><tr><td>搜图</td><td><a href="http://iqdb.org/">http://iqdb.org/</a></td><td><a href="http://saucenao.com/index.php">http://saucenao.com/index.php</a></td><td><a href="http://safebooru.org/">http://safebooru.org/</a></td></tr><tr><td>环境</td><td><a href="http://www.rainymood.com/">http://www.rainymood.com/</a></td><td><a href="http://www.ambient-mixer.com/">http://www.ambient-mixer.com/</a></td><td></td></tr><tr><td>不明觉厉</td><td></td><td></td><td></td></tr><tr><td></td><td><a href="http://mrdoob.com/#/157/spin_painter">http://mrdoob.com/#/157/spin_painter</a></td><td></td><td></td></tr><tr><td></td><td><a href="http://www.ro.me/">http://www.ro.me/</a></td><td></td><td></td></tr><tr><td></td><td><a href="http://middle-earth.thehobbit.com/map">http://middle-earth.thehobbit.com/map</a></td><td></td><td></td></tr><tr><td></td><td><a href="http://fff.cmiscm.com/#!/section/planttrees">http://fff.cmiscm.com/#!/section/planttrees</a></td><td></td><td></td></tr><tr><td></td><td><a href="http://weavesilk.com/">http://weavesilk.com/</a></td><td></td><td></td></tr><tr><td>噫</td><td><a href="http://www.theuselessweb.com/">http://www.theuselessweb.com/</a></td><td></td><td></td></tr><tr><td>风景</td><td><a href="http://www.airpano.com/?n=10&amp;sort_by=&amp;page=1">http://www.airpano.com/?n=10&amp;sort_by=&amp;page=1</a></td><td></td><td></td></tr><tr><td>制作</td><td><a href="http://threejs.org/http://www.instructables.com/">http://threejs.org/http://www.instructables.com/</a></td><td></td><td></td></tr><tr><td>miku</td><td><a href="http://johnsu.deviantart.com/art/Halfne-Miku-Studio-396850314">http://johnsu.deviantart.com/art/Halfne-Miku-Studio-396850314</a></td><td><a href="https://www.youtube.com/watch?v=1szQ7YDGdXw&amp;feature=youtu.be">https://www.youtube.com/watch?v=1szQ7YDGdXw&amp;feature=youtu.be</a></td><td></td></tr><tr><td>音游</td><td><a href="http://www.beatstage.com/">http://www.beatstage.com/</a></td><td></td><td></td></tr><tr><td></td><td><a href="http://www.m2ustudio.com/index.html#album-tracks">http://www.m2ustudio.com/index.html#album-tracks</a></td><td></td><td></td></tr><tr><td>水效果</td><td><a href="http://watereffect.net/index.php">http://watereffect.net/index.php</a></td><td></td><td></td></tr><tr><td>猜地点</td><td><a href="https://geoguessr.com/">https://geoguessr.com/</a></td><td></td><td></td></tr><tr><td>2ch</td><td><a href="http://kanquwen.com/">http://kanquwen.com/</a></td><td></td><td></td></tr><tr><td>音乐素材</td><td><a href="http://www.hmix.net/music_gallery/music_top.htm">http://www.hmix.net/music_gallery/music_top.htm</a></td><td></td><td></td></tr><tr><td>画</td><td><a href="http://en.gallerix.ru/">http://en.gallerix.ru/</a></td><td></td><td></td></tr><tr><td>制服</td><td><a href="http://www.seihuku-zukan.com/index.htm">http://www.seihuku-zukan.com/index.htm</a></td><td><a href="http://uniform.wingzero.tw/">http://uniform.wingzero.tw/</a></td><td></td></tr><tr><td>学英语</td><td><a href="http://www.wuxiaworld.com/cdindex-html/">http://www.wuxiaworld.com/cdindex-html/</a></td><td></td><td></td></tr><tr><td></td><td><a href="http://www.baka-tsuki.org/project/index.php?title=Main_Page">http://www.baka-tsuki.org/project/index.php?title=Main_Page</a></td><td></td><td></td></tr><tr><td>剁手</td><td><a href="https://fancy.com/">https://fancy.com/</a></td><td></td><td></td></tr><tr><td></td><td><a href="http://www.farfetch.com/cn/shopping/men/items.aspx?ffref=hp_gender">http://www.farfetch.com/cn/shopping/men/items.aspx?ffref=hp_gender</a></td><td></td><td></td></tr><tr><td></td><td><a href="http://www.chiphell.com/">http://www.chiphell.com/</a></td><td></td><td></td></tr><tr><td>电音</td><td><a href="http://techno.org/electronic-music-guide/">http://techno.org/electronic-music-guide/</a></td><td><a href="https://the.wubmachine.com/">https://the.wubmachine.com/</a></td><td></td></tr><tr><td>捏人</td><td><a href="http://www.dreamself.me/clothes.php?action=view&amp;id=0&amp;c=1">http://www.dreamself.me/clothes.php?action=view&amp;id=0&amp;c=1</a></td><td></td><td></td></tr><tr><td>gal</td><td><a href="http://polka-dot.co/lzbx.php">http://polka-dot.co/lzbx.php</a></td><td></td><td></td></tr><tr><td>搬砖</td><td><a href="http://www.fotojet.com/">http://www.fotojet.com/</a></td><td></td><td></td></tr><tr><td></td><td><a href="https://habitica.com/static/front">https://habitica.com/static/front</a></td><td></td><td></td></tr><tr><td>聊天</td><td><a href="http://drrr.com/lounge">http://drrr.com/lounge</a></td><td></td><td></td></tr><tr><td>图站</td><td><a href="https://anime-pictures.net/">https://anime-pictures.net/</a></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>与佛论禅</td><td><a href="http://www.ptxz.com/fo/">http://www.ptxz.com/fo/</a></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>音乐</td><td><a href="http://haru.ocv.me/">http://haru.ocv.me/</a></td><td></td><td></td></tr><tr><td>学习</td><td><a href="http://www.wolframalpha.com/">http://www.wolframalpha.com/</a></td><td></td><td></td></tr><tr><td>不明觉厉</td><td><a href="https://edialogue.org/index/zh-CN">https://edialogue.org/index/zh-CN</a></td><td></td><td></td></tr><tr><td>不明觉厉</td><td><a href="https://dribbble.com/wagerfield">https://dribbble.com/wagerfield</a></td><td></td><td></td></tr><tr><td>手机</td><td><a href="http://mowned.com/">http://mowned.com/</a></td><td></td><td></td></tr><tr><td>GPS</td><td><a href="http://www.flashearth.com/">http://www.flashearth.com/</a></td><td></td><td></td></tr><tr><td>北方</td><td><a href="http://wiki.joyme.com/jc/%E5%8C%97%E6%96%B9%E9%85%B1%E8%A1%A8%E6%83%85">http://wiki.joyme.com/jc/%E5%8C%97%E6%96%B9%E9%85%B1%E8%A1%A8%E6%83%85</a></td><td></td><td></td></tr><tr><td>剁手</td><td><a href="http://www.smzdm.com/">http://www.smzdm.com/</a></td><td><a href="http://www.iliangcang.com/i/home/">http://www.iliangcang.com/i/home/</a></td><td></td></tr><tr><td>菜板狂魔</td><td><a href="http://mtmwood.com/en">http://mtmwood.com/en</a></td><td></td><td></td></tr><tr><td></td><td><a href="http://youquhome.com/page/3/">http://youquhome.com/page/3/</a></td><td></td><td></td></tr></tbody></table></div><div class="tab-pane" id="lks-2"><table><thead><tr><th><strong>大类</strong></th><th><strong>类型</strong></th><th><strong>网址</strong></th></tr></thead><tbody><tr><td></td><td>翻墙</td><td><a href="https://sscat.cn/?referer=%2F">https://sscat.cn/?referer=%2F</a></td></tr><tr><td>开场</td><td>世界数据统计</td><td><a href="http://www.everysecond.io/">http://www.everysecond.io/</a></td></tr><tr><td></td><td>五花肉</td><td><a href="https://eitheryoulikebaconoryourewrong.com/">https://eitheryoulikebaconoryourewrong.com/</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td>实用系</td><td>免费游戏音效</td><td><a href="http://www.sonniss.com/gameaudiogdc2017/">http://www.sonniss.com/gameaudiogdc2017/</a></td></tr><tr><td></td><td>下载视频</td><td>youtube1s</td></tr><tr><td></td><td>adobe全系</td><td><a href="http://adobe.v404.cn/adobe/">http://adobe.v404.cn/adobe/</a></td></tr><tr><td></td><td>艺术字</td><td><a href="http://www.akuziti.com/yw/">http://www.akuziti.com/yw/</a></td></tr><tr><td></td><td>2倍老婆</td><td><a href="http://waifu2x.udp.jp/">http://waifu2x.udp.jp/</a></td></tr><tr><td></td><td>截图搜新番</td><td><a href="https://whatanime.ga/#">https://whatanime.ga/#</a></td></tr><tr><td></td><td>自动上色</td><td><a href="http://paintschainer.preferred.tech/index_zh.html">http://paintschainer.preferred.tech/index_zh.html</a></td></tr><tr><td></td><td>自动生成女朋友</td><td><a href="https://hiroshiba.github.io/girl_friend_factory/index.html">https://hiroshiba.github.io/girl_friend_factory/index.html</a></td></tr><tr><td></td><td>设计</td><td><a href="https://www.chuangkit.com/dc.html">https://www.chuangkit.com/dc.html</a></td></tr><tr><td></td><td>简笔画</td><td><a href="https://aiexperiments.withgoogle.com/autodraw">https://aiexperiments.withgoogle.com/autodraw</a></td></tr><tr><td></td><td>wuxiaworld</td><td><a href="http://www.wuxiaworld.com/">http://www.wuxiaworld.com/</a></td></tr><tr><td></td><td>gif</td><td><a href="https://giphy.com/">https://giphy.com/</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td>逼格</td><td>秘密</td><td><a href="http://soulapartment.net/bin/index.php">http://soulapartment.net/bin/index.php</a></td></tr><tr><td></td><td>独立音乐</td><td><a href="http://www.luoo.net/essays/">http://www.luoo.net/essays/</a></td></tr><tr><td></td><td>做音乐</td><td><a href="http://www.madeon.fr/adventuremachine/?t=1,10,26,35">http://www.madeon.fr/adventuremachine/?t=1,10,26,35</a></td></tr><tr><td></td><td>背景音合成器</td><td><a href="http://asoftmurmur.com/">http://asoftmurmur.com/</a></td></tr><tr><td></td><td>摄像头+梦境</td><td><a href="http://anasomnia.com/">http://anasomnia.com/</a></td></tr><tr><td></td><td>illegal</td><td><a href="http://isnowillegal.com/?plus%201s">http://isnowillegal.com/?plus%201s</a></td></tr><tr><td></td><td>全球电台</td><td><a href="http://radio.garden/live/tokyo/j-idols-project-radio/">http://radio.garden/live/tokyo/j-idols-project-radio/</a></td></tr><tr><td></td><td></td><td><a href="http://www.ostagram.ru/lenta?locale=en">http://www.ostagram.ru/lenta?locale=en</a></td></tr><tr><td></td><td>世界飞机</td><td><a href="https://www.flightradar24.com/PRBGT/d0da2bf">https://www.flightradar24.com/PRBGT/d0da2bf</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td>png</td><td><a href="http://www.pngall.com/thug-life-png">http://www.pngall.com/thug-life-png</a></td></tr><tr><td></td><td>在线生成白浊液</td><td><a href="http://mygamestudio.x.fc2.com/bukkake/">http://mygamestudio.x.fc2.com/bukkake/</a></td></tr><tr><td></td><td>空当接龙</td><td><a href="http://mrdoob.com/lab/javascript/effects/solitaire/?url_type=39&amp;object_type=webpage&amp;pos=1&amp;url_type=39&amp;object_type=webpage&amp;pos=1">http://mrdoob.com/lab/javascript/effects/solitaire/?url_type=39&amp;object_type=webpage&amp;pos=1&amp;url_type=39&amp;object_type=webpage&amp;pos=1</a></td></tr></tbody></table></div><div class="tab-pane" id="lks-3"><table><thead><tr><th><strong>类型</strong></th><th><strong>网址</strong></th><th><strong>网址2</strong></th><th><strong>网址3</strong></th></tr></thead><tbody><tr><td>重力</td><td><a href="https://codepen.io/akm2/full/rHIsa">https://codepen.io/akm2/full/rHIsa</a></td><td></td><td></td></tr><tr><td>反向</td><td><a href="http://www.ilidilid.com/">http://www.ilidilid.com/</a></td><td></td><td></td></tr><tr><td>成为批发商</td><td><a href="https://www.1688.com/">https://www.1688.com/</a></td><td></td><td></td></tr><tr><td>龋齿一号</td><td><a href="http://www.gfxcamp.com/">http://www.gfxcamp.com/</a></td><td></td><td></td></tr><tr><td>摄影老法师必读</td><td><a href="https://www.dxomark.com/">https://www.dxomark.com/</a></td><td></td><td></td></tr><tr><td>表情包gif</td><td><a href="https://sorry.xuty.tk/sorry/">https://sorry.xuty.tk/sorry/</a></td><td></td><td></td></tr><tr><td>学说话</td><td><a href="https://zh.forvo.com/user/hikari1/pronounced-words/page-2/">https://zh.forvo.com/user/hikari1/pronounced-words/page-2/</a></td><td></td><td></td></tr><tr><td>做网站</td><td><a href="https://www.wix.com/">https://www.wix.com/</a></td><td>lkssr.info</td><td></td></tr><tr><td>在线效果</td><td><a href="https://photomosh.com/">https://photomosh.com/</a></td><td></td><td></td></tr><tr><td>学英语</td><td><a href="https://nexus.leagueoflegends.com/en-us/">https://nexus.leagueoflegends.com/en-us/</a></td><td></td><td></td></tr><tr><td>音游</td><td><a href="http://ddrkirby.com/games/melody-muncher/melody-muncher.html">http://ddrkirby.com/games/melody-muncher/melody-muncher.html</a></td><td></td><td></td></tr><tr><td>深网</td><td><a href="https://bbs.saraba1st.com/2b/thread-1527405-1-1.html">https://bbs.saraba1st.com/2b/thread-1527405-1-1.html</a></td><td>deep/dark web</td><td><a href="https://freenetproject.org/">https://freenetproject.org/</a></td></tr><tr><td>f**king eat</td><td><a href="https://wtfsigfd.com/#location">https://wtfsigfd.com/#location</a></td><td></td><td></td></tr><tr><td>真实大小</td><td><a href="https://thetruesize.com">https://thetruesize.com</a></td><td></td><td></td></tr><tr><td>remember</td><td><a href="http://i-remember.fr/en/">http://i-remember.fr/en/</a></td><td></td><td></td></tr><tr><td>游戏</td><td><a href="https://pos.biborg.com/fr/">https://pos.biborg.com/fr/</a></td><td></td><td></td></tr><tr><td>拍卖</td><td><a href="https://sf.taobao.com/?spm=a213w.7398504.sfhead2014.2.9vuB5l&amp;current=index">https://sf.taobao.com/?spm=a213w.7398504.sfhead2014.2.9vuB5l&amp;current=index</a></td><td></td><td></td></tr><tr><td></td><td><a href="http://auction.jd.com/haiguan.html">http://auction.jd.com/haiguan.html</a></td><td></td><td></td></tr></tbody></table></div><div class="tab-pane" id="lks-4"><table><thead><tr><th><strong>大类</strong></th><th><strong>类型</strong></th><th><strong>网址</strong></th></tr></thead><tbody><tr><td>实用</td><td>全能下视频</td><td><a href="https://www.urlgot.com/">https://www.urlgot.com/</a></td></tr><tr><td></td><td>封面下载</td><td><a href="https://cover.olook.me/">https://cover.olook.me/</a></td></tr><tr><td></td><td>小工具集合</td><td><a href="https://tools.imiku.me/">https://tools.imiku.me/</a></td></tr><tr><td></td><td>医学微视</td><td><a href="https://www.mvyxws.com/">https://www.mvyxws.com/</a></td></tr><tr><td></td><td>仿知网</td><td><a href="https://www.cn-ki.net/">https://www.cn-ki.net/</a></td></tr><tr><td></td><td>自动加字幕</td><td><a href="https://2zimu.com/#/">https://2zimu.com/#/</a></td></tr><tr><td></td><td>N卡深度学习</td><td><a href="https://www.nvidia.com/en-us/research/ai-playground/?fbclid=IwAR2QEjuH4aCYP3SycnKwa_LO36rfmDhulB4WCeY1plGCfofwIU-qf1anBTY">https://www.nvidia.com/en-us/research/ai-playground/?fbclid=IwAR2QEjuH4aCYP3SycnKwa_LO36rfmDhulB4WCeY1plGCfofwIU-qf1anBTY</a></td></tr><tr><td></td><td>渐变图</td><td><a href="https://www.ls.graphics/meshgradients">https://www.ls.graphics/meshgradients</a></td></tr><tr><td></td><td>时差</td><td><a href="https://everytimezone.com/">https://everytimezone.com/</a></td></tr><tr><td></td><td>双色</td><td><a href="https://duotone.shapefactory.co/?f=f56468&amp;t=27184f&amp;q=">https://duotone.shapefactory.co/?f=f56468&amp;t=27184f&amp;q=</a>_</td></tr><tr><td></td><td>图表</td><td><a href="https://chartify.io/">https://chartify.io/</a></td></tr><tr><td></td><td>亚塞</td><td><a href="https://wangyasai.github.io/">https://wangyasai.github.io/</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td>音乐</td><td>listen 1</td><td><a href="http://listen1.github.io/listen1/">http://listen1.github.io/listen1/</a></td></tr><tr><td></td><td>音乐</td><td><a href="https://www.youtube.com/channel/UCht8qITGkBvXKsR1Byln-wA/videos">https://www.youtube.com/channel/UCht8qITGkBvXKsR1Byln-wA/videos</a></td></tr><tr><td></td><td>电音风格</td><td><a href="http://music.ishkur.com/">http://music.ishkur.com/</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td>信息</td><td>创意</td><td><a href="https://creativemass.cn/#/">https://creativemass.cn/#/</a></td></tr><tr><td></td><td>up主排名</td><td><a href="https://leptc.github.io/bili/">https://leptc.github.io/bili/</a></td></tr><tr><td></td><td>yuzhua</td><td><a href="https://mj.yuzhua.com/search/3.html">https://mj.yuzhua.com/search/3.html</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td>游戏</td><td>日麻</td><td><a href="https://majsoul.union-game.com/0/">https://majsoul.union-game.com/0/</a></td></tr><tr><td></td><td>马</td><td><a href="https://cavalierchallenge.com/">https://cavalierchallenge.com/</a></td></tr><tr><td></td><td>？</td><td><a href="https://resn.co.nz/#">https://resn.co.nz/#</a></td></tr><tr><td></td><td>？</td><td><a href="http://www.brakebillsu.com/">http://www.brakebillsu.com/</a></td></tr><tr><td></td><td>Grammarly</td><td><a href="https://app.grammarly.com/">https://app.grammarly.com/</a></td></tr><tr><td></td><td>机酒</td><td><a href="https://www.tianxun.com/">https://www.tianxun.com/</a></td></tr></tbody></table></div><div class="tab-pane" id="lks-5"><table><thead><tr><th><strong>类型</strong></th><th><strong>网址</strong></th></tr></thead><tbody><tr><td>大像素</td><td><a href="http://www.bigpixel.cn/index.html">http://www.bigpixel.cn/index.html</a></td></tr><tr><td>PPT</td><td><a href="https://slidesgo.com/theme/isometric-proposal">https://slidesgo.com/theme/isometric-proposal</a> <br><a href="https://24slides.com/templates/featured">https://24slides.com/templates/featured</a> <br><a href="https://www.free-powerpoint-templates-design.com/free-powerpoint-templates-design/">https://www.free-powerpoint-templates-design.com/free-powerpoint-templates-design/</a></td></tr><tr><td>云</td><td><a href="https://www.ianfisherart.com/">https://www.ianfisherart.com/</a></td></tr><tr><td>展会</td><td><a href="http://www.eshow365.com/">http://www.eshow365.com/</a></td></tr><tr><td>全历史</td><td><a href="https://www.allhistory.com/">https://www.allhistory.com/</a></td></tr><tr><td>诡秘之主</td><td><a href="https://www.zcool.com.cn/work/ZNDI0NzUzNzY=.html">https://www.zcool.com.cn/work/ZNDI0NzUzNzY=.html</a></td></tr><tr><td>背景素材</td><td><a href="http://bg-patterns.com/">http://bg-patterns.com/</a></td></tr><tr><td>做音乐</td><td><a href="https://learningmusic.ableton.com/">https://learningmusic.ableton.com/</a></td></tr><tr><td>新媒体导航</td><td><a href="https://www.kaolamedia.com/">https://www.kaolamedia.com/</a></td></tr><tr><td>AI捏人</td><td><a href="https://artbreeder.com/">https://artbreeder.com/</a></td></tr><tr><td>数据</td><td><a href="https://ncov.dxy.cn/ncovh5/view/pneumonia">https://ncov.dxy.cn/ncovh5/view/pneumonia</a></td></tr><tr><td>人类测试</td><td><a href="https://humanbenchmark.com/">https://humanbenchmark.com/</a></td></tr><tr><td>音乐分轨</td><td><a href="https://melody.ml/">https://melody.ml/</a></td></tr><tr><td>物流</td><td><a href="https://logisticsartproject.com/">https://logisticsartproject.com/</a></td></tr><tr><td>慕课</td><td><a href="https://www.icourse163.org/">https://www.icourse163.org/</a></td></tr><tr><td>反人类UI</td><td><a href="https://userinyerface.com/game.html">https://userinyerface.com/game.html</a></td></tr><tr><td>yes/no</td><td><a href="https://yesno.wtf/">https://yesno.wtf/</a></td></tr><tr><td>老照片上色</td><td><a href="https://colourise.sg/">https://colourise.sg/</a></td></tr><tr><td>地球时间</td><td><a href="http://timelineofearth.com/">http://timelineofearth.com/</a></td></tr><tr><td>猫</td><td><a href="https://bongo.cat/">https://bongo.cat/</a></td></tr><tr><td>大佬</td><td><a href="https://neave.com/">https://neave.com/</a></td></tr><tr><td>太鼓达人</td><td><a href="https://taiko.bui.pm/">https://taiko.bui.pm/</a></td></tr><tr><td>emm</td><td><a href="http://www.shushubuyue.net/#">http://www.shushubuyue.net/#</a></td></tr><tr><td>全网热门</td><td><a href="https://tophub.today/">https://tophub.today/</a></td></tr><tr><td>数据表</td><td><a href="https://www.visualcapitalist.com/">https://www.visualcapitalist.com/</a></td></tr><tr><td>医疗</td><td><a href="https://www.msdmanuals.com/zh#mission">https://www.msdmanuals.com/zh#mission</a></td></tr><tr><td>临时验证码</td><td><a href="https://www.materialtools.com/?page=1">https://www.materialtools.com/?page=1</a> <br><a href="https://temp-mail.org/zh/">https://temp-mail.org/zh/</a></td></tr><tr><td>词云</td><td><a href="https://www.weiciyun.com/">https://www.weiciyun.com/</a></td></tr><tr><td>探月</td><td><a href="http://moon.bao.ac.cn/mul/index/list">http://moon.bao.ac.cn/mul/index/list</a></td></tr><tr><td>中国地图</td><td><a href="https://www.ageeye.cn/">https://www.ageeye.cn/</a></td></tr><tr><td>解谜</td><td><a href="http://nazo.one-story.cn/">http://nazo.one-story.cn/</a></td></tr></tbody></table></div><div class="tab-pane" id="lks-6"><table><thead><tr><th><strong>类型</strong></th><th><strong>网址</strong></th></tr></thead><tbody><tr><td>AI音乐推荐</td><td><a href="https://www.gnoosic.com/faves.php">https://www.gnoosic.com/faves.php</a></td></tr><tr><td>RAP</td><td><a href="https://foreignrap.com">https://foreignrap.com</a></td></tr><tr><td>壁纸</td><td><a href="https://wallhaven.cc/">https://wallhaven.cc/</a></td></tr><tr><td>私人定制</td><td><a href="http://www.fiverr.com">www.fiverr.com</a></td></tr><tr><td>云旅游</td><td><a href="http://www.airpano.com/">http://www.airpano.com/</a></td></tr><tr><td>云住酒店云吃饭</td><td><a href="https://bbs.saraba1st.com/2b/space-uid-197835.html">https://bbs.saraba1st.com/2b/space-uid-197835.html</a></td></tr><tr><td>开窗户</td><td><a href="https://window-swap.com/">https://window-swap.com/</a></td></tr><tr><td>伴奏提取</td><td><a href="https://www.lalal.ai/">https://www.lalal.ai/</a></td></tr><tr><td>格式转换</td><td><a href="https://www.alltoall.net/">https://www.alltoall.net/</a> <br><a href="https://www.aconvert.com/cn/">https://www.aconvert.com/cn/</a></td></tr><tr><td>高端翻译</td><td><a href="https://www.deepl.com/translator">https://www.deepl.com/translator</a></td></tr><tr><td>图片唱歌</td><td><a href="https://yanderify.com/">https://yanderify.com/</a></td></tr><tr><td>好好说话</td><td><a href="https://lab.magiconch.com/nbnhhsh/">https://lab.magiconch.com/nbnhhsh/</a></td></tr><tr><td>那你能帮帮我吗</td><td><a href="https://zh.wikihow.com/%E9%A6%96%E9%A1%B5">https://zh.wikihow.com/%E9%A6%96%E9%A1%B5</a></td></tr><tr><td>天气</td><td><a href="https://www.windy.com/">https://www.windy.com/</a></td></tr><tr><td>自杀网站</td><td><a href="https://www.thiswebsitewillselfdestruct.com/">https://www.thiswebsitewillselfdestruct.com/</a></td></tr><tr><td>起名</td><td><a href="https://www.behindthename.com/">https://www.behindthename.com/</a></td></tr><tr><td>版权音乐曲库</td><td><a href="https://www.epidemicsound.com">https://www.epidemicsound.com</a></td></tr><tr><td>独立游戏</td><td><a href="https://www.indiexpo.net/">https://www.indiexpo.net/</a></td></tr><tr><td>学钢琴</td><td><a href="https://app.flowkey.com.cn/">https://app.flowkey.com.cn/</a></td></tr><tr><td>焦段科普</td><td><a href="https://www.samyanglens.com/en/product/simulator/lens.php">https://www.samyanglens.com/en/product/simulator/lens.php</a></td></tr><tr><td>全球生活水平</td><td><a href="https://www.gapminder.org/dollar-street/">https://www.gapminder.org/dollar-street/</a></td></tr><tr><td>海</td><td><a href="https://seaside-station.com/region/hokkaido/">https://seaside-station.com/region/hokkaido/</a></td></tr><tr><td>标准地图</td><td><a href="http://bzdt.ch.mnr.gov.cn/index.html">http://bzdt.ch.mnr.gov.cn/index.html</a></td></tr><tr><td>色差</td><td><a href="http://www.cuishuai.cc/game/">http://www.cuishuai.cc/game/</a></td></tr></tbody></table></div><div class="tab-pane" id="lks-7"><table><thead><tr><th><strong>类型</strong></th><th><strong>网址</strong></th></tr></thead><tbody><tr><td>行业报告</td><td><a href="http://report.seedsufe.com/#/report">http://report.seedsufe.com/#/report</a></td></tr><tr><td>世界之声</td><td><a href="https://aporee.org/maps/">https://aporee.org/maps/</a></td></tr><tr><td>商用图片</td><td><a href="https://www.pexels.com/zh-cn/">https://www.pexels.com/zh-cn/</a></td></tr><tr><td>抠图</td><td><a href="https://www.remove.bg/">https://www.remove.bg/</a> <br><a href="http://waifu2x.udp.jp/">http://waifu2x.udp.jp/</a></td></tr><tr><td>抠视频</td><td><a href="https://www.unscreen.com/">https://www.unscreen.com/</a></td></tr><tr><td>打字比赛</td><td><a href="https://play.typeracer.com/">https://play.typeracer.com/</a></td></tr><tr><td>空投</td><td><a href="https://airportal.cn/">https://airportal.cn/</a></td></tr><tr><td>宝贝DJ</td><td><a href="http://www.bbdj.com/">http://www.bbdj.com/</a></td></tr><tr><td>色彩</td><td><a href="https://color.adobe.com/zh/create/color-wheel">https://color.adobe.com/zh/create/color-wheel</a></td></tr><tr><td>3D模型</td><td><a href="https://sketchfab.com/">https://sketchfab.com/</a></td></tr><tr><td>核爆</td><td><a href="https://nuclearsecrecy.com/nukemap/">https://nuclearsecrecy.com/nukemap/</a></td></tr><tr><td>约稿</td><td><a href="https://www.mihuashi.com/artists">https://www.mihuashi.com/artists</a></td></tr><tr><td>虚拟博物馆</td><td><a href="https://virtual.mauritshuis.nl/index.html?lang=en&amp;startscene=21">https://virtual.mauritshuis.nl/index.html?lang=en&amp;startscene=21</a></td></tr><tr><td>尺寸</td><td><a href="https://www.dimensions.com/">https://www.dimensions.com/</a></td></tr><tr><td>迪士尼化</td><td><a href="https://toonme.com/">https://toonme.com/</a></td></tr><tr><td>动态图表</td><td><a href="https://hanabi.data-viz.cn/index?lang=zh-CN">https://hanabi.data-viz.cn/index?lang=zh-CN</a></td></tr><tr><td>中国营养</td><td><a href="https://www.fatsecret.cn/%E7%83%AD%E9%87%8F%E8%90%A5%E5%85%BB/">https://www.fatsecret.cn/%E7%83%AD%E9%87%8F%E8%90%A5%E5%85%BB/</a></td></tr><tr><td>发现</td><td><a href="https://www.producthunt.com/">https://www.producthunt.com/</a></td></tr><tr><td>找音乐</td><td><a href="https://www.tunefind.com/">https://www.tunefind.com/</a></td></tr><tr><td>996身临其境</td><td><a href="https://imisstheoffice.eu/">https://imisstheoffice.eu/</a></td></tr><tr><td>这个不存在</td><td><a href="https://thisxdoesnotexist.com/">https://thisxdoesnotexist.com/</a></td></tr><tr><td></td><td></td></tr><tr><td>森林之声</td><td><a href="https://www.tree.fm/">https://www.tree.fm/</a></td></tr><tr><td>西方电音</td><td><a href="https://www.traxsource.com/dj-top-10s">https://www.traxsource.com/dj-top-10s</a></td></tr><tr><td>猜真假</td><td><a href="https://landing.adobe.com/en/na/products/creative-cloud/69308-real-or-photoshop/index.html">https://landing.adobe.com/en/na/products/creative-cloud/69308-real-or-photoshop/index.html</a></td></tr><tr><td>魔性</td><td><a href="https://patatap.com/">https://patatap.com/</a></td></tr><tr><td>中华珍宝馆</td><td><a href="https://www.ltfc.net/exhibit/recent">https://www.ltfc.net/exhibit/recent</a></td></tr><tr><td>英语游戏</td><td><a href="https://www.merriam-webster.com/">https://www.merriam-webster.com/</a></td></tr><tr><td>防疫政策</td><td><a href="https://i.snssdk.com/feoffline/ugc_activities/html/epidemic-prevention-sftr/index.html?style_id=30044">https://i.snssdk.com/feoffline/ugc_activities/html/epidemic-prevention-sftr/index.html?style_id=30044</a></td></tr></tbody></table></div></div></div></div><div class="tab-pane" id="websites-3"><blockquote><ul><li><strong>from: bilibili UP主<a href="https://www.bilibili.com/video/av76317286/?spm_id_from=333.788.b_765f64657363.8">阿信OL</a></strong></li></ul></blockquote><table><thead><tr><th>名称</th><th>网址</th></tr></thead><tbody><tr><td>爱给素材网</td><td><a href="http://www.aigei.com/">http://www.aigei.com/</a></td></tr><tr><td>OepnGameArt</td><td><a href="https://opengameart.org/">https://opengameart.org/</a></td></tr><tr><td>Ludum Dare</td><td><a href="https://ldjam.com/">https://ldjam.com/</a></td></tr><tr><td>Itch</td><td><a href="https://itch.io/">https://itch.io/</a></td></tr></tbody></table></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站收藏</title>
      <link href="post/16fab331.html"/>
      <url>post/16fab331.html</url>
      
        <content type="html"><![CDATA[<h1 id="收集好玩实用的网站"><a href="#收集好玩实用的网站" class="headerlink" title="收集好玩实用的网站"></a>收集好玩实用的网站</h1><div class="tabs" id="websites"><ul class="nav-tabs"><li class="tab active"><a href="#websites-1">取景框看世界</a></li><li class="tab"><a href="#websites-2">-LKs-</a></li><li class="tab"><a href="#websites-3">阿信OL</a></li></ul><div class="tab-content"><div class="tab-pane active" id="websites-1"><blockquote><ul><li><strong>from: bilibili UP主<a href="https://space.bilibili.com/40427625?spm_id_from=333.788.b_765f7570696e666f.1">取景框看世界</a></strong></li></ul></blockquote><div class="tabs" id="qjk"><ul class="nav-tabs"><li class="tab active"><a href="#qjk-1">第一期</a></li><li class="tab"><a href="#qjk-2">第二期</a></li><li class="tab"><a href="#qjk-3">第三期</a></li><li class="tab"><a href="#qjk-4">第四期</a></li><li class="tab"><a href="#qjk-5">第五期</a></li></ul><div class="tab-content"><div class="tab-pane active" id="qjk-1"><table><thead><tr><th><strong>类别</strong></th><th><strong>网站</strong></th><th><strong>网址</strong></th></tr></thead><tbody><tr><td>图片</td><td>pixabay</td><td><a href="https://pixabay.com/zh/">https://pixabay.com/zh/</a></td></tr><tr><td>图片</td><td>Unsplash</td><td><a href="https://unsplash.com/">https://unsplash.com/</a></td></tr><tr><td>图片</td><td>Pexels</td><td><a href="https://www.pexels.com/zh-cn/">https://www.pexels.com/zh-cn/</a></td></tr><tr><td>图片</td><td>Foodiesfeed</td><td><a href="https://www.foodiesfeed.com">https://www.foodiesfeed.com</a></td></tr><tr><td>图片</td><td>CC零图片网</td><td><a href="https://cc0.cn/">https://cc0.cn/</a></td></tr><tr><td>图片</td><td>Logo神器</td><td><a href="https://www.logosc.cn/so/">https://www.logosc.cn/so/</a></td></tr><tr><td>视频</td><td>Videezy</td><td><a href="https://www.videezy.com/">https://www.videezy.com/</a></td></tr><tr><td>视频</td><td>Videvo</td><td><a href="https://www.videvo.net/">https://www.videvo.net/</a></td></tr><tr><td>视频</td><td>mixkit</td><td><a href="https://mixkit.co/">https://mixkit.co/</a></td></tr><tr><td>视频</td><td>distill</td><td><a href="https://wedistill.io/">https://wedistill.io/</a></td></tr><tr><td>音频</td><td>audionautix</td><td><a href="https://audionautix.com/">https://audionautix.com/</a></td></tr><tr><td>音频</td><td>Freepd</td><td><a href="https://freepd.com/">https://freepd.com/</a></td></tr><tr><td>音频</td><td>Freesound</td><td><a href="https://freesound.org/">https://freesound.org/</a></td></tr><tr><td>音频</td><td>耳聆网</td><td><a href="https://www.ear0.com/">https://www.ear0.com/</a></td></tr><tr><td>音频</td><td>淘声网</td><td><a href="https://www.tosound.com/">https://www.tosound.com/</a></td></tr><tr><td>字体</td><td>字由</td><td><a href="https://www.hellofont.cn/">https://www.hellofont.cn/</a></td></tr><tr><td>字体</td><td>100font</td><td><a href="https://www.100font.com/">https://www.100font.com/</a></td></tr><tr><td>图标</td><td>iconfont</td><td><a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></td></tr></tbody></table></div><div class="tab-pane" id="qjk-2"><table><thead><tr><th><strong>类别</strong></th><th><strong>网站</strong></th><th><strong>网址</strong></th></tr></thead><tbody><tr><td>图标</td><td>iconstore</td><td><a href="https://iconstore.co/">https://iconstore.co/</a></td></tr><tr><td>图标</td><td>unDraw</td><td><a href="https://undraw.co/illustrations">https://undraw.co/illustrations</a></td></tr><tr><td>图标</td><td>ICONFINDER</td><td><a href="https://www.iconfinder.com/">https://www.iconfinder.com/</a></td></tr><tr><td>图标</td><td>ICONS8</td><td><a href="https://icons8.com/">https://icons8.com/</a></td></tr><tr><td>矢量图/PSD模板</td><td>freepik</td><td><a href="https://www.freepik.com/">https://www.freepik.com/</a></td></tr><tr><td>矢量图/PSD模板</td><td>free-PSD-templates</td><td><a href="https://free-psd-templates.com/">https://free-psd-templates.com/</a></td></tr><tr><td>矢量图/PSD模板</td><td>365psd</td><td><a href="https://365psd.com/">https://365psd.com/</a></td></tr><tr><td>免抠PNG</td><td>pngimage</td><td><a href="http://pngimg.com/">http://pngimg.com/</a></td></tr><tr><td>免抠PNG</td><td>CLEANPNG</td><td><a href="https://www.cleanpng.com/">https://www.cleanpng.com/</a></td></tr><tr><td>壁纸</td><td>wallhaven</td><td><a href="https://wallhaven.cc/">https://wallhaven.cc/</a></td></tr><tr><td>壁纸</td><td>Wallpaper Abyss</td><td><a href="https://wall.alphacoders.com/">https://wall.alphacoders.com/</a></td></tr><tr><td>壁纸</td><td>极简壁纸</td><td><a href="https://bz.zzzmh.cn/">https://bz.zzzmh.cn/</a></td></tr><tr><td>PPT模板</td><td>OfficePLUS</td><td><a href="http://www.officeplus.cn/Template/Home.shtml">http://www.officeplus.cn/Template/Home.shtml</a></td></tr><tr><td>PPT模板</td><td>PPT超级市场</td><td><a href="http://ppt.sotary.com/web/wxapp/index.html">http://ppt.sotary.com/web/wxapp/index.html</a></td></tr><tr><td>PPT模板</td><td>51PPT模板</td><td><a href="http://www.51pptmoban.com/ppt/">http://www.51pptmoban.com/ppt/</a></td></tr><tr><td>PPT模板</td><td>PPT汇</td><td><a href="https://www.ppthui.com/">https://www.ppthui.com/</a></td></tr><tr><td>PPT模板</td><td>优品PPT</td><td><a href="http://www.ypppt.com/">http://www.ypppt.com/</a></td></tr></tbody></table></div><div class="tab-pane" id="qjk-3"><table><thead><tr><th><strong>类别</strong></th><th><strong>网站</strong></th><th><strong>网址</strong></th></tr></thead><tbody><tr><td>使用论文和部分电子书方法</td><td>学校图书馆官网</td><td>注意查看学校购买的数据库以及校外访问方法</td></tr><tr><td>使用论文和部分电子书方法</td><td>各省市图书馆官网</td><td>注册各地图书馆账号</td></tr><tr><td>论文</td><td>知网</td><td>图书馆进入</td></tr><tr><td>论文</td><td>Web of Science</td><td>图书馆进入</td></tr><tr><td>论文</td><td>各图书馆官网直接检索</td><td></td></tr><tr><td>论文</td><td>SCI-HUB</td><td><a href="https://sci-hub.do">https://sci-hub.do</a></td></tr><tr><td>论文</td><td>Library Genesis</td><td><a href="http://gen.lib.rus.ec/">http://gen.lib.rus.ec/</a></td></tr><tr><td>论文</td><td>Z-Library</td><td><a href="https://booksc.xyz/">https://booksc.xyz/</a></td></tr><tr><td>电子书（含教材）</td><td>电子课本网</td><td><a href="http://www.dzkbw.com/">http://www.dzkbw.com/</a></td></tr><tr><td>电子书（含教材）</td><td>易学啦</td><td><a href="https://www.yixuela.com/">https://www.yixuela.com/</a></td></tr><tr><td>电子书（含教材）</td><td>读秀</td><td>图书馆进入</td></tr><tr><td>电子书（含教材）</td><td>超星</td><td>图书馆进入</td></tr><tr><td>电子书（含教材）</td><td>书格</td><td><a href="https://new.shuge.org/">https://new.shuge.org/</a></td></tr><tr><td>电子书（含教材）</td><td>七彩英语</td><td><a href="http://www.qcenglish.com/">http://www.qcenglish.com/</a></td></tr><tr><td>电子书（含教材）</td><td>古腾堡计划</td><td><a href="http://www.gutenberg.org/">http://www.gutenberg.org/</a></td></tr><tr><td>电子书（含教材）</td><td>manybooks</td><td><a href="https://manybooks.net/">https://manybooks.net/</a></td></tr><tr><td>电子书（含教材）</td><td>鸠摩搜索</td><td><a href="https://www.jiumodiary.com/">https://www.jiumodiary.com/</a></td></tr><tr><td>电子书（含教材）</td><td>Library Genesis</td><td><a href="http://gen.lib.rus.ec/">http://gen.lib.rus.ec/</a></td></tr><tr><td>教辅资源</td><td>学科网</td><td><a href="https://www.zxxk.com/">https://www.zxxk.com/</a></td></tr><tr><td>教辅资源</td><td>哔哩哔哩</td><td><a href="https://www.bilibili.com/">https://www.bilibili.com/</a></td></tr><tr><td>教辅资源</td><td>中国大学慕课</td><td><a href="https://www.icourse163.org/">https://www.icourse163.org/</a></td></tr></tbody></table></div><div class="tab-pane" id="qjk-4"><table><thead><tr><th><strong>类别</strong></th><th><strong>网站</strong></th><th><strong>网址</strong></th></tr></thead><tbody><tr><td>专业咨询报告</td><td>贝恩</td><td><a href="https://www.bain.cn/news.php?id=15">https://www.bain.cn/news.php?id=15</a></td></tr><tr><td>专业咨询报告</td><td>波士顿咨询</td><td><a href="https://www.bcg.com/zh-cn/">https://www.bcg.com/zh-cn/</a></td></tr><tr><td>专业咨询报告</td><td>麦肯锡</td><td><a href="https://www.mckinsey.com/featured-insights">https://www.mckinsey.com/featured-insights</a></td></tr><tr><td>专业咨询报告</td><td>罗兰贝格</td><td><a href="https://www.rolandberger.com/zh/">https://www.rolandberger.com/zh/</a></td></tr><tr><td>专业咨询报告</td><td>埃森哲</td><td><a href="https://www.accenture.com/cn-zh">https://www.accenture.com/cn-zh</a></td></tr><tr><td>专业咨询报告</td><td>普华永道</td><td><a href="https://www.pwccn.com/zh/research-and-insights.html">https://www.pwccn.com/zh/research-and-insights.html</a></td></tr><tr><td>专业咨询报告</td><td>德勤</td><td><a href="https://www2.deloitte.com/cn/zh.html">https://www2.deloitte.com/cn/zh.html</a></td></tr><tr><td>专业咨询报告</td><td>毕马威</td><td><a href="https://home.kpmg/cn/zh/home/insights.html">https://home.kpmg/cn/zh/home/insights.html</a></td></tr><tr><td>专业咨询报告</td><td>安永</td><td><a href="https://www.ey.com/zh_cn">https://www.ey.com/zh_cn</a></td></tr><tr><td>互联网+咨询报告</td><td>艾瑞咨询</td><td><a href="https://www.iresearch.com.cn/report.shtml">https://www.iresearch.com.cn/report.shtml</a></td></tr><tr><td>互联网+咨询报告</td><td>极光大数据</td><td><a href="https://www.jiguang.cn/reports">https://www.jiguang.cn/reports</a></td></tr><tr><td>互联网+咨询报告</td><td>QuestMobile</td><td><a href="https://www.questmobile.com.cn/research/report-new">https://www.questmobile.com.cn/research/report-new</a></td></tr><tr><td>互联网+咨询报告</td><td>亿欧智库</td><td><a href="https://www.iyiou.com/research">https://www.iyiou.com/research</a></td></tr><tr><td>互联网+咨询报告</td><td>TalkingData</td><td><a href="http://mi.talkingdata.com/">http://mi.talkingdata.com/</a></td></tr><tr><td>大厂研究报告</td><td>阿里研究院</td><td><a href="http://www.aliresearch.com/cn/presentation">http://www.aliresearch.com/cn/presentation</a></td></tr><tr><td>大厂研究报告</td><td>腾讯研究院</td><td><a href="https://tisi.org/yjbg">https://tisi.org/yjbg</a></td></tr><tr><td>大厂研究报告</td><td>百度研究院</td><td><a href="http://research.baidu.com/Research_Areas?id=55">http://research.baidu.com/Research_Areas?id=55</a></td></tr><tr><td>大厂研究报告</td><td>美团研究院</td><td><a href="https://mri.meituan.com/research">https://mri.meituan.com/research</a></td></tr><tr><td>大厂研究报告</td><td>京东研究院</td><td><a href="https://research.jd.com/">https://research.jd.com/</a></td></tr><tr><td>券商行研报告</td><td>Wind</td><td>需要付费购买，在校生可以咨询学校或者学院，在一些大企业实习或者工作的小伙伴可以咨询企业：是否已经购买，如果购买如何免费使用</td></tr><tr><td>券商行研报告</td><td>慧博投研咨询</td><td><a href="http://www.hibor.com.cn/">http://www.hibor.com.cn/</a></td></tr><tr><td>券商行研报告</td><td>萝卜投研</td><td><a href="https://robo.datayes.com/v2/selection">https://robo.datayes.com/v2/selection</a></td></tr><tr><td>报告整合平台</td><td>199it</td><td><a href="http://www.199it.com/archives/category/report">http://www.199it.com/archives/category/report</a></td></tr><tr><td>报告整合平台</td><td>报告查一查</td><td><a href="http://report.seedsufe.com/#/index">http://report.seedsufe.com/#/index</a></td></tr><tr><td>报告整合平台</td><td>数据局</td><td><a href="http://www.shujuju.cn/lecture/browe">http://www.shujuju.cn/lecture/browe</a></td></tr><tr><td>报告整合平台</td><td>行行查</td><td><a href="https://www.hanghangcha.com/">https://www.hanghangcha.com/</a></td></tr></tbody></table></div><div class="tab-pane" id="qjk-5"><table><thead><tr><th><strong>类别</strong></th><th><strong>网站</strong></th><th><strong>网址</strong></th></tr></thead><tbody><tr><td>中国全国数据</td><td>国务院</td><td><a href="http://www.gov.cn/shuju/index.htm">http://www.gov.cn/shuju/index.htm</a></td></tr><tr><td>中国全国数据</td><td>国家统计局</td><td><a href="https://data.stats.gov.cn/">https://data.stats.gov.cn/</a></td></tr><tr><td>中国地方数据</td><td>地方统计局导航</td><td><a href="http://www.stats.gov.cn/tjgz/wzlj/dftjwz/">http://www.stats.gov.cn/tjgz/wzlj/dftjwz/</a></td></tr><tr><td>中国地方数据</td><td>各地方数据开放平台</td><td>检索网站：某省份/城市+数据开放</td></tr><tr><td>行业数据</td><td>行业协会</td><td>检索网站：某行业+协会</td></tr><tr><td>行业数据</td><td>咨询报告、研究报告</td><td>第4期全部内容</td></tr><tr><td>其他国家数据</td><td>其他国家统计局导航</td><td><a href="http://www.stats.gov.cn/tjgz/wzlj/gwtjw/201311/t20131104_452221.html">http://www.stats.gov.cn/tjgz/wzlj/gwtjw/201311/t20131104_452221.html</a></td></tr><tr><td>其他国家数据</td><td>Open Data Inception</td><td><a href="https://opendatainception.io/">https://opendatainception.io/</a></td></tr><tr><td>全球数据</td><td>各国际组织导航</td><td><a href="http://www.stats.gov.cn/tjgz/wzlj/gjzzwz/201311/t20131101_451662.html">http://www.stats.gov.cn/tjgz/wzlj/gjzzwz/201311/t20131101_451662.html</a></td></tr><tr><td>数据整合平台</td><td>知网（年鉴）</td><td>图书馆进入</td></tr><tr><td>数据整合平台</td><td>萝卜投研</td><td><a href="https://robo.datayes.com/v2/landing/indicator_library">https://robo.datayes.com/v2/landing/indicator_library</a></td></tr><tr><td>其他特色数据</td><td>七麦数据</td><td><a href="https://www.qimai.cn/">https://www.qimai.cn/</a></td></tr><tr><td>其他特色数据</td><td>蝉大师</td><td><a href="https://www.chandashi.com/">https://www.chandashi.com/</a></td></tr><tr><td>其他特色数据</td><td>APP ANNIE</td><td><a href="https://www.appannie.com/cn/">https://www.appannie.com/cn/</a></td></tr><tr><td>其他特色数据</td><td>房天下</td><td><a href="https://fdc.fang.com/">https://fdc.fang.com/</a></td></tr><tr><td>其他特色数据</td><td>高德地图指数</td><td><a href="https://report.amap.com/diagnosis/index.do">https://report.amap.com/diagnosis/index.do</a></td></tr><tr><td>其他特色数据</td><td>艺恩</td><td><a href="https://www.endata.com.cn/BoxOffice/index.html">https://www.endata.com.cn/BoxOffice/index.html</a></td></tr><tr><td>其他特色数据</td><td>猫眼专业版</td><td><a href="http://piaofang.maoyan.com/dashboard">http://piaofang.maoyan.com/dashboard</a></td></tr><tr><td>微观数据</td><td>咨询报告、研究报告</td><td>第4期全部内容</td></tr></tbody></table></div></div></div><!-- 表格样式 --><style>table th:first-of-type {    width: 30%;}table th:nth-of-type(2) {    width: 30%;}table th:nth-of-type(3) {    width: 30%;}table th:nth-of-type(4) {    width: 10%;}<p></style><p></p></div><div class="tab-pane" id="websites-2"><blockquote><ul><li><strong>from: bilibili UP主<a href="https://space.bilibili.com/125526?from=search&seid=769593231768718900">-LKs-</a></strong></li></ul></blockquote><div class="tabs" id="lks"><ul class="nav-tabs"><li class="tab active"><a href="#lks-1">2016</a></li><li class="tab"><a href="#lks-2">2017</a></li><li class="tab"><a href="#lks-3">2018</a></li><li class="tab"><a href="#lks-4">2019</a></li><li class="tab"><a href="#lks-5">2020</a></li><li class="tab"><a href="#lks-6">2020.2</a></li><li class="tab"><a href="#lks-7">2021</a></li></ul><div class="tab-content"><div class="tab-pane active" id="lks-1"><table><thead><tr><th><strong>类型</strong></th><th><strong>网址</strong></th><th><strong>网址2</strong></th><th><strong>网址3</strong></th></tr></thead><tbody><tr><td></td><td><a href="http://nico-nico-ni.com/">http://nico-nico-ni.com/</a></td><td><a href="http://internet-map.net/">http://internet-map.net/</a></td><td></td></tr><tr><td>钢琴</td><td><a href="http://touchpianist.com/">http://touchpianist.com/</a></td><td></td><td></td></tr><tr><td>搜图</td><td><a href="http://iqdb.org/">http://iqdb.org/</a></td><td><a href="http://saucenao.com/index.php">http://saucenao.com/index.php</a></td><td><a href="http://safebooru.org/">http://safebooru.org/</a></td></tr><tr><td>环境</td><td><a href="http://www.rainymood.com/">http://www.rainymood.com/</a></td><td><a href="http://www.ambient-mixer.com/">http://www.ambient-mixer.com/</a></td><td></td></tr><tr><td>不明觉厉</td><td></td><td></td><td></td></tr><tr><td></td><td><a href="http://mrdoob.com/#/157/spin_painter">http://mrdoob.com/#/157/spin_painter</a></td><td></td><td></td></tr><tr><td></td><td><a href="http://www.ro.me/">http://www.ro.me/</a></td><td></td><td></td></tr><tr><td></td><td><a href="http://middle-earth.thehobbit.com/map">http://middle-earth.thehobbit.com/map</a></td><td></td><td></td></tr><tr><td></td><td><a href="http://fff.cmiscm.com/#!/section/planttrees">http://fff.cmiscm.com/#!/section/planttrees</a></td><td></td><td></td></tr><tr><td></td><td><a href="http://weavesilk.com/">http://weavesilk.com/</a></td><td></td><td></td></tr><tr><td>噫</td><td><a href="http://www.theuselessweb.com/">http://www.theuselessweb.com/</a></td><td></td><td></td></tr><tr><td>风景</td><td><a href="http://www.airpano.com/?n=10&amp;sort_by=&amp;page=1">http://www.airpano.com/?n=10&amp;sort_by=&amp;page=1</a></td><td></td><td></td></tr><tr><td>制作</td><td><a href="http://threejs.org/http://www.instructables.com/">http://threejs.org/http://www.instructables.com/</a></td><td></td><td></td></tr><tr><td>miku</td><td><a href="http://johnsu.deviantart.com/art/Halfne-Miku-Studio-396850314">http://johnsu.deviantart.com/art/Halfne-Miku-Studio-396850314</a></td><td><a href="https://www.youtube.com/watch?v=1szQ7YDGdXw&amp;feature=youtu.be">https://www.youtube.com/watch?v=1szQ7YDGdXw&amp;feature=youtu.be</a></td><td></td></tr><tr><td>音游</td><td><a href="http://www.beatstage.com/">http://www.beatstage.com/</a></td><td></td><td></td></tr><tr><td></td><td><a href="http://www.m2ustudio.com/index.html#album-tracks">http://www.m2ustudio.com/index.html#album-tracks</a></td><td></td><td></td></tr><tr><td>水效果</td><td><a href="http://watereffect.net/index.php">http://watereffect.net/index.php</a></td><td></td><td></td></tr><tr><td>猜地点</td><td><a href="https://geoguessr.com/">https://geoguessr.com/</a></td><td></td><td></td></tr><tr><td>2ch</td><td><a href="http://kanquwen.com/">http://kanquwen.com/</a></td><td></td><td></td></tr><tr><td>音乐素材</td><td><a href="http://www.hmix.net/music_gallery/music_top.htm">http://www.hmix.net/music_gallery/music_top.htm</a></td><td></td><td></td></tr><tr><td>画</td><td><a href="http://en.gallerix.ru/">http://en.gallerix.ru/</a></td><td></td><td></td></tr><tr><td>制服</td><td><a href="http://www.seihuku-zukan.com/index.htm">http://www.seihuku-zukan.com/index.htm</a></td><td><a href="http://uniform.wingzero.tw/">http://uniform.wingzero.tw/</a></td><td></td></tr><tr><td>学英语</td><td><a href="http://www.wuxiaworld.com/cdindex-html/">http://www.wuxiaworld.com/cdindex-html/</a></td><td></td><td></td></tr><tr><td></td><td><a href="http://www.baka-tsuki.org/project/index.php?title=Main_Page">http://www.baka-tsuki.org/project/index.php?title=Main_Page</a></td><td></td><td></td></tr><tr><td>剁手</td><td><a href="https://fancy.com/">https://fancy.com/</a></td><td></td><td></td></tr><tr><td></td><td><a href="http://www.farfetch.com/cn/shopping/men/items.aspx?ffref=hp_gender">http://www.farfetch.com/cn/shopping/men/items.aspx?ffref=hp_gender</a></td><td></td><td></td></tr><tr><td></td><td><a href="http://www.chiphell.com/">http://www.chiphell.com/</a></td><td></td><td></td></tr><tr><td>电音</td><td><a href="http://techno.org/electronic-music-guide/">http://techno.org/electronic-music-guide/</a></td><td><a href="https://the.wubmachine.com/">https://the.wubmachine.com/</a></td><td></td></tr><tr><td>捏人</td><td><a href="http://www.dreamself.me/clothes.php?action=view&amp;id=0&amp;c=1">http://www.dreamself.me/clothes.php?action=view&amp;id=0&amp;c=1</a></td><td></td><td></td></tr><tr><td>gal</td><td><a href="http://polka-dot.co/lzbx.php">http://polka-dot.co/lzbx.php</a></td><td></td><td></td></tr><tr><td>搬砖</td><td><a href="http://www.fotojet.com/">http://www.fotojet.com/</a></td><td></td><td></td></tr><tr><td></td><td><a href="https://habitica.com/static/front">https://habitica.com/static/front</a></td><td></td><td></td></tr><tr><td>聊天</td><td><a href="http://drrr.com/lounge">http://drrr.com/lounge</a></td><td></td><td></td></tr><tr><td>图站</td><td><a href="https://anime-pictures.net/">https://anime-pictures.net/</a></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>与佛论禅</td><td><a href="http://www.ptxz.com/fo/">http://www.ptxz.com/fo/</a></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>音乐</td><td><a href="http://haru.ocv.me/">http://haru.ocv.me/</a></td><td></td><td></td></tr><tr><td>学习</td><td><a href="http://www.wolframalpha.com/">http://www.wolframalpha.com/</a></td><td></td><td></td></tr><tr><td>不明觉厉</td><td><a href="https://edialogue.org/index/zh-CN">https://edialogue.org/index/zh-CN</a></td><td></td><td></td></tr><tr><td>不明觉厉</td><td><a href="https://dribbble.com/wagerfield">https://dribbble.com/wagerfield</a></td><td></td><td></td></tr><tr><td>手机</td><td><a href="http://mowned.com/">http://mowned.com/</a></td><td></td><td></td></tr><tr><td>GPS</td><td><a href="http://www.flashearth.com/">http://www.flashearth.com/</a></td><td></td><td></td></tr><tr><td>北方</td><td><a href="http://wiki.joyme.com/jc/%E5%8C%97%E6%96%B9%E9%85%B1%E8%A1%A8%E6%83%85">http://wiki.joyme.com/jc/%E5%8C%97%E6%96%B9%E9%85%B1%E8%A1%A8%E6%83%85</a></td><td></td><td></td></tr><tr><td>剁手</td><td><a href="http://www.smzdm.com/">http://www.smzdm.com/</a></td><td><a href="http://www.iliangcang.com/i/home/">http://www.iliangcang.com/i/home/</a></td><td></td></tr><tr><td>菜板狂魔</td><td><a href="http://mtmwood.com/en">http://mtmwood.com/en</a></td><td></td><td></td></tr><tr><td></td><td><a href="http://youquhome.com/page/3/">http://youquhome.com/page/3/</a></td><td></td><td></td></tr></tbody></table></div><div class="tab-pane" id="lks-2"><table><thead><tr><th><strong>大类</strong></th><th><strong>类型</strong></th><th><strong>网址</strong></th></tr></thead><tbody><tr><td></td><td>翻墙</td><td><a href="https://sscat.cn/?referer=%2F">https://sscat.cn/?referer=%2F</a></td></tr><tr><td>开场</td><td>世界数据统计</td><td><a href="http://www.everysecond.io/">http://www.everysecond.io/</a></td></tr><tr><td></td><td>五花肉</td><td><a href="https://eitheryoulikebaconoryourewrong.com/">https://eitheryoulikebaconoryourewrong.com/</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td>实用系</td><td>免费游戏音效</td><td><a href="http://www.sonniss.com/gameaudiogdc2017/">http://www.sonniss.com/gameaudiogdc2017/</a></td></tr><tr><td></td><td>下载视频</td><td>youtube1s</td></tr><tr><td></td><td>adobe全系</td><td><a href="http://adobe.v404.cn/adobe/">http://adobe.v404.cn/adobe/</a></td></tr><tr><td></td><td>艺术字</td><td><a href="http://www.akuziti.com/yw/">http://www.akuziti.com/yw/</a></td></tr><tr><td></td><td>2倍老婆</td><td><a href="http://waifu2x.udp.jp/">http://waifu2x.udp.jp/</a></td></tr><tr><td></td><td>截图搜新番</td><td><a href="https://whatanime.ga/#">https://whatanime.ga/#</a></td></tr><tr><td></td><td>自动上色</td><td><a href="http://paintschainer.preferred.tech/index_zh.html">http://paintschainer.preferred.tech/index_zh.html</a></td></tr><tr><td></td><td>自动生成女朋友</td><td><a href="https://hiroshiba.github.io/girl_friend_factory/index.html">https://hiroshiba.github.io/girl_friend_factory/index.html</a></td></tr><tr><td></td><td>设计</td><td><a href="https://www.chuangkit.com/dc.html">https://www.chuangkit.com/dc.html</a></td></tr><tr><td></td><td>简笔画</td><td><a href="https://aiexperiments.withgoogle.com/autodraw">https://aiexperiments.withgoogle.com/autodraw</a></td></tr><tr><td></td><td>wuxiaworld</td><td><a href="http://www.wuxiaworld.com/">http://www.wuxiaworld.com/</a></td></tr><tr><td></td><td>gif</td><td><a href="https://giphy.com/">https://giphy.com/</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td>逼格</td><td>秘密</td><td><a href="http://soulapartment.net/bin/index.php">http://soulapartment.net/bin/index.php</a></td></tr><tr><td></td><td>独立音乐</td><td><a href="http://www.luoo.net/essays/">http://www.luoo.net/essays/</a></td></tr><tr><td></td><td>做音乐</td><td><a href="http://www.madeon.fr/adventuremachine/?t=1,10,26,35">http://www.madeon.fr/adventuremachine/?t=1,10,26,35</a></td></tr><tr><td></td><td>背景音合成器</td><td><a href="http://asoftmurmur.com/">http://asoftmurmur.com/</a></td></tr><tr><td></td><td>摄像头+梦境</td><td><a href="http://anasomnia.com/">http://anasomnia.com/</a></td></tr><tr><td></td><td>illegal</td><td><a href="http://isnowillegal.com/?plus%201s">http://isnowillegal.com/?plus%201s</a></td></tr><tr><td></td><td>全球电台</td><td><a href="http://radio.garden/live/tokyo/j-idols-project-radio/">http://radio.garden/live/tokyo/j-idols-project-radio/</a></td></tr><tr><td></td><td></td><td><a href="http://www.ostagram.ru/lenta?locale=en">http://www.ostagram.ru/lenta?locale=en</a></td></tr><tr><td></td><td>世界飞机</td><td><a href="https://www.flightradar24.com/PRBGT/d0da2bf">https://www.flightradar24.com/PRBGT/d0da2bf</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td>png</td><td><a href="http://www.pngall.com/thug-life-png">http://www.pngall.com/thug-life-png</a></td></tr><tr><td></td><td>在线生成白浊液</td><td><a href="http://mygamestudio.x.fc2.com/bukkake/">http://mygamestudio.x.fc2.com/bukkake/</a></td></tr><tr><td></td><td>空当接龙</td><td><a href="http://mrdoob.com/lab/javascript/effects/solitaire/?url_type=39&amp;object_type=webpage&amp;pos=1&amp;url_type=39&amp;object_type=webpage&amp;pos=1">http://mrdoob.com/lab/javascript/effects/solitaire/?url_type=39&amp;object_type=webpage&amp;pos=1&amp;url_type=39&amp;object_type=webpage&amp;pos=1</a></td></tr></tbody></table></div><div class="tab-pane" id="lks-3"><table><thead><tr><th><strong>类型</strong></th><th><strong>网址</strong></th><th><strong>网址2</strong></th><th><strong>网址3</strong></th></tr></thead><tbody><tr><td>重力</td><td><a href="https://codepen.io/akm2/full/rHIsa">https://codepen.io/akm2/full/rHIsa</a></td><td></td><td></td></tr><tr><td>反向</td><td><a href="http://www.ilidilid.com/">http://www.ilidilid.com/</a></td><td></td><td></td></tr><tr><td>成为批发商</td><td><a href="https://www.1688.com/">https://www.1688.com/</a></td><td></td><td></td></tr><tr><td>龋齿一号</td><td><a href="http://www.gfxcamp.com/">http://www.gfxcamp.com/</a></td><td></td><td></td></tr><tr><td>摄影老法师必读</td><td><a href="https://www.dxomark.com/">https://www.dxomark.com/</a></td><td></td><td></td></tr><tr><td>表情包gif</td><td><a href="https://sorry.xuty.tk/sorry/">https://sorry.xuty.tk/sorry/</a></td><td></td><td></td></tr><tr><td>学说话</td><td><a href="https://zh.forvo.com/user/hikari1/pronounced-words/page-2/">https://zh.forvo.com/user/hikari1/pronounced-words/page-2/</a></td><td></td><td></td></tr><tr><td>做网站</td><td><a href="https://www.wix.com/">https://www.wix.com/</a></td><td>lkssr.info</td><td></td></tr><tr><td>在线效果</td><td><a href="https://photomosh.com/">https://photomosh.com/</a></td><td></td><td></td></tr><tr><td>学英语</td><td><a href="https://nexus.leagueoflegends.com/en-us/">https://nexus.leagueoflegends.com/en-us/</a></td><td></td><td></td></tr><tr><td>音游</td><td><a href="http://ddrkirby.com/games/melody-muncher/melody-muncher.html">http://ddrkirby.com/games/melody-muncher/melody-muncher.html</a></td><td></td><td></td></tr><tr><td>深网</td><td><a href="https://bbs.saraba1st.com/2b/thread-1527405-1-1.html">https://bbs.saraba1st.com/2b/thread-1527405-1-1.html</a></td><td>deep/dark web</td><td><a href="https://freenetproject.org/">https://freenetproject.org/</a></td></tr><tr><td>f**king eat</td><td><a href="https://wtfsigfd.com/#location">https://wtfsigfd.com/#location</a></td><td></td><td></td></tr><tr><td>真实大小</td><td><a href="https://thetruesize.com">https://thetruesize.com</a></td><td></td><td></td></tr><tr><td>remember</td><td><a href="http://i-remember.fr/en/">http://i-remember.fr/en/</a></td><td></td><td></td></tr><tr><td>游戏</td><td><a href="https://pos.biborg.com/fr/">https://pos.biborg.com/fr/</a></td><td></td><td></td></tr><tr><td>拍卖</td><td><a href="https://sf.taobao.com/?spm=a213w.7398504.sfhead2014.2.9vuB5l&amp;current=index">https://sf.taobao.com/?spm=a213w.7398504.sfhead2014.2.9vuB5l&amp;current=index</a></td><td></td><td></td></tr><tr><td></td><td><a href="http://auction.jd.com/haiguan.html">http://auction.jd.com/haiguan.html</a></td><td></td><td></td></tr></tbody></table></div><div class="tab-pane" id="lks-4"><table><thead><tr><th><strong>大类</strong></th><th><strong>类型</strong></th><th><strong>网址</strong></th></tr></thead><tbody><tr><td>实用</td><td>全能下视频</td><td><a href="https://www.urlgot.com/">https://www.urlgot.com/</a></td></tr><tr><td></td><td>封面下载</td><td><a href="https://cover.olook.me/">https://cover.olook.me/</a></td></tr><tr><td></td><td>小工具集合</td><td><a href="https://tools.imiku.me/">https://tools.imiku.me/</a></td></tr><tr><td></td><td>医学微视</td><td><a href="https://www.mvyxws.com/">https://www.mvyxws.com/</a></td></tr><tr><td></td><td>仿知网</td><td><a href="https://www.cn-ki.net/">https://www.cn-ki.net/</a></td></tr><tr><td></td><td>自动加字幕</td><td><a href="https://2zimu.com/#/">https://2zimu.com/#/</a></td></tr><tr><td></td><td>N卡深度学习</td><td><a href="https://www.nvidia.com/en-us/research/ai-playground/?fbclid=IwAR2QEjuH4aCYP3SycnKwa_LO36rfmDhulB4WCeY1plGCfofwIU-qf1anBTY">https://www.nvidia.com/en-us/research/ai-playground/?fbclid=IwAR2QEjuH4aCYP3SycnKwa_LO36rfmDhulB4WCeY1plGCfofwIU-qf1anBTY</a></td></tr><tr><td></td><td>渐变图</td><td><a href="https://www.ls.graphics/meshgradients">https://www.ls.graphics/meshgradients</a></td></tr><tr><td></td><td>时差</td><td><a href="https://everytimezone.com/">https://everytimezone.com/</a></td></tr><tr><td></td><td>双色</td><td><a href="https://duotone.shapefactory.co/?f=f56468&amp;t=27184f&amp;q=">https://duotone.shapefactory.co/?f=f56468&amp;t=27184f&amp;q=</a>_</td></tr><tr><td></td><td>图表</td><td><a href="https://chartify.io/">https://chartify.io/</a></td></tr><tr><td></td><td>亚塞</td><td><a href="https://wangyasai.github.io/">https://wangyasai.github.io/</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td>音乐</td><td>listen 1</td><td><a href="http://listen1.github.io/listen1/">http://listen1.github.io/listen1/</a></td></tr><tr><td></td><td>音乐</td><td><a href="https://www.youtube.com/channel/UCht8qITGkBvXKsR1Byln-wA/videos">https://www.youtube.com/channel/UCht8qITGkBvXKsR1Byln-wA/videos</a></td></tr><tr><td></td><td>电音风格</td><td><a href="http://music.ishkur.com/">http://music.ishkur.com/</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td>信息</td><td>创意</td><td><a href="https://creativemass.cn/#/">https://creativemass.cn/#/</a></td></tr><tr><td></td><td>up主排名</td><td><a href="https://leptc.github.io/bili/">https://leptc.github.io/bili/</a></td></tr><tr><td></td><td>yuzhua</td><td><a href="https://mj.yuzhua.com/search/3.html">https://mj.yuzhua.com/search/3.html</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td>游戏</td><td>日麻</td><td><a href="https://majsoul.union-game.com/0/">https://majsoul.union-game.com/0/</a></td></tr><tr><td></td><td>马</td><td><a href="https://cavalierchallenge.com/">https://cavalierchallenge.com/</a></td></tr><tr><td></td><td>？</td><td><a href="https://resn.co.nz/#">https://resn.co.nz/#</a></td></tr><tr><td></td><td>？</td><td><a href="http://www.brakebillsu.com/">http://www.brakebillsu.com/</a></td></tr><tr><td></td><td>Grammarly</td><td><a href="https://app.grammarly.com/">https://app.grammarly.com/</a></td></tr><tr><td></td><td>机酒</td><td><a href="https://www.tianxun.com/">https://www.tianxun.com/</a></td></tr></tbody></table></div><div class="tab-pane" id="lks-5"><table><thead><tr><th><strong>类型</strong></th><th><strong>网址</strong></th></tr></thead><tbody><tr><td>大像素</td><td><a href="http://www.bigpixel.cn/index.html">http://www.bigpixel.cn/index.html</a></td></tr><tr><td>PPT</td><td><a href="https://slidesgo.com/theme/isometric-proposal">https://slidesgo.com/theme/isometric-proposal</a> <br><a href="https://24slides.com/templates/featured">https://24slides.com/templates/featured</a> <br><a href="https://www.free-powerpoint-templates-design.com/free-powerpoint-templates-design/">https://www.free-powerpoint-templates-design.com/free-powerpoint-templates-design/</a></td></tr><tr><td>云</td><td><a href="https://www.ianfisherart.com/">https://www.ianfisherart.com/</a></td></tr><tr><td>展会</td><td><a href="http://www.eshow365.com/">http://www.eshow365.com/</a></td></tr><tr><td>全历史</td><td><a href="https://www.allhistory.com/">https://www.allhistory.com/</a></td></tr><tr><td>诡秘之主</td><td><a href="https://www.zcool.com.cn/work/ZNDI0NzUzNzY=.html">https://www.zcool.com.cn/work/ZNDI0NzUzNzY=.html</a></td></tr><tr><td>背景素材</td><td><a href="http://bg-patterns.com/">http://bg-patterns.com/</a></td></tr><tr><td>做音乐</td><td><a href="https://learningmusic.ableton.com/">https://learningmusic.ableton.com/</a></td></tr><tr><td>新媒体导航</td><td><a href="https://www.kaolamedia.com/">https://www.kaolamedia.com/</a></td></tr><tr><td>AI捏人</td><td><a href="https://artbreeder.com/">https://artbreeder.com/</a></td></tr><tr><td>数据</td><td><a href="https://ncov.dxy.cn/ncovh5/view/pneumonia">https://ncov.dxy.cn/ncovh5/view/pneumonia</a></td></tr><tr><td>人类测试</td><td><a href="https://humanbenchmark.com/">https://humanbenchmark.com/</a></td></tr><tr><td>音乐分轨</td><td><a href="https://melody.ml/">https://melody.ml/</a></td></tr><tr><td>物流</td><td><a href="https://logisticsartproject.com/">https://logisticsartproject.com/</a></td></tr><tr><td>慕课</td><td><a href="https://www.icourse163.org/">https://www.icourse163.org/</a></td></tr><tr><td>反人类UI</td><td><a href="https://userinyerface.com/game.html">https://userinyerface.com/game.html</a></td></tr><tr><td>yes/no</td><td><a href="https://yesno.wtf/">https://yesno.wtf/</a></td></tr><tr><td>老照片上色</td><td><a href="https://colourise.sg/">https://colourise.sg/</a></td></tr><tr><td>地球时间</td><td><a href="http://timelineofearth.com/">http://timelineofearth.com/</a></td></tr><tr><td>猫</td><td><a href="https://bongo.cat/">https://bongo.cat/</a></td></tr><tr><td>大佬</td><td><a href="https://neave.com/">https://neave.com/</a></td></tr><tr><td>太鼓达人</td><td><a href="https://taiko.bui.pm/">https://taiko.bui.pm/</a></td></tr><tr><td>emm</td><td><a href="http://www.shushubuyue.net/#">http://www.shushubuyue.net/#</a></td></tr><tr><td>全网热门</td><td><a href="https://tophub.today/">https://tophub.today/</a></td></tr><tr><td>数据表</td><td><a href="https://www.visualcapitalist.com/">https://www.visualcapitalist.com/</a></td></tr><tr><td>医疗</td><td><a href="https://www.msdmanuals.com/zh#mission">https://www.msdmanuals.com/zh#mission</a></td></tr><tr><td>临时验证码</td><td><a href="https://www.materialtools.com/?page=1">https://www.materialtools.com/?page=1</a> <br><a href="https://temp-mail.org/zh/">https://temp-mail.org/zh/</a></td></tr><tr><td>词云</td><td><a href="https://www.weiciyun.com/">https://www.weiciyun.com/</a></td></tr><tr><td>探月</td><td><a href="http://moon.bao.ac.cn/mul/index/list">http://moon.bao.ac.cn/mul/index/list</a></td></tr><tr><td>中国地图</td><td><a href="https://www.ageeye.cn/">https://www.ageeye.cn/</a></td></tr><tr><td>解谜</td><td><a href="http://nazo.one-story.cn/">http://nazo.one-story.cn/</a></td></tr></tbody></table></div><div class="tab-pane" id="lks-6"><table><thead><tr><th><strong>类型</strong></th><th><strong>网址</strong></th></tr></thead><tbody><tr><td>AI音乐推荐</td><td><a href="https://www.gnoosic.com/faves.php">https://www.gnoosic.com/faves.php</a></td></tr><tr><td>RAP</td><td><a href="https://foreignrap.com">https://foreignrap.com</a></td></tr><tr><td>壁纸</td><td><a href="https://wallhaven.cc/">https://wallhaven.cc/</a></td></tr><tr><td>私人定制</td><td><a href="http://www.fiverr.com">www.fiverr.com</a></td></tr><tr><td>云旅游</td><td><a href="http://www.airpano.com/">http://www.airpano.com/</a></td></tr><tr><td>云住酒店云吃饭</td><td><a href="https://bbs.saraba1st.com/2b/space-uid-197835.html">https://bbs.saraba1st.com/2b/space-uid-197835.html</a></td></tr><tr><td>开窗户</td><td><a href="https://window-swap.com/">https://window-swap.com/</a></td></tr><tr><td>伴奏提取</td><td><a href="https://www.lalal.ai/">https://www.lalal.ai/</a></td></tr><tr><td>格式转换</td><td><a href="https://www.alltoall.net/">https://www.alltoall.net/</a> <br><a href="https://www.aconvert.com/cn/">https://www.aconvert.com/cn/</a></td></tr><tr><td>高端翻译</td><td><a href="https://www.deepl.com/translator">https://www.deepl.com/translator</a></td></tr><tr><td>图片唱歌</td><td><a href="https://yanderify.com/">https://yanderify.com/</a></td></tr><tr><td>好好说话</td><td><a href="https://lab.magiconch.com/nbnhhsh/">https://lab.magiconch.com/nbnhhsh/</a></td></tr><tr><td>那你能帮帮我吗</td><td><a href="https://zh.wikihow.com/%E9%A6%96%E9%A1%B5">https://zh.wikihow.com/%E9%A6%96%E9%A1%B5</a></td></tr><tr><td>天气</td><td><a href="https://www.windy.com/">https://www.windy.com/</a></td></tr><tr><td>自杀网站</td><td><a href="https://www.thiswebsitewillselfdestruct.com/">https://www.thiswebsitewillselfdestruct.com/</a></td></tr><tr><td>起名</td><td><a href="https://www.behindthename.com/">https://www.behindthename.com/</a></td></tr><tr><td>版权音乐曲库</td><td><a href="https://www.epidemicsound.com">https://www.epidemicsound.com</a></td></tr><tr><td>独立游戏</td><td><a href="https://www.indiexpo.net/">https://www.indiexpo.net/</a></td></tr><tr><td>学钢琴</td><td><a href="https://app.flowkey.com.cn/">https://app.flowkey.com.cn/</a></td></tr><tr><td>焦段科普</td><td><a href="https://www.samyanglens.com/en/product/simulator/lens.php">https://www.samyanglens.com/en/product/simulator/lens.php</a></td></tr><tr><td>全球生活水平</td><td><a href="https://www.gapminder.org/dollar-street/">https://www.gapminder.org/dollar-street/</a></td></tr><tr><td>海</td><td><a href="https://seaside-station.com/region/hokkaido/">https://seaside-station.com/region/hokkaido/</a></td></tr><tr><td>标准地图</td><td><a href="http://bzdt.ch.mnr.gov.cn/index.html">http://bzdt.ch.mnr.gov.cn/index.html</a></td></tr><tr><td>色差</td><td><a href="http://www.cuishuai.cc/game/">http://www.cuishuai.cc/game/</a></td></tr></tbody></table></div><div class="tab-pane" id="lks-7"><table><thead><tr><th><strong>类型</strong></th><th><strong>网址</strong></th></tr></thead><tbody><tr><td>行业报告</td><td><a href="http://report.seedsufe.com/#/report">http://report.seedsufe.com/#/report</a></td></tr><tr><td>世界之声</td><td><a href="https://aporee.org/maps/">https://aporee.org/maps/</a></td></tr><tr><td>商用图片</td><td><a href="https://www.pexels.com/zh-cn/">https://www.pexels.com/zh-cn/</a></td></tr><tr><td>抠图</td><td><a href="https://www.remove.bg/">https://www.remove.bg/</a> <br><a href="http://waifu2x.udp.jp/">http://waifu2x.udp.jp/</a></td></tr><tr><td>抠视频</td><td><a href="https://www.unscreen.com/">https://www.unscreen.com/</a></td></tr><tr><td>打字比赛</td><td><a href="https://play.typeracer.com/">https://play.typeracer.com/</a></td></tr><tr><td>空投</td><td><a href="https://airportal.cn/">https://airportal.cn/</a></td></tr><tr><td>宝贝DJ</td><td><a href="http://www.bbdj.com/">http://www.bbdj.com/</a></td></tr><tr><td>色彩</td><td><a href="https://color.adobe.com/zh/create/color-wheel">https://color.adobe.com/zh/create/color-wheel</a></td></tr><tr><td>3D模型</td><td><a href="https://sketchfab.com/">https://sketchfab.com/</a></td></tr><tr><td>核爆</td><td><a href="https://nuclearsecrecy.com/nukemap/">https://nuclearsecrecy.com/nukemap/</a></td></tr><tr><td>约稿</td><td><a href="https://www.mihuashi.com/artists">https://www.mihuashi.com/artists</a></td></tr><tr><td>虚拟博物馆</td><td><a href="https://virtual.mauritshuis.nl/index.html?lang=en&amp;startscene=21">https://virtual.mauritshuis.nl/index.html?lang=en&amp;startscene=21</a></td></tr><tr><td>尺寸</td><td><a href="https://www.dimensions.com/">https://www.dimensions.com/</a></td></tr><tr><td>迪士尼化</td><td><a href="https://toonme.com/">https://toonme.com/</a></td></tr><tr><td>动态图表</td><td><a href="https://hanabi.data-viz.cn/index?lang=zh-CN">https://hanabi.data-viz.cn/index?lang=zh-CN</a></td></tr><tr><td>中国营养</td><td><a href="https://www.fatsecret.cn/%E7%83%AD%E9%87%8F%E8%90%A5%E5%85%BB/">https://www.fatsecret.cn/%E7%83%AD%E9%87%8F%E8%90%A5%E5%85%BB/</a></td></tr><tr><td>发现</td><td><a href="https://www.producthunt.com/">https://www.producthunt.com/</a></td></tr><tr><td>找音乐</td><td><a href="https://www.tunefind.com/">https://www.tunefind.com/</a></td></tr><tr><td>996身临其境</td><td><a href="https://imisstheoffice.eu/">https://imisstheoffice.eu/</a></td></tr><tr><td>这个不存在</td><td><a href="https://thisxdoesnotexist.com/">https://thisxdoesnotexist.com/</a></td></tr><tr><td></td><td></td></tr><tr><td>森林之声</td><td><a href="https://www.tree.fm/">https://www.tree.fm/</a></td></tr><tr><td>西方电音</td><td><a href="https://www.traxsource.com/dj-top-10s">https://www.traxsource.com/dj-top-10s</a></td></tr><tr><td>猜真假</td><td><a href="https://landing.adobe.com/en/na/products/creative-cloud/69308-real-or-photoshop/index.html">https://landing.adobe.com/en/na/products/creative-cloud/69308-real-or-photoshop/index.html</a></td></tr><tr><td>魔性</td><td><a href="https://patatap.com/">https://patatap.com/</a></td></tr><tr><td>中华珍宝馆</td><td><a href="https://www.ltfc.net/exhibit/recent">https://www.ltfc.net/exhibit/recent</a></td></tr><tr><td>英语游戏</td><td><a href="https://www.merriam-webster.com/">https://www.merriam-webster.com/</a></td></tr><tr><td>防疫政策</td><td><a href="https://i.snssdk.com/feoffline/ugc_activities/html/epidemic-prevention-sftr/index.html?style_id=30044">https://i.snssdk.com/feoffline/ugc_activities/html/epidemic-prevention-sftr/index.html?style_id=30044</a></td></tr></tbody></table></div></div></div></div><div class="tab-pane" id="websites-3"><blockquote><ul><li><strong>from: bilibili UP主<a href="https://www.bilibili.com/video/av76317286/?spm_id_from=333.788.b_765f64657363.8">阿信OL</a></strong></li></ul></blockquote><table><thead><tr><th>名称</th><th>网址</th></tr></thead><tbody><tr><td>爱给素材网</td><td><a href="http://www.aigei.com/">http://www.aigei.com/</a></td></tr><tr><td>OepnGameArt</td><td><a href="https://opengameart.org/">https://opengameart.org/</a></td></tr><tr><td>Ludum Dare</td><td><a href="https://ldjam.com/">https://ldjam.com/</a></td></tr><tr><td>Itch</td><td><a href="https://itch.io/">https://itch.io/</a></td></tr></tbody></table></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎样才能有好的状态</title>
      <link href="post/86d480d6.html"/>
      <url>post/86d480d6.html</url>
      
        <content type="html"><![CDATA[<h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><p>昨天更新了第一个<a href="https://www.bilibili.com/video/BV18h411f72x"><b>vlog</b></a>，从剪辑上来说还算凑合，达到七八十分的样子，所以就算做vlog的开端。这个开端想了很久了，以前也录了很多素材，但都在某天不知所以然地灰飞烟灭了。所以一直没有下手。这次反倒是借个机会，因为我的生活的单调性是毋庸置疑的，这点从辅导员找我谈话的问答中就可以看出来。这次拍的很随意，也是临时起意，我觉得vlog是一种认证生活质量的一种方式，或者说，他不单能够认证，还能升华。这种欢乐应该是每一个做vlog的人都能体会到的。我希望这是个良好的开始。<br><img src="https://pic.downk.cc/item/5fe5fabd3ffa7d37b311afc0.jpg" alt></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>今天是圣诞节，一般我不会过这样的节日，个中缘由大概有些清高，但最正确的原因还是过于懒惰。节日往往需要很多人的参与才会好玩，我却经常没有资本和习惯去加入。索性写写最近的作为。<br>前段时间刷了阿弥的视频，每次看他的视频就很积极，会不断的想象往他靠拢，我是指那种生活态度上。所以我会很喜欢看他的vlog。可我始终缺少面对镜头的勇气。看了很多，算下来，最大的感受是：自己的积累很鸡肋。陈铭提到了好奇心，说到了心坎上。我本身就是好奇心很大的人，从小就是，但是还有很多复杂的性格以及其它原因导致我没有去发挥出来。失望之余，我在反思，其实我接触的方面不少，但真正能够进入其中的少之又少，我半途而废，我浅尝辄止，我慵懒涣散。这多令人失望。我常常幻想自己能像那些up一样快乐生活（这是我最向往的工作目前为止，其实我还会想假如我从小生活的环境能让我的眼界更加开阔，我将会走一条很好的路，但开阔毕竟没有界限，所以又没有定数，只能归属于瞎想）。我还会幻想，有人给我送礼物，我不知道什么是姜饼人；不知道谁是皮神；文导和我聊起来，我只会回应我没刷鬼灭——总之，我的积累太浅薄了，一戳击破的浅薄。我只会堆叠在一大堆“然后”里，然后退场退场退场。我还经常觉得我就是看到朋友被打的时候去劝架的树先生，只有被人推开的命运，也就是：“你算什么东西。”生活真的会像等不到车却等到龙猫、找不到人却找到龙猫那样简单又奇妙吗？会是失恋了有人帮你撑腰吗？会是亲人被杀，有人能帮你讨回公道吗？会有Hachi在你临终前接球不让你走吗？会有一个女孩看你一眼就喜欢上你吗？会有一个好老师拯救一个学校吗？<br>统统不会。<br>生活没有龙猫也没有那么简单，狗很早就死，学校依旧像个魔鬼，女孩始终讨厌你。<br>况且呢，这甚至只是很少的一部分，这些都属于高级情绪。<br>而我只会真实地开心几秒钟，随后任何不如意的事会立马把我打下地狱。<br>生活啊，多可悲！</p><p>真实的希望在哪呢？<br>大光圈下虚化的酒店背景，人山人海雨衣里呼喊，拍立得咔嚓一下的声音，米11一步步预热，海口人见到东北的雪，有些人还在重蹈我的覆辙不知疲倦的写几千字的高级苦水。<br>这些都是希望。</p><p>最后说一点，vlog带来的效果比blog好。<br>再说一点吧，节日快乐。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>意象&amp;组合</title>
      <link href="post/416212f.html"/>
      <url>post/416212f.html</url>
      
        <content type="html"><![CDATA[<center><h1 id="记录一些意象"><a href="#记录一些意象" class="headerlink" title="记录一些意象"></a>记录一些意象</h1></center><h2 id="窗含西岭和风力发电扇叶"><a href="#窗含西岭和风力发电扇叶" class="headerlink" title="窗含西岭和风力发电扇叶"></a>窗含西岭和风力发电扇叶</h2><p>看了别人写在城市五楼看雪山的景，才想起来五年前也在五楼天天下课看山上的扇叶。至今还会记起来面部汹涌的物理老师口中扇叶的巨大。那时候成绩远远不是我该担心的问题。</p><h2 id="老酸奶和没有盖上的面霜"><a href="#老酸奶和没有盖上的面霜" class="headerlink" title="老酸奶和没有盖上的面霜"></a>老酸奶和没有盖上的面霜</h2><p>早上用的吧，晚上八点才看到面霜没盖，其实也没什么，只是当时正在嚼老酸奶，于是萌生出老酸奶涂脸上的想法。但是奶这东西珍贵的很，还是吃了为好。我哪有那么多钱喂脸。不过或许有君乐宝面霜，回头试试未尝不可。</p><h2 id="盆栽和狗"><a href="#盆栽和狗" class="headerlink" title="盆栽和狗"></a>盆栽和狗</h2><p>Leon的盆栽是他除了Mathilda最珍贵的东西吧，是他之前平面化性格的唯一突起。直到难以逃命的那刻他抱着盆栽乱窜，倒确实是像怀抱小狗，乖得很，不动，也乱动。</p><h2 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h2><p>很久没有去刻意找好片子看了，之前看完一部片子还会疑惑，这到底是不是一部好w片子啊，为什么众说纷纭。害，其实一部好片子，是个正常人都觉得好看的。真的能代入真的能让你心跳加速的，不由自主的，还会存疑吗？也考虑过写个影评的，我最近不怎么擅长写东西，现在只会：wnm，真好看！</p>]]></content>
      
      
      <categories>
          
          <category> 文学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> literature </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>意象&amp;组合</title>
      <link href="post/416212f.html"/>
      <url>post/416212f.html</url>
      
        <content type="html"><![CDATA[<center><h1 id="记录一些意象"><a href="#记录一些意象" class="headerlink" title="记录一些意象"></a>记录一些意象</h1></center><h2 id="窗含西岭和风力发电扇叶"><a href="#窗含西岭和风力发电扇叶" class="headerlink" title="窗含西岭和风力发电扇叶"></a>窗含西岭和风力发电扇叶</h2><p>看了别人写在城市五楼看雪山的景，才想起来五年前也在五楼天天下课看山上的扇叶。至今还会记起来面部汹涌的物理老师口中扇叶的巨大。那时候成绩远远不是我该担心的问题。</p><h2 id="老酸奶和没有盖上的面霜"><a href="#老酸奶和没有盖上的面霜" class="headerlink" title="老酸奶和没有盖上的面霜"></a>老酸奶和没有盖上的面霜</h2><p>早上用的吧，晚上八点才看到面霜没盖，其实也没什么，只是当时正在嚼老酸奶，于是萌生出老酸奶涂脸上的想法。但是奶这东西珍贵的很，还是吃了为好。我哪有那么多钱喂脸。不过或许有君乐宝面霜，回头试试未尝不可。</p><h2 id="盆栽和狗"><a href="#盆栽和狗" class="headerlink" title="盆栽和狗"></a>盆栽和狗</h2><p>Leon的盆栽是他除了Mathilda最珍贵的东西吧，是他之前平面化性格的唯一突起。直到难以逃命的那刻他抱着盆栽乱窜，倒确实是像怀抱小狗，乖得很，不动，也乱动。</p><h2 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h2><p>很久没有去刻意找好片子看了，之前看完一部片子还会疑惑，这到底是不是一部好w片子啊，为什么众说纷纭。害，其实一部好片子，是个正常人都觉得好看的。真的能代入真的能让你心跳加速的，不由自主的，还会存疑吗？也考虑过写个影评的，我最近不怎么擅长写东西，现在只会：wnm，真好看！</p>]]></content>
      
      
      <categories>
          
          <category> 文学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> literature </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署技巧</title>
      <link href="post/c4266d98.html"/>
      <url>post/c4266d98.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-clean-amp-amp-hexo-generate-amp-amp-hexo-deploy-三命令统一"><a href="#hexo-clean-amp-amp-hexo-generate-amp-amp-hexo-deploy-三命令统一" class="headerlink" title="hexo clean&amp;&amp;hexo generate&amp;&amp;hexo deploy 三命令统一"></a>hexo clean&amp;&amp;hexo generate&amp;&amp;hexo deploy 三命令统一</h1><p>可在根目录下建立bat文件，写入“hexo clean&amp;&amp;hexo generate&amp;&amp;hexo deploy”或简洁点“hexo cl&amp;hexo g&amp;hexo d（注意：如果装了豆瓣插件则必须用hexo deploy）”。<br>以后部署只用在命令行敲入你bat的文件名即可执行。</p><h1 id="关于deploy每次都要输入账号密码的问题"><a href="#关于deploy每次都要输入账号密码的问题" class="headerlink" title="关于deploy每次都要输入账号密码的问题"></a>关于deploy每次都要输入账号密码的问题</h1><p>博主已经尝试了SSH，但还是需要输入密码（账号可以不用输入）。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>修改_config.yml，将部署方式从https方式修改为ssh方式。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https:&#x2F;&#x2F;github.com&#x2F;XXXXXX&#x2F;XXXXXX.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:XXXXXX&#x2F;XXXXXX.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="教程已更新，可去更新贴查看其它操作。"><a href="#教程已更新，可去更新贴查看其它操作。" class="headerlink" title="教程已更新，可去更新贴查看其它操作。"></a>教程已更新，可去更新贴查看其它操作。</h2>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deploy </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名解析与vercel配置</title>
      <link href="post/2244254b.html"/>
      <url>post/2244254b.html</url>
      
        <content type="html"><![CDATA[<div class="note primary">            <p>这里记录一些有关域名配置的问题</p>          </div><h1 id="域名解析（以阿里云为例）"><a href="#域名解析（以阿里云为例）" class="headerlink" title="域名解析（以阿里云为例）"></a>域名解析（以阿里云为例）</h1><p><img src="/post/2244254b.htm/%E8%A7%A3%E6%9E%90%E9%85%8D%E7%BD%AE.png" alt></p><h1 id="vercel-domain-配置"><a href="#vercel-domain-配置" class="headerlink" title="vercel domain 配置"></a>vercel domain 配置</h1><p><img src="/post/2244254b.htm/vercel%E9%85%8D%E7%BD%AE.png" alt><br><font color="#265489"> 另外直接利用gitpages的记得在主题<strong>source</strong>文件夹下添加<strong>CNAME</strong>文件，否则github每次都要重新配置domain。</font></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> domain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重生</title>
      <link href="post/454cee63.html"/>
      <url>post/454cee63.html</url>
      
        <content type="html"><![CDATA[<center><p>这次打算认真处理一下这个网站了<br>从查找问题到一步步排除修正<br>相当于又从头布局了一下网站<br>butterfly更新了所以还遇到很多问题<br>主要是太久没管过了<br>总而言之<br>这次打算简洁点</p></center>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生日快乐</title>
      <link href="post/42dbb1c3.html"/>
      <url>post/42dbb1c3.html</url>
      
        <content type="html"><![CDATA[<p>生日快乐呢<br>是不是很快呢<br>2020年是不是很神奇的一年呢<br>奇奇怪怪的<br>你看发生了这么多奇怪的事<br>但是出不去了<br>嘎嘎嘎<br>看了那么多酒店有机会一定要去<br>小宝贝生日快乐呀<br>蛋糕可以不吃<br>酒店可以不住<br>旅行可以不去<br>但是要快乐<br>给你一些可爱的图：<br>吹个蜡烛吧<br>生日快乐！</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旧时代</title>
      <link href="post/754b5343.html"/>
      <url>post/754b5343.html</url>
      
        <content type="html"><![CDATA[<h2 id="罗永浩"><a href="#罗永浩" class="headerlink" title="罗永浩"></a>罗永浩</h2><p>很长时间以来都只是只闻其名，细细研究一下才发现他的的确确是很多人的精神领袖，或者说精神鸦片也未尝不可。辍学打工，办培训机构，打假，做手机。面对了很多争议、嘲讽。你很难看见一个人十几年来都是这一个模样，不单单是外貌，那股精神气似乎从来都没有消减。但是这显然不太现实，面对理想主义的不如意，你好好观察一下，也能发现某些被磨平的棱角。但是不管怎样，他的高度自律、行动力、成熟的价值观体系、理性的做事规则都无比吸引人。</p><h2 id="韩寒"><a href="#韩寒" class="headerlink" title="韩寒"></a>韩寒</h2><p>不去深入了解，大多数略有耳闻的人都对韩寒有一些误解：叛逆、不听话、我行我素、大骂教育制度、暴躁。但其实完全不是，他尊重人和事、面对他人谦逊无比、虚心接受其它有价值的意见。他很善良，有爱，不管是从一言一行还是从他的小说里的字里行间，无论你能看得出多少痞气，你都不能想当然。那是媒体过分渲染的韩寒，他们把一个孩子想得太简单了。大人们习惯这样，把比自己年龄小的人想得简单。</p><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>以前为了安慰自己一直都有一套理论：<br>人不可能长时间保持一种状态，无论你多么有自制力，还是免不了被改变，人就是一个阶段一个阶段的，哪有不忘初心。<br>现在又发现其实人可以长时间保持一种状态，不过所依赖的条件是：你必须不停的汲取知识，不是科学知识，而是经历。这种经历可以从过来的人身上看到，也可以从虚构的人和事上看到，简单说就是多读书。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疼</title>
      <link href="post/5a8a6c8d.html"/>
      <url>post/5a8a6c8d.html</url>
      
        <content type="html"><![CDATA[<p>疼一怎么疼了这么久了还是不好，一直以为咬伤的很快就会好的。这么多天居然不见丝毫好转，现在喝水都成问题了，又饿又疼。晚上耐着性子做了米饭，炒了很难吃的菜，但是一粒也吃不成，一碰到就疼。二韩寒大概看的差不多了，剩下还有一些电影和书需要看，反正记录了好多事情待完成，不知道啥时候可以。看的时候会有很多感受，不记录下来就会消失。总体来说不记录相当于白看。三动物真可爱，一看动物就停不下来。以后一定要好好养动物。除了一只，还要养猫、狗、蛇。。算了。够了。想看猫狗大战，想看狗狗大战，想看猫猫大战。四陌生人很难交流。能说得上话的除了年纪遭遇相仿的，别的基本都讲不通逻辑。这个时代变化很快。也不知道什么时候该被淘汰，但现在还不必担心，因为我们是把淘汰者。一点小愿望希望日子赶紧有所好转；积累的事情赶紧做完；少看报纸多读书。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇</title>
      <link href="post/5a8a6c8d.html"/>
      <url>post/5a8a6c8d.html</url>
      
        <content type="html"><![CDATA[<p>总算把主题和基本写作的操作摸索敲定了<br>暂且先这样<br>美化工作还有很多要做<br>先记录一下</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
